(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const l of r.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&i(l)}).observe(document,{childList:!0,subtree:!0});function t(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(s){if(s.ep)return;s.ep=!0;const r=t(s);fetch(s.href,r)}})();/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const fp="179",qW={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},YW={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},OM=0,Qy=1,VM=2,ZW=3,LI=0,Tv=1,DI=2,So=3,ao=0,ns=1,_r=2,kr=0,To=1,Ih=2,Lh=3,Dh=4,Mh=5,Rr=100,Mv=101,wv=102,zM=103,kM=104,ol=200,Av=201,Ev=202,Rv=203,kf=204,Gf=205,Cv=206,Nv=207,Pv=208,Iv=209,Lv=210,UI=211,FI=212,BI=213,OI=214,Hf=0,Wf=1,$f=2,tc=3,Xf=4,qf=5,Yf=6,Zf=7,pp=0,GM=1,HM=2,Nr=0,WM=1,$M=2,XM=3,qM=4,VI=5,YM=6,ZM=7,sM="attached",zI="detached",Eg=300,qo=301,ga=302,Kc=303,Jc=304,nc=306,za=1e3,js=1001,ic=1002,Ci=1003,Rg=1004,KW=1004,Fa=1005,JW=1005,Ni=1006,Hc=1007,jW=1007,Cr=1008,kI=1008,Ts=1009,Wc=1010,$c=1011,ua=1012,or=1013,rs=1014,os=1015,Qs=1016,Cg=1017,Ng=1018,Mo=1020,Pg=35902,Dv=1021,mp=1022,es=1023,wo=1026,Ao=1027,nd=1028,eu=1029,ul=1030,id=1031,GI=1032,sd=1033,Xc=33776,Zl=33777,Kl=33778,Jl=33779,Kf=35840,Jf=35841,jf=35842,Qf=35843,ep=36196,Uh=37492,Fh=37496,Bh=37808,Oh=37809,Vh=37810,zh=37811,kh=37812,Gh=37813,Hh=37814,Wh=37815,$h=37816,Xh=37817,qh=37818,Yh=37819,Zh=37820,Kh=37821,qc=36492,ev=36494,tv=36495,Uv=36283,tp=36284,np=36285,ip=36286,HI=2200,WI=2201,$I=2202,sg=2300,nv=2301,Wy=2302,_h=2400,xh=2401,rg=2402,Fv=2500,KM=2501,QW=0,e5=1,t5=2,XI=3200,qI=3201,n5=3202,i5=3203,gl=0,JM=1,no="",zr="srgb",sc="srgb-linear",Jh="linear",un="srgb",YI=0,Bc=7680,ZI=7681,KI=7682,JI=7683,jI=34055,QI=34056,eL=5386,tL=512,nL=513,iL=514,sL=515,rL=516,oL=517,aL=518,iv=519,Bv=512,Ig=513,Ov=514,Lg=515,Vv=516,zv=517,kv=518,Gv=519,sp=35044,yh=35048,s5=35040,r5=35045,o5=35049,a5=35041,l5=35046,c5=35050,u5=35042,h5="100",rM="300 es",xr=2e3,_a=2001,d5={COMPUTE:"compute",RENDER:"render"},f5={PERSPECTIVE:"perspective",LINEAR:"linear",FLAT:"flat"},p5={NORMAL:"normal",CENTROID:"centroid",SAMPLE:"sample",FIRST:"first",EITHER:"either"};class Jo{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const i=this._listeners;i[e]===void 0&&(i[e]=[]),i[e].indexOf(t)===-1&&i[e].push(t)}hasEventListener(e,t){const i=this._listeners;return i===void 0?!1:i[e]!==void 0&&i[e].indexOf(t)!==-1}removeEventListener(e,t){const i=this._listeners;if(i===void 0)return;const s=i[e];if(s!==void 0){const r=s.indexOf(t);r!==-1&&s.splice(r,1)}}dispatchEvent(e){const t=this._listeners;if(t===void 0)return;const i=t[e.type];if(i!==void 0){e.target=this;const s=i.slice(0);for(let r=0,l=s.length;r<l;r++)s[r].call(this,e);e.target=null}}}const Br=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let OC=1234567;const wh=Math.PI/180,jh=180/Math.PI;function $o(){const a=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,i=Math.random()*4294967295|0;return(Br[a&255]+Br[a>>8&255]+Br[a>>16&255]+Br[a>>24&255]+"-"+Br[e&255]+Br[e>>8&255]+"-"+Br[e>>16&15|64]+Br[e>>24&255]+"-"+Br[t&63|128]+Br[t>>8&255]+"-"+Br[t>>16&255]+Br[t>>24&255]+Br[i&255]+Br[i>>8&255]+Br[i>>16&255]+Br[i>>24&255]).toLowerCase()}function jn(a,e,t){return Math.max(e,Math.min(t,a))}function jM(a,e){return(a%e+e)%e}function m5(a,e,t,i,s){return i+(a-e)*(s-i)/(t-e)}function g5(a,e,t){return a!==e?(t-a)/(e-a):0}function $m(a,e,t){return(1-t)*a+t*e}function _5(a,e,t,i){return $m(a,e,1-Math.exp(-t*i))}function x5(a,e=1){return e-Math.abs(jM(a,e*2)-e)}function y5(a,e,t){return a<=e?0:a>=t?1:(a=(a-e)/(t-e),a*a*(3-2*a))}function v5(a,e,t){return a<=e?0:a>=t?1:(a=(a-e)/(t-e),a*a*a*(a*(a*6-15)+10))}function S5(a,e){return a+Math.floor(Math.random()*(e-a+1))}function b5(a,e){return a+Math.random()*(e-a)}function T5(a){return a*(.5-Math.random())}function M5(a){a!==void 0&&(OC=a);let e=OC+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function w5(a){return a*wh}function A5(a){return a*jh}function E5(a){return(a&a-1)===0&&a!==0}function R5(a){return Math.pow(2,Math.ceil(Math.log(a)/Math.LN2))}function C5(a){return Math.pow(2,Math.floor(Math.log(a)/Math.LN2))}function N5(a,e,t,i,s){const r=Math.cos,l=Math.sin,u=r(t/2),d=l(t/2),f=r((e+i)/2),g=l((e+i)/2),x=r((e-i)/2),v=l((e-i)/2),S=r((i-e)/2),T=l((i-e)/2);switch(s){case"XYX":a.set(u*g,d*x,d*v,u*f);break;case"YZY":a.set(d*v,u*g,d*x,u*f);break;case"ZXZ":a.set(d*x,d*v,u*g,u*f);break;case"XZX":a.set(u*g,d*T,d*S,u*f);break;case"YXY":a.set(d*S,u*g,d*T,u*f);break;case"ZYZ":a.set(d*T,d*S,u*g,u*f);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+s)}}function io(a,e){switch(e.constructor){case Float32Array:return a;case Uint32Array:return a/4294967295;case Uint16Array:return a/65535;case Uint8Array:return a/255;case Int32Array:return Math.max(a/2147483647,-1);case Int16Array:return Math.max(a/32767,-1);case Int8Array:return Math.max(a/127,-1);default:throw new Error("Invalid component type.")}}function mi(a,e){switch(e.constructor){case Float32Array:return a;case Uint32Array:return Math.round(a*4294967295);case Uint16Array:return Math.round(a*65535);case Uint8Array:return Math.round(a*255);case Int32Array:return Math.round(a*2147483647);case Int16Array:return Math.round(a*32767);case Int8Array:return Math.round(a*127);default:throw new Error("Invalid component type.")}}const QM={DEG2RAD:wh,RAD2DEG:jh,generateUUID:$o,clamp:jn,euclideanModulo:jM,mapLinear:m5,inverseLerp:g5,lerp:$m,damp:_5,pingpong:x5,smoothstep:y5,smootherstep:v5,randInt:S5,randFloat:b5,randFloatSpread:T5,seededRandom:M5,degToRad:w5,radToDeg:A5,isPowerOfTwo:E5,ceilPowerOfTwo:R5,floorPowerOfTwo:C5,setQuaternionFromProperEuler:N5,normalize:mi,denormalize:io};class it{constructor(e=0,t=0){it.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,i=this.y,s=e.elements;return this.x=s[0]*t+s[3]*i+s[6],this.y=s[1]*t+s[4]*i+s[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=jn(this.x,e.x,t.x),this.y=jn(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=jn(this.x,e,t),this.y=jn(this.y,e,t),this}clampLength(e,t){const i=this.length();return this.divideScalar(i||1).multiplyScalar(jn(i,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const i=this.dot(e)/t;return Math.acos(jn(i,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,i=this.y-e.y;return t*t+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const i=Math.cos(t),s=Math.sin(t),r=this.x-e.x,l=this.y-e.y;return this.x=r*i-l*s+e.x,this.y=r*s+l*i+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class lo{constructor(e=0,t=0,i=0,s=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=i,this._w=s}static slerpFlat(e,t,i,s,r,l,u){let d=i[s+0],f=i[s+1],g=i[s+2],x=i[s+3];const v=r[l+0],S=r[l+1],T=r[l+2],E=r[l+3];if(u===0){e[t+0]=d,e[t+1]=f,e[t+2]=g,e[t+3]=x;return}if(u===1){e[t+0]=v,e[t+1]=S,e[t+2]=T,e[t+3]=E;return}if(x!==E||d!==v||f!==S||g!==T){let A=1-u;const w=d*v+f*S+g*T+x*E,O=w>=0?1:-1,F=1-w*w;if(F>Number.EPSILON){const k=Math.sqrt(F),Y=Math.atan2(k,w*O);A=Math.sin(A*Y)/k,u=Math.sin(u*Y)/k}const B=u*O;if(d=d*A+v*B,f=f*A+S*B,g=g*A+T*B,x=x*A+E*B,A===1-u){const k=1/Math.sqrt(d*d+f*f+g*g+x*x);d*=k,f*=k,g*=k,x*=k}}e[t]=d,e[t+1]=f,e[t+2]=g,e[t+3]=x}static multiplyQuaternionsFlat(e,t,i,s,r,l){const u=i[s],d=i[s+1],f=i[s+2],g=i[s+3],x=r[l],v=r[l+1],S=r[l+2],T=r[l+3];return e[t]=u*T+g*x+d*S-f*v,e[t+1]=d*T+g*v+f*x-u*S,e[t+2]=f*T+g*S+u*v-d*x,e[t+3]=g*T-u*x-d*v-f*S,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,i,s){return this._x=e,this._y=t,this._z=i,this._w=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const i=e._x,s=e._y,r=e._z,l=e._order,u=Math.cos,d=Math.sin,f=u(i/2),g=u(s/2),x=u(r/2),v=d(i/2),S=d(s/2),T=d(r/2);switch(l){case"XYZ":this._x=v*g*x+f*S*T,this._y=f*S*x-v*g*T,this._z=f*g*T+v*S*x,this._w=f*g*x-v*S*T;break;case"YXZ":this._x=v*g*x+f*S*T,this._y=f*S*x-v*g*T,this._z=f*g*T-v*S*x,this._w=f*g*x+v*S*T;break;case"ZXY":this._x=v*g*x-f*S*T,this._y=f*S*x+v*g*T,this._z=f*g*T+v*S*x,this._w=f*g*x-v*S*T;break;case"ZYX":this._x=v*g*x-f*S*T,this._y=f*S*x+v*g*T,this._z=f*g*T-v*S*x,this._w=f*g*x+v*S*T;break;case"YZX":this._x=v*g*x+f*S*T,this._y=f*S*x+v*g*T,this._z=f*g*T-v*S*x,this._w=f*g*x-v*S*T;break;case"XZY":this._x=v*g*x-f*S*T,this._y=f*S*x-v*g*T,this._z=f*g*T+v*S*x,this._w=f*g*x+v*S*T;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+l)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const i=t/2,s=Math.sin(i);return this._x=e.x*s,this._y=e.y*s,this._z=e.z*s,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,i=t[0],s=t[4],r=t[8],l=t[1],u=t[5],d=t[9],f=t[2],g=t[6],x=t[10],v=i+u+x;if(v>0){const S=.5/Math.sqrt(v+1);this._w=.25/S,this._x=(g-d)*S,this._y=(r-f)*S,this._z=(l-s)*S}else if(i>u&&i>x){const S=2*Math.sqrt(1+i-u-x);this._w=(g-d)/S,this._x=.25*S,this._y=(s+l)/S,this._z=(r+f)/S}else if(u>x){const S=2*Math.sqrt(1+u-i-x);this._w=(r-f)/S,this._x=(s+l)/S,this._y=.25*S,this._z=(d+g)/S}else{const S=2*Math.sqrt(1+x-i-u);this._w=(l-s)/S,this._x=(r+f)/S,this._y=(d+g)/S,this._z=.25*S}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let i=e.dot(t)+1;return i<1e-8?(i=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=i):(this._x=0,this._y=-e.z,this._z=e.y,this._w=i)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=i),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(jn(this.dot(e),-1,1)))}rotateTowards(e,t){const i=this.angleTo(e);if(i===0)return this;const s=Math.min(1,t/i);return this.slerp(e,s),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const i=e._x,s=e._y,r=e._z,l=e._w,u=t._x,d=t._y,f=t._z,g=t._w;return this._x=i*g+l*u+s*f-r*d,this._y=s*g+l*d+r*u-i*f,this._z=r*g+l*f+i*d-s*u,this._w=l*g-i*u-s*d-r*f,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const i=this._x,s=this._y,r=this._z,l=this._w;let u=l*e._w+i*e._x+s*e._y+r*e._z;if(u<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,u=-u):this.copy(e),u>=1)return this._w=l,this._x=i,this._y=s,this._z=r,this;const d=1-u*u;if(d<=Number.EPSILON){const S=1-t;return this._w=S*l+t*this._w,this._x=S*i+t*this._x,this._y=S*s+t*this._y,this._z=S*r+t*this._z,this.normalize(),this}const f=Math.sqrt(d),g=Math.atan2(f,u),x=Math.sin((1-t)*g)/f,v=Math.sin(t*g)/f;return this._w=l*x+this._w*v,this._x=i*x+this._x*v,this._y=s*x+this._y*v,this._z=r*x+this._z*v,this._onChangeCallback(),this}slerpQuaternions(e,t,i){return this.copy(e).slerp(t,i)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),i=Math.random(),s=Math.sqrt(1-i),r=Math.sqrt(i);return this.set(s*Math.sin(e),s*Math.cos(e),r*Math.sin(t),r*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class re{constructor(e=0,t=0,i=0){re.prototype.isVector3=!0,this.x=e,this.y=t,this.z=i}set(e,t,i){return i===void 0&&(i=this.z),this.x=e,this.y=t,this.z=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(VC.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(VC.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,i=this.y,s=this.z,r=e.elements;return this.x=r[0]*t+r[3]*i+r[6]*s,this.y=r[1]*t+r[4]*i+r[7]*s,this.z=r[2]*t+r[5]*i+r[8]*s,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,i=this.y,s=this.z,r=e.elements,l=1/(r[3]*t+r[7]*i+r[11]*s+r[15]);return this.x=(r[0]*t+r[4]*i+r[8]*s+r[12])*l,this.y=(r[1]*t+r[5]*i+r[9]*s+r[13])*l,this.z=(r[2]*t+r[6]*i+r[10]*s+r[14])*l,this}applyQuaternion(e){const t=this.x,i=this.y,s=this.z,r=e.x,l=e.y,u=e.z,d=e.w,f=2*(l*s-u*i),g=2*(u*t-r*s),x=2*(r*i-l*t);return this.x=t+d*f+l*x-u*g,this.y=i+d*g+u*f-r*x,this.z=s+d*x+r*g-l*f,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,i=this.y,s=this.z,r=e.elements;return this.x=r[0]*t+r[4]*i+r[8]*s,this.y=r[1]*t+r[5]*i+r[9]*s,this.z=r[2]*t+r[6]*i+r[10]*s,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=jn(this.x,e.x,t.x),this.y=jn(this.y,e.y,t.y),this.z=jn(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=jn(this.x,e,t),this.y=jn(this.y,e,t),this.z=jn(this.z,e,t),this}clampLength(e,t){const i=this.length();return this.divideScalar(i||1).multiplyScalar(jn(i,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this.z=e.z+(t.z-e.z)*i,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const i=e.x,s=e.y,r=e.z,l=t.x,u=t.y,d=t.z;return this.x=s*d-r*u,this.y=r*l-i*d,this.z=i*u-s*l,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const i=e.dot(this)/t;return this.copy(e).multiplyScalar(i)}projectOnPlane(e){return Ib.copy(this).projectOnVector(e),this.sub(Ib)}reflect(e){return this.sub(Ib.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const i=this.dot(e)/t;return Math.acos(jn(i,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,i=this.y-e.y,s=this.z-e.z;return t*t+i*i+s*s}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,i){const s=Math.sin(t)*e;return this.x=s*Math.sin(i),this.y=Math.cos(t)*e,this.z=s*Math.cos(i),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,i){return this.x=e*Math.sin(t),this.y=i,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),i=this.setFromMatrixColumn(e,1).length(),s=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=i,this.z=s,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,t=Math.random()*2-1,i=Math.sqrt(1-t*t);return this.x=i*Math.cos(e),this.y=t,this.z=i*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Ib=new re,VC=new lo;class ni{constructor(e,t,i,s,r,l,u,d,f){ni.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,i,s,r,l,u,d,f)}set(e,t,i,s,r,l,u,d,f){const g=this.elements;return g[0]=e,g[1]=s,g[2]=u,g[3]=t,g[4]=r,g[5]=d,g[6]=i,g[7]=l,g[8]=f,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],this}extractBasis(e,t,i){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const i=e.elements,s=t.elements,r=this.elements,l=i[0],u=i[3],d=i[6],f=i[1],g=i[4],x=i[7],v=i[2],S=i[5],T=i[8],E=s[0],A=s[3],w=s[6],O=s[1],F=s[4],B=s[7],k=s[2],Y=s[5],$=s[8];return r[0]=l*E+u*O+d*k,r[3]=l*A+u*F+d*Y,r[6]=l*w+u*B+d*$,r[1]=f*E+g*O+x*k,r[4]=f*A+g*F+x*Y,r[7]=f*w+g*B+x*$,r[2]=v*E+S*O+T*k,r[5]=v*A+S*F+T*Y,r[8]=v*w+S*B+T*$,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],i=e[1],s=e[2],r=e[3],l=e[4],u=e[5],d=e[6],f=e[7],g=e[8];return t*l*g-t*u*f-i*r*g+i*u*d+s*r*f-s*l*d}invert(){const e=this.elements,t=e[0],i=e[1],s=e[2],r=e[3],l=e[4],u=e[5],d=e[6],f=e[7],g=e[8],x=g*l-u*f,v=u*d-g*r,S=f*r-l*d,T=t*x+i*v+s*S;if(T===0)return this.set(0,0,0,0,0,0,0,0,0);const E=1/T;return e[0]=x*E,e[1]=(s*f-g*i)*E,e[2]=(u*i-s*l)*E,e[3]=v*E,e[4]=(g*t-s*d)*E,e[5]=(s*r-u*t)*E,e[6]=S*E,e[7]=(i*d-f*t)*E,e[8]=(l*t-i*r)*E,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,i,s,r,l,u){const d=Math.cos(r),f=Math.sin(r);return this.set(i*d,i*f,-i*(d*l+f*u)+l+e,-s*f,s*d,-s*(-f*l+d*u)+u+t,0,0,1),this}scale(e,t){return this.premultiply(Lb.makeScale(e,t)),this}rotate(e){return this.premultiply(Lb.makeRotation(-e)),this}translate(e,t){return this.premultiply(Lb.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),i=Math.sin(e);return this.set(t,-i,0,i,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,i=e.elements;for(let s=0;s<9;s++)if(t[s]!==i[s])return!1;return!0}fromArray(e,t=0){for(let i=0;i<9;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){const i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const Lb=new ni;function ew(a){for(let e=a.length-1;e>=0;--e)if(a[e]>=65535)return!0;return!1}const P5={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Nf(a,e){return new P5[a](e)}function og(a){return document.createElementNS("http://www.w3.org/1999/xhtml",a)}function tw(){const a=og("canvas");return a.style.display="block",a}const zC={};function Eo(a){a in zC||(zC[a]=!0,console.warn(a))}function I5(a,e,t){return new Promise(function(i,s){function r(){switch(a.clientWaitSync(e,a.SYNC_FLUSH_COMMANDS_BIT,0)){case a.WAIT_FAILED:s();break;case a.TIMEOUT_EXPIRED:setTimeout(r,t);break;default:i()}}setTimeout(r,t)})}const kC=new ni().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),GC=new ni().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function L5(){const a={enabled:!0,workingColorSpace:sc,spaces:{},convert:function(s,r,l){return this.enabled===!1||r===l||!r||!l||(this.spaces[r].transfer===un&&(s.r=jl(s.r),s.g=jl(s.g),s.b=jl(s.b)),this.spaces[r].primaries!==this.spaces[l].primaries&&(s.applyMatrix3(this.spaces[r].toXYZ),s.applyMatrix3(this.spaces[l].fromXYZ)),this.spaces[l].transfer===un&&(s.r=Bf(s.r),s.g=Bf(s.g),s.b=Bf(s.b))),s},workingToColorSpace:function(s,r){return this.convert(s,this.workingColorSpace,r)},colorSpaceToWorking:function(s,r){return this.convert(s,r,this.workingColorSpace)},getPrimaries:function(s){return this.spaces[s].primaries},getTransfer:function(s){return s===no?Jh:this.spaces[s].transfer},getLuminanceCoefficients:function(s,r=this.workingColorSpace){return s.fromArray(this.spaces[r].luminanceCoefficients)},define:function(s){Object.assign(this.spaces,s)},_getMatrix:function(s,r,l){return s.copy(this.spaces[r].toXYZ).multiply(this.spaces[l].fromXYZ)},_getDrawingBufferColorSpace:function(s){return this.spaces[s].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(s=this.workingColorSpace){return this.spaces[s].workingColorSpaceConfig.unpackColorSpace},fromWorkingColorSpace:function(s,r){return Eo("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."),a.workingToColorSpace(s,r)},toWorkingColorSpace:function(s,r){return Eo("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."),a.colorSpaceToWorking(s,r)}},e=[.64,.33,.3,.6,.15,.06],t=[.2126,.7152,.0722],i=[.3127,.329];return a.define({[sc]:{primaries:e,whitePoint:i,transfer:Jh,toXYZ:kC,fromXYZ:GC,luminanceCoefficients:t,workingColorSpaceConfig:{unpackColorSpace:zr},outputColorSpaceConfig:{drawingBufferColorSpace:zr}},[zr]:{primaries:e,whitePoint:i,transfer:un,toXYZ:kC,fromXYZ:GC,luminanceCoefficients:t,outputColorSpaceConfig:{drawingBufferColorSpace:zr}}}),a}const zn=L5();function jl(a){return a<.04045?a*.0773993808:Math.pow(a*.9478672986+.0521327014,2.4)}function Bf(a){return a<.0031308?a*12.92:1.055*Math.pow(a,.41666)-.055}let Jd;class lL{static getDataURL(e,t="image/png"){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let i;if(e instanceof HTMLCanvasElement)i=e;else{Jd===void 0&&(Jd=og("canvas")),Jd.width=e.width,Jd.height=e.height;const s=Jd.getContext("2d");e instanceof ImageData?s.putImageData(e,0,0):s.drawImage(e,0,0,e.width,e.height),i=Jd}return i.toDataURL(t)}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=og("canvas");t.width=e.width,t.height=e.height;const i=t.getContext("2d");i.drawImage(e,0,0,e.width,e.height);const s=i.getImageData(0,0,e.width,e.height),r=s.data;for(let l=0;l<r.length;l++)r[l]=jl(r[l]/255)*255;return i.putImageData(s,0,0),t}else if(e.data){const t=e.data.slice(0);for(let i=0;i<t.length;i++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[i]=Math.floor(jl(t[i]/255)*255):t[i]=jl(t[i]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let D5=0;class zc{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:D5++}),this.uuid=$o(),this.data=e,this.dataReady=!0,this.version=0}getSize(e){const t=this.data;return t instanceof HTMLVideoElement?e.set(t.videoWidth,t.videoHeight,0):t instanceof VideoFrame?e.set(t.displayHeight,t.displayWidth,0):t!==null?e.set(t.width,t.height,t.depth||0):e.set(0,0,0),e}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const i={uuid:this.uuid,url:""},s=this.data;if(s!==null){let r;if(Array.isArray(s)){r=[];for(let l=0,u=s.length;l<u;l++)s[l].isDataTexture?r.push(Db(s[l].image)):r.push(Db(s[l]))}else r=Db(s);i.url=r}return t||(e.images[this.uuid]=i),i}}function Db(a){return typeof HTMLImageElement<"u"&&a instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&a instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&a instanceof ImageBitmap?lL.getDataURL(a):a.data?{data:Array.from(a.data),width:a.width,height:a.height,type:a.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let U5=0;const Ub=new re;class ds extends Jo{constructor(e=ds.DEFAULT_IMAGE,t=ds.DEFAULT_MAPPING,i=js,s=js,r=Ni,l=Cr,u=es,d=Ts,f=ds.DEFAULT_ANISOTROPY,g=no){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:U5++}),this.uuid=$o(),this.name="",this.source=new zc(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=i,this.wrapT=s,this.magFilter=r,this.minFilter=l,this.anisotropy=f,this.format=u,this.internalFormat=null,this.type=d,this.offset=new it(0,0),this.repeat=new it(1,1),this.center=new it(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ni,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=g,this.userData={},this.updateRanges=[],this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isArrayTexture=!!(e&&e.depth&&e.depth>1),this.pmremVersion=0}get width(){return this.source.getSize(Ub).x}get height(){return this.source.getSize(Ub).y}get depth(){return this.source.getSize(Ub).z}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.isArrayTexture=e.isArrayTexture,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}setValues(e){for(const t in e){const i=e[t];if(i===void 0){console.warn(`THREE.Texture.setValues(): parameter '${t}' has value of undefined.`);continue}const s=this[t];if(s===void 0){console.warn(`THREE.Texture.setValues(): property '${t}' does not exist.`);continue}s&&i&&s.isVector2&&i.isVector2||s&&i&&s.isVector3&&i.isVector3||s&&i&&s.isMatrix3&&i.isMatrix3?s.copy(i):this[t]=i}}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const i={metadata:{version:4.7,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(i.userData=this.userData),t||(e.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==Eg)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case za:e.x=e.x-Math.floor(e.x);break;case js:e.x=e.x<0?0:1;break;case ic:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case za:e.y=e.y-Math.floor(e.y);break;case js:e.y=e.y<0?0:1;break;case ic:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}}ds.DEFAULT_IMAGE=null;ds.DEFAULT_MAPPING=Eg;ds.DEFAULT_ANISOTROPY=1;class Un{constructor(e=0,t=0,i=0,s=1){Un.prototype.isVector4=!0,this.x=e,this.y=t,this.z=i,this.w=s}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,i,s){return this.x=e,this.y=t,this.z=i,this.w=s,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,i=this.y,s=this.z,r=this.w,l=e.elements;return this.x=l[0]*t+l[4]*i+l[8]*s+l[12]*r,this.y=l[1]*t+l[5]*i+l[9]*s+l[13]*r,this.z=l[2]*t+l[6]*i+l[10]*s+l[14]*r,this.w=l[3]*t+l[7]*i+l[11]*s+l[15]*r,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,i,s,r;const d=e.elements,f=d[0],g=d[4],x=d[8],v=d[1],S=d[5],T=d[9],E=d[2],A=d[6],w=d[10];if(Math.abs(g-v)<.01&&Math.abs(x-E)<.01&&Math.abs(T-A)<.01){if(Math.abs(g+v)<.1&&Math.abs(x+E)<.1&&Math.abs(T+A)<.1&&Math.abs(f+S+w-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const F=(f+1)/2,B=(S+1)/2,k=(w+1)/2,Y=(g+v)/4,$=(x+E)/4,Q=(T+A)/4;return F>B&&F>k?F<.01?(i=0,s=.707106781,r=.707106781):(i=Math.sqrt(F),s=Y/i,r=$/i):B>k?B<.01?(i=.707106781,s=0,r=.707106781):(s=Math.sqrt(B),i=Y/s,r=Q/s):k<.01?(i=.707106781,s=.707106781,r=0):(r=Math.sqrt(k),i=$/r,s=Q/r),this.set(i,s,r,t),this}let O=Math.sqrt((A-T)*(A-T)+(x-E)*(x-E)+(v-g)*(v-g));return Math.abs(O)<.001&&(O=1),this.x=(A-T)/O,this.y=(x-E)/O,this.z=(v-g)/O,this.w=Math.acos((f+S+w-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=jn(this.x,e.x,t.x),this.y=jn(this.y,e.y,t.y),this.z=jn(this.z,e.z,t.z),this.w=jn(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=jn(this.x,e,t),this.y=jn(this.y,e,t),this.z=jn(this.z,e,t),this.w=jn(this.w,e,t),this}clampLength(e,t){const i=this.length();return this.divideScalar(i||1).multiplyScalar(jn(i,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this.z=e.z+(t.z-e.z)*i,this.w=e.w+(t.w-e.w)*i,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class $a extends Jo{constructor(e=1,t=1,i={}){super(),i=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Ni,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1,depth:1,multiview:!1},i),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=i.depth,this.scissor=new Un(0,0,e,t),this.scissorTest=!1,this.viewport=new Un(0,0,e,t);const s={width:e,height:t,depth:i.depth},r=new ds(s);this.textures=[];const l=i.count;for(let u=0;u<l;u++)this.textures[u]=r.clone(),this.textures[u].isRenderTargetTexture=!0,this.textures[u].renderTarget=this;this._setTextureOptions(i),this.depthBuffer=i.depthBuffer,this.stencilBuffer=i.stencilBuffer,this.resolveDepthBuffer=i.resolveDepthBuffer,this.resolveStencilBuffer=i.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=i.depthTexture,this.samples=i.samples,this.multiview=i.multiview}_setTextureOptions(e={}){const t={minFilter:Ni,generateMipmaps:!1,flipY:!1,internalFormat:null};e.mapping!==void 0&&(t.mapping=e.mapping),e.wrapS!==void 0&&(t.wrapS=e.wrapS),e.wrapT!==void 0&&(t.wrapT=e.wrapT),e.wrapR!==void 0&&(t.wrapR=e.wrapR),e.magFilter!==void 0&&(t.magFilter=e.magFilter),e.minFilter!==void 0&&(t.minFilter=e.minFilter),e.format!==void 0&&(t.format=e.format),e.type!==void 0&&(t.type=e.type),e.anisotropy!==void 0&&(t.anisotropy=e.anisotropy),e.colorSpace!==void 0&&(t.colorSpace=e.colorSpace),e.flipY!==void 0&&(t.flipY=e.flipY),e.generateMipmaps!==void 0&&(t.generateMipmaps=e.generateMipmaps),e.internalFormat!==void 0&&(t.internalFormat=e.internalFormat);for(let i=0;i<this.textures.length;i++)this.textures[i].setValues(t)}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}set depthTexture(e){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),e!==null&&(e.renderTarget=this),this._depthTexture=e}get depthTexture(){return this._depthTexture}setSize(e,t,i=1){if(this.width!==e||this.height!==t||this.depth!==i){this.width=e,this.height=t,this.depth=i;for(let s=0,r=this.textures.length;s<r;s++)this.textures[s].image.width=e,this.textures[s].image.height=t,this.textures[s].image.depth=i,this.textures[s].isArrayTexture=this.textures[s].image.depth>1;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let t=0,i=e.textures.length;t<i;t++){this.textures[t]=e.textures[t].clone(),this.textures[t].isRenderTargetTexture=!0,this.textures[t].renderTarget=this;const s=Object.assign({},e.textures[t].image);this.textures[t].source=new zc(s)}return this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Yo extends $a{constructor(e=1,t=1,i={}){super(e,t,i),this.isWebGLRenderTarget=!0}}class Dg extends ds{constructor(e=null,t=1,i=1,s=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:i,depth:s},this.magFilter=Ci,this.minFilter=Ci,this.wrapR=js,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class F5 extends Yo{constructor(e=1,t=1,i=1,s={}){super(e,t,s),this.isWebGLArrayRenderTarget=!0,this.depth=i,this.texture=new Dg(null,e,t,i),this._setTextureOptions(s),this.texture.isRenderTargetTexture=!0}}class Hv extends ds{constructor(e=null,t=1,i=1,s=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:i,depth:s},this.magFilter=Ci,this.minFilter=Ci,this.wrapR=js,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class B5 extends Yo{constructor(e=1,t=1,i=1,s={}){super(e,t,s),this.isWebGL3DRenderTarget=!0,this.depth=i,this.texture=new Hv(null,e,t,i),this._setTextureOptions(s),this.texture.isRenderTargetTexture=!0}}class Gr{constructor(e=new re(1/0,1/0,1/0),t=new re(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t+=3)this.expandByPoint(Pa.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,i=e.count;t<i;t++)this.expandByPoint(Pa.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const i=Pa.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(i),this.max.copy(e).add(i),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const i=e.geometry;if(i!==void 0){const r=i.getAttribute("position");if(t===!0&&r!==void 0&&e.isInstancedMesh!==!0)for(let l=0,u=r.count;l<u;l++)e.isMesh===!0?e.getVertexPosition(l,Pa):Pa.fromBufferAttribute(r,l),Pa.applyMatrix4(e.matrixWorld),this.expandByPoint(Pa);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),Dx.copy(e.boundingBox)):(i.boundingBox===null&&i.computeBoundingBox(),Dx.copy(i.boundingBox)),Dx.applyMatrix4(e.matrixWorld),this.union(Dx)}const s=e.children;for(let r=0,l=s.length;r<l;r++)this.expandByObject(s[r],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,Pa),Pa.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,i;return e.normal.x>0?(t=e.normal.x*this.min.x,i=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,i=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,i+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,i+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,i+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,i+=e.normal.z*this.min.z),t<=-e.constant&&i>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(hm),Ux.subVectors(this.max,hm),jd.subVectors(e.a,hm),Qd.subVectors(e.b,hm),ef.subVectors(e.c,hm),Rc.subVectors(Qd,jd),Cc.subVectors(ef,Qd),$u.subVectors(jd,ef);let t=[0,-Rc.z,Rc.y,0,-Cc.z,Cc.y,0,-$u.z,$u.y,Rc.z,0,-Rc.x,Cc.z,0,-Cc.x,$u.z,0,-$u.x,-Rc.y,Rc.x,0,-Cc.y,Cc.x,0,-$u.y,$u.x,0];return!Fb(t,jd,Qd,ef,Ux)||(t=[1,0,0,0,1,0,0,0,1],!Fb(t,jd,Qd,ef,Ux))?!1:(Fx.crossVectors(Rc,Cc),t=[Fx.x,Fx.y,Fx.z],Fb(t,jd,Qd,ef,Ux))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Pa).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(Pa).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(Fl[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),Fl[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),Fl[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),Fl[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),Fl[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),Fl[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),Fl[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),Fl[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(Fl),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}toJSON(){return{min:this.min.toArray(),max:this.max.toArray()}}fromJSON(e){return this.min.fromArray(e.min),this.max.fromArray(e.max),this}}const Fl=[new re,new re,new re,new re,new re,new re,new re,new re],Pa=new re,Dx=new Gr,jd=new re,Qd=new re,ef=new re,Rc=new re,Cc=new re,$u=new re,hm=new re,Ux=new re,Fx=new re,Xu=new re;function Fb(a,e,t,i,s){for(let r=0,l=a.length-3;r<=l;r+=3){Xu.fromArray(a,r);const u=s.x*Math.abs(Xu.x)+s.y*Math.abs(Xu.y)+s.z*Math.abs(Xu.z),d=e.dot(Xu),f=t.dot(Xu),g=i.dot(Xu);if(Math.max(-Math.max(d,f,g),Math.min(d,f,g))>u)return!1}return!0}const O5=new Gr,dm=new re,Bb=new re;class Sr{constructor(e=new re,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const i=this.center;t!==void 0?i.copy(t):O5.setFromPoints(e).getCenter(i);let s=0;for(let r=0,l=e.length;r<l;r++)s=Math.max(s,i.distanceToSquared(e[r]));return this.radius=Math.sqrt(s),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const i=this.center.distanceToSquared(e);return t.copy(e),i>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;dm.subVectors(e,this.center);const t=dm.lengthSq();if(t>this.radius*this.radius){const i=Math.sqrt(t),s=(i-this.radius)*.5;this.center.addScaledVector(dm,s/i),this.radius+=s}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(Bb.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(dm.copy(e.center).add(Bb)),this.expandByPoint(dm.copy(e.center).sub(Bb))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}toJSON(){return{radius:this.radius,center:this.center.toArray()}}fromJSON(e){return this.radius=e.radius,this.center.fromArray(e.center),this}}const Bl=new re,Ob=new re,Bx=new re,Nc=new re,Vb=new re,Ox=new re,zb=new re;class gp{constructor(e=new re,t=new re(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Bl)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const i=t.dot(this.direction);return i<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,i)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=Bl.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(Bl.copy(this.origin).addScaledVector(this.direction,t),Bl.distanceToSquared(e))}distanceSqToSegment(e,t,i,s){Ob.copy(e).add(t).multiplyScalar(.5),Bx.copy(t).sub(e).normalize(),Nc.copy(this.origin).sub(Ob);const r=e.distanceTo(t)*.5,l=-this.direction.dot(Bx),u=Nc.dot(this.direction),d=-Nc.dot(Bx),f=Nc.lengthSq(),g=Math.abs(1-l*l);let x,v,S,T;if(g>0)if(x=l*d-u,v=l*u-d,T=r*g,x>=0)if(v>=-T)if(v<=T){const E=1/g;x*=E,v*=E,S=x*(x+l*v+2*u)+v*(l*x+v+2*d)+f}else v=r,x=Math.max(0,-(l*v+u)),S=-x*x+v*(v+2*d)+f;else v=-r,x=Math.max(0,-(l*v+u)),S=-x*x+v*(v+2*d)+f;else v<=-T?(x=Math.max(0,-(-l*r+u)),v=x>0?-r:Math.min(Math.max(-r,-d),r),S=-x*x+v*(v+2*d)+f):v<=T?(x=0,v=Math.min(Math.max(-r,-d),r),S=v*(v+2*d)+f):(x=Math.max(0,-(l*r+u)),v=x>0?r:Math.min(Math.max(-r,-d),r),S=-x*x+v*(v+2*d)+f);else v=l>0?-r:r,x=Math.max(0,-(l*v+u)),S=-x*x+v*(v+2*d)+f;return i&&i.copy(this.origin).addScaledVector(this.direction,x),s&&s.copy(Ob).addScaledVector(Bx,v),S}intersectSphere(e,t){Bl.subVectors(e.center,this.origin);const i=Bl.dot(this.direction),s=Bl.dot(Bl)-i*i,r=e.radius*e.radius;if(s>r)return null;const l=Math.sqrt(r-s),u=i-l,d=i+l;return d<0?null:u<0?this.at(d,t):this.at(u,t)}intersectsSphere(e){return e.radius<0?!1:this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const i=-(this.origin.dot(e.normal)+e.constant)/t;return i>=0?i:null}intersectPlane(e,t){const i=this.distanceToPlane(e);return i===null?null:this.at(i,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let i,s,r,l,u,d;const f=1/this.direction.x,g=1/this.direction.y,x=1/this.direction.z,v=this.origin;return f>=0?(i=(e.min.x-v.x)*f,s=(e.max.x-v.x)*f):(i=(e.max.x-v.x)*f,s=(e.min.x-v.x)*f),g>=0?(r=(e.min.y-v.y)*g,l=(e.max.y-v.y)*g):(r=(e.max.y-v.y)*g,l=(e.min.y-v.y)*g),i>l||r>s||((r>i||isNaN(i))&&(i=r),(l<s||isNaN(s))&&(s=l),x>=0?(u=(e.min.z-v.z)*x,d=(e.max.z-v.z)*x):(u=(e.max.z-v.z)*x,d=(e.min.z-v.z)*x),i>d||u>s)||((u>i||i!==i)&&(i=u),(d<s||s!==s)&&(s=d),s<0)?null:this.at(i>=0?i:s,t)}intersectsBox(e){return this.intersectBox(e,Bl)!==null}intersectTriangle(e,t,i,s,r){Vb.subVectors(t,e),Ox.subVectors(i,e),zb.crossVectors(Vb,Ox);let l=this.direction.dot(zb),u;if(l>0){if(s)return null;u=1}else if(l<0)u=-1,l=-l;else return null;Nc.subVectors(this.origin,e);const d=u*this.direction.dot(Ox.crossVectors(Nc,Ox));if(d<0)return null;const f=u*this.direction.dot(Vb.cross(Nc));if(f<0||d+f>l)return null;const g=-u*Nc.dot(zb);return g<0?null:this.at(g/l,r)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class xn{constructor(e,t,i,s,r,l,u,d,f,g,x,v,S,T,E,A){xn.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,i,s,r,l,u,d,f,g,x,v,S,T,E,A)}set(e,t,i,s,r,l,u,d,f,g,x,v,S,T,E,A){const w=this.elements;return w[0]=e,w[4]=t,w[8]=i,w[12]=s,w[1]=r,w[5]=l,w[9]=u,w[13]=d,w[2]=f,w[6]=g,w[10]=x,w[14]=v,w[3]=S,w[7]=T,w[11]=E,w[15]=A,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new xn().fromArray(this.elements)}copy(e){const t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],t[9]=i[9],t[10]=i[10],t[11]=i[11],t[12]=i[12],t[13]=i[13],t[14]=i[14],t[15]=i[15],this}copyPosition(e){const t=this.elements,i=e.elements;return t[12]=i[12],t[13]=i[13],t[14]=i[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,i){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(e,t,i){return this.set(e.x,t.x,i.x,0,e.y,t.y,i.y,0,e.z,t.z,i.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,i=e.elements,s=1/tf.setFromMatrixColumn(e,0).length(),r=1/tf.setFromMatrixColumn(e,1).length(),l=1/tf.setFromMatrixColumn(e,2).length();return t[0]=i[0]*s,t[1]=i[1]*s,t[2]=i[2]*s,t[3]=0,t[4]=i[4]*r,t[5]=i[5]*r,t[6]=i[6]*r,t[7]=0,t[8]=i[8]*l,t[9]=i[9]*l,t[10]=i[10]*l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,i=e.x,s=e.y,r=e.z,l=Math.cos(i),u=Math.sin(i),d=Math.cos(s),f=Math.sin(s),g=Math.cos(r),x=Math.sin(r);if(e.order==="XYZ"){const v=l*g,S=l*x,T=u*g,E=u*x;t[0]=d*g,t[4]=-d*x,t[8]=f,t[1]=S+T*f,t[5]=v-E*f,t[9]=-u*d,t[2]=E-v*f,t[6]=T+S*f,t[10]=l*d}else if(e.order==="YXZ"){const v=d*g,S=d*x,T=f*g,E=f*x;t[0]=v+E*u,t[4]=T*u-S,t[8]=l*f,t[1]=l*x,t[5]=l*g,t[9]=-u,t[2]=S*u-T,t[6]=E+v*u,t[10]=l*d}else if(e.order==="ZXY"){const v=d*g,S=d*x,T=f*g,E=f*x;t[0]=v-E*u,t[4]=-l*x,t[8]=T+S*u,t[1]=S+T*u,t[5]=l*g,t[9]=E-v*u,t[2]=-l*f,t[6]=u,t[10]=l*d}else if(e.order==="ZYX"){const v=l*g,S=l*x,T=u*g,E=u*x;t[0]=d*g,t[4]=T*f-S,t[8]=v*f+E,t[1]=d*x,t[5]=E*f+v,t[9]=S*f-T,t[2]=-f,t[6]=u*d,t[10]=l*d}else if(e.order==="YZX"){const v=l*d,S=l*f,T=u*d,E=u*f;t[0]=d*g,t[4]=E-v*x,t[8]=T*x+S,t[1]=x,t[5]=l*g,t[9]=-u*g,t[2]=-f*g,t[6]=S*x+T,t[10]=v-E*x}else if(e.order==="XZY"){const v=l*d,S=l*f,T=u*d,E=u*f;t[0]=d*g,t[4]=-x,t[8]=f*g,t[1]=v*x+E,t[5]=l*g,t[9]=S*x-T,t[2]=T*x-S,t[6]=u*g,t[10]=E*x+v}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(V5,e,z5)}lookAt(e,t,i){const s=this.elements;return Oo.subVectors(e,t),Oo.lengthSq()===0&&(Oo.z=1),Oo.normalize(),Pc.crossVectors(i,Oo),Pc.lengthSq()===0&&(Math.abs(i.z)===1?Oo.x+=1e-4:Oo.z+=1e-4,Oo.normalize(),Pc.crossVectors(i,Oo)),Pc.normalize(),Vx.crossVectors(Oo,Pc),s[0]=Pc.x,s[4]=Vx.x,s[8]=Oo.x,s[1]=Pc.y,s[5]=Vx.y,s[9]=Oo.y,s[2]=Pc.z,s[6]=Vx.z,s[10]=Oo.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const i=e.elements,s=t.elements,r=this.elements,l=i[0],u=i[4],d=i[8],f=i[12],g=i[1],x=i[5],v=i[9],S=i[13],T=i[2],E=i[6],A=i[10],w=i[14],O=i[3],F=i[7],B=i[11],k=i[15],Y=s[0],$=s[4],Q=s[8],z=s[12],q=s[1],oe=s[5],Ce=s[9],Ne=s[13],Oe=s[2],Be=s[6],He=s[10],ct=s[14],Ve=s[3],Ct=s[7],Gt=s[11],pn=s[15];return r[0]=l*Y+u*q+d*Oe+f*Ve,r[4]=l*$+u*oe+d*Be+f*Ct,r[8]=l*Q+u*Ce+d*He+f*Gt,r[12]=l*z+u*Ne+d*ct+f*pn,r[1]=g*Y+x*q+v*Oe+S*Ve,r[5]=g*$+x*oe+v*Be+S*Ct,r[9]=g*Q+x*Ce+v*He+S*Gt,r[13]=g*z+x*Ne+v*ct+S*pn,r[2]=T*Y+E*q+A*Oe+w*Ve,r[6]=T*$+E*oe+A*Be+w*Ct,r[10]=T*Q+E*Ce+A*He+w*Gt,r[14]=T*z+E*Ne+A*ct+w*pn,r[3]=O*Y+F*q+B*Oe+k*Ve,r[7]=O*$+F*oe+B*Be+k*Ct,r[11]=O*Q+F*Ce+B*He+k*Gt,r[15]=O*z+F*Ne+B*ct+k*pn,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],i=e[4],s=e[8],r=e[12],l=e[1],u=e[5],d=e[9],f=e[13],g=e[2],x=e[6],v=e[10],S=e[14],T=e[3],E=e[7],A=e[11],w=e[15];return T*(+r*d*x-s*f*x-r*u*v+i*f*v+s*u*S-i*d*S)+E*(+t*d*S-t*f*v+r*l*v-s*l*S+s*f*g-r*d*g)+A*(+t*f*x-t*u*S-r*l*x+i*l*S+r*u*g-i*f*g)+w*(-s*u*g-t*d*x+t*u*v+s*l*x-i*l*v+i*d*g)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,i){const s=this.elements;return e.isVector3?(s[12]=e.x,s[13]=e.y,s[14]=e.z):(s[12]=e,s[13]=t,s[14]=i),this}invert(){const e=this.elements,t=e[0],i=e[1],s=e[2],r=e[3],l=e[4],u=e[5],d=e[6],f=e[7],g=e[8],x=e[9],v=e[10],S=e[11],T=e[12],E=e[13],A=e[14],w=e[15],O=x*A*f-E*v*f+E*d*S-u*A*S-x*d*w+u*v*w,F=T*v*f-g*A*f-T*d*S+l*A*S+g*d*w-l*v*w,B=g*E*f-T*x*f+T*u*S-l*E*S-g*u*w+l*x*w,k=T*x*d-g*E*d-T*u*v+l*E*v+g*u*A-l*x*A,Y=t*O+i*F+s*B+r*k;if(Y===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const $=1/Y;return e[0]=O*$,e[1]=(E*v*r-x*A*r-E*s*S+i*A*S+x*s*w-i*v*w)*$,e[2]=(u*A*r-E*d*r+E*s*f-i*A*f-u*s*w+i*d*w)*$,e[3]=(x*d*r-u*v*r-x*s*f+i*v*f+u*s*S-i*d*S)*$,e[4]=F*$,e[5]=(g*A*r-T*v*r+T*s*S-t*A*S-g*s*w+t*v*w)*$,e[6]=(T*d*r-l*A*r-T*s*f+t*A*f+l*s*w-t*d*w)*$,e[7]=(l*v*r-g*d*r+g*s*f-t*v*f-l*s*S+t*d*S)*$,e[8]=B*$,e[9]=(T*x*r-g*E*r-T*i*S+t*E*S+g*i*w-t*x*w)*$,e[10]=(l*E*r-T*u*r+T*i*f-t*E*f-l*i*w+t*u*w)*$,e[11]=(g*u*r-l*x*r-g*i*f+t*x*f+l*i*S-t*u*S)*$,e[12]=k*$,e[13]=(g*E*s-T*x*s+T*i*v-t*E*v-g*i*A+t*x*A)*$,e[14]=(T*u*s-l*E*s-T*i*d+t*E*d+l*i*A-t*u*A)*$,e[15]=(l*x*s-g*u*s+g*i*d-t*x*d-l*i*v+t*u*v)*$,this}scale(e){const t=this.elements,i=e.x,s=e.y,r=e.z;return t[0]*=i,t[4]*=s,t[8]*=r,t[1]*=i,t[5]*=s,t[9]*=r,t[2]*=i,t[6]*=s,t[10]*=r,t[3]*=i,t[7]*=s,t[11]*=r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],i=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,i,s))}makeTranslation(e,t,i){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,i,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),i=Math.sin(e);return this.set(1,0,0,0,0,t,-i,0,0,i,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),i=Math.sin(e);return this.set(t,0,i,0,0,1,0,0,-i,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),i=Math.sin(e);return this.set(t,-i,0,0,i,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const i=Math.cos(t),s=Math.sin(t),r=1-i,l=e.x,u=e.y,d=e.z,f=r*l,g=r*u;return this.set(f*l+i,f*u-s*d,f*d+s*u,0,f*u+s*d,g*u+i,g*d-s*l,0,f*d-s*u,g*d+s*l,r*d*d+i,0,0,0,0,1),this}makeScale(e,t,i){return this.set(e,0,0,0,0,t,0,0,0,0,i,0,0,0,0,1),this}makeShear(e,t,i,s,r,l){return this.set(1,i,r,0,e,1,l,0,t,s,1,0,0,0,0,1),this}compose(e,t,i){const s=this.elements,r=t._x,l=t._y,u=t._z,d=t._w,f=r+r,g=l+l,x=u+u,v=r*f,S=r*g,T=r*x,E=l*g,A=l*x,w=u*x,O=d*f,F=d*g,B=d*x,k=i.x,Y=i.y,$=i.z;return s[0]=(1-(E+w))*k,s[1]=(S+B)*k,s[2]=(T-F)*k,s[3]=0,s[4]=(S-B)*Y,s[5]=(1-(v+w))*Y,s[6]=(A+O)*Y,s[7]=0,s[8]=(T+F)*$,s[9]=(A-O)*$,s[10]=(1-(v+E))*$,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}decompose(e,t,i){const s=this.elements;let r=tf.set(s[0],s[1],s[2]).length();const l=tf.set(s[4],s[5],s[6]).length(),u=tf.set(s[8],s[9],s[10]).length();this.determinant()<0&&(r=-r),e.x=s[12],e.y=s[13],e.z=s[14],Ia.copy(this);const f=1/r,g=1/l,x=1/u;return Ia.elements[0]*=f,Ia.elements[1]*=f,Ia.elements[2]*=f,Ia.elements[4]*=g,Ia.elements[5]*=g,Ia.elements[6]*=g,Ia.elements[8]*=x,Ia.elements[9]*=x,Ia.elements[10]*=x,t.setFromRotationMatrix(Ia),i.x=r,i.y=l,i.z=u,this}makePerspective(e,t,i,s,r,l,u=xr,d=!1){const f=this.elements,g=2*r/(t-e),x=2*r/(i-s),v=(t+e)/(t-e),S=(i+s)/(i-s);let T,E;if(d)T=r/(l-r),E=l*r/(l-r);else if(u===xr)T=-(l+r)/(l-r),E=-2*l*r/(l-r);else if(u===_a)T=-l/(l-r),E=-l*r/(l-r);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+u);return f[0]=g,f[4]=0,f[8]=v,f[12]=0,f[1]=0,f[5]=x,f[9]=S,f[13]=0,f[2]=0,f[6]=0,f[10]=T,f[14]=E,f[3]=0,f[7]=0,f[11]=-1,f[15]=0,this}makeOrthographic(e,t,i,s,r,l,u=xr,d=!1){const f=this.elements,g=2/(t-e),x=2/(i-s),v=-(t+e)/(t-e),S=-(i+s)/(i-s);let T,E;if(d)T=1/(l-r),E=l/(l-r);else if(u===xr)T=-2/(l-r),E=-(l+r)/(l-r);else if(u===_a)T=-1/(l-r),E=-r/(l-r);else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+u);return f[0]=g,f[4]=0,f[8]=0,f[12]=v,f[1]=0,f[5]=x,f[9]=0,f[13]=S,f[2]=0,f[6]=0,f[10]=T,f[14]=E,f[3]=0,f[7]=0,f[11]=0,f[15]=1,this}equals(e){const t=this.elements,i=e.elements;for(let s=0;s<16;s++)if(t[s]!==i[s])return!1;return!0}fromArray(e,t=0){for(let i=0;i<16;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){const i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e[t+9]=i[9],e[t+10]=i[10],e[t+11]=i[11],e[t+12]=i[12],e[t+13]=i[13],e[t+14]=i[14],e[t+15]=i[15],e}}const tf=new re,Ia=new xn,V5=new re(0,0,0),z5=new re(1,1,1),Pc=new re,Vx=new re,Oo=new re,HC=new xn,WC=new lo;class co{constructor(e=0,t=0,i=0,s=co.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=i,this._order=s}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,i,s=this._order){return this._x=e,this._y=t,this._z=i,this._order=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,i=!0){const s=e.elements,r=s[0],l=s[4],u=s[8],d=s[1],f=s[5],g=s[9],x=s[2],v=s[6],S=s[10];switch(t){case"XYZ":this._y=Math.asin(jn(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(-g,S),this._z=Math.atan2(-l,r)):(this._x=Math.atan2(v,f),this._z=0);break;case"YXZ":this._x=Math.asin(-jn(g,-1,1)),Math.abs(g)<.9999999?(this._y=Math.atan2(u,S),this._z=Math.atan2(d,f)):(this._y=Math.atan2(-x,r),this._z=0);break;case"ZXY":this._x=Math.asin(jn(v,-1,1)),Math.abs(v)<.9999999?(this._y=Math.atan2(-x,S),this._z=Math.atan2(-l,f)):(this._y=0,this._z=Math.atan2(d,r));break;case"ZYX":this._y=Math.asin(-jn(x,-1,1)),Math.abs(x)<.9999999?(this._x=Math.atan2(v,S),this._z=Math.atan2(d,r)):(this._x=0,this._z=Math.atan2(-l,f));break;case"YZX":this._z=Math.asin(jn(d,-1,1)),Math.abs(d)<.9999999?(this._x=Math.atan2(-g,f),this._y=Math.atan2(-x,r)):(this._x=0,this._y=Math.atan2(u,S));break;case"XZY":this._z=Math.asin(-jn(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(v,f),this._y=Math.atan2(u,r)):(this._x=Math.atan2(-g,S),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,i===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,i){return HC.makeRotationFromQuaternion(e),this.setFromRotationMatrix(HC,t,i)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return WC.setFromEuler(this),this.setFromQuaternion(WC,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}co.DEFAULT_ORDER="XYZ";class Wv{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let k5=0;const $C=new re,nf=new lo,Ol=new xn,zx=new re,fm=new re,G5=new re,H5=new lo,XC=new re(1,0,0),qC=new re(0,1,0),YC=new re(0,0,1),ZC={type:"added"},W5={type:"removed"},sf={type:"childadded",child:null},kb={type:"childremoved",child:null};class Di extends Jo{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:k5++}),this.uuid=$o(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Di.DEFAULT_UP.clone();const e=new re,t=new co,i=new lo,s=new re(1,1,1);function r(){i.setFromEuler(t,!1)}function l(){t.setFromQuaternion(i,void 0,!1)}t._onChange(r),i._onChange(l),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:s},modelViewMatrix:{value:new xn},normalMatrix:{value:new ni}}),this.matrix=new xn,this.matrixWorld=new xn,this.matrixAutoUpdate=Di.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Di.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Wv,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=void 0,this.customDistanceMaterial=void 0,this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return nf.setFromAxisAngle(e,t),this.quaternion.multiply(nf),this}rotateOnWorldAxis(e,t){return nf.setFromAxisAngle(e,t),this.quaternion.premultiply(nf),this}rotateX(e){return this.rotateOnAxis(XC,e)}rotateY(e){return this.rotateOnAxis(qC,e)}rotateZ(e){return this.rotateOnAxis(YC,e)}translateOnAxis(e,t){return $C.copy(e).applyQuaternion(this.quaternion),this.position.add($C.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(XC,e)}translateY(e){return this.translateOnAxis(qC,e)}translateZ(e){return this.translateOnAxis(YC,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(Ol.copy(this.matrixWorld).invert())}lookAt(e,t,i){e.isVector3?zx.copy(e):zx.set(e,t,i);const s=this.parent;this.updateWorldMatrix(!0,!1),fm.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ol.lookAt(fm,zx,this.up):Ol.lookAt(zx,fm,this.up),this.quaternion.setFromRotationMatrix(Ol),s&&(Ol.extractRotation(s.matrixWorld),nf.setFromRotationMatrix(Ol),this.quaternion.premultiply(nf.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(ZC),sf.child=e,this.dispatchEvent(sf),sf.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(W5),kb.child=e,this.dispatchEvent(kb),kb.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),Ol.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),Ol.multiply(e.parent.matrixWorld)),e.applyMatrix4(Ol),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(ZC),sf.child=e,this.dispatchEvent(sf),sf.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let i=0,s=this.children.length;i<s;i++){const l=this.children[i].getObjectByProperty(e,t);if(l!==void 0)return l}}getObjectsByProperty(e,t,i=[]){this[e]===t&&i.push(this);const s=this.children;for(let r=0,l=s.length;r<l;r++)s[r].getObjectsByProperty(e,t,i);return i}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(fm,e,G5),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(fm,H5,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let i=0,s=t.length;i<s;i++)t[i].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let i=0,s=t.length;i<s;i++)t[i].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let i=0,s=t.length;i<s;i++)t[i].updateMatrixWorld(e)}updateWorldMatrix(e,t){const i=this.parent;if(e===!0&&i!==null&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),t===!0){const s=this.children;for(let r=0,l=s.length;r<l;r++)s[r].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",i={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.7,type:"Object",generator:"Object3D.toJSON"});const s={};s.uuid=this.uuid,s.type=this.type,this.name!==""&&(s.name=this.name),this.castShadow===!0&&(s.castShadow=!0),this.receiveShadow===!0&&(s.receiveShadow=!0),this.visible===!1&&(s.visible=!1),this.frustumCulled===!1&&(s.frustumCulled=!1),this.renderOrder!==0&&(s.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(s.userData=this.userData),s.layers=this.layers.mask,s.matrix=this.matrix.toArray(),s.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(s.matrixAutoUpdate=!1),this.isInstancedMesh&&(s.type="InstancedMesh",s.count=this.count,s.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(s.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(s.type="BatchedMesh",s.perObjectFrustumCulled=this.perObjectFrustumCulled,s.sortObjects=this.sortObjects,s.drawRanges=this._drawRanges,s.reservedRanges=this._reservedRanges,s.geometryInfo=this._geometryInfo.map(u=>({...u,boundingBox:u.boundingBox?u.boundingBox.toJSON():void 0,boundingSphere:u.boundingSphere?u.boundingSphere.toJSON():void 0})),s.instanceInfo=this._instanceInfo.map(u=>({...u})),s.availableInstanceIds=this._availableInstanceIds.slice(),s.availableGeometryIds=this._availableGeometryIds.slice(),s.nextIndexStart=this._nextIndexStart,s.nextVertexStart=this._nextVertexStart,s.geometryCount=this._geometryCount,s.maxInstanceCount=this._maxInstanceCount,s.maxVertexCount=this._maxVertexCount,s.maxIndexCount=this._maxIndexCount,s.geometryInitialized=this._geometryInitialized,s.matricesTexture=this._matricesTexture.toJSON(e),s.indirectTexture=this._indirectTexture.toJSON(e),this._colorsTexture!==null&&(s.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(s.boundingSphere=this.boundingSphere.toJSON()),this.boundingBox!==null&&(s.boundingBox=this.boundingBox.toJSON()));function r(u,d){return u[d.uuid]===void 0&&(u[d.uuid]=d.toJSON(e)),d.uuid}if(this.isScene)this.background&&(this.background.isColor?s.background=this.background.toJSON():this.background.isTexture&&(s.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(s.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){s.geometry=r(e.geometries,this.geometry);const u=this.geometry.parameters;if(u!==void 0&&u.shapes!==void 0){const d=u.shapes;if(Array.isArray(d))for(let f=0,g=d.length;f<g;f++){const x=d[f];r(e.shapes,x)}else r(e.shapes,d)}}if(this.isSkinnedMesh&&(s.bindMode=this.bindMode,s.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(r(e.skeletons,this.skeleton),s.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const u=[];for(let d=0,f=this.material.length;d<f;d++)u.push(r(e.materials,this.material[d]));s.material=u}else s.material=r(e.materials,this.material);if(this.children.length>0){s.children=[];for(let u=0;u<this.children.length;u++)s.children.push(this.children[u].toJSON(e).object)}if(this.animations.length>0){s.animations=[];for(let u=0;u<this.animations.length;u++){const d=this.animations[u];s.animations.push(r(e.animations,d))}}if(t){const u=l(e.geometries),d=l(e.materials),f=l(e.textures),g=l(e.images),x=l(e.shapes),v=l(e.skeletons),S=l(e.animations),T=l(e.nodes);u.length>0&&(i.geometries=u),d.length>0&&(i.materials=d),f.length>0&&(i.textures=f),g.length>0&&(i.images=g),x.length>0&&(i.shapes=x),v.length>0&&(i.skeletons=v),S.length>0&&(i.animations=S),T.length>0&&(i.nodes=T)}return i.object=s,i;function l(u){const d=[];for(const f in u){const g=u[f];delete g.metadata,d.push(g)}return d}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let i=0;i<e.children.length;i++){const s=e.children[i];this.add(s.clone())}return this}}Di.DEFAULT_UP=new re(0,1,0);Di.DEFAULT_MATRIX_AUTO_UPDATE=!0;Di.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const La=new re,Vl=new re,Gb=new re,zl=new re,rf=new re,of=new re,KC=new re,Hb=new re,Wb=new re,$b=new re,Xb=new Un,qb=new Un,Yb=new Un;class bo{constructor(e=new re,t=new re,i=new re){this.a=e,this.b=t,this.c=i}static getNormal(e,t,i,s){s.subVectors(i,t),La.subVectors(e,t),s.cross(La);const r=s.lengthSq();return r>0?s.multiplyScalar(1/Math.sqrt(r)):s.set(0,0,0)}static getBarycoord(e,t,i,s,r){La.subVectors(s,t),Vl.subVectors(i,t),Gb.subVectors(e,t);const l=La.dot(La),u=La.dot(Vl),d=La.dot(Gb),f=Vl.dot(Vl),g=Vl.dot(Gb),x=l*f-u*u;if(x===0)return r.set(0,0,0),null;const v=1/x,S=(f*d-u*g)*v,T=(l*g-u*d)*v;return r.set(1-S-T,T,S)}static containsPoint(e,t,i,s){return this.getBarycoord(e,t,i,s,zl)===null?!1:zl.x>=0&&zl.y>=0&&zl.x+zl.y<=1}static getInterpolation(e,t,i,s,r,l,u,d){return this.getBarycoord(e,t,i,s,zl)===null?(d.x=0,d.y=0,"z"in d&&(d.z=0),"w"in d&&(d.w=0),null):(d.setScalar(0),d.addScaledVector(r,zl.x),d.addScaledVector(l,zl.y),d.addScaledVector(u,zl.z),d)}static getInterpolatedAttribute(e,t,i,s,r,l){return Xb.setScalar(0),qb.setScalar(0),Yb.setScalar(0),Xb.fromBufferAttribute(e,t),qb.fromBufferAttribute(e,i),Yb.fromBufferAttribute(e,s),l.setScalar(0),l.addScaledVector(Xb,r.x),l.addScaledVector(qb,r.y),l.addScaledVector(Yb,r.z),l}static isFrontFacing(e,t,i,s){return La.subVectors(i,t),Vl.subVectors(e,t),La.cross(Vl).dot(s)<0}set(e,t,i){return this.a.copy(e),this.b.copy(t),this.c.copy(i),this}setFromPointsAndIndices(e,t,i,s){return this.a.copy(e[t]),this.b.copy(e[i]),this.c.copy(e[s]),this}setFromAttributeAndIndices(e,t,i,s){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,i),this.c.fromBufferAttribute(e,s),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return La.subVectors(this.c,this.b),Vl.subVectors(this.a,this.b),La.cross(Vl).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return bo.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return bo.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,i,s,r){return bo.getInterpolation(e,this.a,this.b,this.c,t,i,s,r)}containsPoint(e){return bo.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return bo.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const i=this.a,s=this.b,r=this.c;let l,u;rf.subVectors(s,i),of.subVectors(r,i),Hb.subVectors(e,i);const d=rf.dot(Hb),f=of.dot(Hb);if(d<=0&&f<=0)return t.copy(i);Wb.subVectors(e,s);const g=rf.dot(Wb),x=of.dot(Wb);if(g>=0&&x<=g)return t.copy(s);const v=d*x-g*f;if(v<=0&&d>=0&&g<=0)return l=d/(d-g),t.copy(i).addScaledVector(rf,l);$b.subVectors(e,r);const S=rf.dot($b),T=of.dot($b);if(T>=0&&S<=T)return t.copy(r);const E=S*f-d*T;if(E<=0&&f>=0&&T<=0)return u=f/(f-T),t.copy(i).addScaledVector(of,u);const A=g*T-S*x;if(A<=0&&x-g>=0&&S-T>=0)return KC.subVectors(r,s),u=(x-g)/(x-g+(S-T)),t.copy(s).addScaledVector(KC,u);const w=1/(A+E+v);return l=E*w,u=v*w,t.copy(i).addScaledVector(rf,l).addScaledVector(of,u)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const cL={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Ic={h:0,s:0,l:0},kx={h:0,s:0,l:0};function Zb(a,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?a+(e-a)*6*t:t<1/2?e:t<2/3?a+(e-a)*6*(2/3-t):a}class Jt{constructor(e,t,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,i)}set(e,t,i){if(t===void 0&&i===void 0){const s=e;s&&s.isColor?this.copy(s):typeof s=="number"?this.setHex(s):typeof s=="string"&&this.setStyle(s)}else this.setRGB(e,t,i);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=zr){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,zn.colorSpaceToWorking(this,t),this}setRGB(e,t,i,s=zn.workingColorSpace){return this.r=e,this.g=t,this.b=i,zn.colorSpaceToWorking(this,s),this}setHSL(e,t,i,s=zn.workingColorSpace){if(e=jM(e,1),t=jn(t,0,1),i=jn(i,0,1),t===0)this.r=this.g=this.b=i;else{const r=i<=.5?i*(1+t):i+t-i*t,l=2*i-r;this.r=Zb(l,r,e+1/3),this.g=Zb(l,r,e),this.b=Zb(l,r,e-1/3)}return zn.colorSpaceToWorking(this,s),this}setStyle(e,t=zr){function i(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let s;if(s=/^(\w+)\(([^\)]*)\)/.exec(e)){let r;const l=s[1],u=s[2];switch(l){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(u))return i(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,t);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(u))return i(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,t);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(u))return i(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(s=/^\#([A-Fa-f\d]+)$/.exec(e)){const r=s[1],l=r.length;if(l===3)return this.setRGB(parseInt(r.charAt(0),16)/15,parseInt(r.charAt(1),16)/15,parseInt(r.charAt(2),16)/15,t);if(l===6)return this.setHex(parseInt(r,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=zr){const i=cL[e.toLowerCase()];return i!==void 0?this.setHex(i,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=jl(e.r),this.g=jl(e.g),this.b=jl(e.b),this}copyLinearToSRGB(e){return this.r=Bf(e.r),this.g=Bf(e.g),this.b=Bf(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=zr){return zn.workingToColorSpace(Or.copy(this),e),Math.round(jn(Or.r*255,0,255))*65536+Math.round(jn(Or.g*255,0,255))*256+Math.round(jn(Or.b*255,0,255))}getHexString(e=zr){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=zn.workingColorSpace){zn.workingToColorSpace(Or.copy(this),t);const i=Or.r,s=Or.g,r=Or.b,l=Math.max(i,s,r),u=Math.min(i,s,r);let d,f;const g=(u+l)/2;if(u===l)d=0,f=0;else{const x=l-u;switch(f=g<=.5?x/(l+u):x/(2-l-u),l){case i:d=(s-r)/x+(s<r?6:0);break;case s:d=(r-i)/x+2;break;case r:d=(i-s)/x+4;break}d/=6}return e.h=d,e.s=f,e.l=g,e}getRGB(e,t=zn.workingColorSpace){return zn.workingToColorSpace(Or.copy(this),t),e.r=Or.r,e.g=Or.g,e.b=Or.b,e}getStyle(e=zr){zn.workingToColorSpace(Or.copy(this),e);const t=Or.r,i=Or.g,s=Or.b;return e!==zr?`color(${e} ${t.toFixed(3)} ${i.toFixed(3)} ${s.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(i*255)},${Math.round(s*255)})`}offsetHSL(e,t,i){return this.getHSL(Ic),this.setHSL(Ic.h+e,Ic.s+t,Ic.l+i)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,i){return this.r=e.r+(t.r-e.r)*i,this.g=e.g+(t.g-e.g)*i,this.b=e.b+(t.b-e.b)*i,this}lerpHSL(e,t){this.getHSL(Ic),e.getHSL(kx);const i=$m(Ic.h,kx.h,t),s=$m(Ic.s,kx.s,t),r=$m(Ic.l,kx.l,t);return this.setHSL(i,s,r),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,i=this.g,s=this.b,r=e.elements;return this.r=r[0]*t+r[3]*i+r[6]*s,this.g=r[1]*t+r[4]*i+r[7]*s,this.b=r[2]*t+r[5]*i+r[8]*s,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Or=new Jt;Jt.NAMES=cL;let $5=0;class br extends Jo{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:$5++}),this.uuid=$o(),this.name="",this.type="Material",this.blending=To,this.side=ao,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=kf,this.blendDst=Gf,this.blendEquation=Rr,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Jt(0,0,0),this.blendAlpha=0,this.depthFunc=tc,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=iv,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Bc,this.stencilZFail=Bc,this.stencilZPass=Bc,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const i=e[t];if(i===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const s=this[t];if(s===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}s&&s.isColor?s.set(i):s&&s.isVector3&&i&&i.isVector3?s.copy(i):this[t]=i}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const i={metadata:{version:4.7,type:"Material",generator:"Material.toJSON"}};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),this.roughness!==void 0&&(i.roughness=this.roughness),this.metalness!==void 0&&(i.metalness=this.metalness),this.sheen!==void 0&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(i.shininess=this.shininess),this.clearcoat!==void 0&&(i.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(i.dispersion=this.dispersion),this.iridescence!==void 0&&(i.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(i.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(i.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(i.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(i.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(e).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(e).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(e).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(e).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(e).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(i.combine=this.combine)),this.envMapRotation!==void 0&&(i.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(i.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(i.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(i.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(i.size=this.size),this.shadowSide!==null&&(i.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==To&&(i.blending=this.blending),this.side!==ao&&(i.side=this.side),this.vertexColors===!0&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),this.transparent===!0&&(i.transparent=!0),this.blendSrc!==kf&&(i.blendSrc=this.blendSrc),this.blendDst!==Gf&&(i.blendDst=this.blendDst),this.blendEquation!==Rr&&(i.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(i.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(i.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(i.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(i.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(i.blendAlpha=this.blendAlpha),this.depthFunc!==tc&&(i.depthFunc=this.depthFunc),this.depthTest===!1&&(i.depthTest=this.depthTest),this.depthWrite===!1&&(i.depthWrite=this.depthWrite),this.colorWrite===!1&&(i.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(i.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==iv&&(i.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(i.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(i.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Bc&&(i.stencilFail=this.stencilFail),this.stencilZFail!==Bc&&(i.stencilZFail=this.stencilZFail),this.stencilZPass!==Bc&&(i.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(i.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(i.rotation=this.rotation),this.polygonOffset===!0&&(i.polygonOffset=!0),this.polygonOffsetFactor!==0&&(i.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(i.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(i.linewidth=this.linewidth),this.dashSize!==void 0&&(i.dashSize=this.dashSize),this.gapSize!==void 0&&(i.gapSize=this.gapSize),this.scale!==void 0&&(i.scale=this.scale),this.dithering===!0&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),this.alphaHash===!0&&(i.alphaHash=!0),this.alphaToCoverage===!0&&(i.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(i.premultipliedAlpha=!0),this.forceSinglePass===!0&&(i.forceSinglePass=!0),this.wireframe===!0&&(i.wireframe=!0),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(i.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(i.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(i.flatShading=!0),this.visible===!1&&(i.visible=!1),this.toneMapped===!1&&(i.toneMapped=!1),this.fog===!1&&(i.fog=!1),Object.keys(this.userData).length>0&&(i.userData=this.userData);function s(r){const l=[];for(const u in r){const d=r[u];delete d.metadata,l.push(d)}return l}if(t){const r=s(e.textures),l=s(e.images);r.length>0&&(i.textures=r),l.length>0&&(i.images=l)}return i}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let i=null;if(t!==null){const s=t.length;i=new Array(s);for(let r=0;r!==s;++r)i[r]=t[r].clone()}return this.clippingPlanes=i,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}class so extends br{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Jt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new co,this.combine=pp,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Wl=X5();function X5(){const a=new ArrayBuffer(4),e=new Float32Array(a),t=new Uint32Array(a),i=new Uint32Array(512),s=new Uint32Array(512);for(let d=0;d<256;++d){const f=d-127;f<-27?(i[d]=0,i[d|256]=32768,s[d]=24,s[d|256]=24):f<-14?(i[d]=1024>>-f-14,i[d|256]=1024>>-f-14|32768,s[d]=-f-1,s[d|256]=-f-1):f<=15?(i[d]=f+15<<10,i[d|256]=f+15<<10|32768,s[d]=13,s[d|256]=13):f<128?(i[d]=31744,i[d|256]=64512,s[d]=24,s[d|256]=24):(i[d]=31744,i[d|256]=64512,s[d]=13,s[d|256]=13)}const r=new Uint32Array(2048),l=new Uint32Array(64),u=new Uint32Array(64);for(let d=1;d<1024;++d){let f=d<<13,g=0;for(;(f&8388608)===0;)f<<=1,g-=8388608;f&=-8388609,g+=947912704,r[d]=f|g}for(let d=1024;d<2048;++d)r[d]=939524096+(d-1024<<13);for(let d=1;d<31;++d)l[d]=d<<23;l[31]=1199570944,l[32]=2147483648;for(let d=33;d<63;++d)l[d]=2147483648+(d-32<<23);l[63]=3347054592;for(let d=1;d<64;++d)d!==32&&(u[d]=1024);return{floatView:e,uint32View:t,baseTable:i,shiftTable:s,mantissaTable:r,exponentTable:l,offsetTable:u}}function yo(a){Math.abs(a)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),a=jn(a,-65504,65504),Wl.floatView[0]=a;const e=Wl.uint32View[0],t=e>>23&511;return Wl.baseTable[t]+((e&8388607)>>Wl.shiftTable[t])}function Om(a){const e=a>>10;return Wl.uint32View[0]=Wl.mantissaTable[Wl.offsetTable[e]+(a&1023)]+Wl.exponentTable[e],Wl.floatView[0]}class q5{static toHalfFloat(e){return yo(e)}static fromHalfFloat(e){return Om(e)}}const Ks=new re,Gx=new it;let Y5=0;class $i{constructor(e,t,i=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:Y5++}),this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=i,this.usage=sp,this.updateRanges=[],this.gpuType=os,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,i){e*=this.itemSize,i*=t.itemSize;for(let s=0,r=this.itemSize;s<r;s++)this.array[e+s]=t.array[i+s];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,i=this.count;t<i;t++)Gx.fromBufferAttribute(this,t),Gx.applyMatrix3(e),this.setXY(t,Gx.x,Gx.y);else if(this.itemSize===3)for(let t=0,i=this.count;t<i;t++)Ks.fromBufferAttribute(this,t),Ks.applyMatrix3(e),this.setXYZ(t,Ks.x,Ks.y,Ks.z);return this}applyMatrix4(e){for(let t=0,i=this.count;t<i;t++)Ks.fromBufferAttribute(this,t),Ks.applyMatrix4(e),this.setXYZ(t,Ks.x,Ks.y,Ks.z);return this}applyNormalMatrix(e){for(let t=0,i=this.count;t<i;t++)Ks.fromBufferAttribute(this,t),Ks.applyNormalMatrix(e),this.setXYZ(t,Ks.x,Ks.y,Ks.z);return this}transformDirection(e){for(let t=0,i=this.count;t<i;t++)Ks.fromBufferAttribute(this,t),Ks.transformDirection(e),this.setXYZ(t,Ks.x,Ks.y,Ks.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let i=this.array[e*this.itemSize+t];return this.normalized&&(i=io(i,this.array)),i}setComponent(e,t,i){return this.normalized&&(i=mi(i,this.array)),this.array[e*this.itemSize+t]=i,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=io(t,this.array)),t}setX(e,t){return this.normalized&&(t=mi(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=io(t,this.array)),t}setY(e,t){return this.normalized&&(t=mi(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=io(t,this.array)),t}setZ(e,t){return this.normalized&&(t=mi(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=io(t,this.array)),t}setW(e,t){return this.normalized&&(t=mi(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,i){return e*=this.itemSize,this.normalized&&(t=mi(t,this.array),i=mi(i,this.array)),this.array[e+0]=t,this.array[e+1]=i,this}setXYZ(e,t,i,s){return e*=this.itemSize,this.normalized&&(t=mi(t,this.array),i=mi(i,this.array),s=mi(s,this.array)),this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=s,this}setXYZW(e,t,i,s,r){return e*=this.itemSize,this.normalized&&(t=mi(t,this.array),i=mi(i,this.array),s=mi(s,this.array),r=mi(r,this.array)),this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=s,this.array[e+3]=r,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==sp&&(e.usage=this.usage),e}}class Z5 extends $i{constructor(e,t,i){super(new Int8Array(e),t,i)}}class K5 extends $i{constructor(e,t,i){super(new Uint8Array(e),t,i)}}class J5 extends $i{constructor(e,t,i){super(new Uint8ClampedArray(e),t,i)}}class j5 extends $i{constructor(e,t,i){super(new Int16Array(e),t,i)}}class $v extends $i{constructor(e,t,i){super(new Uint16Array(e),t,i)}}class Q5 extends $i{constructor(e,t,i){super(new Int32Array(e),t,i)}}class Xv extends $i{constructor(e,t,i){super(new Uint32Array(e),t,i)}}class nw extends $i{constructor(e,t,i){super(new Uint16Array(e),t,i),this.isFloat16BufferAttribute=!0}getX(e){let t=Om(this.array[e*this.itemSize]);return this.normalized&&(t=io(t,this.array)),t}setX(e,t){return this.normalized&&(t=mi(t,this.array)),this.array[e*this.itemSize]=yo(t),this}getY(e){let t=Om(this.array[e*this.itemSize+1]);return this.normalized&&(t=io(t,this.array)),t}setY(e,t){return this.normalized&&(t=mi(t,this.array)),this.array[e*this.itemSize+1]=yo(t),this}getZ(e){let t=Om(this.array[e*this.itemSize+2]);return this.normalized&&(t=io(t,this.array)),t}setZ(e,t){return this.normalized&&(t=mi(t,this.array)),this.array[e*this.itemSize+2]=yo(t),this}getW(e){let t=Om(this.array[e*this.itemSize+3]);return this.normalized&&(t=io(t,this.array)),t}setW(e,t){return this.normalized&&(t=mi(t,this.array)),this.array[e*this.itemSize+3]=yo(t),this}setXY(e,t,i){return e*=this.itemSize,this.normalized&&(t=mi(t,this.array),i=mi(i,this.array)),this.array[e+0]=yo(t),this.array[e+1]=yo(i),this}setXYZ(e,t,i,s){return e*=this.itemSize,this.normalized&&(t=mi(t,this.array),i=mi(i,this.array),s=mi(s,this.array)),this.array[e+0]=yo(t),this.array[e+1]=yo(i),this.array[e+2]=yo(s),this}setXYZW(e,t,i,s,r){return e*=this.itemSize,this.normalized&&(t=mi(t,this.array),i=mi(i,this.array),s=mi(s,this.array),r=mi(r,this.array)),this.array[e+0]=yo(t),this.array[e+1]=yo(i),this.array[e+2]=yo(s),this.array[e+3]=yo(r),this}}class vn extends $i{constructor(e,t,i){super(new Float32Array(e),t,i)}}let e8=0;const ra=new xn,Kb=new Di,af=new re,Vo=new Gr,pm=new Gr,mr=new re;class li extends Jo{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:e8++}),this.uuid=$o(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(ew(e)?Xv:$v)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,i=0){this.groups.push({start:e,count:t,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const i=this.attributes.normal;if(i!==void 0){const r=new ni().getNormalMatrix(e);i.applyNormalMatrix(r),i.needsUpdate=!0}const s=this.attributes.tangent;return s!==void 0&&(s.transformDirection(e),s.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return ra.makeRotationFromQuaternion(e),this.applyMatrix4(ra),this}rotateX(e){return ra.makeRotationX(e),this.applyMatrix4(ra),this}rotateY(e){return ra.makeRotationY(e),this.applyMatrix4(ra),this}rotateZ(e){return ra.makeRotationZ(e),this.applyMatrix4(ra),this}translate(e,t,i){return ra.makeTranslation(e,t,i),this.applyMatrix4(ra),this}scale(e,t,i){return ra.makeScale(e,t,i),this.applyMatrix4(ra),this}lookAt(e){return Kb.lookAt(e),Kb.updateMatrix(),this.applyMatrix4(Kb.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(af).negate(),this.translate(af.x,af.y,af.z),this}setFromPoints(e){const t=this.getAttribute("position");if(t===void 0){const i=[];for(let s=0,r=e.length;s<r;s++){const l=e[s];i.push(l.x,l.y,l.z||0)}this.setAttribute("position",new vn(i,3))}else{const i=Math.min(e.length,t.count);for(let s=0;s<i;s++){const r=e[s];t.setXYZ(s,r.x,r.y,r.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Gr);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new re(-1/0,-1/0,-1/0),new re(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let i=0,s=t.length;i<s;i++){const r=t[i];Vo.setFromBufferAttribute(r),this.morphTargetsRelative?(mr.addVectors(this.boundingBox.min,Vo.min),this.boundingBox.expandByPoint(mr),mr.addVectors(this.boundingBox.max,Vo.max),this.boundingBox.expandByPoint(mr)):(this.boundingBox.expandByPoint(Vo.min),this.boundingBox.expandByPoint(Vo.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Sr);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new re,1/0);return}if(e){const i=this.boundingSphere.center;if(Vo.setFromBufferAttribute(e),t)for(let r=0,l=t.length;r<l;r++){const u=t[r];pm.setFromBufferAttribute(u),this.morphTargetsRelative?(mr.addVectors(Vo.min,pm.min),Vo.expandByPoint(mr),mr.addVectors(Vo.max,pm.max),Vo.expandByPoint(mr)):(Vo.expandByPoint(pm.min),Vo.expandByPoint(pm.max))}Vo.getCenter(i);let s=0;for(let r=0,l=e.count;r<l;r++)mr.fromBufferAttribute(e,r),s=Math.max(s,i.distanceToSquared(mr));if(t)for(let r=0,l=t.length;r<l;r++){const u=t[r],d=this.morphTargetsRelative;for(let f=0,g=u.count;f<g;f++)mr.fromBufferAttribute(u,f),d&&(af.fromBufferAttribute(e,f),mr.add(af)),s=Math.max(s,i.distanceToSquared(mr))}this.boundingSphere.radius=Math.sqrt(s),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const i=t.position,s=t.normal,r=t.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new $i(new Float32Array(4*i.count),4));const l=this.getAttribute("tangent"),u=[],d=[];for(let Q=0;Q<i.count;Q++)u[Q]=new re,d[Q]=new re;const f=new re,g=new re,x=new re,v=new it,S=new it,T=new it,E=new re,A=new re;function w(Q,z,q){f.fromBufferAttribute(i,Q),g.fromBufferAttribute(i,z),x.fromBufferAttribute(i,q),v.fromBufferAttribute(r,Q),S.fromBufferAttribute(r,z),T.fromBufferAttribute(r,q),g.sub(f),x.sub(f),S.sub(v),T.sub(v);const oe=1/(S.x*T.y-T.x*S.y);isFinite(oe)&&(E.copy(g).multiplyScalar(T.y).addScaledVector(x,-S.y).multiplyScalar(oe),A.copy(x).multiplyScalar(S.x).addScaledVector(g,-T.x).multiplyScalar(oe),u[Q].add(E),u[z].add(E),u[q].add(E),d[Q].add(A),d[z].add(A),d[q].add(A))}let O=this.groups;O.length===0&&(O=[{start:0,count:e.count}]);for(let Q=0,z=O.length;Q<z;++Q){const q=O[Q],oe=q.start,Ce=q.count;for(let Ne=oe,Oe=oe+Ce;Ne<Oe;Ne+=3)w(e.getX(Ne+0),e.getX(Ne+1),e.getX(Ne+2))}const F=new re,B=new re,k=new re,Y=new re;function $(Q){k.fromBufferAttribute(s,Q),Y.copy(k);const z=u[Q];F.copy(z),F.sub(k.multiplyScalar(k.dot(z))).normalize(),B.crossVectors(Y,z);const oe=B.dot(d[Q])<0?-1:1;l.setXYZW(Q,F.x,F.y,F.z,oe)}for(let Q=0,z=O.length;Q<z;++Q){const q=O[Q],oe=q.start,Ce=q.count;for(let Ne=oe,Oe=oe+Ce;Ne<Oe;Ne+=3)$(e.getX(Ne+0)),$(e.getX(Ne+1)),$(e.getX(Ne+2))}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let i=this.getAttribute("normal");if(i===void 0)i=new $i(new Float32Array(t.count*3),3),this.setAttribute("normal",i);else for(let v=0,S=i.count;v<S;v++)i.setXYZ(v,0,0,0);const s=new re,r=new re,l=new re,u=new re,d=new re,f=new re,g=new re,x=new re;if(e)for(let v=0,S=e.count;v<S;v+=3){const T=e.getX(v+0),E=e.getX(v+1),A=e.getX(v+2);s.fromBufferAttribute(t,T),r.fromBufferAttribute(t,E),l.fromBufferAttribute(t,A),g.subVectors(l,r),x.subVectors(s,r),g.cross(x),u.fromBufferAttribute(i,T),d.fromBufferAttribute(i,E),f.fromBufferAttribute(i,A),u.add(g),d.add(g),f.add(g),i.setXYZ(T,u.x,u.y,u.z),i.setXYZ(E,d.x,d.y,d.z),i.setXYZ(A,f.x,f.y,f.z)}else for(let v=0,S=t.count;v<S;v+=3)s.fromBufferAttribute(t,v+0),r.fromBufferAttribute(t,v+1),l.fromBufferAttribute(t,v+2),g.subVectors(l,r),x.subVectors(s,r),g.cross(x),i.setXYZ(v+0,g.x,g.y,g.z),i.setXYZ(v+1,g.x,g.y,g.z),i.setXYZ(v+2,g.x,g.y,g.z);this.normalizeNormals(),i.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,i=e.count;t<i;t++)mr.fromBufferAttribute(e,t),mr.normalize(),e.setXYZ(t,mr.x,mr.y,mr.z)}toNonIndexed(){function e(u,d){const f=u.array,g=u.itemSize,x=u.normalized,v=new f.constructor(d.length*g);let S=0,T=0;for(let E=0,A=d.length;E<A;E++){u.isInterleavedBufferAttribute?S=d[E]*u.data.stride+u.offset:S=d[E]*g;for(let w=0;w<g;w++)v[T++]=f[S++]}return new $i(v,g,x)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new li,i=this.index.array,s=this.attributes;for(const u in s){const d=s[u],f=e(d,i);t.setAttribute(u,f)}const r=this.morphAttributes;for(const u in r){const d=[],f=r[u];for(let g=0,x=f.length;g<x;g++){const v=f[g],S=e(v,i);d.push(S)}t.morphAttributes[u]=d}t.morphTargetsRelative=this.morphTargetsRelative;const l=this.groups;for(let u=0,d=l.length;u<d;u++){const f=l[u];t.addGroup(f.start,f.count,f.materialIndex)}return t}toJSON(){const e={metadata:{version:4.7,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const d=this.parameters;for(const f in d)d[f]!==void 0&&(e[f]=d[f]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const i=this.attributes;for(const d in i){const f=i[d];e.data.attributes[d]=f.toJSON(e.data)}const s={};let r=!1;for(const d in this.morphAttributes){const f=this.morphAttributes[d],g=[];for(let x=0,v=f.length;x<v;x++){const S=f[x];g.push(S.toJSON(e.data))}g.length>0&&(s[d]=g,r=!0)}r&&(e.data.morphAttributes=s,e.data.morphTargetsRelative=this.morphTargetsRelative);const l=this.groups;l.length>0&&(e.data.groups=JSON.parse(JSON.stringify(l)));const u=this.boundingSphere;return u!==null&&(e.data.boundingSphere=u.toJSON()),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const i=e.index;i!==null&&this.setIndex(i.clone());const s=e.attributes;for(const f in s){const g=s[f];this.setAttribute(f,g.clone(t))}const r=e.morphAttributes;for(const f in r){const g=[],x=r[f];for(let v=0,S=x.length;v<S;v++)g.push(x[v].clone(t));this.morphAttributes[f]=g}this.morphTargetsRelative=e.morphTargetsRelative;const l=e.groups;for(let f=0,g=l.length;f<g;f++){const x=l[f];this.addGroup(x.start,x.count,x.materialIndex)}const u=e.boundingBox;u!==null&&(this.boundingBox=u.clone());const d=e.boundingSphere;return d!==null&&(this.boundingSphere=d.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const JC=new xn,qu=new gp,Hx=new Sr,jC=new re,Wx=new re,$x=new re,Xx=new re,Jb=new re,qx=new re,QC=new re,Yx=new re;class ts extends Di{constructor(e=new li,t=new so){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.count=1,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,i=Object.keys(t);if(i.length>0){const s=t[i[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,l=s.length;r<l;r++){const u=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[u]=r}}}}getVertexPosition(e,t){const i=this.geometry,s=i.attributes.position,r=i.morphAttributes.position,l=i.morphTargetsRelative;t.fromBufferAttribute(s,e);const u=this.morphTargetInfluences;if(r&&u){qx.set(0,0,0);for(let d=0,f=r.length;d<f;d++){const g=u[d],x=r[d];g!==0&&(Jb.fromBufferAttribute(x,e),l?qx.addScaledVector(Jb,g):qx.addScaledVector(Jb.sub(t),g))}t.add(qx)}return t}raycast(e,t){const i=this.geometry,s=this.material,r=this.matrixWorld;s!==void 0&&(i.boundingSphere===null&&i.computeBoundingSphere(),Hx.copy(i.boundingSphere),Hx.applyMatrix4(r),qu.copy(e.ray).recast(e.near),!(Hx.containsPoint(qu.origin)===!1&&(qu.intersectSphere(Hx,jC)===null||qu.origin.distanceToSquared(jC)>(e.far-e.near)**2))&&(JC.copy(r).invert(),qu.copy(e.ray).applyMatrix4(JC),!(i.boundingBox!==null&&qu.intersectsBox(i.boundingBox)===!1)&&this._computeIntersections(e,t,qu)))}_computeIntersections(e,t,i){let s;const r=this.geometry,l=this.material,u=r.index,d=r.attributes.position,f=r.attributes.uv,g=r.attributes.uv1,x=r.attributes.normal,v=r.groups,S=r.drawRange;if(u!==null)if(Array.isArray(l))for(let T=0,E=v.length;T<E;T++){const A=v[T],w=l[A.materialIndex],O=Math.max(A.start,S.start),F=Math.min(u.count,Math.min(A.start+A.count,S.start+S.count));for(let B=O,k=F;B<k;B+=3){const Y=u.getX(B),$=u.getX(B+1),Q=u.getX(B+2);s=Zx(this,w,e,i,f,g,x,Y,$,Q),s&&(s.faceIndex=Math.floor(B/3),s.face.materialIndex=A.materialIndex,t.push(s))}}else{const T=Math.max(0,S.start),E=Math.min(u.count,S.start+S.count);for(let A=T,w=E;A<w;A+=3){const O=u.getX(A),F=u.getX(A+1),B=u.getX(A+2);s=Zx(this,l,e,i,f,g,x,O,F,B),s&&(s.faceIndex=Math.floor(A/3),t.push(s))}}else if(d!==void 0)if(Array.isArray(l))for(let T=0,E=v.length;T<E;T++){const A=v[T],w=l[A.materialIndex],O=Math.max(A.start,S.start),F=Math.min(d.count,Math.min(A.start+A.count,S.start+S.count));for(let B=O,k=F;B<k;B+=3){const Y=B,$=B+1,Q=B+2;s=Zx(this,w,e,i,f,g,x,Y,$,Q),s&&(s.faceIndex=Math.floor(B/3),s.face.materialIndex=A.materialIndex,t.push(s))}}else{const T=Math.max(0,S.start),E=Math.min(d.count,S.start+S.count);for(let A=T,w=E;A<w;A+=3){const O=A,F=A+1,B=A+2;s=Zx(this,l,e,i,f,g,x,O,F,B),s&&(s.faceIndex=Math.floor(A/3),t.push(s))}}}}function t8(a,e,t,i,s,r,l,u){let d;if(e.side===ns?d=i.intersectTriangle(l,r,s,!0,u):d=i.intersectTriangle(s,r,l,e.side===ao,u),d===null)return null;Yx.copy(u),Yx.applyMatrix4(a.matrixWorld);const f=t.ray.origin.distanceTo(Yx);return f<t.near||f>t.far?null:{distance:f,point:Yx.clone(),object:a}}function Zx(a,e,t,i,s,r,l,u,d,f){a.getVertexPosition(u,Wx),a.getVertexPosition(d,$x),a.getVertexPosition(f,Xx);const g=t8(a,e,t,i,Wx,$x,Xx,QC);if(g){const x=new re;bo.getBarycoord(QC,Wx,$x,Xx,x),s&&(g.uv=bo.getInterpolatedAttribute(s,u,d,f,x,new it)),r&&(g.uv1=bo.getInterpolatedAttribute(r,u,d,f,x,new it)),l&&(g.normal=bo.getInterpolatedAttribute(l,u,d,f,x,new re),g.normal.dot(i.direction)>0&&g.normal.multiplyScalar(-1));const v={a:u,b:d,c:f,normal:new re,materialIndex:0};bo.getNormal(Wx,$x,Xx,v.normal),g.face=v,g.barycoord=x}return g}class cc extends li{constructor(e=1,t=1,i=1,s=1,r=1,l=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:i,widthSegments:s,heightSegments:r,depthSegments:l};const u=this;s=Math.floor(s),r=Math.floor(r),l=Math.floor(l);const d=[],f=[],g=[],x=[];let v=0,S=0;T("z","y","x",-1,-1,i,t,e,l,r,0),T("z","y","x",1,-1,i,t,-e,l,r,1),T("x","z","y",1,1,e,i,t,s,l,2),T("x","z","y",1,-1,e,i,-t,s,l,3),T("x","y","z",1,-1,e,t,i,s,r,4),T("x","y","z",-1,-1,e,t,-i,s,r,5),this.setIndex(d),this.setAttribute("position",new vn(f,3)),this.setAttribute("normal",new vn(g,3)),this.setAttribute("uv",new vn(x,2));function T(E,A,w,O,F,B,k,Y,$,Q,z){const q=B/$,oe=k/Q,Ce=B/2,Ne=k/2,Oe=Y/2,Be=$+1,He=Q+1;let ct=0,Ve=0;const Ct=new re;for(let Gt=0;Gt<He;Gt++){const pn=Gt*oe-Ne;for(let qn=0;qn<Be;qn++){const yi=qn*q-Ce;Ct[E]=yi*O,Ct[A]=pn*F,Ct[w]=Oe,f.push(Ct.x,Ct.y,Ct.z),Ct[E]=0,Ct[A]=0,Ct[w]=Y>0?1:-1,g.push(Ct.x,Ct.y,Ct.z),x.push(qn/$),x.push(1-Gt/Q),ct+=1}}for(let Gt=0;Gt<Q;Gt++)for(let pn=0;pn<$;pn++){const qn=v+pn+Be*Gt,yi=v+pn+Be*(Gt+1),bi=v+(pn+1)+Be*(Gt+1),rt=v+(pn+1)+Be*Gt;d.push(qn,yi,rt),d.push(yi,bi,rt),Ve+=6}u.addGroup(S,Ve,z),S+=Ve,v+=ct}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new cc(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function rp(a){const e={};for(const t in a){e[t]={};for(const i in a[t]){const s=a[t][i];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?s.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][i]=null):e[t][i]=s.clone():Array.isArray(s)?e[t][i]=s.slice():e[t][i]=s}}return e}function Qr(a){const e={};for(let t=0;t<a.length;t++){const i=rp(a[t]);for(const s in i)e[s]=i[s]}return e}function n8(a){const e=[];for(let t=0;t<a.length;t++)e.push(a[t].clone());return e}function uL(a){const e=a.getRenderTarget();return e===null?a.outputColorSpace:e.isXRRenderTarget===!0?e.texture.colorSpace:zn.workingColorSpace}const i8={clone:rp,merge:Qr};var s8=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,r8=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class er extends br{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=s8,this.fragmentShader=r8,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=rp(e.uniforms),this.uniformsGroups=n8(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const s in this.uniforms){const l=this.uniforms[s].value;l&&l.isTexture?t.uniforms[s]={type:"t",value:l.toJSON(e).uuid}:l&&l.isColor?t.uniforms[s]={type:"c",value:l.getHex()}:l&&l.isVector2?t.uniforms[s]={type:"v2",value:l.toArray()}:l&&l.isVector3?t.uniforms[s]={type:"v3",value:l.toArray()}:l&&l.isVector4?t.uniforms[s]={type:"v4",value:l.toArray()}:l&&l.isMatrix3?t.uniforms[s]={type:"m3",value:l.toArray()}:l&&l.isMatrix4?t.uniforms[s]={type:"m4",value:l.toArray()}:t.uniforms[s]={value:l}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const i={};for(const s in this.extensions)this.extensions[s]===!0&&(i[s]=!0);return Object.keys(i).length>0&&(t.extensions=i),t}}class Ug extends Di{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new xn,this.projectionMatrix=new xn,this.projectionMatrixInverse=new xn,this.coordinateSystem=xr,this._reversedDepth=!1}get reversedDepth(){return this._reversedDepth}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const Lc=new re,eN=new it,tN=new it;class Gs extends Ug{constructor(e=50,t=1,i=.1,s=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=i,this.far=s,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=jh*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(wh*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return jh*2*Math.atan(Math.tan(wh*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,i){Lc.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(Lc.x,Lc.y).multiplyScalar(-e/Lc.z),Lc.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),i.set(Lc.x,Lc.y).multiplyScalar(-e/Lc.z)}getViewSize(e,t){return this.getViewBounds(e,eN,tN),t.subVectors(tN,eN)}setViewOffset(e,t,i,s,r,l){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=i,this.view.offsetY=s,this.view.width=r,this.view.height=l,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(wh*.5*this.fov)/this.zoom,i=2*t,s=this.aspect*i,r=-.5*s;const l=this.view;if(this.view!==null&&this.view.enabled){const d=l.fullWidth,f=l.fullHeight;r+=l.offsetX*s/d,t-=l.offsetY*i/f,s*=l.width/d,i*=l.height/f}const u=this.filmOffset;u!==0&&(r+=e*u/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+s,t,t-i,e,this.far,this.coordinateSystem,this.reversedDepth),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const lf=-90,cf=1;class iw extends Di{constructor(e,t,i){super(),this.type="CubeCamera",this.renderTarget=i,this.coordinateSystem=null,this.activeMipmapLevel=0;const s=new Gs(lf,cf,e,t);s.layers=this.layers,this.add(s);const r=new Gs(lf,cf,e,t);r.layers=this.layers,this.add(r);const l=new Gs(lf,cf,e,t);l.layers=this.layers,this.add(l);const u=new Gs(lf,cf,e,t);u.layers=this.layers,this.add(u);const d=new Gs(lf,cf,e,t);d.layers=this.layers,this.add(d);const f=new Gs(lf,cf,e,t);f.layers=this.layers,this.add(f)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[i,s,r,l,u,d]=t;for(const f of t)this.remove(f);if(e===xr)i.up.set(0,1,0),i.lookAt(1,0,0),s.up.set(0,1,0),s.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),l.up.set(0,0,1),l.lookAt(0,-1,0),u.up.set(0,1,0),u.lookAt(0,0,1),d.up.set(0,1,0),d.lookAt(0,0,-1);else if(e===_a)i.up.set(0,-1,0),i.lookAt(-1,0,0),s.up.set(0,-1,0),s.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),l.up.set(0,0,-1),l.lookAt(0,-1,0),u.up.set(0,-1,0),u.lookAt(0,0,1),d.up.set(0,-1,0),d.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const f of t)this.add(f),f.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:i,activeMipmapLevel:s}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[r,l,u,d,f,g]=this.children,x=e.getRenderTarget(),v=e.getActiveCubeFace(),S=e.getActiveMipmapLevel(),T=e.xr.enabled;e.xr.enabled=!1;const E=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,e.setRenderTarget(i,0,s),e.render(t,r),e.setRenderTarget(i,1,s),e.render(t,l),e.setRenderTarget(i,2,s),e.render(t,u),e.setRenderTarget(i,3,s),e.render(t,d),e.setRenderTarget(i,4,s),e.render(t,f),i.texture.generateMipmaps=E,e.setRenderTarget(i,5,s),e.render(t,g),e.setRenderTarget(x,v,S),e.xr.enabled=T,i.texture.needsPMREMUpdate=!0}}class tu extends ds{constructor(e=[],t=qo,i,s,r,l,u,d,f,g){super(e,t,i,s,r,l,u,d,f,g),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class sw extends Yo{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const i={width:e,height:e,depth:1},s=[i,i,i,i,i,i];this.texture=new tu(s),this._setTextureOptions(t),this.texture.isRenderTargetTexture=!0}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const i={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},s=new cc(5,5,5),r=new er({name:"CubemapFromEquirect",uniforms:rp(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:ns,blending:kr});r.uniforms.tEquirect.value=t;const l=new ts(s,r),u=t.minFilter;return t.minFilter===Cr&&(t.minFilter=Ni),new iw(1,10,this).update(e,l),t.minFilter=u,l.geometry.dispose(),l.material.dispose(),this}clear(e,t=!0,i=!0,s=!0){const r=e.getRenderTarget();for(let l=0;l<6;l++)e.setRenderTarget(this,l),e.clear(t,i,s);e.setRenderTarget(r)}}class kc extends Di{constructor(){super(),this.isGroup=!0,this.type="Group"}}const o8={type:"move"};class Xm{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new kc,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new kc,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new re,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new re),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new kc,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new re,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new re),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const i of e.hand.values())this._getHandJoint(t,i)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,i){let s=null,r=null,l=null;const u=this._targetRay,d=this._grip,f=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(f&&e.hand){l=!0;for(const E of e.hand.values()){const A=t.getJointPose(E,i),w=this._getHandJoint(f,E);A!==null&&(w.matrix.fromArray(A.transform.matrix),w.matrix.decompose(w.position,w.rotation,w.scale),w.matrixWorldNeedsUpdate=!0,w.jointRadius=A.radius),w.visible=A!==null}const g=f.joints["index-finger-tip"],x=f.joints["thumb-tip"],v=g.position.distanceTo(x.position),S=.02,T=.005;f.inputState.pinching&&v>S+T?(f.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!f.inputState.pinching&&v<=S-T&&(f.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else d!==null&&e.gripSpace&&(r=t.getPose(e.gripSpace,i),r!==null&&(d.matrix.fromArray(r.transform.matrix),d.matrix.decompose(d.position,d.rotation,d.scale),d.matrixWorldNeedsUpdate=!0,r.linearVelocity?(d.hasLinearVelocity=!0,d.linearVelocity.copy(r.linearVelocity)):d.hasLinearVelocity=!1,r.angularVelocity?(d.hasAngularVelocity=!0,d.angularVelocity.copy(r.angularVelocity)):d.hasAngularVelocity=!1));u!==null&&(s=t.getPose(e.targetRaySpace,i),s===null&&r!==null&&(s=r),s!==null&&(u.matrix.fromArray(s.transform.matrix),u.matrix.decompose(u.position,u.rotation,u.scale),u.matrixWorldNeedsUpdate=!0,s.linearVelocity?(u.hasLinearVelocity=!0,u.linearVelocity.copy(s.linearVelocity)):u.hasLinearVelocity=!1,s.angularVelocity?(u.hasAngularVelocity=!0,u.angularVelocity.copy(s.angularVelocity)):u.hasAngularVelocity=!1,this.dispatchEvent(o8)))}return u!==null&&(u.visible=s!==null),d!==null&&(d.visible=r!==null),f!==null&&(f.visible=l!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const i=new kc;i.matrixAutoUpdate=!1,i.visible=!1,e.joints[t.jointName]=i,e.add(i)}return e.joints[t.jointName]}}class qv{constructor(e,t=25e-5){this.isFogExp2=!0,this.name="",this.color=new Jt(e),this.density=t}clone(){return new qv(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class Yv{constructor(e,t=1,i=1e3){this.isFog=!0,this.name="",this.color=new Jt(e),this.near=t,this.far=i}clone(){return new Yv(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class rd extends Di{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new co,this.environmentIntensity=1,this.environmentRotation=new co,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}}class Fg{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=sp,this.updateRanges=[],this.version=0,this.uuid=$o()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,i){e*=this.stride,i*=t.stride;for(let s=0,r=this.stride;s<r;s++)this.array[e+s]=t.array[i+s];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=$o()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),i=new this.constructor(t,this.stride);return i.setUsage(this.usage),i}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=$o()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const jr=new re;class jc{constructor(e,t,i,s=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=i,this.normalized=s}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,i=this.data.count;t<i;t++)jr.fromBufferAttribute(this,t),jr.applyMatrix4(e),this.setXYZ(t,jr.x,jr.y,jr.z);return this}applyNormalMatrix(e){for(let t=0,i=this.count;t<i;t++)jr.fromBufferAttribute(this,t),jr.applyNormalMatrix(e),this.setXYZ(t,jr.x,jr.y,jr.z);return this}transformDirection(e){for(let t=0,i=this.count;t<i;t++)jr.fromBufferAttribute(this,t),jr.transformDirection(e),this.setXYZ(t,jr.x,jr.y,jr.z);return this}getComponent(e,t){let i=this.array[e*this.data.stride+this.offset+t];return this.normalized&&(i=io(i,this.array)),i}setComponent(e,t,i){return this.normalized&&(i=mi(i,this.array)),this.data.array[e*this.data.stride+this.offset+t]=i,this}setX(e,t){return this.normalized&&(t=mi(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=mi(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=mi(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=mi(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=io(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=io(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=io(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=io(t,this.array)),t}setXY(e,t,i){return e=e*this.data.stride+this.offset,this.normalized&&(t=mi(t,this.array),i=mi(i,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=i,this}setXYZ(e,t,i,s){return e=e*this.data.stride+this.offset,this.normalized&&(t=mi(t,this.array),i=mi(i,this.array),s=mi(s,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=i,this.data.array[e+2]=s,this}setXYZW(e,t,i,s,r){return e=e*this.data.stride+this.offset,this.normalized&&(t=mi(t,this.array),i=mi(i,this.array),s=mi(s,this.array),r=mi(r,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=i,this.data.array[e+2]=s,this.data.array[e+3]=r,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let i=0;i<this.count;i++){const s=i*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[s+r])}return new $i(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new jc(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let i=0;i<this.count;i++){const s=i*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[s+r])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class Zv extends br{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new Jt(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}let uf;const mm=new re,hf=new re,df=new re,ff=new it,gm=new it,hL=new xn,Kx=new re,_m=new re,Jx=new re,nN=new it,jb=new it,iN=new it;class dL extends Di{constructor(e=new Zv){if(super(),this.isSprite=!0,this.type="Sprite",uf===void 0){uf=new li;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),i=new Fg(t,5);uf.setIndex([0,1,2,0,2,3]),uf.setAttribute("position",new jc(i,3,0,!1)),uf.setAttribute("uv",new jc(i,2,3,!1))}this.geometry=uf,this.material=e,this.center=new it(.5,.5),this.count=1}raycast(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),hf.setFromMatrixScale(this.matrixWorld),hL.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),df.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&hf.multiplyScalar(-df.z);const i=this.material.rotation;let s,r;i!==0&&(r=Math.cos(i),s=Math.sin(i));const l=this.center;jx(Kx.set(-.5,-.5,0),df,l,hf,s,r),jx(_m.set(.5,-.5,0),df,l,hf,s,r),jx(Jx.set(.5,.5,0),df,l,hf,s,r),nN.set(0,0),jb.set(1,0),iN.set(1,1);let u=e.ray.intersectTriangle(Kx,_m,Jx,!1,mm);if(u===null&&(jx(_m.set(-.5,.5,0),df,l,hf,s,r),jb.set(0,1),u=e.ray.intersectTriangle(Kx,Jx,_m,!1,mm),u===null))return;const d=e.ray.origin.distanceTo(mm);d<e.near||d>e.far||t.push({distance:d,point:mm.clone(),uv:bo.getInterpolation(mm,Kx,_m,Jx,nN,jb,iN,new it),face:null,object:this})}copy(e,t){return super.copy(e,t),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}function jx(a,e,t,i,s,r){ff.subVectors(a,t).addScalar(.5).multiply(i),s!==void 0?(gm.x=r*ff.x-s*ff.y,gm.y=s*ff.x+r*ff.y):gm.copy(ff),a.copy(e),a.x+=gm.x,a.y+=gm.y,a.applyMatrix4(hL)}const Qx=new re,sN=new re;class fL extends Di{constructor(){super(),this.isLOD=!0,this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}copy(e){super.copy(e,!1);const t=e.levels;for(let i=0,s=t.length;i<s;i++){const r=t[i];this.addLevel(r.object.clone(),r.distance,r.hysteresis)}return this.autoUpdate=e.autoUpdate,this}addLevel(e,t=0,i=0){t=Math.abs(t);const s=this.levels;let r;for(r=0;r<s.length&&!(t<s[r].distance);r++);return s.splice(r,0,{distance:t,hysteresis:i,object:e}),this.add(e),this}removeLevel(e){const t=this.levels;for(let i=0;i<t.length;i++)if(t[i].distance===e){const s=t.splice(i,1);return this.remove(s[0].object),!0}return!1}getCurrentLevel(){return this._currentLevel}getObjectForDistance(e){const t=this.levels;if(t.length>0){let i,s;for(i=1,s=t.length;i<s;i++){let r=t[i].distance;if(t[i].object.visible&&(r-=r*t[i].hysteresis),e<r)break}return t[i-1].object}return null}raycast(e,t){if(this.levels.length>0){Qx.setFromMatrixPosition(this.matrixWorld);const s=e.ray.origin.distanceTo(Qx);this.getObjectForDistance(s).raycast(e,t)}}update(e){const t=this.levels;if(t.length>1){Qx.setFromMatrixPosition(e.matrixWorld),sN.setFromMatrixPosition(this.matrixWorld);const i=Qx.distanceTo(sN)/e.zoom;t[0].object.visible=!0;let s,r;for(s=1,r=t.length;s<r;s++){let l=t[s].distance;if(t[s].object.visible&&(l-=l*t[s].hysteresis),i>=l)t[s-1].object.visible=!1,t[s].object.visible=!0;else break}for(this._currentLevel=s-1;s<r;s++)t[s].object.visible=!1}}toJSON(e){const t=super.toJSON(e);this.autoUpdate===!1&&(t.object.autoUpdate=!1),t.object.levels=[];const i=this.levels;for(let s=0,r=i.length;s<r;s++){const l=i[s];t.object.levels.push({object:l.object.uuid,distance:l.distance,hysteresis:l.hysteresis})}return t}}const rN=new re,oN=new Un,aN=new Un,a8=new re,lN=new xn,ey=new re,Qb=new Sr,cN=new xn,eT=new gp;class pL extends ts{constructor(e,t){super(e,t),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=sM,this.bindMatrix=new xn,this.bindMatrixInverse=new xn,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;this.boundingBox===null&&(this.boundingBox=new Gr),this.boundingBox.makeEmpty();const t=e.getAttribute("position");for(let i=0;i<t.count;i++)this.getVertexPosition(i,ey),this.boundingBox.expandByPoint(ey)}computeBoundingSphere(){const e=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new Sr),this.boundingSphere.makeEmpty();const t=e.getAttribute("position");for(let i=0;i<t.count;i++)this.getVertexPosition(i,ey),this.boundingSphere.expandByPoint(ey)}copy(e,t){return super.copy(e,t),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}raycast(e,t){const i=this.material,s=this.matrixWorld;i!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Qb.copy(this.boundingSphere),Qb.applyMatrix4(s),e.ray.intersectsSphere(Qb)!==!1&&(cN.copy(s).invert(),eT.copy(e.ray).applyMatrix4(cN),!(this.boundingBox!==null&&eT.intersectsBox(this.boundingBox)===!1)&&this._computeIntersections(e,t,eT)))}getVertexPosition(e,t){return super.getVertexPosition(e,t),this.applyBoneTransform(e,t),t}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new Un,t=this.geometry.attributes.skinWeight;for(let i=0,s=t.count;i<s;i++){e.fromBufferAttribute(t,i);const r=1/e.manhattanLength();r!==1/0?e.multiplyScalar(r):e.set(1,0,0,0),t.setXYZW(i,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode===sM?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===zI?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(e,t){const i=this.skeleton,s=this.geometry;oN.fromBufferAttribute(s.attributes.skinIndex,e),aN.fromBufferAttribute(s.attributes.skinWeight,e),rN.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let r=0;r<4;r++){const l=aN.getComponent(r);if(l!==0){const u=oN.getComponent(r);lN.multiplyMatrices(i.bones[u].matrixWorld,i.boneInverses[u]),t.addScaledVector(a8.copy(rN).applyMatrix4(lN),l)}}return t.applyMatrix4(this.bindMatrixInverse)}}class rw extends Di{constructor(){super(),this.isBone=!0,this.type="Bone"}}class Oa extends ds{constructor(e=null,t=1,i=1,s,r,l,u,d,f=Ci,g=Ci,x,v){super(null,l,u,d,f,g,s,r,x,v),this.isDataTexture=!0,this.image={data:e,width:t,height:i},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const uN=new xn,l8=new xn;class Kv{constructor(e=[],t=[]){this.uuid=$o(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let i=0,s=this.bones.length;i<s;i++)this.boneInverses.push(new xn)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const i=new xn;this.bones[e]&&i.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(i)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const i=this.bones[e];i&&i.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,t=this.bones.length;e<t;e++){const i=this.bones[e];i&&(i.parent&&i.parent.isBone?(i.matrix.copy(i.parent.matrixWorld).invert(),i.matrix.multiply(i.matrixWorld)):i.matrix.copy(i.matrixWorld),i.matrix.decompose(i.position,i.quaternion,i.scale))}}update(){const e=this.bones,t=this.boneInverses,i=this.boneMatrices,s=this.boneTexture;for(let r=0,l=e.length;r<l;r++){const u=e[r]?e[r].matrixWorld:l8;uN.multiplyMatrices(u,t[r]),uN.toArray(i,r*16)}s!==null&&(s.needsUpdate=!0)}clone(){return new Kv(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const i=new Oa(t,e,e,es,os);return i.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=i,this}getBoneByName(e){for(let t=0,i=this.bones.length;t<i;t++){const s=this.bones[t];if(s.name===e)return s}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let i=0,s=e.bones.length;i<s;i++){const r=e.bones[i];let l=t[r];l===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",r),l=new rw),this.bones.push(l),this.boneInverses.push(new xn().fromArray(e.boneInverses[i]))}return this.init(),this}toJSON(){const e={metadata:{version:4.7,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,i=this.boneInverses;for(let s=0,r=t.length;s<r;s++){const l=t[s];e.bones.push(l.uuid);const u=i[s];e.boneInverses.push(u.toArray())}return e}}class pa extends $i{constructor(e,t,i,s=1){super(e,t,i),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=s}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const pf=new xn,hN=new xn,ty=[],dN=new Gr,c8=new xn,xm=new ts,ym=new Sr;class mL extends ts{constructor(e,t,i){super(e,t),this.isInstancedMesh=!0,this.instanceMatrix=new pa(new Float32Array(i*16),16),this.instanceColor=null,this.morphTexture=null,this.count=i,this.boundingBox=null,this.boundingSphere=null;for(let s=0;s<i;s++)this.setMatrixAt(s,c8)}computeBoundingBox(){const e=this.geometry,t=this.count;this.boundingBox===null&&(this.boundingBox=new Gr),e.boundingBox===null&&e.computeBoundingBox(),this.boundingBox.makeEmpty();for(let i=0;i<t;i++)this.getMatrixAt(i,pf),dN.copy(e.boundingBox).applyMatrix4(pf),this.boundingBox.union(dN)}computeBoundingSphere(){const e=this.geometry,t=this.count;this.boundingSphere===null&&(this.boundingSphere=new Sr),e.boundingSphere===null&&e.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let i=0;i<t;i++)this.getMatrixAt(i,pf),ym.copy(e.boundingSphere).applyMatrix4(pf),this.boundingSphere.union(ym)}copy(e,t){return super.copy(e,t),this.instanceMatrix.copy(e.instanceMatrix),e.morphTexture!==null&&(this.morphTexture=e.morphTexture.clone()),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}getMorphAt(e,t){const i=t.morphTargetInfluences,s=this.morphTexture.source.data.data,r=i.length+1,l=e*r+1;for(let u=0;u<i.length;u++)i[u]=s[l+u]}raycast(e,t){const i=this.matrixWorld,s=this.count;if(xm.geometry=this.geometry,xm.material=this.material,xm.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),ym.copy(this.boundingSphere),ym.applyMatrix4(i),e.ray.intersectsSphere(ym)!==!1))for(let r=0;r<s;r++){this.getMatrixAt(r,pf),hN.multiplyMatrices(i,pf),xm.matrixWorld=hN,xm.raycast(e,ty);for(let l=0,u=ty.length;l<u;l++){const d=ty[l];d.instanceId=r,d.object=this,t.push(d)}ty.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new pa(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}setMorphAt(e,t){const i=t.morphTargetInfluences,s=i.length+1;this.morphTexture===null&&(this.morphTexture=new Oa(new Float32Array(s*this.count),s,this.count,nd,os));const r=this.morphTexture.source.data.data;let l=0;for(let f=0;f<i.length;f++)l+=i[f];const u=this.geometry.morphTargetsRelative?1:1-l,d=s*e;r[d]=u,r.set(i,d+1)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null)}}const tT=new re,u8=new re,h8=new ni;class al{constructor(e=new re(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,i,s){return this.normal.set(e,t,i),this.constant=s,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,i){const s=tT.subVectors(i,t).cross(u8.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(s,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const i=e.delta(tT),s=this.normal.dot(i);if(s===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const r=-(e.start.dot(this.normal)+this.constant)/s;return r<0||r>1?null:t.copy(e.start).addScaledVector(i,r)}intersectsLine(e){const t=this.distanceToPoint(e.start),i=this.distanceToPoint(e.end);return t<0&&i>0||i<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const i=t||h8.getNormalMatrix(e),s=this.coplanarPoint(tT).applyMatrix4(e),r=this.normal.applyMatrix3(i).normalize();return this.constant=-s.dot(r),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Yu=new Sr,d8=new it(.5,.5),ny=new re;class od{constructor(e=new al,t=new al,i=new al,s=new al,r=new al,l=new al){this.planes=[e,t,i,s,r,l]}set(e,t,i,s,r,l){const u=this.planes;return u[0].copy(e),u[1].copy(t),u[2].copy(i),u[3].copy(s),u[4].copy(r),u[5].copy(l),this}copy(e){const t=this.planes;for(let i=0;i<6;i++)t[i].copy(e.planes[i]);return this}setFromProjectionMatrix(e,t=xr,i=!1){const s=this.planes,r=e.elements,l=r[0],u=r[1],d=r[2],f=r[3],g=r[4],x=r[5],v=r[6],S=r[7],T=r[8],E=r[9],A=r[10],w=r[11],O=r[12],F=r[13],B=r[14],k=r[15];if(s[0].setComponents(f-l,S-g,w-T,k-O).normalize(),s[1].setComponents(f+l,S+g,w+T,k+O).normalize(),s[2].setComponents(f+u,S+x,w+E,k+F).normalize(),s[3].setComponents(f-u,S-x,w-E,k-F).normalize(),i)s[4].setComponents(d,v,A,B).normalize(),s[5].setComponents(f-d,S-v,w-A,k-B).normalize();else if(s[4].setComponents(f-d,S-v,w-A,k-B).normalize(),t===xr)s[5].setComponents(f+d,S+v,w+A,k+B).normalize();else if(t===_a)s[5].setComponents(d,v,A,B).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),Yu.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),Yu.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(Yu)}intersectsSprite(e){Yu.center.set(0,0,0);const t=d8.distanceTo(e.center);return Yu.radius=.7071067811865476+t,Yu.applyMatrix4(e.matrixWorld),this.intersectsSphere(Yu)}intersectsSphere(e){const t=this.planes,i=e.center,s=-e.radius;for(let r=0;r<6;r++)if(t[r].distanceToPoint(i)<s)return!1;return!0}intersectsBox(e){const t=this.planes;for(let i=0;i<6;i++){const s=t[i];if(ny.x=s.normal.x>0?e.max.x:e.min.x,ny.y=s.normal.y>0?e.max.y:e.min.y,ny.z=s.normal.z>0?e.max.z:e.min.z,s.distanceToPoint(ny)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let i=0;i<6;i++)if(t[i].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}const nl=new xn,il=new od;class Bg{constructor(){this.coordinateSystem=xr}intersectsObject(e,t){if(!t.isArrayCamera||t.cameras.length===0)return!1;for(let i=0;i<t.cameras.length;i++){const s=t.cameras[i];if(nl.multiplyMatrices(s.projectionMatrix,s.matrixWorldInverse),il.setFromProjectionMatrix(nl,s.coordinateSystem,s.reversedDepth),il.intersectsObject(e))return!0}return!1}intersectsSprite(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let i=0;i<t.cameras.length;i++){const s=t.cameras[i];if(nl.multiplyMatrices(s.projectionMatrix,s.matrixWorldInverse),il.setFromProjectionMatrix(nl,s.coordinateSystem,s.reversedDepth),il.intersectsSprite(e))return!0}return!1}intersectsSphere(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let i=0;i<t.cameras.length;i++){const s=t.cameras[i];if(nl.multiplyMatrices(s.projectionMatrix,s.matrixWorldInverse),il.setFromProjectionMatrix(nl,s.coordinateSystem,s.reversedDepth),il.intersectsSphere(e))return!0}return!1}intersectsBox(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let i=0;i<t.cameras.length;i++){const s=t.cameras[i];if(nl.multiplyMatrices(s.projectionMatrix,s.matrixWorldInverse),il.setFromProjectionMatrix(nl,s.coordinateSystem,s.reversedDepth),il.intersectsBox(e))return!0}return!1}containsPoint(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let i=0;i<t.cameras.length;i++){const s=t.cameras[i];if(nl.multiplyMatrices(s.projectionMatrix,s.matrixWorldInverse),il.setFromProjectionMatrix(nl,s.coordinateSystem,s.reversedDepth),il.containsPoint(e))return!0}return!1}clone(){return new Bg}}function nT(a,e){return a-e}function f8(a,e){return a.z-e.z}function p8(a,e){return e.z-a.z}class m8{constructor(){this.index=0,this.pool=[],this.list=[]}push(e,t,i,s){const r=this.pool,l=this.list;this.index>=r.length&&r.push({start:-1,count:-1,z:-1,index:-1});const u=r[this.index];l.push(u),this.index++,u.start=e,u.count=t,u.z=i,u.index=s}reset(){this.list.length=0,this.index=0}}const xo=new xn,g8=new Jt(1,1,1),fN=new od,_8=new Bg,iy=new Gr,Zu=new Sr,vm=new re,pN=new re,x8=new re,iT=new m8,Vr=new ts,sy=[];function y8(a,e,t=0){const i=e.itemSize;if(a.isInterleavedBufferAttribute||a.array.constructor!==e.array.constructor){const s=a.count;for(let r=0;r<s;r++)for(let l=0;l<i;l++)e.setComponent(r+t,l,a.getComponent(r,l))}else e.array.set(a.array,t*i);e.needsUpdate=!0}function Ku(a,e){if(a.constructor!==e.constructor){const t=Math.min(a.length,e.length);for(let i=0;i<t;i++)e[i]=a[i]}else{const t=Math.min(a.length,e.length);e.set(new a.constructor(a.buffer,0,t))}}class gL extends ts{constructor(e,t,i=t*2,s){super(new li,s),this.isBatchedMesh=!0,this.perObjectFrustumCulled=!0,this.sortObjects=!0,this.boundingBox=null,this.boundingSphere=null,this.customSort=null,this._instanceInfo=[],this._geometryInfo=[],this._availableInstanceIds=[],this._availableGeometryIds=[],this._nextIndexStart=0,this._nextVertexStart=0,this._geometryCount=0,this._visibilityChanged=!0,this._geometryInitialized=!1,this._maxInstanceCount=e,this._maxVertexCount=t,this._maxIndexCount=i,this._multiDrawCounts=new Int32Array(e),this._multiDrawStarts=new Int32Array(e),this._multiDrawCount=0,this._multiDrawInstances=null,this._matricesTexture=null,this._indirectTexture=null,this._colorsTexture=null,this._initMatricesTexture(),this._initIndirectTexture()}get maxInstanceCount(){return this._maxInstanceCount}get instanceCount(){return this._instanceInfo.length-this._availableInstanceIds.length}get unusedVertexCount(){return this._maxVertexCount-this._nextVertexStart}get unusedIndexCount(){return this._maxIndexCount-this._nextIndexStart}_initMatricesTexture(){let e=Math.sqrt(this._maxInstanceCount*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4),i=new Oa(t,e,e,es,os);this._matricesTexture=i}_initIndirectTexture(){let e=Math.sqrt(this._maxInstanceCount);e=Math.ceil(e);const t=new Uint32Array(e*e),i=new Oa(t,e,e,eu,rs);this._indirectTexture=i}_initColorsTexture(){let e=Math.sqrt(this._maxInstanceCount);e=Math.ceil(e);const t=new Float32Array(e*e*4).fill(1),i=new Oa(t,e,e,es,os);i.colorSpace=zn.workingColorSpace,this._colorsTexture=i}_initializeGeometry(e){const t=this.geometry,i=this._maxVertexCount,s=this._maxIndexCount;if(this._geometryInitialized===!1){for(const r in e.attributes){const l=e.getAttribute(r),{array:u,itemSize:d,normalized:f}=l,g=new u.constructor(i*d),x=new $i(g,d,f);t.setAttribute(r,x)}if(e.getIndex()!==null){const r=i>65535?new Uint32Array(s):new Uint16Array(s);t.setIndex(new $i(r,1))}this._geometryInitialized=!0}}_validateGeometry(e){const t=this.geometry;if(!!e.getIndex()!=!!t.getIndex())throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".');for(const i in t.attributes){if(!e.hasAttribute(i))throw new Error(`THREE.BatchedMesh: Added geometry missing "${i}". All geometries must have consistent attributes.`);const s=e.getAttribute(i),r=t.getAttribute(i);if(s.itemSize!==r.itemSize||s.normalized!==r.normalized)throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}validateInstanceId(e){const t=this._instanceInfo;if(e<0||e>=t.length||t[e].active===!1)throw new Error(`THREE.BatchedMesh: Invalid instanceId ${e}. Instance is either out of range or has been deleted.`)}validateGeometryId(e){const t=this._geometryInfo;if(e<0||e>=t.length||t[e].active===!1)throw new Error(`THREE.BatchedMesh: Invalid geometryId ${e}. Geometry is either out of range or has been deleted.`)}setCustomSort(e){return this.customSort=e,this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Gr);const e=this.boundingBox,t=this._instanceInfo;e.makeEmpty();for(let i=0,s=t.length;i<s;i++){if(t[i].active===!1)continue;const r=t[i].geometryIndex;this.getMatrixAt(i,xo),this.getBoundingBoxAt(r,iy).applyMatrix4(xo),e.union(iy)}}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Sr);const e=this.boundingSphere,t=this._instanceInfo;e.makeEmpty();for(let i=0,s=t.length;i<s;i++){if(t[i].active===!1)continue;const r=t[i].geometryIndex;this.getMatrixAt(i,xo),this.getBoundingSphereAt(r,Zu).applyMatrix4(xo),e.union(Zu)}}addInstance(e){if(this._instanceInfo.length>=this.maxInstanceCount&&this._availableInstanceIds.length===0)throw new Error("THREE.BatchedMesh: Maximum item count reached.");const i={visible:!0,active:!0,geometryIndex:e};let s=null;this._availableInstanceIds.length>0?(this._availableInstanceIds.sort(nT),s=this._availableInstanceIds.shift(),this._instanceInfo[s]=i):(s=this._instanceInfo.length,this._instanceInfo.push(i));const r=this._matricesTexture;xo.identity().toArray(r.image.data,s*16),r.needsUpdate=!0;const l=this._colorsTexture;return l&&(g8.toArray(l.image.data,s*4),l.needsUpdate=!0),this._visibilityChanged=!0,s}addGeometry(e,t=-1,i=-1){this._initializeGeometry(e),this._validateGeometry(e);const s={vertexStart:-1,vertexCount:-1,reservedVertexCount:-1,indexStart:-1,indexCount:-1,reservedIndexCount:-1,start:-1,count:-1,boundingBox:null,boundingSphere:null,active:!0},r=this._geometryInfo;s.vertexStart=this._nextVertexStart,s.reservedVertexCount=t===-1?e.getAttribute("position").count:t;const l=e.getIndex();if(l!==null&&(s.indexStart=this._nextIndexStart,s.reservedIndexCount=i===-1?l.count:i),s.indexStart!==-1&&s.indexStart+s.reservedIndexCount>this._maxIndexCount||s.vertexStart+s.reservedVertexCount>this._maxVertexCount)throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.");let d;return this._availableGeometryIds.length>0?(this._availableGeometryIds.sort(nT),d=this._availableGeometryIds.shift(),r[d]=s):(d=this._geometryCount,this._geometryCount++,r.push(s)),this.setGeometryAt(d,e),this._nextIndexStart=s.indexStart+s.reservedIndexCount,this._nextVertexStart=s.vertexStart+s.reservedVertexCount,d}setGeometryAt(e,t){if(e>=this._geometryCount)throw new Error("THREE.BatchedMesh: Maximum geometry count reached.");this._validateGeometry(t);const i=this.geometry,s=i.getIndex()!==null,r=i.getIndex(),l=t.getIndex(),u=this._geometryInfo[e];if(s&&l.count>u.reservedIndexCount||t.attributes.position.count>u.reservedVertexCount)throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.");const d=u.vertexStart,f=u.reservedVertexCount;u.vertexCount=t.getAttribute("position").count;for(const g in i.attributes){const x=t.getAttribute(g),v=i.getAttribute(g);y8(x,v,d);const S=x.itemSize;for(let T=x.count,E=f;T<E;T++){const A=d+T;for(let w=0;w<S;w++)v.setComponent(A,w,0)}v.needsUpdate=!0,v.addUpdateRange(d*S,f*S)}if(s){const g=u.indexStart,x=u.reservedIndexCount;u.indexCount=t.getIndex().count;for(let v=0;v<l.count;v++)r.setX(g+v,d+l.getX(v));for(let v=l.count,S=x;v<S;v++)r.setX(g+v,d);r.needsUpdate=!0,r.addUpdateRange(g,u.reservedIndexCount)}return u.start=s?u.indexStart:u.vertexStart,u.count=s?u.indexCount:u.vertexCount,u.boundingBox=null,t.boundingBox!==null&&(u.boundingBox=t.boundingBox.clone()),u.boundingSphere=null,t.boundingSphere!==null&&(u.boundingSphere=t.boundingSphere.clone()),this._visibilityChanged=!0,e}deleteGeometry(e){const t=this._geometryInfo;if(e>=t.length||t[e].active===!1)return this;const i=this._instanceInfo;for(let s=0,r=i.length;s<r;s++)i[s].active&&i[s].geometryIndex===e&&this.deleteInstance(s);return t[e].active=!1,this._availableGeometryIds.push(e),this._visibilityChanged=!0,this}deleteInstance(e){return this.validateInstanceId(e),this._instanceInfo[e].active=!1,this._availableInstanceIds.push(e),this._visibilityChanged=!0,this}optimize(){let e=0,t=0;const i=this._geometryInfo,s=i.map((l,u)=>u).sort((l,u)=>i[l].vertexStart-i[u].vertexStart),r=this.geometry;for(let l=0,u=i.length;l<u;l++){const d=s[l],f=i[d];if(f.active!==!1){if(r.index!==null){if(f.indexStart!==t){const{indexStart:g,vertexStart:x,reservedIndexCount:v}=f,S=r.index,T=S.array,E=e-x;for(let A=g;A<g+v;A++)T[A]=T[A]+E;S.array.copyWithin(t,g,g+v),S.addUpdateRange(t,v),f.indexStart=t}t+=f.reservedIndexCount}if(f.vertexStart!==e){const{vertexStart:g,reservedVertexCount:x}=f,v=r.attributes;for(const S in v){const T=v[S],{array:E,itemSize:A}=T;E.copyWithin(e*A,g*A,(g+x)*A),T.addUpdateRange(e*A,x*A)}f.vertexStart=e}e+=f.reservedVertexCount,f.start=r.index?f.indexStart:f.vertexStart,this._nextIndexStart=r.index?f.indexStart+f.reservedIndexCount:0,this._nextVertexStart=f.vertexStart+f.reservedVertexCount}}return this}getBoundingBoxAt(e,t){if(e>=this._geometryCount)return null;const i=this.geometry,s=this._geometryInfo[e];if(s.boundingBox===null){const r=new Gr,l=i.index,u=i.attributes.position;for(let d=s.start,f=s.start+s.count;d<f;d++){let g=d;l&&(g=l.getX(g)),r.expandByPoint(vm.fromBufferAttribute(u,g))}s.boundingBox=r}return t.copy(s.boundingBox),t}getBoundingSphereAt(e,t){if(e>=this._geometryCount)return null;const i=this.geometry,s=this._geometryInfo[e];if(s.boundingSphere===null){const r=new Sr;this.getBoundingBoxAt(e,iy),iy.getCenter(r.center);const l=i.index,u=i.attributes.position;let d=0;for(let f=s.start,g=s.start+s.count;f<g;f++){let x=f;l&&(x=l.getX(x)),vm.fromBufferAttribute(u,x),d=Math.max(d,r.center.distanceToSquared(vm))}r.radius=Math.sqrt(d),s.boundingSphere=r}return t.copy(s.boundingSphere),t}setMatrixAt(e,t){this.validateInstanceId(e);const i=this._matricesTexture,s=this._matricesTexture.image.data;return t.toArray(s,e*16),i.needsUpdate=!0,this}getMatrixAt(e,t){return this.validateInstanceId(e),t.fromArray(this._matricesTexture.image.data,e*16)}setColorAt(e,t){return this.validateInstanceId(e),this._colorsTexture===null&&this._initColorsTexture(),t.toArray(this._colorsTexture.image.data,e*4),this._colorsTexture.needsUpdate=!0,this}getColorAt(e,t){return this.validateInstanceId(e),t.fromArray(this._colorsTexture.image.data,e*4)}setVisibleAt(e,t){return this.validateInstanceId(e),this._instanceInfo[e].visible===t?this:(this._instanceInfo[e].visible=t,this._visibilityChanged=!0,this)}getVisibleAt(e){return this.validateInstanceId(e),this._instanceInfo[e].visible}setGeometryIdAt(e,t){return this.validateInstanceId(e),this.validateGeometryId(t),this._instanceInfo[e].geometryIndex=t,this}getGeometryIdAt(e){return this.validateInstanceId(e),this._instanceInfo[e].geometryIndex}getGeometryRangeAt(e,t={}){this.validateGeometryId(e);const i=this._geometryInfo[e];return t.vertexStart=i.vertexStart,t.vertexCount=i.vertexCount,t.reservedVertexCount=i.reservedVertexCount,t.indexStart=i.indexStart,t.indexCount=i.indexCount,t.reservedIndexCount=i.reservedIndexCount,t.start=i.start,t.count=i.count,t}setInstanceCount(e){const t=this._availableInstanceIds,i=this._instanceInfo;for(t.sort(nT);t[t.length-1]===i.length-1;)i.pop(),t.pop();if(e<i.length)throw new Error(`BatchedMesh: Instance ids outside the range ${e} are being used. Cannot shrink instance count.`);const s=new Int32Array(e),r=new Int32Array(e);Ku(this._multiDrawCounts,s),Ku(this._multiDrawStarts,r),this._multiDrawCounts=s,this._multiDrawStarts=r,this._maxInstanceCount=e;const l=this._indirectTexture,u=this._matricesTexture,d=this._colorsTexture;l.dispose(),this._initIndirectTexture(),Ku(l.image.data,this._indirectTexture.image.data),u.dispose(),this._initMatricesTexture(),Ku(u.image.data,this._matricesTexture.image.data),d&&(d.dispose(),this._initColorsTexture(),Ku(d.image.data,this._colorsTexture.image.data))}setGeometrySize(e,t){const i=[...this._geometryInfo].filter(u=>u.active);if(Math.max(...i.map(u=>u.vertexStart+u.reservedVertexCount))>e)throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${t}. Cannot shrink further.`);if(this.geometry.index&&Math.max(...i.map(d=>d.indexStart+d.reservedIndexCount))>t)throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${t}. Cannot shrink further.`);const r=this.geometry;r.dispose(),this._maxVertexCount=e,this._maxIndexCount=t,this._geometryInitialized&&(this._geometryInitialized=!1,this.geometry=new li,this._initializeGeometry(r));const l=this.geometry;r.index&&Ku(r.index.array,l.index.array);for(const u in r.attributes)Ku(r.attributes[u].array,l.attributes[u].array)}raycast(e,t){const i=this._instanceInfo,s=this._geometryInfo,r=this.matrixWorld,l=this.geometry;Vr.material=this.material,Vr.geometry.index=l.index,Vr.geometry.attributes=l.attributes,Vr.geometry.boundingBox===null&&(Vr.geometry.boundingBox=new Gr),Vr.geometry.boundingSphere===null&&(Vr.geometry.boundingSphere=new Sr);for(let u=0,d=i.length;u<d;u++){if(!i[u].visible||!i[u].active)continue;const f=i[u].geometryIndex,g=s[f];Vr.geometry.setDrawRange(g.start,g.count),this.getMatrixAt(u,Vr.matrixWorld).premultiply(r),this.getBoundingBoxAt(f,Vr.geometry.boundingBox),this.getBoundingSphereAt(f,Vr.geometry.boundingSphere),Vr.raycast(e,sy);for(let x=0,v=sy.length;x<v;x++){const S=sy[x];S.object=this,S.batchId=u,t.push(S)}sy.length=0}Vr.material=null,Vr.geometry.index=null,Vr.geometry.attributes={},Vr.geometry.setDrawRange(0,1/0)}copy(e){return super.copy(e),this.geometry=e.geometry.clone(),this.perObjectFrustumCulled=e.perObjectFrustumCulled,this.sortObjects=e.sortObjects,this.boundingBox=e.boundingBox!==null?e.boundingBox.clone():null,this.boundingSphere=e.boundingSphere!==null?e.boundingSphere.clone():null,this._geometryInfo=e._geometryInfo.map(t=>({...t,boundingBox:t.boundingBox!==null?t.boundingBox.clone():null,boundingSphere:t.boundingSphere!==null?t.boundingSphere.clone():null})),this._instanceInfo=e._instanceInfo.map(t=>({...t})),this._availableInstanceIds=e._availableInstanceIds.slice(),this._availableGeometryIds=e._availableGeometryIds.slice(),this._nextIndexStart=e._nextIndexStart,this._nextVertexStart=e._nextVertexStart,this._geometryCount=e._geometryCount,this._maxInstanceCount=e._maxInstanceCount,this._maxVertexCount=e._maxVertexCount,this._maxIndexCount=e._maxIndexCount,this._geometryInitialized=e._geometryInitialized,this._multiDrawCounts=e._multiDrawCounts.slice(),this._multiDrawStarts=e._multiDrawStarts.slice(),this._indirectTexture=e._indirectTexture.clone(),this._indirectTexture.image.data=this._indirectTexture.image.data.slice(),this._matricesTexture=e._matricesTexture.clone(),this._matricesTexture.image.data=this._matricesTexture.image.data.slice(),this._colorsTexture!==null&&(this._colorsTexture=e._colorsTexture.clone(),this._colorsTexture.image.data=this._colorsTexture.image.data.slice()),this}dispose(){this.geometry.dispose(),this._matricesTexture.dispose(),this._matricesTexture=null,this._indirectTexture.dispose(),this._indirectTexture=null,this._colorsTexture!==null&&(this._colorsTexture.dispose(),this._colorsTexture=null)}onBeforeRender(e,t,i,s,r){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects)return;const l=s.getIndex(),u=l===null?1:l.array.BYTES_PER_ELEMENT,d=this._instanceInfo,f=this._multiDrawStarts,g=this._multiDrawCounts,x=this._geometryInfo,v=this.perObjectFrustumCulled,S=this._indirectTexture,T=S.image.data,E=i.isArrayCamera?_8:fN;v&&!i.isArrayCamera&&(xo.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse).multiply(this.matrixWorld),fN.setFromProjectionMatrix(xo,i.coordinateSystem,i.reversedDepth));let A=0;if(this.sortObjects){xo.copy(this.matrixWorld).invert(),vm.setFromMatrixPosition(i.matrixWorld).applyMatrix4(xo),pN.set(0,0,-1).transformDirection(i.matrixWorld).transformDirection(xo);for(let F=0,B=d.length;F<B;F++)if(d[F].visible&&d[F].active){const k=d[F].geometryIndex;this.getMatrixAt(F,xo),this.getBoundingSphereAt(k,Zu).applyMatrix4(xo);let Y=!1;if(v&&(Y=!E.intersectsSphere(Zu,i)),!Y){const $=x[k],Q=x8.subVectors(Zu.center,vm).dot(pN);iT.push($.start,$.count,Q,F)}}const w=iT.list,O=this.customSort;O===null?w.sort(r.transparent?p8:f8):O.call(this,w,i);for(let F=0,B=w.length;F<B;F++){const k=w[F];f[A]=k.start*u,g[A]=k.count,T[A]=k.index,A++}iT.reset()}else for(let w=0,O=d.length;w<O;w++)if(d[w].visible&&d[w].active){const F=d[w].geometryIndex;let B=!1;if(v&&(this.getMatrixAt(w,xo),this.getBoundingSphereAt(F,Zu).applyMatrix4(xo),B=!E.intersectsSphere(Zu,i)),!B){const k=x[F];f[A]=k.start*u,g[A]=k.count,T[A]=w,A++}}S.needsUpdate=!0,this._multiDrawCount=A,this._visibilityChanged=!1}onBeforeShadow(e,t,i,s,r,l){this.onBeforeRender(e,null,s,r,l)}}class $r extends br{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Jt(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const sv=new re,rv=new re,mN=new xn,Sm=new gp,ry=new Sr,sT=new re,gN=new re;class Qc extends Di{constructor(e=new li,t=new $r){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,i=[0];for(let s=1,r=t.count;s<r;s++)sv.fromBufferAttribute(t,s-1),rv.fromBufferAttribute(t,s),i[s]=i[s-1],i[s]+=sv.distanceTo(rv);e.setAttribute("lineDistance",new vn(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const i=this.geometry,s=this.matrixWorld,r=e.params.Line.threshold,l=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),ry.copy(i.boundingSphere),ry.applyMatrix4(s),ry.radius+=r,e.ray.intersectsSphere(ry)===!1)return;mN.copy(s).invert(),Sm.copy(e.ray).applyMatrix4(mN);const u=r/((this.scale.x+this.scale.y+this.scale.z)/3),d=u*u,f=this.isLineSegments?2:1,g=i.index,v=i.attributes.position;if(g!==null){const S=Math.max(0,l.start),T=Math.min(g.count,l.start+l.count);for(let E=S,A=T-1;E<A;E+=f){const w=g.getX(E),O=g.getX(E+1),F=oy(this,e,Sm,d,w,O,E);F&&t.push(F)}if(this.isLineLoop){const E=g.getX(T-1),A=g.getX(S),w=oy(this,e,Sm,d,E,A,T-1);w&&t.push(w)}}else{const S=Math.max(0,l.start),T=Math.min(v.count,l.start+l.count);for(let E=S,A=T-1;E<A;E+=f){const w=oy(this,e,Sm,d,E,E+1,E);w&&t.push(w)}if(this.isLineLoop){const E=oy(this,e,Sm,d,T-1,S,T-1);E&&t.push(E)}}}updateMorphTargets(){const t=this.geometry.morphAttributes,i=Object.keys(t);if(i.length>0){const s=t[i[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,l=s.length;r<l;r++){const u=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[u]=r}}}}}function oy(a,e,t,i,s,r,l){const u=a.geometry.attributes.position;if(sv.fromBufferAttribute(u,s),rv.fromBufferAttribute(u,r),t.distanceSqToSegment(sv,rv,sT,gN)>i)return;sT.applyMatrix4(a.matrixWorld);const f=e.ray.origin.distanceTo(sT);if(!(f<e.near||f>e.far))return{distance:f,point:gN.clone().applyMatrix4(a.matrixWorld),index:l,face:null,faceIndex:null,barycoord:null,object:a}}const _N=new re,xN=new re;class _l extends Qc{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,i=[];for(let s=0,r=t.count;s<r;s+=2)_N.fromBufferAttribute(t,s),xN.fromBufferAttribute(t,s+1),i[s]=s===0?0:i[s-1],i[s+1]=i[s]+_N.distanceTo(xN);e.setAttribute("lineDistance",new vn(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class _L extends Qc{constructor(e,t){super(e,t),this.isLineLoop=!0,this.type="LineLoop"}}class Jv extends br{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Jt(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const yN=new xn,oM=new gp,ay=new Sr,ly=new re;class xL extends Di{constructor(e=new li,t=new Jv){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,t){const i=this.geometry,s=this.matrixWorld,r=e.params.Points.threshold,l=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),ay.copy(i.boundingSphere),ay.applyMatrix4(s),ay.radius+=r,e.ray.intersectsSphere(ay)===!1)return;yN.copy(s).invert(),oM.copy(e.ray).applyMatrix4(yN);const u=r/((this.scale.x+this.scale.y+this.scale.z)/3),d=u*u,f=i.index,x=i.attributes.position;if(f!==null){const v=Math.max(0,l.start),S=Math.min(f.count,l.start+l.count);for(let T=v,E=S;T<E;T++){const A=f.getX(T);ly.fromBufferAttribute(x,A),vN(ly,A,d,s,e,t,this)}}else{const v=Math.max(0,l.start),S=Math.min(x.count,l.start+l.count);for(let T=v,E=S;T<E;T++)ly.fromBufferAttribute(x,T),vN(ly,T,d,s,e,t,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,i=Object.keys(t);if(i.length>0){const s=t[i[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,l=s.length;r<l;r++){const u=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[u]=r}}}}}function vN(a,e,t,i,s,r,l){const u=oM.distanceSqToPoint(a);if(u<t){const d=new re;oM.closestPointToPoint(a,d),d.applyMatrix4(i);const f=s.ray.origin.distanceTo(d);if(f<s.near||f>s.far)return;r.push({distance:f,distanceToRay:Math.sqrt(u),point:d,index:e,face:null,faceIndex:null,barycoord:null,object:l})}}class ow extends ds{constructor(e,t,i,s,r=Ni,l=Ni,u,d,f){super(e,t,i,s,r,l,u,d,f),this.isVideoTexture=!0,this.generateMipmaps=!1,this._requestVideoFrameCallbackId=0;const g=this;function x(){g.needsUpdate=!0,g._requestVideoFrameCallbackId=e.requestVideoFrameCallback(x)}"requestVideoFrameCallback"in e&&(this._requestVideoFrameCallbackId=e.requestVideoFrameCallback(x))}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;"requestVideoFrameCallback"in e===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}dispose(){this._requestVideoFrameCallbackId!==0&&this.source.data.cancelVideoFrameCallback(this._requestVideoFrameCallbackId),super.dispose()}}class v8 extends ow{constructor(e,t,i,s,r,l,u,d){super({},e,t,i,s,r,l,u,d),this.isVideoFrameTexture=!0}update(){}clone(){return new this.constructor().copy(this)}setFrame(e){this.image=e,this.needsUpdate=!0}}class aw extends ds{constructor(e,t){super({width:e,height:t}),this.isFramebufferTexture=!0,this.magFilter=Ci,this.minFilter=Ci,this.generateMipmaps=!1,this.needsUpdate=!0}}class jv extends ds{constructor(e,t,i,s,r,l,u,d,f,g,x,v){super(null,l,u,d,f,g,s,r,x,v),this.isCompressedTexture=!0,this.image={width:t,height:i},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}class S8 extends jv{constructor(e,t,i,s,r,l){super(e,t,i,r,l),this.isCompressedArrayTexture=!0,this.image.depth=s,this.wrapR=js,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class b8 extends jv{constructor(e,t,i){super(void 0,e[0].width,e[0].height,t,i,qo),this.isCompressedCubeTexture=!0,this.isCubeTexture=!0,this.image=e}}class T8 extends ds{constructor(e,t,i,s,r,l,u,d,f){super(e,t,i,s,r,l,u,d,f),this.isCanvasTexture=!0,this.needsUpdate=!0}}class Ro extends ds{constructor(e,t,i=rs,s,r,l,u=Ci,d=Ci,f,g=wo,x=1){if(g!==wo&&g!==Ao)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");const v={width:e,height:t,depth:x};super(v,s,r,l,u,d,g,i,f),this.isDepthTexture=!0,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.source=new zc(Object.assign({},e.image)),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}}class Qv extends li{constructor(e=1,t=1,i=4,s=8,r=1){super(),this.type="CapsuleGeometry",this.parameters={radius:e,height:t,capSegments:i,radialSegments:s,heightSegments:r},t=Math.max(0,t),i=Math.max(1,Math.floor(i)),s=Math.max(3,Math.floor(s)),r=Math.max(1,Math.floor(r));const l=[],u=[],d=[],f=[],g=t/2,x=Math.PI/2*e,v=t,S=2*x+v,T=i*2+r,E=s+1,A=new re,w=new re;for(let O=0;O<=T;O++){let F=0,B=0,k=0,Y=0;if(O<=i){const z=O/i,q=z*Math.PI/2;B=-g-e*Math.cos(q),k=e*Math.sin(q),Y=-e*Math.cos(q),F=z*x}else if(O<=i+r){const z=(O-i)/r;B=-g+z*t,k=e,Y=0,F=x+z*v}else{const z=(O-i-r)/i,q=z*Math.PI/2;B=g+e*Math.sin(q),k=e*Math.cos(q),Y=e*Math.sin(q),F=x+v+z*x}const $=Math.max(0,Math.min(1,F/S));let Q=0;O===0?Q=.5/s:O===T&&(Q=-.5/s);for(let z=0;z<=s;z++){const q=z/s,oe=q*Math.PI*2,Ce=Math.sin(oe),Ne=Math.cos(oe);w.x=-k*Ne,w.y=B,w.z=k*Ce,u.push(w.x,w.y,w.z),A.set(-k*Ne,Y,k*Ce),A.normalize(),d.push(A.x,A.y,A.z),f.push(q+Q,$)}if(O>0){const z=(O-1)*E;for(let q=0;q<s;q++){const oe=z+q,Ce=z+q+1,Ne=O*E+q,Oe=O*E+q+1;l.push(oe,Ce,Ne),l.push(Ce,Oe,Ne)}}}this.setIndex(l),this.setAttribute("position",new vn(u,3)),this.setAttribute("normal",new vn(d,3)),this.setAttribute("uv",new vn(f,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Qv(e.radius,e.height,e.capSegments,e.radialSegments,e.heightSegments)}}class e0 extends li{constructor(e=1,t=32,i=0,s=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:i,thetaLength:s},t=Math.max(3,t);const r=[],l=[],u=[],d=[],f=new re,g=new it;l.push(0,0,0),u.push(0,0,1),d.push(.5,.5);for(let x=0,v=3;x<=t;x++,v+=3){const S=i+x/t*s;f.x=e*Math.cos(S),f.y=e*Math.sin(S),l.push(f.x,f.y,f.z),u.push(0,0,1),g.x=(l[v]/e+1)/2,g.y=(l[v+1]/e+1)/2,d.push(g.x,g.y)}for(let x=1;x<=t;x++)r.push(x,x+1,0);this.setIndex(r),this.setAttribute("position",new vn(l,3)),this.setAttribute("normal",new vn(u,3)),this.setAttribute("uv",new vn(d,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new e0(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class _p extends li{constructor(e=1,t=1,i=1,s=32,r=1,l=!1,u=0,d=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:i,radialSegments:s,heightSegments:r,openEnded:l,thetaStart:u,thetaLength:d};const f=this;s=Math.floor(s),r=Math.floor(r);const g=[],x=[],v=[],S=[];let T=0;const E=[],A=i/2;let w=0;O(),l===!1&&(e>0&&F(!0),t>0&&F(!1)),this.setIndex(g),this.setAttribute("position",new vn(x,3)),this.setAttribute("normal",new vn(v,3)),this.setAttribute("uv",new vn(S,2));function O(){const B=new re,k=new re;let Y=0;const $=(t-e)/i;for(let Q=0;Q<=r;Q++){const z=[],q=Q/r,oe=q*(t-e)+e;for(let Ce=0;Ce<=s;Ce++){const Ne=Ce/s,Oe=Ne*d+u,Be=Math.sin(Oe),He=Math.cos(Oe);k.x=oe*Be,k.y=-q*i+A,k.z=oe*He,x.push(k.x,k.y,k.z),B.set(Be,$,He).normalize(),v.push(B.x,B.y,B.z),S.push(Ne,1-q),z.push(T++)}E.push(z)}for(let Q=0;Q<s;Q++)for(let z=0;z<r;z++){const q=E[z][Q],oe=E[z+1][Q],Ce=E[z+1][Q+1],Ne=E[z][Q+1];(e>0||z!==0)&&(g.push(q,oe,Ne),Y+=3),(t>0||z!==r-1)&&(g.push(oe,Ce,Ne),Y+=3)}f.addGroup(w,Y,0),w+=Y}function F(B){const k=T,Y=new it,$=new re;let Q=0;const z=B===!0?e:t,q=B===!0?1:-1;for(let Ce=1;Ce<=s;Ce++)x.push(0,A*q,0),v.push(0,q,0),S.push(.5,.5),T++;const oe=T;for(let Ce=0;Ce<=s;Ce++){const Oe=Ce/s*d+u,Be=Math.cos(Oe),He=Math.sin(Oe);$.x=z*He,$.y=A*q,$.z=z*Be,x.push($.x,$.y,$.z),v.push(0,q,0),Y.x=Be*.5+.5,Y.y=He*.5*q+.5,S.push(Y.x,Y.y),T++}for(let Ce=0;Ce<s;Ce++){const Ne=k+Ce,Oe=oe+Ce;B===!0?g.push(Oe,Oe+1,Ne):g.push(Oe+1,Oe,Ne),Q+=3}f.addGroup(w,Q,B===!0?1:2),w+=Q}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new _p(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class Og extends _p{constructor(e=1,t=1,i=32,s=1,r=!1,l=0,u=Math.PI*2){super(0,e,t,i,s,r,l,u),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:i,heightSegments:s,openEnded:r,thetaStart:l,thetaLength:u}}static fromJSON(e){return new Og(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class nu extends li{constructor(e=[],t=[],i=1,s=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:i,detail:s};const r=[],l=[];u(s),f(i),g(),this.setAttribute("position",new vn(r,3)),this.setAttribute("normal",new vn(r.slice(),3)),this.setAttribute("uv",new vn(l,2)),s===0?this.computeVertexNormals():this.normalizeNormals();function u(O){const F=new re,B=new re,k=new re;for(let Y=0;Y<t.length;Y+=3)S(t[Y+0],F),S(t[Y+1],B),S(t[Y+2],k),d(F,B,k,O)}function d(O,F,B,k){const Y=k+1,$=[];for(let Q=0;Q<=Y;Q++){$[Q]=[];const z=O.clone().lerp(B,Q/Y),q=F.clone().lerp(B,Q/Y),oe=Y-Q;for(let Ce=0;Ce<=oe;Ce++)Ce===0&&Q===Y?$[Q][Ce]=z:$[Q][Ce]=z.clone().lerp(q,Ce/oe)}for(let Q=0;Q<Y;Q++)for(let z=0;z<2*(Y-Q)-1;z++){const q=Math.floor(z/2);z%2===0?(v($[Q][q+1]),v($[Q+1][q]),v($[Q][q])):(v($[Q][q+1]),v($[Q+1][q+1]),v($[Q+1][q]))}}function f(O){const F=new re;for(let B=0;B<r.length;B+=3)F.x=r[B+0],F.y=r[B+1],F.z=r[B+2],F.normalize().multiplyScalar(O),r[B+0]=F.x,r[B+1]=F.y,r[B+2]=F.z}function g(){const O=new re;for(let F=0;F<r.length;F+=3){O.x=r[F+0],O.y=r[F+1],O.z=r[F+2];const B=A(O)/2/Math.PI+.5,k=w(O)/Math.PI+.5;l.push(B,1-k)}T(),x()}function x(){for(let O=0;O<l.length;O+=6){const F=l[O+0],B=l[O+2],k=l[O+4],Y=Math.max(F,B,k),$=Math.min(F,B,k);Y>.9&&$<.1&&(F<.2&&(l[O+0]+=1),B<.2&&(l[O+2]+=1),k<.2&&(l[O+4]+=1))}}function v(O){r.push(O.x,O.y,O.z)}function S(O,F){const B=O*3;F.x=e[B+0],F.y=e[B+1],F.z=e[B+2]}function T(){const O=new re,F=new re,B=new re,k=new re,Y=new it,$=new it,Q=new it;for(let z=0,q=0;z<r.length;z+=9,q+=6){O.set(r[z+0],r[z+1],r[z+2]),F.set(r[z+3],r[z+4],r[z+5]),B.set(r[z+6],r[z+7],r[z+8]),Y.set(l[q+0],l[q+1]),$.set(l[q+2],l[q+3]),Q.set(l[q+4],l[q+5]),k.copy(O).add(F).add(B).divideScalar(3);const oe=A(k);E(Y,q+0,O,oe),E($,q+2,F,oe),E(Q,q+4,B,oe)}}function E(O,F,B,k){k<0&&O.x===1&&(l[F]=O.x-1),B.x===0&&B.z===0&&(l[F]=k/2/Math.PI+.5)}function A(O){return Math.atan2(O.z,-O.x)}function w(O){return Math.atan2(-O.y,Math.sqrt(O.x*O.x+O.z*O.z))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new nu(e.vertices,e.indices,e.radius,e.details)}}class t0 extends nu{constructor(e=1,t=0){const i=(1+Math.sqrt(5))/2,s=1/i,r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-s,-i,0,-s,i,0,s,-i,0,s,i,-s,-i,0,-s,i,0,s,-i,0,s,i,0,-i,0,-s,i,0,-s,-i,0,s,i,0,s],l=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(r,l,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new t0(e.radius,e.detail)}}const cy=new re,uy=new re,rT=new re,hy=new bo;class yL extends li{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const s=Math.pow(10,4),r=Math.cos(wh*t),l=e.getIndex(),u=e.getAttribute("position"),d=l?l.count:u.count,f=[0,0,0],g=["a","b","c"],x=new Array(3),v={},S=[];for(let T=0;T<d;T+=3){l?(f[0]=l.getX(T),f[1]=l.getX(T+1),f[2]=l.getX(T+2)):(f[0]=T,f[1]=T+1,f[2]=T+2);const{a:E,b:A,c:w}=hy;if(E.fromBufferAttribute(u,f[0]),A.fromBufferAttribute(u,f[1]),w.fromBufferAttribute(u,f[2]),hy.getNormal(rT),x[0]=`${Math.round(E.x*s)},${Math.round(E.y*s)},${Math.round(E.z*s)}`,x[1]=`${Math.round(A.x*s)},${Math.round(A.y*s)},${Math.round(A.z*s)}`,x[2]=`${Math.round(w.x*s)},${Math.round(w.y*s)},${Math.round(w.z*s)}`,!(x[0]===x[1]||x[1]===x[2]||x[2]===x[0]))for(let O=0;O<3;O++){const F=(O+1)%3,B=x[O],k=x[F],Y=hy[g[O]],$=hy[g[F]],Q=`${B}_${k}`,z=`${k}_${B}`;z in v&&v[z]?(rT.dot(v[z].normal)<=r&&(S.push(Y.x,Y.y,Y.z),S.push($.x,$.y,$.z)),v[z]=null):Q in v||(v[Q]={index0:f[O],index1:f[F],normal:rT.clone()})}}for(const T in v)if(v[T]){const{index0:E,index1:A}=v[T];cy.fromBufferAttribute(u,E),uy.fromBufferAttribute(u,A),S.push(cy.x,cy.y,cy.z),S.push(uy.x,uy.y,uy.z)}this.setAttribute("position",new vn(S,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}class Xa{constructor(){this.type="Curve",this.arcLengthDivisions=200,this.needsUpdate=!1,this.cacheArcLengths=null}getPoint(){console.warn("THREE.Curve: .getPoint() not implemented.")}getPointAt(e,t){const i=this.getUtoTmapping(e);return this.getPoint(i,t)}getPoints(e=5){const t=[];for(let i=0;i<=e;i++)t.push(this.getPoint(i/e));return t}getSpacedPoints(e=5){const t=[];for(let i=0;i<=e;i++)t.push(this.getPointAt(i/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let i,s=this.getPoint(0),r=0;t.push(0);for(let l=1;l<=e;l++)i=this.getPoint(l/e),r+=i.distanceTo(s),t.push(r),s=i;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t=null){const i=this.getLengths();let s=0;const r=i.length;let l;t?l=t:l=e*i[r-1];let u=0,d=r-1,f;for(;u<=d;)if(s=Math.floor(u+(d-u)/2),f=i[s]-l,f<0)u=s+1;else if(f>0)d=s-1;else{d=s;break}if(s=d,i[s]===l)return s/(r-1);const g=i[s],v=i[s+1]-g,S=(l-g)/v;return(s+S)/(r-1)}getTangent(e,t){let s=e-1e-4,r=e+1e-4;s<0&&(s=0),r>1&&(r=1);const l=this.getPoint(s),u=this.getPoint(r),d=t||(l.isVector2?new it:new re);return d.copy(u).sub(l).normalize(),d}getTangentAt(e,t){const i=this.getUtoTmapping(e);return this.getTangent(i,t)}computeFrenetFrames(e,t=!1){const i=new re,s=[],r=[],l=[],u=new re,d=new xn;for(let S=0;S<=e;S++){const T=S/e;s[S]=this.getTangentAt(T,new re)}r[0]=new re,l[0]=new re;let f=Number.MAX_VALUE;const g=Math.abs(s[0].x),x=Math.abs(s[0].y),v=Math.abs(s[0].z);g<=f&&(f=g,i.set(1,0,0)),x<=f&&(f=x,i.set(0,1,0)),v<=f&&i.set(0,0,1),u.crossVectors(s[0],i).normalize(),r[0].crossVectors(s[0],u),l[0].crossVectors(s[0],r[0]);for(let S=1;S<=e;S++){if(r[S]=r[S-1].clone(),l[S]=l[S-1].clone(),u.crossVectors(s[S-1],s[S]),u.length()>Number.EPSILON){u.normalize();const T=Math.acos(jn(s[S-1].dot(s[S]),-1,1));r[S].applyMatrix4(d.makeRotationAxis(u,T))}l[S].crossVectors(s[S],r[S])}if(t===!0){let S=Math.acos(jn(r[0].dot(r[e]),-1,1));S/=e,s[0].dot(u.crossVectors(r[0],r[e]))>0&&(S=-S);for(let T=1;T<=e;T++)r[T].applyMatrix4(d.makeRotationAxis(s[T],S*T)),l[T].crossVectors(s[T],r[T])}return{tangents:s,normals:r,binormals:l}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.7,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class n0 extends Xa{constructor(e=0,t=0,i=1,s=1,r=0,l=Math.PI*2,u=!1,d=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=i,this.yRadius=s,this.aStartAngle=r,this.aEndAngle=l,this.aClockwise=u,this.aRotation=d}getPoint(e,t=new it){const i=t,s=Math.PI*2;let r=this.aEndAngle-this.aStartAngle;const l=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=s;for(;r>s;)r-=s;r<Number.EPSILON&&(l?r=0:r=s),this.aClockwise===!0&&!l&&(r===s?r=-s:r=r-s);const u=this.aStartAngle+e*r;let d=this.aX+this.xRadius*Math.cos(u),f=this.aY+this.yRadius*Math.sin(u);if(this.aRotation!==0){const g=Math.cos(this.aRotation),x=Math.sin(this.aRotation),v=d-this.aX,S=f-this.aY;d=v*g-S*x+this.aX,f=v*x+S*g+this.aY}return i.set(d,f)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}class vL extends n0{constructor(e,t,i,s,r,l){super(e,t,i,i,s,r,l),this.isArcCurve=!0,this.type="ArcCurve"}}function lw(){let a=0,e=0,t=0,i=0;function s(r,l,u,d){a=r,e=u,t=-3*r+3*l-2*u-d,i=2*r-2*l+u+d}return{initCatmullRom:function(r,l,u,d,f){s(l,u,f*(u-r),f*(d-l))},initNonuniformCatmullRom:function(r,l,u,d,f,g,x){let v=(l-r)/f-(u-r)/(f+g)+(u-l)/g,S=(u-l)/g-(d-l)/(g+x)+(d-u)/x;v*=g,S*=g,s(l,u,v,S)},calc:function(r){const l=r*r,u=l*r;return a+e*r+t*l+i*u}}}const dy=new re,oT=new lw,aT=new lw,lT=new lw;class SL extends Xa{constructor(e=[],t=!1,i="centripetal",s=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=i,this.tension=s}getPoint(e,t=new re){const i=t,s=this.points,r=s.length,l=(r-(this.closed?0:1))*e;let u=Math.floor(l),d=l-u;this.closed?u+=u>0?0:(Math.floor(Math.abs(u)/r)+1)*r:d===0&&u===r-1&&(u=r-2,d=1);let f,g;this.closed||u>0?f=s[(u-1)%r]:(dy.subVectors(s[0],s[1]).add(s[0]),f=dy);const x=s[u%r],v=s[(u+1)%r];if(this.closed||u+2<r?g=s[(u+2)%r]:(dy.subVectors(s[r-1],s[r-2]).add(s[r-1]),g=dy),this.curveType==="centripetal"||this.curveType==="chordal"){const S=this.curveType==="chordal"?.5:.25;let T=Math.pow(f.distanceToSquared(x),S),E=Math.pow(x.distanceToSquared(v),S),A=Math.pow(v.distanceToSquared(g),S);E<1e-4&&(E=1),T<1e-4&&(T=E),A<1e-4&&(A=E),oT.initNonuniformCatmullRom(f.x,x.x,v.x,g.x,T,E,A),aT.initNonuniformCatmullRom(f.y,x.y,v.y,g.y,T,E,A),lT.initNonuniformCatmullRom(f.z,x.z,v.z,g.z,T,E,A)}else this.curveType==="catmullrom"&&(oT.initCatmullRom(f.x,x.x,v.x,g.x,this.tension),aT.initCatmullRom(f.y,x.y,v.y,g.y,this.tension),lT.initCatmullRom(f.z,x.z,v.z,g.z,this.tension));return i.set(oT.calc(d),aT.calc(d),lT.calc(d)),i}copy(e){super.copy(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const s=e.points[t];this.points.push(s.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,i=this.points.length;t<i;t++){const s=this.points[t];e.points.push(s.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const s=e.points[t];this.points.push(new re().fromArray(s))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}function SN(a,e,t,i,s){const r=(i-e)*.5,l=(s-t)*.5,u=a*a,d=a*u;return(2*t-2*i+r+l)*d+(-3*t+3*i-2*r-l)*u+r*a+t}function M8(a,e){const t=1-a;return t*t*e}function w8(a,e){return 2*(1-a)*a*e}function A8(a,e){return a*a*e}function qm(a,e,t,i){return M8(a,e)+w8(a,t)+A8(a,i)}function E8(a,e){const t=1-a;return t*t*t*e}function R8(a,e){const t=1-a;return 3*t*t*a*e}function C8(a,e){return 3*(1-a)*a*a*e}function N8(a,e){return a*a*a*e}function Ym(a,e,t,i,s){return E8(a,e)+R8(a,t)+C8(a,i)+N8(a,s)}class cw extends Xa{constructor(e=new it,t=new it,i=new it,s=new it){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=i,this.v3=s}getPoint(e,t=new it){const i=t,s=this.v0,r=this.v1,l=this.v2,u=this.v3;return i.set(Ym(e,s.x,r.x,l.x,u.x),Ym(e,s.y,r.y,l.y,u.y)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class bL extends Xa{constructor(e=new re,t=new re,i=new re,s=new re){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=i,this.v3=s}getPoint(e,t=new re){const i=t,s=this.v0,r=this.v1,l=this.v2,u=this.v3;return i.set(Ym(e,s.x,r.x,l.x,u.x),Ym(e,s.y,r.y,l.y,u.y),Ym(e,s.z,r.z,l.z,u.z)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class uw extends Xa{constructor(e=new it,t=new it){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new it){const i=t;return e===1?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(e).add(this.v1)),i}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new it){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class TL extends Xa{constructor(e=new re,t=new re){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new re){const i=t;return e===1?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(e).add(this.v1)),i}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new re){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class hw extends Xa{constructor(e=new it,t=new it,i=new it){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=i}getPoint(e,t=new it){const i=t,s=this.v0,r=this.v1,l=this.v2;return i.set(qm(e,s.x,r.x,l.x),qm(e,s.y,r.y,l.y)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class dw extends Xa{constructor(e=new re,t=new re,i=new re){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=i}getPoint(e,t=new re){const i=t,s=this.v0,r=this.v1,l=this.v2;return i.set(qm(e,s.x,r.x,l.x),qm(e,s.y,r.y,l.y),qm(e,s.z,r.z,l.z)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class fw extends Xa{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new it){const i=t,s=this.points,r=(s.length-1)*e,l=Math.floor(r),u=r-l,d=s[l===0?l:l-1],f=s[l],g=s[l>s.length-2?s.length-1:l+1],x=s[l>s.length-3?s.length-1:l+2];return i.set(SN(u,d.x,f.x,g.x,x.x),SN(u,d.y,f.y,g.y,x.y)),i}copy(e){super.copy(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const s=e.points[t];this.points.push(s.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,i=this.points.length;t<i;t++){const s=this.points[t];e.points.push(s.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const s=e.points[t];this.points.push(new it().fromArray(s))}return this}}var ov=Object.freeze({__proto__:null,ArcCurve:vL,CatmullRomCurve3:SL,CubicBezierCurve:cw,CubicBezierCurve3:bL,EllipseCurve:n0,LineCurve:uw,LineCurve3:TL,QuadraticBezierCurve:hw,QuadraticBezierCurve3:dw,SplineCurve:fw});class ML extends Xa{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(t)){const i=e.isVector2===!0?"LineCurve":"LineCurve3";this.curves.push(new ov[i](t,e))}return this}getPoint(e,t){const i=e*this.getLength(),s=this.getCurveLengths();let r=0;for(;r<s.length;){if(s[r]>=i){const l=s[r]-i,u=this.curves[r],d=u.getLength(),f=d===0?0:1-l/d;return u.getPointAt(f,t)}r++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let i=0,s=this.curves.length;i<s;i++)t+=this.curves[i].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let i=0;i<=e;i++)t.push(this.getPoint(i/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let i;for(let s=0,r=this.curves;s<r.length;s++){const l=r[s],u=l.isEllipseCurve?e*2:l.isLineCurve||l.isLineCurve3?1:l.isSplineCurve?e*l.points.length:e,d=l.getPoints(u);for(let f=0;f<d.length;f++){const g=d[f];i&&i.equals(g)||(t.push(g),i=g)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,i=e.curves.length;t<i;t++){const s=e.curves[t];this.curves.push(s.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,i=this.curves.length;t<i;t++){const s=this.curves[t];e.curves.push(s.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,i=e.curves.length;t<i;t++){const s=e.curves[t];this.curves.push(new ov[s.type]().fromJSON(s))}return this}}class av extends ML{constructor(e){super(),this.type="Path",this.currentPoint=new it,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,i=e.length;t<i;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const i=new uw(this.currentPoint.clone(),new it(e,t));return this.curves.push(i),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,i,s){const r=new hw(this.currentPoint.clone(),new it(e,t),new it(i,s));return this.curves.push(r),this.currentPoint.set(i,s),this}bezierCurveTo(e,t,i,s,r,l){const u=new cw(this.currentPoint.clone(),new it(e,t),new it(i,s),new it(r,l));return this.curves.push(u),this.currentPoint.set(r,l),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),i=new fw(t);return this.curves.push(i),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,i,s,r,l){const u=this.currentPoint.x,d=this.currentPoint.y;return this.absarc(e+u,t+d,i,s,r,l),this}absarc(e,t,i,s,r,l){return this.absellipse(e,t,i,i,s,r,l),this}ellipse(e,t,i,s,r,l,u,d){const f=this.currentPoint.x,g=this.currentPoint.y;return this.absellipse(e+f,t+g,i,s,r,l,u,d),this}absellipse(e,t,i,s,r,l,u,d){const f=new n0(e,t,i,s,r,l,u,d);if(this.curves.length>0){const x=f.getPoint(0);x.equals(this.currentPoint)||this.lineTo(x.x,x.y)}this.curves.push(f);const g=f.getPoint(1);return this.currentPoint.copy(g),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class Ah extends av{constructor(e){super(e),this.uuid=$o(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let i=0,s=this.holes.length;i<s;i++)t[i]=this.holes[i].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,i=e.holes.length;t<i;t++){const s=e.holes[t];this.holes.push(s.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,i=this.holes.length;t<i;t++){const s=this.holes[t];e.holes.push(s.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,i=e.holes.length;t<i;t++){const s=e.holes[t];this.holes.push(new av().fromJSON(s))}return this}}function P8(a,e,t=2){const i=e&&e.length,s=i?e[0]*t:a.length;let r=wL(a,0,s,t,!0);const l=[];if(!r||r.next===r.prev)return l;let u,d,f;if(i&&(r=F8(a,e,r,t)),a.length>80*t){u=1/0,d=1/0;let g=-1/0,x=-1/0;for(let v=t;v<s;v+=t){const S=a[v],T=a[v+1];S<u&&(u=S),T<d&&(d=T),S>g&&(g=S),T>x&&(x=T)}f=Math.max(g-u,x-d),f=f!==0?32767/f:0}return ag(r,l,t,u,d,f,0),l}function wL(a,e,t,i,s){let r;if(s===q8(a,e,t,i)>0)for(let l=e;l<t;l+=i)r=bN(l/i|0,a[l],a[l+1],r);else for(let l=t-i;l>=e;l-=i)r=bN(l/i|0,a[l],a[l+1],r);return r&&op(r,r.next)&&(cg(r),r=r.next),r}function Qh(a,e){if(!a)return a;e||(e=a);let t=a,i;do if(i=!1,!t.steiner&&(op(t,t.next)||Cs(t.prev,t,t.next)===0)){if(cg(t),t=e=t.prev,t===t.next)break;i=!0}else t=t.next;while(i||t!==e);return e}function ag(a,e,t,i,s,r,l){if(!a)return;!l&&r&&k8(a,i,s,r);let u=a;for(;a.prev!==a.next;){const d=a.prev,f=a.next;if(r?L8(a,i,s,r):I8(a)){e.push(d.i,a.i,f.i),cg(a),a=f.next,u=f.next;continue}if(a=f,a===u){l?l===1?(a=D8(Qh(a),e),ag(a,e,t,i,s,r,2)):l===2&&U8(a,e,t,i,s,r):ag(Qh(a),e,t,i,s,r,1);break}}}function I8(a){const e=a.prev,t=a,i=a.next;if(Cs(e,t,i)>=0)return!1;const s=e.x,r=t.x,l=i.x,u=e.y,d=t.y,f=i.y,g=Math.min(s,r,l),x=Math.min(u,d,f),v=Math.max(s,r,l),S=Math.max(u,d,f);let T=i.next;for(;T!==e;){if(T.x>=g&&T.x<=v&&T.y>=x&&T.y<=S&&Vm(s,u,r,d,l,f,T.x,T.y)&&Cs(T.prev,T,T.next)>=0)return!1;T=T.next}return!0}function L8(a,e,t,i){const s=a.prev,r=a,l=a.next;if(Cs(s,r,l)>=0)return!1;const u=s.x,d=r.x,f=l.x,g=s.y,x=r.y,v=l.y,S=Math.min(u,d,f),T=Math.min(g,x,v),E=Math.max(u,d,f),A=Math.max(g,x,v),w=aM(S,T,e,t,i),O=aM(E,A,e,t,i);let F=a.prevZ,B=a.nextZ;for(;F&&F.z>=w&&B&&B.z<=O;){if(F.x>=S&&F.x<=E&&F.y>=T&&F.y<=A&&F!==s&&F!==l&&Vm(u,g,d,x,f,v,F.x,F.y)&&Cs(F.prev,F,F.next)>=0||(F=F.prevZ,B.x>=S&&B.x<=E&&B.y>=T&&B.y<=A&&B!==s&&B!==l&&Vm(u,g,d,x,f,v,B.x,B.y)&&Cs(B.prev,B,B.next)>=0))return!1;B=B.nextZ}for(;F&&F.z>=w;){if(F.x>=S&&F.x<=E&&F.y>=T&&F.y<=A&&F!==s&&F!==l&&Vm(u,g,d,x,f,v,F.x,F.y)&&Cs(F.prev,F,F.next)>=0)return!1;F=F.prevZ}for(;B&&B.z<=O;){if(B.x>=S&&B.x<=E&&B.y>=T&&B.y<=A&&B!==s&&B!==l&&Vm(u,g,d,x,f,v,B.x,B.y)&&Cs(B.prev,B,B.next)>=0)return!1;B=B.nextZ}return!0}function D8(a,e){let t=a;do{const i=t.prev,s=t.next.next;!op(i,s)&&EL(i,t,t.next,s)&&lg(i,s)&&lg(s,i)&&(e.push(i.i,t.i,s.i),cg(t),cg(t.next),t=a=s),t=t.next}while(t!==a);return Qh(t)}function U8(a,e,t,i,s,r){let l=a;do{let u=l.next.next;for(;u!==l.prev;){if(l.i!==u.i&&W8(l,u)){let d=RL(l,u);l=Qh(l,l.next),d=Qh(d,d.next),ag(l,e,t,i,s,r,0),ag(d,e,t,i,s,r,0);return}u=u.next}l=l.next}while(l!==a)}function F8(a,e,t,i){const s=[];for(let r=0,l=e.length;r<l;r++){const u=e[r]*i,d=r<l-1?e[r+1]*i:a.length,f=wL(a,u,d,i,!1);f===f.next&&(f.steiner=!0),s.push(H8(f))}s.sort(B8);for(let r=0;r<s.length;r++)t=O8(s[r],t);return t}function B8(a,e){let t=a.x-e.x;if(t===0&&(t=a.y-e.y,t===0)){const i=(a.next.y-a.y)/(a.next.x-a.x),s=(e.next.y-e.y)/(e.next.x-e.x);t=i-s}return t}function O8(a,e){const t=V8(a,e);if(!t)return e;const i=RL(t,a);return Qh(i,i.next),Qh(t,t.next)}function V8(a,e){let t=e;const i=a.x,s=a.y;let r=-1/0,l;if(op(a,t))return t;do{if(op(a,t.next))return t.next;if(s<=t.y&&s>=t.next.y&&t.next.y!==t.y){const x=t.x+(s-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(x<=i&&x>r&&(r=x,l=t.x<t.next.x?t:t.next,x===i))return l}t=t.next}while(t!==e);if(!l)return null;const u=l,d=l.x,f=l.y;let g=1/0;t=l;do{if(i>=t.x&&t.x>=d&&i!==t.x&&AL(s<f?i:r,s,d,f,s<f?r:i,s,t.x,t.y)){const x=Math.abs(s-t.y)/(i-t.x);lg(t,a)&&(x<g||x===g&&(t.x>l.x||t.x===l.x&&z8(l,t)))&&(l=t,g=x)}t=t.next}while(t!==u);return l}function z8(a,e){return Cs(a.prev,a,e.prev)<0&&Cs(e.next,a,a.next)<0}function k8(a,e,t,i){let s=a;do s.z===0&&(s.z=aM(s.x,s.y,e,t,i)),s.prevZ=s.prev,s.nextZ=s.next,s=s.next;while(s!==a);s.prevZ.nextZ=null,s.prevZ=null,G8(s)}function G8(a){let e,t=1;do{let i=a,s;a=null;let r=null;for(e=0;i;){e++;let l=i,u=0;for(let f=0;f<t&&(u++,l=l.nextZ,!!l);f++);let d=t;for(;u>0||d>0&&l;)u!==0&&(d===0||!l||i.z<=l.z)?(s=i,i=i.nextZ,u--):(s=l,l=l.nextZ,d--),r?r.nextZ=s:a=s,s.prevZ=r,r=s;i=l}r.nextZ=null,t*=2}while(e>1);return a}function aM(a,e,t,i,s){return a=(a-t)*s|0,e=(e-i)*s|0,a=(a|a<<8)&16711935,a=(a|a<<4)&252645135,a=(a|a<<2)&858993459,a=(a|a<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,a|e<<1}function H8(a){let e=a,t=a;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==a);return t}function AL(a,e,t,i,s,r,l,u){return(s-l)*(e-u)>=(a-l)*(r-u)&&(a-l)*(i-u)>=(t-l)*(e-u)&&(t-l)*(r-u)>=(s-l)*(i-u)}function Vm(a,e,t,i,s,r,l,u){return!(a===l&&e===u)&&AL(a,e,t,i,s,r,l,u)}function W8(a,e){return a.next.i!==e.i&&a.prev.i!==e.i&&!$8(a,e)&&(lg(a,e)&&lg(e,a)&&X8(a,e)&&(Cs(a.prev,a,e.prev)||Cs(a,e.prev,e))||op(a,e)&&Cs(a.prev,a,a.next)>0&&Cs(e.prev,e,e.next)>0)}function Cs(a,e,t){return(e.y-a.y)*(t.x-e.x)-(e.x-a.x)*(t.y-e.y)}function op(a,e){return a.x===e.x&&a.y===e.y}function EL(a,e,t,i){const s=py(Cs(a,e,t)),r=py(Cs(a,e,i)),l=py(Cs(t,i,a)),u=py(Cs(t,i,e));return!!(s!==r&&l!==u||s===0&&fy(a,t,e)||r===0&&fy(a,i,e)||l===0&&fy(t,a,i)||u===0&&fy(t,e,i))}function fy(a,e,t){return e.x<=Math.max(a.x,t.x)&&e.x>=Math.min(a.x,t.x)&&e.y<=Math.max(a.y,t.y)&&e.y>=Math.min(a.y,t.y)}function py(a){return a>0?1:a<0?-1:0}function $8(a,e){let t=a;do{if(t.i!==a.i&&t.next.i!==a.i&&t.i!==e.i&&t.next.i!==e.i&&EL(t,t.next,a,e))return!0;t=t.next}while(t!==a);return!1}function lg(a,e){return Cs(a.prev,a,a.next)<0?Cs(a,e,a.next)>=0&&Cs(a,a.prev,e)>=0:Cs(a,e,a.prev)<0||Cs(a,a.next,e)<0}function X8(a,e){let t=a,i=!1;const s=(a.x+e.x)/2,r=(a.y+e.y)/2;do t.y>r!=t.next.y>r&&t.next.y!==t.y&&s<(t.next.x-t.x)*(r-t.y)/(t.next.y-t.y)+t.x&&(i=!i),t=t.next;while(t!==a);return i}function RL(a,e){const t=lM(a.i,a.x,a.y),i=lM(e.i,e.x,e.y),s=a.next,r=e.prev;return a.next=e,e.prev=a,t.next=s,s.prev=t,i.next=t,t.prev=i,r.next=i,i.prev=r,i}function bN(a,e,t,i){const s=lM(a,e,t);return i?(s.next=i.next,s.prev=i,i.next.prev=s,i.next=s):(s.prev=s,s.next=s),s}function cg(a){a.next.prev=a.prev,a.prev.next=a.next,a.prevZ&&(a.prevZ.nextZ=a.nextZ),a.nextZ&&(a.nextZ.prevZ=a.prevZ)}function lM(a,e,t){return{i:a,x:e,y:t,prev:null,next:null,z:0,prevZ:null,nextZ:null,steiner:!1}}function q8(a,e,t,i){let s=0;for(let r=e,l=t-i;r<t;r+=i)s+=(a[l]-a[r])*(a[r+1]+a[l+1]),l=r;return s}class Y8{static triangulate(e,t,i=2){return P8(e,t,i)}}class Ba{static area(e){const t=e.length;let i=0;for(let s=t-1,r=0;r<t;s=r++)i+=e[s].x*e[r].y-e[r].x*e[s].y;return i*.5}static isClockWise(e){return Ba.area(e)<0}static triangulateShape(e,t){const i=[],s=[],r=[];TN(e),MN(i,e);let l=e.length;t.forEach(TN);for(let d=0;d<t.length;d++)s.push(l),l+=t[d].length,MN(i,t[d]);const u=Y8.triangulate(i,s);for(let d=0;d<u.length;d+=3)r.push(u.slice(d,d+3));return r}}function TN(a){const e=a.length;e>2&&a[e-1].equals(a[0])&&a.pop()}function MN(a,e){for(let t=0;t<e.length;t++)a.push(e[t].x),a.push(e[t].y)}class i0 extends li{constructor(e=new Ah([new it(.5,.5),new it(-.5,.5),new it(-.5,-.5),new it(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const i=this,s=[],r=[];for(let u=0,d=e.length;u<d;u++){const f=e[u];l(f)}this.setAttribute("position",new vn(s,3)),this.setAttribute("uv",new vn(r,2)),this.computeVertexNormals();function l(u){const d=[],f=t.curveSegments!==void 0?t.curveSegments:12,g=t.steps!==void 0?t.steps:1,x=t.depth!==void 0?t.depth:1;let v=t.bevelEnabled!==void 0?t.bevelEnabled:!0,S=t.bevelThickness!==void 0?t.bevelThickness:.2,T=t.bevelSize!==void 0?t.bevelSize:S-.1,E=t.bevelOffset!==void 0?t.bevelOffset:0,A=t.bevelSegments!==void 0?t.bevelSegments:3;const w=t.extrudePath,O=t.UVGenerator!==void 0?t.UVGenerator:Z8;let F,B=!1,k,Y,$,Q;w&&(F=w.getSpacedPoints(g),B=!0,v=!1,k=w.computeFrenetFrames(g,!1),Y=new re,$=new re,Q=new re),v||(A=0,S=0,T=0,E=0);const z=u.extractPoints(f);let q=z.shape;const oe=z.holes;if(!Ba.isClockWise(q)){q=q.reverse();for(let ve=0,de=oe.length;ve<de;ve++){const we=oe[ve];Ba.isClockWise(we)&&(oe[ve]=we.reverse())}}function Ne(ve){const we=10000000000000001e-36;let Ie=ve[0];for(let lt=1;lt<=ve.length;lt++){const Xe=lt%ve.length,qe=ve[Xe],Ft=qe.x-Ie.x,Bt=qe.y-Ie.y,se=Ft*Ft+Bt*Bt,X=Math.max(Math.abs(qe.x),Math.abs(qe.y),Math.abs(Ie.x),Math.abs(Ie.y)),Se=we*X*X;if(se<=Se){ve.splice(Xe,1),lt--;continue}Ie=qe}}Ne(q),oe.forEach(Ne);const Oe=oe.length,Be=q;for(let ve=0;ve<Oe;ve++){const de=oe[ve];q=q.concat(de)}function He(ve,de,we){return de||console.error("THREE.ExtrudeGeometry: vec does not exist"),ve.clone().addScaledVector(de,we)}const ct=q.length;function Ve(ve,de,we){let Ie,lt,Xe;const qe=ve.x-de.x,Ft=ve.y-de.y,Bt=we.x-ve.x,se=we.y-ve.y,X=qe*qe+Ft*Ft,Se=qe*se-Ft*Bt;if(Math.abs(Se)>Number.EPSILON){const Me=Math.sqrt(X),Ge=Math.sqrt(Bt*Bt+se*se),De=de.x-Ft/Me,Et=de.y+qe/Me,et=we.x-se/Ge,kt=we.y+Bt/Ge,It=((et-De)*se-(kt-Et)*Bt)/(qe*se-Ft*Bt);Ie=De+qe*It-ve.x,lt=Et+Ft*It-ve.y;const Ye=Ie*Ie+lt*lt;if(Ye<=2)return new it(Ie,lt);Xe=Math.sqrt(Ye/2)}else{let Me=!1;qe>Number.EPSILON?Bt>Number.EPSILON&&(Me=!0):qe<-Number.EPSILON?Bt<-Number.EPSILON&&(Me=!0):Math.sign(Ft)===Math.sign(se)&&(Me=!0),Me?(Ie=-Ft,lt=qe,Xe=Math.sqrt(X)):(Ie=qe,lt=Ft,Xe=Math.sqrt(X/2))}return new it(Ie/Xe,lt/Xe)}const Ct=[];for(let ve=0,de=Be.length,we=de-1,Ie=ve+1;ve<de;ve++,we++,Ie++)we===de&&(we=0),Ie===de&&(Ie=0),Ct[ve]=Ve(Be[ve],Be[we],Be[Ie]);const Gt=[];let pn,qn=Ct.concat();for(let ve=0,de=Oe;ve<de;ve++){const we=oe[ve];pn=[];for(let Ie=0,lt=we.length,Xe=lt-1,qe=Ie+1;Ie<lt;Ie++,Xe++,qe++)Xe===lt&&(Xe=0),qe===lt&&(qe=0),pn[Ie]=Ve(we[Ie],we[Xe],we[qe]);Gt.push(pn),qn=qn.concat(pn)}let yi;if(A===0)yi=Ba.triangulateShape(Be,oe);else{const ve=[],de=[];for(let we=0;we<A;we++){const Ie=we/A,lt=S*Math.cos(Ie*Math.PI/2),Xe=T*Math.sin(Ie*Math.PI/2)+E;for(let qe=0,Ft=Be.length;qe<Ft;qe++){const Bt=He(Be[qe],Ct[qe],Xe);gn(Bt.x,Bt.y,-lt),Ie===0&&ve.push(Bt)}for(let qe=0,Ft=Oe;qe<Ft;qe++){const Bt=oe[qe];pn=Gt[qe];const se=[];for(let X=0,Se=Bt.length;X<Se;X++){const Me=He(Bt[X],pn[X],Xe);gn(Me.x,Me.y,-lt),Ie===0&&se.push(Me)}Ie===0&&de.push(se)}}yi=Ba.triangulateShape(ve,de)}const bi=yi.length,rt=T+E;for(let ve=0;ve<ct;ve++){const de=v?He(q[ve],qn[ve],rt):q[ve];B?($.copy(k.normals[0]).multiplyScalar(de.x),Y.copy(k.binormals[0]).multiplyScalar(de.y),Q.copy(F[0]).add($).add(Y),gn(Q.x,Q.y,Q.z)):gn(de.x,de.y,0)}for(let ve=1;ve<=g;ve++)for(let de=0;de<ct;de++){const we=v?He(q[de],qn[de],rt):q[de];B?($.copy(k.normals[ve]).multiplyScalar(we.x),Y.copy(k.binormals[ve]).multiplyScalar(we.y),Q.copy(F[ve]).add($).add(Y),gn(Q.x,Q.y,Q.z)):gn(we.x,we.y,x/g*ve)}for(let ve=A-1;ve>=0;ve--){const de=ve/A,we=S*Math.cos(de*Math.PI/2),Ie=T*Math.sin(de*Math.PI/2)+E;for(let lt=0,Xe=Be.length;lt<Xe;lt++){const qe=He(Be[lt],Ct[lt],Ie);gn(qe.x,qe.y,x+we)}for(let lt=0,Xe=oe.length;lt<Xe;lt++){const qe=oe[lt];pn=Gt[lt];for(let Ft=0,Bt=qe.length;Ft<Bt;Ft++){const se=He(qe[Ft],pn[Ft],Ie);B?gn(se.x,se.y+F[g-1].y,F[g-1].x+we):gn(se.x,se.y,x+we)}}}Xt(),At();function Xt(){const ve=s.length/3;if(v){let de=0,we=ct*de;for(let Ie=0;Ie<bi;Ie++){const lt=yi[Ie];kn(lt[2]+we,lt[1]+we,lt[0]+we)}de=g+A*2,we=ct*de;for(let Ie=0;Ie<bi;Ie++){const lt=yi[Ie];kn(lt[0]+we,lt[1]+we,lt[2]+we)}}else{for(let de=0;de<bi;de++){const we=yi[de];kn(we[2],we[1],we[0])}for(let de=0;de<bi;de++){const we=yi[de];kn(we[0]+ct*g,we[1]+ct*g,we[2]+ct*g)}}i.addGroup(ve,s.length/3-ve,0)}function At(){const ve=s.length/3;let de=0;In(Be,de),de+=Be.length;for(let we=0,Ie=oe.length;we<Ie;we++){const lt=oe[we];In(lt,de),de+=lt.length}i.addGroup(ve,s.length/3-ve,1)}function In(ve,de){let we=ve.length;for(;--we>=0;){const Ie=we;let lt=we-1;lt<0&&(lt=ve.length-1);for(let Xe=0,qe=g+A*2;Xe<qe;Xe++){const Ft=ct*Xe,Bt=ct*(Xe+1),se=de+Ie+Ft,X=de+lt+Ft,Se=de+lt+Bt,Me=de+Ie+Bt;Ki(se,X,Se,Me)}}}function gn(ve,de,we){d.push(ve),d.push(de),d.push(we)}function kn(ve,de,we){Ue(ve),Ue(de),Ue(we);const Ie=s.length/3,lt=O.generateTopUV(i,s,Ie-3,Ie-2,Ie-1);ee(lt[0]),ee(lt[1]),ee(lt[2])}function Ki(ve,de,we,Ie){Ue(ve),Ue(de),Ue(Ie),Ue(de),Ue(we),Ue(Ie);const lt=s.length/3,Xe=O.generateSideWallUV(i,s,lt-6,lt-3,lt-2,lt-1);ee(Xe[0]),ee(Xe[1]),ee(Xe[3]),ee(Xe[1]),ee(Xe[2]),ee(Xe[3])}function Ue(ve){s.push(d[ve*3+0]),s.push(d[ve*3+1]),s.push(d[ve*3+2])}function ee(ve){r.push(ve.x),r.push(ve.y)}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,i=this.parameters.options;return K8(t,i,e)}static fromJSON(e,t){const i=[];for(let r=0,l=e.shapes.length;r<l;r++){const u=t[e.shapes[r]];i.push(u)}const s=e.options.extrudePath;return s!==void 0&&(e.options.extrudePath=new ov[s.type]().fromJSON(s)),new i0(i,e.options)}}const Z8={generateTopUV:function(a,e,t,i,s){const r=e[t*3],l=e[t*3+1],u=e[i*3],d=e[i*3+1],f=e[s*3],g=e[s*3+1];return[new it(r,l),new it(u,d),new it(f,g)]},generateSideWallUV:function(a,e,t,i,s,r){const l=e[t*3],u=e[t*3+1],d=e[t*3+2],f=e[i*3],g=e[i*3+1],x=e[i*3+2],v=e[s*3],S=e[s*3+1],T=e[s*3+2],E=e[r*3],A=e[r*3+1],w=e[r*3+2];return Math.abs(u-g)<Math.abs(l-f)?[new it(l,1-d),new it(f,1-x),new it(v,1-T),new it(E,1-w)]:[new it(u,1-d),new it(g,1-x),new it(S,1-T),new it(A,1-w)]}};function K8(a,e,t){if(t.shapes=[],Array.isArray(a))for(let i=0,s=a.length;i<s;i++){const r=a[i];t.shapes.push(r.uuid)}else t.shapes.push(a.uuid);return t.options=Object.assign({},e),e.extrudePath!==void 0&&(t.options.extrudePath=e.extrudePath.toJSON()),t}class s0 extends nu{constructor(e=1,t=0){const i=(1+Math.sqrt(5))/2,s=[-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1],r=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(s,r,e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new s0(e.radius,e.detail)}}class r0 extends li{constructor(e=[new it(0,-.5),new it(.5,0),new it(0,.5)],t=12,i=0,s=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:i,phiLength:s},t=Math.floor(t),s=jn(s,0,Math.PI*2);const r=[],l=[],u=[],d=[],f=[],g=1/t,x=new re,v=new it,S=new re,T=new re,E=new re;let A=0,w=0;for(let O=0;O<=e.length-1;O++)switch(O){case 0:A=e[O+1].x-e[O].x,w=e[O+1].y-e[O].y,S.x=w*1,S.y=-A,S.z=w*0,E.copy(S),S.normalize(),d.push(S.x,S.y,S.z);break;case e.length-1:d.push(E.x,E.y,E.z);break;default:A=e[O+1].x-e[O].x,w=e[O+1].y-e[O].y,S.x=w*1,S.y=-A,S.z=w*0,T.copy(S),S.x+=E.x,S.y+=E.y,S.z+=E.z,S.normalize(),d.push(S.x,S.y,S.z),E.copy(T)}for(let O=0;O<=t;O++){const F=i+O*g*s,B=Math.sin(F),k=Math.cos(F);for(let Y=0;Y<=e.length-1;Y++){x.x=e[Y].x*B,x.y=e[Y].y,x.z=e[Y].x*k,l.push(x.x,x.y,x.z),v.x=O/t,v.y=Y/(e.length-1),u.push(v.x,v.y);const $=d[3*Y+0]*B,Q=d[3*Y+1],z=d[3*Y+0]*k;f.push($,Q,z)}}for(let O=0;O<t;O++)for(let F=0;F<e.length-1;F++){const B=F+O*e.length,k=B,Y=B+e.length,$=B+e.length+1,Q=B+1;r.push(k,Y,Q),r.push($,Q,Y)}this.setIndex(r),this.setAttribute("position",new vn(l,3)),this.setAttribute("uv",new vn(u,2)),this.setAttribute("normal",new vn(f,3))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new r0(e.points,e.segments,e.phiStart,e.phiLength)}}class Vg extends nu{constructor(e=1,t=0){const i=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],s=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(i,s,e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Vg(e.radius,e.detail)}}class iu extends li{constructor(e=1,t=1,i=1,s=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:i,heightSegments:s};const r=e/2,l=t/2,u=Math.floor(i),d=Math.floor(s),f=u+1,g=d+1,x=e/u,v=t/d,S=[],T=[],E=[],A=[];for(let w=0;w<g;w++){const O=w*v-l;for(let F=0;F<f;F++){const B=F*x-r;T.push(B,-O,0),E.push(0,0,1),A.push(F/u),A.push(1-w/d)}}for(let w=0;w<d;w++)for(let O=0;O<u;O++){const F=O+f*w,B=O+f*(w+1),k=O+1+f*(w+1),Y=O+1+f*w;S.push(F,B,Y),S.push(B,k,Y)}this.setIndex(S),this.setAttribute("position",new vn(T,3)),this.setAttribute("normal",new vn(E,3)),this.setAttribute("uv",new vn(A,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new iu(e.width,e.height,e.widthSegments,e.heightSegments)}}class o0 extends li{constructor(e=.5,t=1,i=32,s=1,r=0,l=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:i,phiSegments:s,thetaStart:r,thetaLength:l},i=Math.max(3,i),s=Math.max(1,s);const u=[],d=[],f=[],g=[];let x=e;const v=(t-e)/s,S=new re,T=new it;for(let E=0;E<=s;E++){for(let A=0;A<=i;A++){const w=r+A/i*l;S.x=x*Math.cos(w),S.y=x*Math.sin(w),d.push(S.x,S.y,S.z),f.push(0,0,1),T.x=(S.x/t+1)/2,T.y=(S.y/t+1)/2,g.push(T.x,T.y)}x+=v}for(let E=0;E<s;E++){const A=E*(i+1);for(let w=0;w<i;w++){const O=w+A,F=O,B=O+i+1,k=O+i+2,Y=O+1;u.push(F,B,Y),u.push(B,k,Y)}}this.setIndex(u),this.setAttribute("position",new vn(d,3)),this.setAttribute("normal",new vn(f,3)),this.setAttribute("uv",new vn(g,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new o0(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class a0 extends li{constructor(e=new Ah([new it(0,.5),new it(-.5,-.5),new it(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const i=[],s=[],r=[],l=[];let u=0,d=0;if(Array.isArray(e)===!1)f(e);else for(let g=0;g<e.length;g++)f(e[g]),this.addGroup(u,d,g),u+=d,d=0;this.setIndex(i),this.setAttribute("position",new vn(s,3)),this.setAttribute("normal",new vn(r,3)),this.setAttribute("uv",new vn(l,2));function f(g){const x=s.length/3,v=g.extractPoints(t);let S=v.shape;const T=v.holes;Ba.isClockWise(S)===!1&&(S=S.reverse());for(let A=0,w=T.length;A<w;A++){const O=T[A];Ba.isClockWise(O)===!0&&(T[A]=O.reverse())}const E=Ba.triangulateShape(S,T);for(let A=0,w=T.length;A<w;A++){const O=T[A];S=S.concat(O)}for(let A=0,w=S.length;A<w;A++){const O=S[A];s.push(O.x,O.y,0),r.push(0,0,1),l.push(O.x,O.y)}for(let A=0,w=E.length;A<w;A++){const O=E[A],F=O[0]+x,B=O[1]+x,k=O[2]+x;i.push(F,B,k),d+=3}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),t=this.parameters.shapes;return J8(t,e)}static fromJSON(e,t){const i=[];for(let s=0,r=e.shapes.length;s<r;s++){const l=t[e.shapes[s]];i.push(l)}return new a0(i,e.curveSegments)}}function J8(a,e){if(e.shapes=[],Array.isArray(a))for(let t=0,i=a.length;t<i;t++){const s=a[t];e.shapes.push(s.uuid)}else e.shapes.push(a.uuid);return e}class xp extends li{constructor(e=1,t=32,i=16,s=0,r=Math.PI*2,l=0,u=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:i,phiStart:s,phiLength:r,thetaStart:l,thetaLength:u},t=Math.max(3,Math.floor(t)),i=Math.max(2,Math.floor(i));const d=Math.min(l+u,Math.PI);let f=0;const g=[],x=new re,v=new re,S=[],T=[],E=[],A=[];for(let w=0;w<=i;w++){const O=[],F=w/i;let B=0;w===0&&l===0?B=.5/t:w===i&&d===Math.PI&&(B=-.5/t);for(let k=0;k<=t;k++){const Y=k/t;x.x=-e*Math.cos(s+Y*r)*Math.sin(l+F*u),x.y=e*Math.cos(l+F*u),x.z=e*Math.sin(s+Y*r)*Math.sin(l+F*u),T.push(x.x,x.y,x.z),v.copy(x).normalize(),E.push(v.x,v.y,v.z),A.push(Y+B,1-F),O.push(f++)}g.push(O)}for(let w=0;w<i;w++)for(let O=0;O<t;O++){const F=g[w][O+1],B=g[w][O],k=g[w+1][O],Y=g[w+1][O+1];(w!==0||l>0)&&S.push(F,B,Y),(w!==i-1||d<Math.PI)&&S.push(B,k,Y)}this.setIndex(S),this.setAttribute("position",new vn(T,3)),this.setAttribute("normal",new vn(E,3)),this.setAttribute("uv",new vn(A,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new xp(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class l0 extends nu{constructor(e=1,t=0){const i=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],s=[2,1,0,0,3,2,1,3,0,2,3,1];super(i,s,e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new l0(e.radius,e.detail)}}class c0 extends li{constructor(e=1,t=.4,i=12,s=48,r=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:i,tubularSegments:s,arc:r},i=Math.floor(i),s=Math.floor(s);const l=[],u=[],d=[],f=[],g=new re,x=new re,v=new re;for(let S=0;S<=i;S++)for(let T=0;T<=s;T++){const E=T/s*r,A=S/i*Math.PI*2;x.x=(e+t*Math.cos(A))*Math.cos(E),x.y=(e+t*Math.cos(A))*Math.sin(E),x.z=t*Math.sin(A),u.push(x.x,x.y,x.z),g.x=e*Math.cos(E),g.y=e*Math.sin(E),v.subVectors(x,g).normalize(),d.push(v.x,v.y,v.z),f.push(T/s),f.push(S/i)}for(let S=1;S<=i;S++)for(let T=1;T<=s;T++){const E=(s+1)*S+T-1,A=(s+1)*(S-1)+T-1,w=(s+1)*(S-1)+T,O=(s+1)*S+T;l.push(E,A,O),l.push(A,w,O)}this.setIndex(l),this.setAttribute("position",new vn(u,3)),this.setAttribute("normal",new vn(d,3)),this.setAttribute("uv",new vn(f,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new c0(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class u0 extends li{constructor(e=1,t=.4,i=64,s=8,r=2,l=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:i,radialSegments:s,p:r,q:l},i=Math.floor(i),s=Math.floor(s);const u=[],d=[],f=[],g=[],x=new re,v=new re,S=new re,T=new re,E=new re,A=new re,w=new re;for(let F=0;F<=i;++F){const B=F/i*r*Math.PI*2;O(B,r,l,e,S),O(B+.01,r,l,e,T),A.subVectors(T,S),w.addVectors(T,S),E.crossVectors(A,w),w.crossVectors(E,A),E.normalize(),w.normalize();for(let k=0;k<=s;++k){const Y=k/s*Math.PI*2,$=-t*Math.cos(Y),Q=t*Math.sin(Y);x.x=S.x+($*w.x+Q*E.x),x.y=S.y+($*w.y+Q*E.y),x.z=S.z+($*w.z+Q*E.z),d.push(x.x,x.y,x.z),v.subVectors(x,S).normalize(),f.push(v.x,v.y,v.z),g.push(F/i),g.push(k/s)}}for(let F=1;F<=i;F++)for(let B=1;B<=s;B++){const k=(s+1)*(F-1)+(B-1),Y=(s+1)*F+(B-1),$=(s+1)*F+B,Q=(s+1)*(F-1)+B;u.push(k,Y,Q),u.push(Y,$,Q)}this.setIndex(u),this.setAttribute("position",new vn(d,3)),this.setAttribute("normal",new vn(f,3)),this.setAttribute("uv",new vn(g,2));function O(F,B,k,Y,$){const Q=Math.cos(F),z=Math.sin(F),q=k/B*F,oe=Math.cos(q);$.x=Y*(2+oe)*.5*Q,$.y=Y*(2+oe)*z*.5,$.z=Y*Math.sin(q)*.5}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new u0(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class h0 extends li{constructor(e=new dw(new re(-1,-1,0),new re(-1,1,0),new re(1,1,0)),t=64,i=1,s=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:i,radialSegments:s,closed:r};const l=e.computeFrenetFrames(t,r);this.tangents=l.tangents,this.normals=l.normals,this.binormals=l.binormals;const u=new re,d=new re,f=new it;let g=new re;const x=[],v=[],S=[],T=[];E(),this.setIndex(T),this.setAttribute("position",new vn(x,3)),this.setAttribute("normal",new vn(v,3)),this.setAttribute("uv",new vn(S,2));function E(){for(let F=0;F<t;F++)A(F);A(r===!1?t:0),O(),w()}function A(F){g=e.getPointAt(F/t,g);const B=l.normals[F],k=l.binormals[F];for(let Y=0;Y<=s;Y++){const $=Y/s*Math.PI*2,Q=Math.sin($),z=-Math.cos($);d.x=z*B.x+Q*k.x,d.y=z*B.y+Q*k.y,d.z=z*B.z+Q*k.z,d.normalize(),v.push(d.x,d.y,d.z),u.x=g.x+i*d.x,u.y=g.y+i*d.y,u.z=g.z+i*d.z,x.push(u.x,u.y,u.z)}}function w(){for(let F=1;F<=t;F++)for(let B=1;B<=s;B++){const k=(s+1)*(F-1)+(B-1),Y=(s+1)*F+(B-1),$=(s+1)*F+B,Q=(s+1)*(F-1)+B;T.push(k,Y,Q),T.push(Y,$,Q)}}function O(){for(let F=0;F<=t;F++)for(let B=0;B<=s;B++)f.x=F/t,f.y=B/s,S.push(f.x,f.y)}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new h0(new ov[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class CL extends li{constructor(e=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:e},e!==null){const t=[],i=new Set,s=new re,r=new re;if(e.index!==null){const l=e.attributes.position,u=e.index;let d=e.groups;d.length===0&&(d=[{start:0,count:u.count,materialIndex:0}]);for(let f=0,g=d.length;f<g;++f){const x=d[f],v=x.start,S=x.count;for(let T=v,E=v+S;T<E;T+=3)for(let A=0;A<3;A++){const w=u.getX(T+A),O=u.getX(T+(A+1)%3);s.fromBufferAttribute(l,w),r.fromBufferAttribute(l,O),wN(s,r,i)===!0&&(t.push(s.x,s.y,s.z),t.push(r.x,r.y,r.z))}}}else{const l=e.attributes.position;for(let u=0,d=l.count/3;u<d;u++)for(let f=0;f<3;f++){const g=3*u+f,x=3*u+(f+1)%3;s.fromBufferAttribute(l,g),r.fromBufferAttribute(l,x),wN(s,r,i)===!0&&(t.push(s.x,s.y,s.z),t.push(r.x,r.y,r.z))}}this.setAttribute("position",new vn(t,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}function wN(a,e,t){const i=`${a.x},${a.y},${a.z}-${e.x},${e.y},${e.z}`,s=`${e.x},${e.y},${e.z}-${a.x},${a.y},${a.z}`;return t.has(i)===!0||t.has(s)===!0?!1:(t.add(i),t.add(s),!0)}var AN=Object.freeze({__proto__:null,BoxGeometry:cc,CapsuleGeometry:Qv,CircleGeometry:e0,ConeGeometry:Og,CylinderGeometry:_p,DodecahedronGeometry:t0,EdgesGeometry:yL,ExtrudeGeometry:i0,IcosahedronGeometry:s0,LatheGeometry:r0,OctahedronGeometry:Vg,PlaneGeometry:iu,PolyhedronGeometry:nu,RingGeometry:o0,ShapeGeometry:a0,SphereGeometry:xp,TetrahedronGeometry:l0,TorusGeometry:c0,TorusKnotGeometry:u0,TubeGeometry:h0,WireframeGeometry:CL});class pw extends br{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new Jt(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.fog=e.fog,this}}class NL extends er{constructor(e){super(e),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class d0 extends br{constructor(e){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new Jt(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Jt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=gl,this.normalScale=new it(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new co,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class mw extends d0{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new it(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return jn(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new Jt(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new Jt(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Jt(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){this._anisotropy>0!=e>0&&this.version++,this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get dispersion(){return this._dispersion}set dispersion(e){this._dispersion>0!=e>0&&this.version++,this._dispersion=e}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=e.anisotropy,this.anisotropyRotation=e.anisotropyRotation,this.anisotropyMap=e.anisotropyMap,this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.dispersion=e.dispersion,this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class gw extends br{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Jt(16777215),this.specular=new Jt(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Jt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=gl,this.normalScale=new it(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new co,this.combine=pp,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class _w extends br{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Jt(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Jt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=gl,this.normalScale=new it(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}class xw extends br{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=gl,this.normalScale=new it(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}class yw extends br{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new Jt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Jt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=gl,this.normalScale=new it(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new co,this.combine=pp,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class vw extends br{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=XI,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class Sw extends br{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}class bw extends br{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Jt(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=gl,this.normalScale=new it(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this.fog=e.fog,this}}class f0 extends $r{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}function vh(a,e){return!a||a.constructor===e?a:typeof e.BYTES_PER_ELEMENT=="number"?new e(a):Array.prototype.slice.call(a)}function PL(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)}function IL(a){function e(s,r){return a[s]-a[r]}const t=a.length,i=new Array(t);for(let s=0;s!==t;++s)i[s]=s;return i.sort(e),i}function cM(a,e,t){const i=a.length,s=new a.constructor(i);for(let r=0,l=0;l!==i;++r){const u=t[r]*e;for(let d=0;d!==e;++d)s[l++]=a[u+d]}return s}function Tw(a,e,t,i){let s=1,r=a[0];for(;r!==void 0&&r[i]===void 0;)r=a[s++];if(r===void 0)return;let l=r[i];if(l!==void 0)if(Array.isArray(l))do l=r[i],l!==void 0&&(e.push(r.time),t.push(...l)),r=a[s++];while(r!==void 0);else if(l.toArray!==void 0)do l=r[i],l!==void 0&&(e.push(r.time),l.toArray(t,t.length)),r=a[s++];while(r!==void 0);else do l=r[i],l!==void 0&&(e.push(r.time),t.push(l)),r=a[s++];while(r!==void 0)}function j8(a,e,t,i,s=30){const r=a.clone();r.name=e;const l=[];for(let d=0;d<r.tracks.length;++d){const f=r.tracks[d],g=f.getValueSize(),x=[],v=[];for(let S=0;S<f.times.length;++S){const T=f.times[S]*s;if(!(T<t||T>=i)){x.push(f.times[S]);for(let E=0;E<g;++E)v.push(f.values[S*g+E])}}x.length!==0&&(f.times=vh(x,f.times.constructor),f.values=vh(v,f.values.constructor),l.push(f))}r.tracks=l;let u=1/0;for(let d=0;d<r.tracks.length;++d)u>r.tracks[d].times[0]&&(u=r.tracks[d].times[0]);for(let d=0;d<r.tracks.length;++d)r.tracks[d].shift(-1*u);return r.resetDuration(),r}function Q8(a,e=0,t=a,i=30){i<=0&&(i=30);const s=t.tracks.length,r=e/i;for(let l=0;l<s;++l){const u=t.tracks[l],d=u.ValueTypeName;if(d==="bool"||d==="string")continue;const f=a.tracks.find(function(w){return w.name===u.name&&w.ValueTypeName===d});if(f===void 0)continue;let g=0;const x=u.getValueSize();u.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(g=x/3);let v=0;const S=f.getValueSize();f.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(v=S/3);const T=u.times.length-1;let E;if(r<=u.times[0]){const w=g,O=x-g;E=u.values.slice(w,O)}else if(r>=u.times[T]){const w=T*x+g,O=w+x-g;E=u.values.slice(w,O)}else{const w=u.createInterpolant(),O=g,F=x-g;w.evaluate(r),E=w.resultBuffer.slice(O,F)}d==="quaternion"&&new lo().fromArray(E).normalize().conjugate().toArray(E);const A=f.times.length;for(let w=0;w<A;++w){const O=w*S+v;if(d==="quaternion")lo.multiplyQuaternionsFlat(f.values,O,E,0,f.values,O);else{const F=S-v*2;for(let B=0;B<F;++B)f.values[O+B]-=E[B]}}}return a.blendMode=KM,a}class e${static convertArray(e,t){return vh(e,t)}static isTypedArray(e){return PL(e)}static getKeyframeOrder(e){return IL(e)}static sortedArray(e,t,i){return cM(e,t,i)}static flattenJSON(e,t,i,s){Tw(e,t,i,s)}static subclip(e,t,i,s,r=30){return j8(e,t,i,s,r)}static makeClipAdditive(e,t=0,i=e,s=30){return Q8(e,t,i,s)}}class zg{constructor(e,t,i,s){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=s!==void 0?s:new t.constructor(i),this.sampleValues=t,this.valueSize=i,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let i=this._cachedIndex,s=t[i],r=t[i-1];e:{t:{let l;n:{i:if(!(e<s)){for(let u=i+2;;){if(s===void 0){if(e<r)break i;return i=t.length,this._cachedIndex=i,this.copySampleValue_(i-1)}if(i===u)break;if(r=s,s=t[++i],e<s)break t}l=t.length;break n}if(!(e>=r)){const u=t[1];e<u&&(i=2,r=u);for(let d=i-2;;){if(r===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(i===d)break;if(s=r,r=t[--i-1],e>=r)break t}l=i,i=0;break n}break e}for(;i<l;){const u=i+l>>>1;e<t[u]?l=u:i=u+1}if(s=t[i],r=t[i-1],r===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(s===void 0)return i=t.length,this._cachedIndex=i,this.copySampleValue_(i-1)}this._cachedIndex=i,this.intervalChanged_(i,r,s)}return this.interpolate_(i,r,e,s)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,i=this.sampleValues,s=this.valueSize,r=e*s;for(let l=0;l!==s;++l)t[l]=i[r+l];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class LL extends zg{constructor(e,t,i,s){super(e,t,i,s),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:_h,endingEnd:_h}}intervalChanged_(e,t,i){const s=this.parameterPositions;let r=e-2,l=e+1,u=s[r],d=s[l];if(u===void 0)switch(this.getSettings_().endingStart){case xh:r=e,u=2*t-i;break;case rg:r=s.length-2,u=t+s[r]-s[r+1];break;default:r=e,u=i}if(d===void 0)switch(this.getSettings_().endingEnd){case xh:l=e,d=2*i-t;break;case rg:l=1,d=i+s[1]-s[0];break;default:l=e-1,d=t}const f=(i-t)*.5,g=this.valueSize;this._weightPrev=f/(t-u),this._weightNext=f/(d-i),this._offsetPrev=r*g,this._offsetNext=l*g}interpolate_(e,t,i,s){const r=this.resultBuffer,l=this.sampleValues,u=this.valueSize,d=e*u,f=d-u,g=this._offsetPrev,x=this._offsetNext,v=this._weightPrev,S=this._weightNext,T=(i-t)/(s-t),E=T*T,A=E*T,w=-v*A+2*v*E-v*T,O=(1+v)*A+(-1.5-2*v)*E+(-.5+v)*T+1,F=(-1-S)*A+(1.5+S)*E+.5*T,B=S*A-S*E;for(let k=0;k!==u;++k)r[k]=w*l[g+k]+O*l[f+k]+F*l[d+k]+B*l[x+k];return r}}class Mw extends zg{constructor(e,t,i,s){super(e,t,i,s)}interpolate_(e,t,i,s){const r=this.resultBuffer,l=this.sampleValues,u=this.valueSize,d=e*u,f=d-u,g=(i-t)/(s-t),x=1-g;for(let v=0;v!==u;++v)r[v]=l[f+v]*x+l[d+v]*g;return r}}class DL extends zg{constructor(e,t,i,s){super(e,t,i,s)}interpolate_(e){return this.copySampleValue_(e-1)}}class Sa{constructor(e,t,i,s){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=vh(t,this.TimeBufferType),this.values=vh(i,this.ValueBufferType),this.setInterpolation(s||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let i;if(t.toJSON!==this.toJSON)i=t.toJSON(e);else{i={name:e.name,times:vh(e.times,Array),values:vh(e.values,Array)};const s=e.getInterpolation();s!==e.DefaultInterpolation&&(i.interpolation=s)}return i.type=e.ValueTypeName,i}InterpolantFactoryMethodDiscrete(e){return new DL(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new Mw(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new LL(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case sg:t=this.InterpolantFactoryMethodDiscrete;break;case nv:t=this.InterpolantFactoryMethodLinear;break;case Wy:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const i="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(i);return console.warn("THREE.KeyframeTrack:",i),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return sg;case this.InterpolantFactoryMethodLinear:return nv;case this.InterpolantFactoryMethodSmooth:return Wy}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let i=0,s=t.length;i!==s;++i)t[i]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let i=0,s=t.length;i!==s;++i)t[i]*=e}return this}trim(e,t){const i=this.times,s=i.length;let r=0,l=s-1;for(;r!==s&&i[r]<e;)++r;for(;l!==-1&&i[l]>t;)--l;if(++l,r!==0||l!==s){r>=l&&(l=Math.max(l,1),r=l-1);const u=this.getValueSize();this.times=i.slice(r,l),this.values=this.values.slice(r*u,l*u)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const i=this.times,s=this.values,r=i.length;r===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let l=null;for(let u=0;u!==r;u++){const d=i[u];if(typeof d=="number"&&isNaN(d)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,u,d),e=!1;break}if(l!==null&&l>d){console.error("THREE.KeyframeTrack: Out of order keys.",this,u,d,l),e=!1;break}l=d}if(s!==void 0&&PL(s))for(let u=0,d=s.length;u!==d;++u){const f=s[u];if(isNaN(f)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,u,f),e=!1;break}}return e}optimize(){const e=this.times.slice(),t=this.values.slice(),i=this.getValueSize(),s=this.getInterpolation()===Wy,r=e.length-1;let l=1;for(let u=1;u<r;++u){let d=!1;const f=e[u],g=e[u+1];if(f!==g&&(u!==1||f!==e[0]))if(s)d=!0;else{const x=u*i,v=x-i,S=x+i;for(let T=0;T!==i;++T){const E=t[x+T];if(E!==t[v+T]||E!==t[S+T]){d=!0;break}}}if(d){if(u!==l){e[l]=e[u];const x=u*i,v=l*i;for(let S=0;S!==i;++S)t[v+S]=t[x+S]}++l}}if(r>0){e[l]=e[r];for(let u=r*i,d=l*i,f=0;f!==i;++f)t[d+f]=t[u+f];++l}return l!==e.length?(this.times=e.slice(0,l),this.values=t.slice(0,l*i)):(this.times=e,this.values=t),this}clone(){const e=this.times.slice(),t=this.values.slice(),i=this.constructor,s=new i(this.name,e,t);return s.createInterpolant=this.createInterpolant,s}}Sa.prototype.ValueTypeName="";Sa.prototype.TimeBufferType=Float32Array;Sa.prototype.ValueBufferType=Float32Array;Sa.prototype.DefaultInterpolation=nv;class ad extends Sa{constructor(e,t,i){super(e,t,i)}}ad.prototype.ValueTypeName="bool";ad.prototype.ValueBufferType=Array;ad.prototype.DefaultInterpolation=sg;ad.prototype.InterpolantFactoryMethodLinear=void 0;ad.prototype.InterpolantFactoryMethodSmooth=void 0;class ww extends Sa{constructor(e,t,i,s){super(e,t,i,s)}}ww.prototype.ValueTypeName="color";class ug extends Sa{constructor(e,t,i,s){super(e,t,i,s)}}ug.prototype.ValueTypeName="number";class UL extends zg{constructor(e,t,i,s){super(e,t,i,s)}interpolate_(e,t,i,s){const r=this.resultBuffer,l=this.sampleValues,u=this.valueSize,d=(i-t)/(s-t);let f=e*u;for(let g=f+u;f!==g;f+=4)lo.slerpFlat(r,0,l,f-u,l,f,d);return r}}class kg extends Sa{constructor(e,t,i,s){super(e,t,i,s)}InterpolantFactoryMethodLinear(e){return new UL(this.times,this.values,this.getValueSize(),e)}}kg.prototype.ValueTypeName="quaternion";kg.prototype.InterpolantFactoryMethodSmooth=void 0;class ld extends Sa{constructor(e,t,i){super(e,t,i)}}ld.prototype.ValueTypeName="string";ld.prototype.ValueBufferType=Array;ld.prototype.DefaultInterpolation=sg;ld.prototype.InterpolantFactoryMethodLinear=void 0;ld.prototype.InterpolantFactoryMethodSmooth=void 0;class hg extends Sa{constructor(e,t,i,s){super(e,t,i,s)}}hg.prototype.ValueTypeName="vector";class dg{constructor(e="",t=-1,i=[],s=Fv){this.name=e,this.tracks=i,this.duration=t,this.blendMode=s,this.uuid=$o(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],i=e.tracks,s=1/(e.fps||1);for(let l=0,u=i.length;l!==u;++l)t.push(n$(i[l]).scale(s));const r=new this(e.name,e.duration,t,e.blendMode);return r.uuid=e.uuid,r}static toJSON(e){const t=[],i=e.tracks,s={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let r=0,l=i.length;r!==l;++r)t.push(Sa.toJSON(i[r]));return s}static CreateFromMorphTargetSequence(e,t,i,s){const r=t.length,l=[];for(let u=0;u<r;u++){let d=[],f=[];d.push((u+r-1)%r,u,(u+1)%r),f.push(0,1,0);const g=IL(d);d=cM(d,1,g),f=cM(f,1,g),!s&&d[0]===0&&(d.push(r),f.push(f[0])),l.push(new ug(".morphTargetInfluences["+t[u].name+"]",d,f).scale(1/i))}return new this(e,-1,l)}static findByName(e,t){let i=e;if(!Array.isArray(e)){const s=e;i=s.geometry&&s.geometry.animations||s.animations}for(let s=0;s<i.length;s++)if(i[s].name===t)return i[s];return null}static CreateClipsFromMorphTargetSequences(e,t,i){const s={},r=/^([\w-]*?)([\d]+)$/;for(let u=0,d=e.length;u<d;u++){const f=e[u],g=f.name.match(r);if(g&&g.length>1){const x=g[1];let v=s[x];v||(s[x]=v=[]),v.push(f)}}const l=[];for(const u in s)l.push(this.CreateFromMorphTargetSequence(u,s[u],t,i));return l}static parseAnimation(e,t){if(console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"),!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const i=function(x,v,S,T,E){if(S.length!==0){const A=[],w=[];Tw(S,A,w,T),A.length!==0&&E.push(new x(v,A,w))}},s=[],r=e.name||"default",l=e.fps||30,u=e.blendMode;let d=e.length||-1;const f=e.hierarchy||[];for(let x=0;x<f.length;x++){const v=f[x].keys;if(!(!v||v.length===0))if(v[0].morphTargets){const S={};let T;for(T=0;T<v.length;T++)if(v[T].morphTargets)for(let E=0;E<v[T].morphTargets.length;E++)S[v[T].morphTargets[E]]=-1;for(const E in S){const A=[],w=[];for(let O=0;O!==v[T].morphTargets.length;++O){const F=v[T];A.push(F.time),w.push(F.morphTarget===E?1:0)}s.push(new ug(".morphTargetInfluence["+E+"]",A,w))}d=S.length*l}else{const S=".bones["+t[x].name+"]";i(hg,S+".position",v,"pos",s),i(kg,S+".quaternion",v,"rot",s),i(hg,S+".scale",v,"scl",s)}}return s.length===0?null:new this(r,d,s,u)}resetDuration(){const e=this.tracks;let t=0;for(let i=0,s=e.length;i!==s;++i){const r=this.tracks[i];t=Math.max(t,r.times[r.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function t$(a){switch(a.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return ug;case"vector":case"vector2":case"vector3":case"vector4":return hg;case"color":return ww;case"quaternion":return kg;case"bool":case"boolean":return ad;case"string":return ld}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+a)}function n$(a){if(a.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=t$(a.type);if(a.times===void 0){const t=[],i=[];Tw(a.keys,t,i,"value"),a.times=t,a.values=i}return e.parse!==void 0?e.parse(a):new e(a.name,a.times,a.values,a.interpolation)}const hl={enabled:!1,files:{},add:function(a,e){this.enabled!==!1&&(this.files[a]=e)},get:function(a){if(this.enabled!==!1)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}};class Aw{constructor(e,t,i){const s=this;let r=!1,l=0,u=0,d;const f=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=i,this.abortController=new AbortController,this.itemStart=function(g){u++,r===!1&&s.onStart!==void 0&&s.onStart(g,l,u),r=!0},this.itemEnd=function(g){l++,s.onProgress!==void 0&&s.onProgress(g,l,u),l===u&&(r=!1,s.onLoad!==void 0&&s.onLoad())},this.itemError=function(g){s.onError!==void 0&&s.onError(g)},this.resolveURL=function(g){return d?d(g):g},this.setURLModifier=function(g){return d=g,this},this.addHandler=function(g,x){return f.push(g,x),this},this.removeHandler=function(g){const x=f.indexOf(g);return x!==-1&&f.splice(x,2),this},this.getHandler=function(g){for(let x=0,v=f.length;x<v;x+=2){const S=f[x],T=f[x+1];if(S.global&&(S.lastIndex=0),S.test(g))return T}return null},this.abort=function(){return this.abortController.abort(),this.abortController=new AbortController,this}}}const FL=new Aw;class Xr{constructor(e){this.manager=e!==void 0?e:FL,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const i=this;return new Promise(function(s,r){i.load(e,s,t,r)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}abort(){return this}}Xr.DEFAULT_MATERIAL_NAME="__DEFAULT";const kl={};class i$ extends Error{constructor(e,t){super(e),this.response=t}}class ka extends Xr{constructor(e){super(e),this.mimeType="",this.responseType="",this._abortController=new AbortController}load(e,t,i,s){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=hl.get(`file:${e}`);if(r!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(r),this.manager.itemEnd(e)},0),r;if(kl[e]!==void 0){kl[e].push({onLoad:t,onProgress:i,onError:s});return}kl[e]=[],kl[e].push({onLoad:t,onProgress:i,onError:s});const l=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin",signal:typeof AbortSignal.any=="function"?AbortSignal.any([this._abortController.signal,this.manager.abortController.signal]):this._abortController.signal}),u=this.mimeType,d=this.responseType;fetch(l).then(f=>{if(f.status===200||f.status===0){if(f.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||f.body===void 0||f.body.getReader===void 0)return f;const g=kl[e],x=f.body.getReader(),v=f.headers.get("X-File-Size")||f.headers.get("Content-Length"),S=v?parseInt(v):0,T=S!==0;let E=0;const A=new ReadableStream({start(w){O();function O(){x.read().then(({done:F,value:B})=>{if(F)w.close();else{E+=B.byteLength;const k=new ProgressEvent("progress",{lengthComputable:T,loaded:E,total:S});for(let Y=0,$=g.length;Y<$;Y++){const Q=g[Y];Q.onProgress&&Q.onProgress(k)}w.enqueue(B),O()}},F=>{w.error(F)})}}});return new Response(A)}else throw new i$(`fetch for "${f.url}" responded with ${f.status}: ${f.statusText}`,f)}).then(f=>{switch(d){case"arraybuffer":return f.arrayBuffer();case"blob":return f.blob();case"document":return f.text().then(g=>new DOMParser().parseFromString(g,u));case"json":return f.json();default:if(u==="")return f.text();{const x=/charset="?([^;"\s]*)"?/i.exec(u),v=x&&x[1]?x[1].toLowerCase():void 0,S=new TextDecoder(v);return f.arrayBuffer().then(T=>S.decode(T))}}}).then(f=>{hl.add(`file:${e}`,f);const g=kl[e];delete kl[e];for(let x=0,v=g.length;x<v;x++){const S=g[x];S.onLoad&&S.onLoad(f)}}).catch(f=>{const g=kl[e];if(g===void 0)throw this.manager.itemError(e),f;delete kl[e];for(let x=0,v=g.length;x<v;x++){const S=g[x];S.onError&&S.onError(f)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}abort(){return this._abortController.abort(),this._abortController=new AbortController,this}}class s$ extends Xr{constructor(e){super(e)}load(e,t,i,s){const r=this,l=new ka(this.manager);l.setPath(this.path),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(e,function(u){try{t(r.parse(JSON.parse(u)))}catch(d){s?s(d):console.error(d),r.manager.itemError(e)}},i,s)}parse(e){const t=[];for(let i=0;i<e.length;i++){const s=dg.parse(e[i]);t.push(s)}return t}}class r$ extends Xr{constructor(e){super(e)}load(e,t,i,s){const r=this,l=[],u=new jv,d=new ka(this.manager);d.setPath(this.path),d.setResponseType("arraybuffer"),d.setRequestHeader(this.requestHeader),d.setWithCredentials(r.withCredentials);let f=0;function g(x){d.load(e[x],function(v){const S=r.parse(v,!0);l[x]={width:S.width,height:S.height,format:S.format,mipmaps:S.mipmaps},f+=1,f===6&&(S.mipmapCount===1&&(u.minFilter=Ni),u.image=l,u.format=S.format,u.needsUpdate=!0,t&&t(u))},i,s)}if(Array.isArray(e))for(let x=0,v=e.length;x<v;++x)g(x);else d.load(e,function(x){const v=r.parse(x,!0);if(v.isCubemap){const S=v.mipmaps.length/v.mipmapCount;for(let T=0;T<S;T++){l[T]={mipmaps:[]};for(let E=0;E<v.mipmapCount;E++)l[T].mipmaps.push(v.mipmaps[T*v.mipmapCount+E]),l[T].format=v.format,l[T].width=v.width,l[T].height=v.height}u.image=l}else u.image.width=v.width,u.image.height=v.height,u.mipmaps=v.mipmaps;v.mipmapCount===1&&(u.minFilter=Ni),u.format=v.format,u.needsUpdate=!0,t&&t(u)},i,s);return u}}const mf=new WeakMap;class fg extends Xr{constructor(e){super(e)}load(e,t,i,s){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=this,l=hl.get(`image:${e}`);if(l!==void 0){if(l.complete===!0)r.manager.itemStart(e),setTimeout(function(){t&&t(l),r.manager.itemEnd(e)},0);else{let x=mf.get(l);x===void 0&&(x=[],mf.set(l,x)),x.push({onLoad:t,onError:s})}return l}const u=og("img");function d(){g(),t&&t(this);const x=mf.get(this)||[];for(let v=0;v<x.length;v++){const S=x[v];S.onLoad&&S.onLoad(this)}mf.delete(this),r.manager.itemEnd(e)}function f(x){g(),s&&s(x),hl.remove(`image:${e}`);const v=mf.get(this)||[];for(let S=0;S<v.length;S++){const T=v[S];T.onError&&T.onError(x)}mf.delete(this),r.manager.itemError(e),r.manager.itemEnd(e)}function g(){u.removeEventListener("load",d,!1),u.removeEventListener("error",f,!1)}return u.addEventListener("load",d,!1),u.addEventListener("error",f,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(u.crossOrigin=this.crossOrigin),hl.add(`image:${e}`,u),r.manager.itemStart(e),u.src=e,u}}class o$ extends Xr{constructor(e){super(e)}load(e,t,i,s){const r=new tu;r.colorSpace=zr;const l=new fg(this.manager);l.setCrossOrigin(this.crossOrigin),l.setPath(this.path);let u=0;function d(f){l.load(e[f],function(g){r.images[f]=g,u++,u===6&&(r.needsUpdate=!0,t&&t(r))},void 0,s)}for(let f=0;f<e.length;++f)d(f);return r}}class a$ extends Xr{constructor(e){super(e)}load(e,t,i,s){const r=this,l=new Oa,u=new ka(this.manager);return u.setResponseType("arraybuffer"),u.setRequestHeader(this.requestHeader),u.setPath(this.path),u.setWithCredentials(r.withCredentials),u.load(e,function(d){let f;try{f=r.parse(d)}catch(g){if(s!==void 0)s(g);else{console.error(g);return}}f.image!==void 0?l.image=f.image:f.data!==void 0&&(l.image.width=f.width,l.image.height=f.height,l.image.data=f.data),l.wrapS=f.wrapS!==void 0?f.wrapS:js,l.wrapT=f.wrapT!==void 0?f.wrapT:js,l.magFilter=f.magFilter!==void 0?f.magFilter:Ni,l.minFilter=f.minFilter!==void 0?f.minFilter:Ni,l.anisotropy=f.anisotropy!==void 0?f.anisotropy:1,f.colorSpace!==void 0&&(l.colorSpace=f.colorSpace),f.flipY!==void 0&&(l.flipY=f.flipY),f.format!==void 0&&(l.format=f.format),f.type!==void 0&&(l.type=f.type),f.mipmaps!==void 0&&(l.mipmaps=f.mipmaps,l.minFilter=Cr),f.mipmapCount===1&&(l.minFilter=Ni),f.generateMipmaps!==void 0&&(l.generateMipmaps=f.generateMipmaps),l.needsUpdate=!0,t&&t(l,f)},i,s),l}}class Ew extends Xr{constructor(e){super(e)}load(e,t,i,s){const r=new ds,l=new fg(this.manager);return l.setCrossOrigin(this.crossOrigin),l.setPath(this.path),l.load(e,function(u){r.image=u,r.needsUpdate=!0,t!==void 0&&t(r)},i,s),r}}class su extends Di{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new Jt(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(t.object.target=this.target.uuid),t}}class Rw extends su{constructor(e,t,i){super(e,i),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(Di.DEFAULT_UP),this.updateMatrix(),this.groundColor=new Jt(t)}copy(e,t){return super.copy(e,t),this.groundColor.copy(e.groundColor),this}}const cT=new xn,EN=new re,RN=new re;class Cw{constructor(e){this.camera=e,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new it(512,512),this.mapType=Ts,this.map=null,this.mapPass=null,this.matrix=new xn,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new od,this._frameExtents=new it(1,1),this._viewportCount=1,this._viewports=[new Un(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,i=this.matrix;EN.setFromMatrixPosition(e.matrixWorld),t.position.copy(EN),RN.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(RN),t.updateMatrixWorld(),cT.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(cT,t.coordinateSystem,t.reversedDepth),t.reversedDepth?i.set(.5,0,0,.5,0,.5,0,.5,0,0,1,0,0,0,0,1):i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(cT)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.intensity=e.intensity,this.bias=e.bias,this.radius=e.radius,this.autoUpdate=e.autoUpdate,this.needsUpdate=e.needsUpdate,this.normalBias=e.normalBias,this.blurSamples=e.blurSamples,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.intensity!==1&&(e.intensity=this.intensity),this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class l$ extends Cw{constructor(){super(new Gs(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1,this.aspect=1}updateMatrices(e){const t=this.camera,i=jh*2*e.angle*this.focus,s=this.mapSize.width/this.mapSize.height*this.aspect,r=e.distance||t.far;(i!==t.fov||s!==t.aspect||r!==t.far)&&(t.fov=i,t.aspect=s,t.far=r,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class Gg extends su{constructor(e,t,i=0,s=Math.PI/3,r=0,l=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Di.DEFAULT_UP),this.updateMatrix(),this.target=new Di,this.distance=i,this.angle=s,this.penumbra=r,this.decay=l,this.map=null,this.shadow=new l$}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const CN=new xn,bm=new re,uT=new re;class c$ extends Cw{constructor(){super(new Gs(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new it(4,2),this._viewportCount=6,this._viewports=[new Un(2,1,1,1),new Un(0,1,1,1),new Un(3,1,1,1),new Un(1,1,1,1),new Un(3,0,1,1),new Un(1,0,1,1)],this._cubeDirections=[new re(1,0,0),new re(-1,0,0),new re(0,0,1),new re(0,0,-1),new re(0,1,0),new re(0,-1,0)],this._cubeUps=[new re(0,1,0),new re(0,1,0),new re(0,1,0),new re(0,1,0),new re(0,0,1),new re(0,0,-1)]}updateMatrices(e,t=0){const i=this.camera,s=this.matrix,r=e.distance||i.far;r!==i.far&&(i.far=r,i.updateProjectionMatrix()),bm.setFromMatrixPosition(e.matrixWorld),i.position.copy(bm),uT.copy(i.position),uT.add(this._cubeDirections[t]),i.up.copy(this._cubeUps[t]),i.lookAt(uT),i.updateMatrixWorld(),s.makeTranslation(-bm.x,-bm.y,-bm.z),CN.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(CN,i.coordinateSystem,i.reversedDepth)}}class Nw extends su{constructor(e,t,i=0,s=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=i,this.decay=s,this.shadow=new c$}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class ru extends Ug{constructor(e=-1,t=1,i=1,s=-1,r=.1,l=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=i,this.bottom=s,this.near=r,this.far=l,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,i,s,r,l){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=i,this.view.offsetY=s,this.view.width=r,this.view.height=l,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,s=(this.top+this.bottom)/2;let r=i-e,l=i+e,u=s+t,d=s-t;if(this.view!==null&&this.view.enabled){const f=(this.right-this.left)/this.view.fullWidth/this.zoom,g=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=f*this.view.offsetX,l=r+f*this.view.width,u-=g*this.view.offsetY,d=u-g*this.view.height}this.projectionMatrix.makeOrthographic(r,l,u,d,this.near,this.far,this.coordinateSystem,this.reversedDepth),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}class u$ extends Cw{constructor(){super(new ru(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class Pw extends su{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Di.DEFAULT_UP),this.updateMatrix(),this.target=new Di,this.shadow=new u$}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class Iw extends su{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class Lw extends su{constructor(e,t,i=10,s=10){super(e,t),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=i,this.height=s}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}}class BL{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new re)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const i=e.x,s=e.y,r=e.z,l=this.coefficients;return t.copy(l[0]).multiplyScalar(.282095),t.addScaledVector(l[1],.488603*s),t.addScaledVector(l[2],.488603*r),t.addScaledVector(l[3],.488603*i),t.addScaledVector(l[4],1.092548*(i*s)),t.addScaledVector(l[5],1.092548*(s*r)),t.addScaledVector(l[6],.315392*(3*r*r-1)),t.addScaledVector(l[7],1.092548*(i*r)),t.addScaledVector(l[8],.546274*(i*i-s*s)),t}getIrradianceAt(e,t){const i=e.x,s=e.y,r=e.z,l=this.coefficients;return t.copy(l[0]).multiplyScalar(.886227),t.addScaledVector(l[1],2*.511664*s),t.addScaledVector(l[2],2*.511664*r),t.addScaledVector(l[3],2*.511664*i),t.addScaledVector(l[4],2*.429043*i*s),t.addScaledVector(l[5],2*.429043*s*r),t.addScaledVector(l[6],.743125*r*r-.247708),t.addScaledVector(l[7],2*.429043*i*r),t.addScaledVector(l[8],.429043*(i*i-s*s)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(e.coefficients[i],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let i=0;i<9;i++)this.coefficients[i].lerp(e.coefficients[i],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t=0){const i=this.coefficients;for(let s=0;s<9;s++)i[s].fromArray(e,t+s*3);return this}toArray(e=[],t=0){const i=this.coefficients;for(let s=0;s<9;s++)i[s].toArray(e,t+s*3);return e}static getBasisAt(e,t){const i=e.x,s=e.y,r=e.z;t[0]=.282095,t[1]=.488603*s,t[2]=.488603*r,t[3]=.488603*i,t[4]=1.092548*i*s,t[5]=1.092548*s*r,t[6]=.315392*(3*r*r-1),t[7]=1.092548*i*r,t[8]=.546274*(i*i-s*s)}}class Dw extends su{constructor(e=new BL,t=1){super(void 0,t),this.isLightProbe=!0,this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}}class Hg extends Xr{constructor(e){super(e),this.textures={}}load(e,t,i,s){const r=this,l=new ka(r.manager);l.setPath(r.path),l.setRequestHeader(r.requestHeader),l.setWithCredentials(r.withCredentials),l.load(e,function(u){try{t(r.parse(JSON.parse(u)))}catch(d){s?s(d):console.error(d),r.manager.itemError(e)}},i,s)}parse(e){const t=this.textures;function i(r){return t[r]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",r),t[r]}const s=this.createMaterialFromType(e.type);if(e.uuid!==void 0&&(s.uuid=e.uuid),e.name!==void 0&&(s.name=e.name),e.color!==void 0&&s.color!==void 0&&s.color.setHex(e.color),e.roughness!==void 0&&(s.roughness=e.roughness),e.metalness!==void 0&&(s.metalness=e.metalness),e.sheen!==void 0&&(s.sheen=e.sheen),e.sheenColor!==void 0&&(s.sheenColor=new Jt().setHex(e.sheenColor)),e.sheenRoughness!==void 0&&(s.sheenRoughness=e.sheenRoughness),e.emissive!==void 0&&s.emissive!==void 0&&s.emissive.setHex(e.emissive),e.specular!==void 0&&s.specular!==void 0&&s.specular.setHex(e.specular),e.specularIntensity!==void 0&&(s.specularIntensity=e.specularIntensity),e.specularColor!==void 0&&s.specularColor!==void 0&&s.specularColor.setHex(e.specularColor),e.shininess!==void 0&&(s.shininess=e.shininess),e.clearcoat!==void 0&&(s.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(s.clearcoatRoughness=e.clearcoatRoughness),e.dispersion!==void 0&&(s.dispersion=e.dispersion),e.iridescence!==void 0&&(s.iridescence=e.iridescence),e.iridescenceIOR!==void 0&&(s.iridescenceIOR=e.iridescenceIOR),e.iridescenceThicknessRange!==void 0&&(s.iridescenceThicknessRange=e.iridescenceThicknessRange),e.transmission!==void 0&&(s.transmission=e.transmission),e.thickness!==void 0&&(s.thickness=e.thickness),e.attenuationDistance!==void 0&&(s.attenuationDistance=e.attenuationDistance),e.attenuationColor!==void 0&&s.attenuationColor!==void 0&&s.attenuationColor.setHex(e.attenuationColor),e.anisotropy!==void 0&&(s.anisotropy=e.anisotropy),e.anisotropyRotation!==void 0&&(s.anisotropyRotation=e.anisotropyRotation),e.fog!==void 0&&(s.fog=e.fog),e.flatShading!==void 0&&(s.flatShading=e.flatShading),e.blending!==void 0&&(s.blending=e.blending),e.combine!==void 0&&(s.combine=e.combine),e.side!==void 0&&(s.side=e.side),e.shadowSide!==void 0&&(s.shadowSide=e.shadowSide),e.opacity!==void 0&&(s.opacity=e.opacity),e.transparent!==void 0&&(s.transparent=e.transparent),e.alphaTest!==void 0&&(s.alphaTest=e.alphaTest),e.alphaHash!==void 0&&(s.alphaHash=e.alphaHash),e.depthFunc!==void 0&&(s.depthFunc=e.depthFunc),e.depthTest!==void 0&&(s.depthTest=e.depthTest),e.depthWrite!==void 0&&(s.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(s.colorWrite=e.colorWrite),e.blendSrc!==void 0&&(s.blendSrc=e.blendSrc),e.blendDst!==void 0&&(s.blendDst=e.blendDst),e.blendEquation!==void 0&&(s.blendEquation=e.blendEquation),e.blendSrcAlpha!==void 0&&(s.blendSrcAlpha=e.blendSrcAlpha),e.blendDstAlpha!==void 0&&(s.blendDstAlpha=e.blendDstAlpha),e.blendEquationAlpha!==void 0&&(s.blendEquationAlpha=e.blendEquationAlpha),e.blendColor!==void 0&&s.blendColor!==void 0&&s.blendColor.setHex(e.blendColor),e.blendAlpha!==void 0&&(s.blendAlpha=e.blendAlpha),e.stencilWriteMask!==void 0&&(s.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(s.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(s.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(s.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(s.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(s.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(s.stencilZPass=e.stencilZPass),e.stencilWrite!==void 0&&(s.stencilWrite=e.stencilWrite),e.wireframe!==void 0&&(s.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(s.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(s.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(s.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(s.rotation=e.rotation),e.linewidth!==void 0&&(s.linewidth=e.linewidth),e.dashSize!==void 0&&(s.dashSize=e.dashSize),e.gapSize!==void 0&&(s.gapSize=e.gapSize),e.scale!==void 0&&(s.scale=e.scale),e.polygonOffset!==void 0&&(s.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(s.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(s.polygonOffsetUnits=e.polygonOffsetUnits),e.dithering!==void 0&&(s.dithering=e.dithering),e.alphaToCoverage!==void 0&&(s.alphaToCoverage=e.alphaToCoverage),e.premultipliedAlpha!==void 0&&(s.premultipliedAlpha=e.premultipliedAlpha),e.forceSinglePass!==void 0&&(s.forceSinglePass=e.forceSinglePass),e.visible!==void 0&&(s.visible=e.visible),e.toneMapped!==void 0&&(s.toneMapped=e.toneMapped),e.userData!==void 0&&(s.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?s.vertexColors=e.vertexColors>0:s.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const r in e.uniforms){const l=e.uniforms[r];switch(s.uniforms[r]={},l.type){case"t":s.uniforms[r].value=i(l.value);break;case"c":s.uniforms[r].value=new Jt().setHex(l.value);break;case"v2":s.uniforms[r].value=new it().fromArray(l.value);break;case"v3":s.uniforms[r].value=new re().fromArray(l.value);break;case"v4":s.uniforms[r].value=new Un().fromArray(l.value);break;case"m3":s.uniforms[r].value=new ni().fromArray(l.value);break;case"m4":s.uniforms[r].value=new xn().fromArray(l.value);break;default:s.uniforms[r].value=l.value}}if(e.defines!==void 0&&(s.defines=e.defines),e.vertexShader!==void 0&&(s.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(s.fragmentShader=e.fragmentShader),e.glslVersion!==void 0&&(s.glslVersion=e.glslVersion),e.extensions!==void 0)for(const r in e.extensions)s.extensions[r]=e.extensions[r];if(e.lights!==void 0&&(s.lights=e.lights),e.clipping!==void 0&&(s.clipping=e.clipping),e.size!==void 0&&(s.size=e.size),e.sizeAttenuation!==void 0&&(s.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(s.map=i(e.map)),e.matcap!==void 0&&(s.matcap=i(e.matcap)),e.alphaMap!==void 0&&(s.alphaMap=i(e.alphaMap)),e.bumpMap!==void 0&&(s.bumpMap=i(e.bumpMap)),e.bumpScale!==void 0&&(s.bumpScale=e.bumpScale),e.normalMap!==void 0&&(s.normalMap=i(e.normalMap)),e.normalMapType!==void 0&&(s.normalMapType=e.normalMapType),e.normalScale!==void 0){let r=e.normalScale;Array.isArray(r)===!1&&(r=[r,r]),s.normalScale=new it().fromArray(r)}return e.displacementMap!==void 0&&(s.displacementMap=i(e.displacementMap)),e.displacementScale!==void 0&&(s.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(s.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(s.roughnessMap=i(e.roughnessMap)),e.metalnessMap!==void 0&&(s.metalnessMap=i(e.metalnessMap)),e.emissiveMap!==void 0&&(s.emissiveMap=i(e.emissiveMap)),e.emissiveIntensity!==void 0&&(s.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(s.specularMap=i(e.specularMap)),e.specularIntensityMap!==void 0&&(s.specularIntensityMap=i(e.specularIntensityMap)),e.specularColorMap!==void 0&&(s.specularColorMap=i(e.specularColorMap)),e.envMap!==void 0&&(s.envMap=i(e.envMap)),e.envMapRotation!==void 0&&s.envMapRotation.fromArray(e.envMapRotation),e.envMapIntensity!==void 0&&(s.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(s.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(s.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(s.lightMap=i(e.lightMap)),e.lightMapIntensity!==void 0&&(s.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(s.aoMap=i(e.aoMap)),e.aoMapIntensity!==void 0&&(s.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(s.gradientMap=i(e.gradientMap)),e.clearcoatMap!==void 0&&(s.clearcoatMap=i(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(s.clearcoatRoughnessMap=i(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(s.clearcoatNormalMap=i(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(s.clearcoatNormalScale=new it().fromArray(e.clearcoatNormalScale)),e.iridescenceMap!==void 0&&(s.iridescenceMap=i(e.iridescenceMap)),e.iridescenceThicknessMap!==void 0&&(s.iridescenceThicknessMap=i(e.iridescenceThicknessMap)),e.transmissionMap!==void 0&&(s.transmissionMap=i(e.transmissionMap)),e.thicknessMap!==void 0&&(s.thicknessMap=i(e.thicknessMap)),e.anisotropyMap!==void 0&&(s.anisotropyMap=i(e.anisotropyMap)),e.sheenColorMap!==void 0&&(s.sheenColorMap=i(e.sheenColorMap)),e.sheenRoughnessMap!==void 0&&(s.sheenRoughnessMap=i(e.sheenRoughnessMap)),s}setTextures(e){return this.textures=e,this}createMaterialFromType(e){return Hg.createMaterialFromType(e)}static createMaterialFromType(e){const t={ShadowMaterial:pw,SpriteMaterial:Zv,RawShaderMaterial:NL,ShaderMaterial:er,PointsMaterial:Jv,MeshPhysicalMaterial:mw,MeshStandardMaterial:d0,MeshPhongMaterial:gw,MeshToonMaterial:_w,MeshNormalMaterial:xw,MeshLambertMaterial:yw,MeshDepthMaterial:vw,MeshDistanceMaterial:Sw,MeshBasicMaterial:so,MeshMatcapMaterial:bw,LineDashedMaterial:f0,LineBasicMaterial:$r,Material:br};return new t[e]}}class uM{static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}}class OL extends li{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}toJSON(){const e=super.toJSON();return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}class VL extends Xr{constructor(e){super(e)}load(e,t,i,s){const r=this,l=new ka(r.manager);l.setPath(r.path),l.setRequestHeader(r.requestHeader),l.setWithCredentials(r.withCredentials),l.load(e,function(u){try{t(r.parse(JSON.parse(u)))}catch(d){s?s(d):console.error(d),r.manager.itemError(e)}},i,s)}parse(e){const t={},i={};function s(S,T){if(t[T]!==void 0)return t[T];const A=S.interleavedBuffers[T],w=r(S,A.buffer),O=Nf(A.type,w),F=new Fg(O,A.stride);return F.uuid=A.uuid,t[T]=F,F}function r(S,T){if(i[T]!==void 0)return i[T];const A=S.arrayBuffers[T],w=new Uint32Array(A).buffer;return i[T]=w,w}const l=e.isInstancedBufferGeometry?new OL:new li,u=e.data.index;if(u!==void 0){const S=Nf(u.type,u.array);l.setIndex(new $i(S,1))}const d=e.data.attributes;for(const S in d){const T=d[S];let E;if(T.isInterleavedBufferAttribute){const A=s(e.data,T.data);E=new jc(A,T.itemSize,T.offset,T.normalized)}else{const A=Nf(T.type,T.array),w=T.isInstancedBufferAttribute?pa:$i;E=new w(A,T.itemSize,T.normalized)}T.name!==void 0&&(E.name=T.name),T.usage!==void 0&&E.setUsage(T.usage),l.setAttribute(S,E)}const f=e.data.morphAttributes;if(f)for(const S in f){const T=f[S],E=[];for(let A=0,w=T.length;A<w;A++){const O=T[A];let F;if(O.isInterleavedBufferAttribute){const B=s(e.data,O.data);F=new jc(B,O.itemSize,O.offset,O.normalized)}else{const B=Nf(O.type,O.array);F=new $i(B,O.itemSize,O.normalized)}O.name!==void 0&&(F.name=O.name),E.push(F)}l.morphAttributes[S]=E}e.data.morphTargetsRelative&&(l.morphTargetsRelative=!0);const x=e.data.groups||e.data.drawcalls||e.data.offsets;if(x!==void 0)for(let S=0,T=x.length;S!==T;++S){const E=x[S];l.addGroup(E.start,E.count,E.materialIndex)}const v=e.data.boundingSphere;return v!==void 0&&(l.boundingSphere=new Sr().fromJSON(v)),e.name&&(l.name=e.name),e.userData&&(l.userData=e.userData),l}}class zL extends Xr{constructor(e){super(e)}load(e,t,i,s){const r=this,l=this.path===""?uM.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||l;const u=new ka(this.manager);u.setPath(this.path),u.setRequestHeader(this.requestHeader),u.setWithCredentials(this.withCredentials),u.load(e,function(d){let f=null;try{f=JSON.parse(d)}catch(x){s!==void 0&&s(x),console.error("THREE:ObjectLoader: Can't parse "+e+".",x.message);return}const g=f.metadata;if(g===void 0||g.type===void 0||g.type.toLowerCase()==="geometry"){s!==void 0&&s(new Error("THREE.ObjectLoader: Can't load "+e)),console.error("THREE.ObjectLoader: Can't load "+e);return}r.parse(f,t)},i,s)}async loadAsync(e,t){const i=this,s=this.path===""?uM.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||s;const r=new ka(this.manager);r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(this.withCredentials);const l=await r.loadAsync(e,t),u=JSON.parse(l),d=u.metadata;if(d===void 0||d.type===void 0||d.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+e);return await i.parseAsync(u)}parse(e,t){const i=this.parseAnimations(e.animations),s=this.parseShapes(e.shapes),r=this.parseGeometries(e.geometries,s),l=this.parseImages(e.images,function(){t!==void 0&&t(f)}),u=this.parseTextures(e.textures,l),d=this.parseMaterials(e.materials,u),f=this.parseObject(e.object,r,d,u,i),g=this.parseSkeletons(e.skeletons,f);if(this.bindSkeletons(f,g),this.bindLightTargets(f),t!==void 0){let x=!1;for(const v in l)if(l[v].data instanceof HTMLImageElement){x=!0;break}x===!1&&t(f)}return f}async parseAsync(e){const t=this.parseAnimations(e.animations),i=this.parseShapes(e.shapes),s=this.parseGeometries(e.geometries,i),r=await this.parseImagesAsync(e.images),l=this.parseTextures(e.textures,r),u=this.parseMaterials(e.materials,l),d=this.parseObject(e.object,s,u,l,t),f=this.parseSkeletons(e.skeletons,d);return this.bindSkeletons(d,f),this.bindLightTargets(d),d}parseShapes(e){const t={};if(e!==void 0)for(let i=0,s=e.length;i<s;i++){const r=new Ah().fromJSON(e[i]);t[r.uuid]=r}return t}parseSkeletons(e,t){const i={},s={};if(t.traverse(function(r){r.isBone&&(s[r.uuid]=r)}),e!==void 0)for(let r=0,l=e.length;r<l;r++){const u=new Kv().fromJSON(e[r],s);i[u.uuid]=u}return i}parseGeometries(e,t){const i={};if(e!==void 0){const s=new VL;for(let r=0,l=e.length;r<l;r++){let u;const d=e[r];switch(d.type){case"BufferGeometry":case"InstancedBufferGeometry":u=s.parse(d);break;default:d.type in AN?u=AN[d.type].fromJSON(d,t):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${d.type}"`)}u.uuid=d.uuid,d.name!==void 0&&(u.name=d.name),d.userData!==void 0&&(u.userData=d.userData),i[d.uuid]=u}}return i}parseMaterials(e,t){const i={},s={};if(e!==void 0){const r=new Hg;r.setTextures(t);for(let l=0,u=e.length;l<u;l++){const d=e[l];i[d.uuid]===void 0&&(i[d.uuid]=r.parse(d)),s[d.uuid]=i[d.uuid]}}return s}parseAnimations(e){const t={};if(e!==void 0)for(let i=0;i<e.length;i++){const s=e[i],r=dg.parse(s);t[r.uuid]=r}return t}parseImages(e,t){const i=this,s={};let r;function l(d){return i.manager.itemStart(d),r.load(d,function(){i.manager.itemEnd(d)},void 0,function(){i.manager.itemError(d),i.manager.itemEnd(d)})}function u(d){if(typeof d=="string"){const f=d,g=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(f)?f:i.resourcePath+f;return l(g)}else return d.data?{data:Nf(d.type,d.data),width:d.width,height:d.height}:null}if(e!==void 0&&e.length>0){const d=new Aw(t);r=new fg(d),r.setCrossOrigin(this.crossOrigin);for(let f=0,g=e.length;f<g;f++){const x=e[f],v=x.url;if(Array.isArray(v)){const S=[];for(let T=0,E=v.length;T<E;T++){const A=v[T],w=u(A);w!==null&&(w instanceof HTMLImageElement?S.push(w):S.push(new Oa(w.data,w.width,w.height)))}s[x.uuid]=new zc(S)}else{const S=u(x.url);s[x.uuid]=new zc(S)}}}return s}async parseImagesAsync(e){const t=this,i={};let s;async function r(l){if(typeof l=="string"){const u=l,d=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(u)?u:t.resourcePath+u;return await s.loadAsync(d)}else return l.data?{data:Nf(l.type,l.data),width:l.width,height:l.height}:null}if(e!==void 0&&e.length>0){s=new fg(this.manager),s.setCrossOrigin(this.crossOrigin);for(let l=0,u=e.length;l<u;l++){const d=e[l],f=d.url;if(Array.isArray(f)){const g=[];for(let x=0,v=f.length;x<v;x++){const S=f[x],T=await r(S);T!==null&&(T instanceof HTMLImageElement?g.push(T):g.push(new Oa(T.data,T.width,T.height)))}i[d.uuid]=new zc(g)}else{const g=await r(d.url);i[d.uuid]=new zc(g)}}}return i}parseTextures(e,t){function i(r,l){return typeof r=="number"?r:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",r),l[r])}const s={};if(e!==void 0)for(let r=0,l=e.length;r<l;r++){const u=e[r];u.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',u.uuid),t[u.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",u.image);const d=t[u.image],f=d.data;let g;Array.isArray(f)?(g=new tu,f.length===6&&(g.needsUpdate=!0)):(f&&f.data?g=new Oa:g=new ds,f&&(g.needsUpdate=!0)),g.source=d,g.uuid=u.uuid,u.name!==void 0&&(g.name=u.name),u.mapping!==void 0&&(g.mapping=i(u.mapping,h$)),u.channel!==void 0&&(g.channel=u.channel),u.offset!==void 0&&g.offset.fromArray(u.offset),u.repeat!==void 0&&g.repeat.fromArray(u.repeat),u.center!==void 0&&g.center.fromArray(u.center),u.rotation!==void 0&&(g.rotation=u.rotation),u.wrap!==void 0&&(g.wrapS=i(u.wrap[0],NN),g.wrapT=i(u.wrap[1],NN)),u.format!==void 0&&(g.format=u.format),u.internalFormat!==void 0&&(g.internalFormat=u.internalFormat),u.type!==void 0&&(g.type=u.type),u.colorSpace!==void 0&&(g.colorSpace=u.colorSpace),u.minFilter!==void 0&&(g.minFilter=i(u.minFilter,PN)),u.magFilter!==void 0&&(g.magFilter=i(u.magFilter,PN)),u.anisotropy!==void 0&&(g.anisotropy=u.anisotropy),u.flipY!==void 0&&(g.flipY=u.flipY),u.generateMipmaps!==void 0&&(g.generateMipmaps=u.generateMipmaps),u.premultiplyAlpha!==void 0&&(g.premultiplyAlpha=u.premultiplyAlpha),u.unpackAlignment!==void 0&&(g.unpackAlignment=u.unpackAlignment),u.compareFunction!==void 0&&(g.compareFunction=u.compareFunction),u.userData!==void 0&&(g.userData=u.userData),s[u.uuid]=g}return s}parseObject(e,t,i,s,r){let l;function u(v){return t[v]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",v),t[v]}function d(v){if(v!==void 0){if(Array.isArray(v)){const S=[];for(let T=0,E=v.length;T<E;T++){const A=v[T];i[A]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",A),S.push(i[A])}return S}return i[v]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",v),i[v]}}function f(v){return s[v]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",v),s[v]}let g,x;switch(e.type){case"Scene":l=new rd,e.background!==void 0&&(Number.isInteger(e.background)?l.background=new Jt(e.background):l.background=f(e.background)),e.environment!==void 0&&(l.environment=f(e.environment)),e.fog!==void 0&&(e.fog.type==="Fog"?l.fog=new Yv(e.fog.color,e.fog.near,e.fog.far):e.fog.type==="FogExp2"&&(l.fog=new qv(e.fog.color,e.fog.density)),e.fog.name!==""&&(l.fog.name=e.fog.name)),e.backgroundBlurriness!==void 0&&(l.backgroundBlurriness=e.backgroundBlurriness),e.backgroundIntensity!==void 0&&(l.backgroundIntensity=e.backgroundIntensity),e.backgroundRotation!==void 0&&l.backgroundRotation.fromArray(e.backgroundRotation),e.environmentIntensity!==void 0&&(l.environmentIntensity=e.environmentIntensity),e.environmentRotation!==void 0&&l.environmentRotation.fromArray(e.environmentRotation);break;case"PerspectiveCamera":l=new Gs(e.fov,e.aspect,e.near,e.far),e.focus!==void 0&&(l.focus=e.focus),e.zoom!==void 0&&(l.zoom=e.zoom),e.filmGauge!==void 0&&(l.filmGauge=e.filmGauge),e.filmOffset!==void 0&&(l.filmOffset=e.filmOffset),e.view!==void 0&&(l.view=Object.assign({},e.view));break;case"OrthographicCamera":l=new ru(e.left,e.right,e.top,e.bottom,e.near,e.far),e.zoom!==void 0&&(l.zoom=e.zoom),e.view!==void 0&&(l.view=Object.assign({},e.view));break;case"AmbientLight":l=new Iw(e.color,e.intensity);break;case"DirectionalLight":l=new Pw(e.color,e.intensity),l.target=e.target||"";break;case"PointLight":l=new Nw(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":l=new Lw(e.color,e.intensity,e.width,e.height);break;case"SpotLight":l=new Gg(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay),l.target=e.target||"";break;case"HemisphereLight":l=new Rw(e.color,e.groundColor,e.intensity);break;case"LightProbe":l=new Dw().fromJSON(e);break;case"SkinnedMesh":g=u(e.geometry),x=d(e.material),l=new pL(g,x),e.bindMode!==void 0&&(l.bindMode=e.bindMode),e.bindMatrix!==void 0&&l.bindMatrix.fromArray(e.bindMatrix),e.skeleton!==void 0&&(l.skeleton=e.skeleton);break;case"Mesh":g=u(e.geometry),x=d(e.material),l=new ts(g,x);break;case"InstancedMesh":g=u(e.geometry),x=d(e.material);const v=e.count,S=e.instanceMatrix,T=e.instanceColor;l=new mL(g,x,v),l.instanceMatrix=new pa(new Float32Array(S.array),16),T!==void 0&&(l.instanceColor=new pa(new Float32Array(T.array),T.itemSize));break;case"BatchedMesh":g=u(e.geometry),x=d(e.material),l=new gL(e.maxInstanceCount,e.maxVertexCount,e.maxIndexCount,x),l.geometry=g,l.perObjectFrustumCulled=e.perObjectFrustumCulled,l.sortObjects=e.sortObjects,l._drawRanges=e.drawRanges,l._reservedRanges=e.reservedRanges,l._geometryInfo=e.geometryInfo.map(E=>{let A=null,w=null;return E.boundingBox!==void 0&&(A=new Gr().fromJSON(E.boundingBox)),E.boundingSphere!==void 0&&(w=new Sr().fromJSON(E.boundingSphere)),{...E,boundingBox:A,boundingSphere:w}}),l._instanceInfo=e.instanceInfo,l._availableInstanceIds=e._availableInstanceIds,l._availableGeometryIds=e._availableGeometryIds,l._nextIndexStart=e.nextIndexStart,l._nextVertexStart=e.nextVertexStart,l._geometryCount=e.geometryCount,l._maxInstanceCount=e.maxInstanceCount,l._maxVertexCount=e.maxVertexCount,l._maxIndexCount=e.maxIndexCount,l._geometryInitialized=e.geometryInitialized,l._matricesTexture=f(e.matricesTexture.uuid),l._indirectTexture=f(e.indirectTexture.uuid),e.colorsTexture!==void 0&&(l._colorsTexture=f(e.colorsTexture.uuid)),e.boundingSphere!==void 0&&(l.boundingSphere=new Sr().fromJSON(e.boundingSphere)),e.boundingBox!==void 0&&(l.boundingBox=new Gr().fromJSON(e.boundingBox));break;case"LOD":l=new fL;break;case"Line":l=new Qc(u(e.geometry),d(e.material));break;case"LineLoop":l=new _L(u(e.geometry),d(e.material));break;case"LineSegments":l=new _l(u(e.geometry),d(e.material));break;case"PointCloud":case"Points":l=new xL(u(e.geometry),d(e.material));break;case"Sprite":l=new dL(d(e.material));break;case"Group":l=new kc;break;case"Bone":l=new rw;break;default:l=new Di}if(l.uuid=e.uuid,e.name!==void 0&&(l.name=e.name),e.matrix!==void 0?(l.matrix.fromArray(e.matrix),e.matrixAutoUpdate!==void 0&&(l.matrixAutoUpdate=e.matrixAutoUpdate),l.matrixAutoUpdate&&l.matrix.decompose(l.position,l.quaternion,l.scale)):(e.position!==void 0&&l.position.fromArray(e.position),e.rotation!==void 0&&l.rotation.fromArray(e.rotation),e.quaternion!==void 0&&l.quaternion.fromArray(e.quaternion),e.scale!==void 0&&l.scale.fromArray(e.scale)),e.up!==void 0&&l.up.fromArray(e.up),e.castShadow!==void 0&&(l.castShadow=e.castShadow),e.receiveShadow!==void 0&&(l.receiveShadow=e.receiveShadow),e.shadow&&(e.shadow.intensity!==void 0&&(l.shadow.intensity=e.shadow.intensity),e.shadow.bias!==void 0&&(l.shadow.bias=e.shadow.bias),e.shadow.normalBias!==void 0&&(l.shadow.normalBias=e.shadow.normalBias),e.shadow.radius!==void 0&&(l.shadow.radius=e.shadow.radius),e.shadow.mapSize!==void 0&&l.shadow.mapSize.fromArray(e.shadow.mapSize),e.shadow.camera!==void 0&&(l.shadow.camera=this.parseObject(e.shadow.camera))),e.visible!==void 0&&(l.visible=e.visible),e.frustumCulled!==void 0&&(l.frustumCulled=e.frustumCulled),e.renderOrder!==void 0&&(l.renderOrder=e.renderOrder),e.userData!==void 0&&(l.userData=e.userData),e.layers!==void 0&&(l.layers.mask=e.layers),e.children!==void 0){const v=e.children;for(let S=0;S<v.length;S++)l.add(this.parseObject(v[S],t,i,s,r))}if(e.animations!==void 0){const v=e.animations;for(let S=0;S<v.length;S++){const T=v[S];l.animations.push(r[T])}}if(e.type==="LOD"){e.autoUpdate!==void 0&&(l.autoUpdate=e.autoUpdate);const v=e.levels;for(let S=0;S<v.length;S++){const T=v[S],E=l.getObjectByProperty("uuid",T.object);E!==void 0&&l.addLevel(E,T.distance,T.hysteresis)}}return l}bindSkeletons(e,t){Object.keys(t).length!==0&&e.traverse(function(i){if(i.isSkinnedMesh===!0&&i.skeleton!==void 0){const s=t[i.skeleton];s===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",i.skeleton):i.bind(s,i.bindMatrix)}})}bindLightTargets(e){e.traverse(function(t){if(t.isDirectionalLight||t.isSpotLight){const i=t.target,s=e.getObjectByProperty("uuid",i);s!==void 0?t.target=s:t.target=new Di}})}}const h$={UVMapping:Eg,CubeReflectionMapping:qo,CubeRefractionMapping:ga,EquirectangularReflectionMapping:Kc,EquirectangularRefractionMapping:Jc,CubeUVReflectionMapping:nc},NN={RepeatWrapping:za,ClampToEdgeWrapping:js,MirroredRepeatWrapping:ic},PN={NearestFilter:Ci,NearestMipmapNearestFilter:Rg,NearestMipmapLinearFilter:Fa,LinearFilter:Ni,LinearMipmapNearestFilter:Hc,LinearMipmapLinearFilter:Cr},hT=new WeakMap;class d$ extends Xr{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"},this._abortController=new AbortController}setOptions(e){return this.options=e,this}load(e,t,i,s){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=this,l=hl.get(`image-bitmap:${e}`);if(l!==void 0){if(r.manager.itemStart(e),l.then){l.then(f=>{if(hT.has(l)===!0)s&&s(hT.get(l)),r.manager.itemError(e),r.manager.itemEnd(e);else return t&&t(f),r.manager.itemEnd(e),f});return}return setTimeout(function(){t&&t(l),r.manager.itemEnd(e)},0),l}const u={};u.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",u.headers=this.requestHeader,u.signal=typeof AbortSignal.any=="function"?AbortSignal.any([this._abortController.signal,this.manager.abortController.signal]):this._abortController.signal;const d=fetch(e,u).then(function(f){return f.blob()}).then(function(f){return createImageBitmap(f,Object.assign(r.options,{colorSpaceConversion:"none"}))}).then(function(f){return hl.add(`image-bitmap:${e}`,f),t&&t(f),r.manager.itemEnd(e),f}).catch(function(f){s&&s(f),hT.set(d,f),hl.remove(`image-bitmap:${e}`),r.manager.itemError(e),r.manager.itemEnd(e)});hl.add(`image-bitmap:${e}`,d),r.manager.itemStart(e)}abort(){return this._abortController.abort(),this._abortController=new AbortController,this}}let my;class Uw{static getContext(){return my===void 0&&(my=new(window.AudioContext||window.webkitAudioContext)),my}static setContext(e){my=e}}class f$ extends Xr{constructor(e){super(e)}load(e,t,i,s){const r=this,l=new ka(this.manager);l.setResponseType("arraybuffer"),l.setPath(this.path),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(e,function(d){try{const f=d.slice(0);Uw.getContext().decodeAudioData(f,function(x){t(x)}).catch(u)}catch(f){u(f)}},i,s);function u(d){s?s(d):console.error(d),r.manager.itemError(e)}}}const IN=new xn,LN=new xn,Ju=new xn;class p${constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Gs,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Gs,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(e){const t=this._cache;if(t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep,Ju.copy(e.projectionMatrix);const s=t.eyeSep/2,r=s*t.near/t.focus,l=t.near*Math.tan(wh*t.fov*.5)/t.zoom;let u,d;LN.elements[12]=-s,IN.elements[12]=s,u=-l*t.aspect+r,d=l*t.aspect+r,Ju.elements[0]=2*t.near/(d-u),Ju.elements[8]=(d+u)/(d-u),this.cameraL.projectionMatrix.copy(Ju),u=-l*t.aspect-r,d=l*t.aspect-r,Ju.elements[0]=2*t.near/(d-u),Ju.elements[8]=(d+u)/(d-u),this.cameraR.projectionMatrix.copy(Ju)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(LN),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(IN)}}class Fw extends Gs{constructor(e=[]){super(),this.isArrayCamera=!0,this.isMultiViewCamera=!1,this.cameras=e}}class kL{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=performance.now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const t=performance.now();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}const ju=new re,dT=new lo,m$=new re,Qu=new re,eh=new re;class g$ extends Di{constructor(){super(),this.type="AudioListener",this.context=Uw.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new kL}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(e){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(ju,dT,m$),Qu.set(0,0,-1).applyQuaternion(dT),eh.set(0,1,0).applyQuaternion(dT),t.positionX){const i=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(ju.x,i),t.positionY.linearRampToValueAtTime(ju.y,i),t.positionZ.linearRampToValueAtTime(ju.z,i),t.forwardX.linearRampToValueAtTime(Qu.x,i),t.forwardY.linearRampToValueAtTime(Qu.y,i),t.forwardZ.linearRampToValueAtTime(Qu.z,i),t.upX.linearRampToValueAtTime(eh.x,i),t.upY.linearRampToValueAtTime(eh.y,i),t.upZ.linearRampToValueAtTime(eh.z,i)}else t.setPosition(ju.x,ju.y,ju.z),t.setOrientation(Qu.x,Qu.y,Qu.z,eh.x,eh.y,eh.z)}}let GL=class extends Di{constructor(e){super(),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(e=0){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source!==null&&(this.source.stop(this.context.currentTime+e),this.source.onended=null),this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this._connected!==!1){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){return this.detune=e,this.isPlaying===!0&&this.source.detune!==void 0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1,this._progress=0}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}copy(e,t){return super.copy(e,t),e.sourceType!=="buffer"?(console.warn("THREE.Audio: Audio source type cannot be copied."),this):(this.autoplay=e.autoplay,this.buffer=e.buffer,this.detune=e.detune,this.loop=e.loop,this.loopStart=e.loopStart,this.loopEnd=e.loopEnd,this.offset=e.offset,this.duration=e.duration,this.playbackRate=e.playbackRate,this.hasPlaybackControl=e.hasPlaybackControl,this.sourceType=e.sourceType,this.filters=e.filters.slice(),this)}clone(e){return new this.constructor(this.listener).copy(this,e)}};const th=new re,DN=new lo,_$=new re,nh=new re;class x$ extends GL{constructor(e){super(e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}connect(){return super.connect(),this.panner.connect(this.gain),this}disconnect(){return super.disconnect(),this.panner.disconnect(this.gain),this}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){return this.panner.refDistance=e,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){return this.panner.rolloffFactor=e,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){return this.panner.distanceModel=e,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){return this.panner.maxDistance=e,this}setDirectionalCone(e,t,i){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=i,this}updateMatrixWorld(e){if(super.updateMatrixWorld(e),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(th,DN,_$),nh.set(0,0,1).applyQuaternion(DN);const t=this.panner;if(t.positionX){const i=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(th.x,i),t.positionY.linearRampToValueAtTime(th.y,i),t.positionZ.linearRampToValueAtTime(th.z,i),t.orientationX.linearRampToValueAtTime(nh.x,i),t.orientationY.linearRampToValueAtTime(nh.y,i),t.orientationZ.linearRampToValueAtTime(nh.z,i)}else t.setPosition(th.x,th.y,th.z),t.setOrientation(nh.x,nh.y,nh.z)}}class y${constructor(e,t=2048){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=t,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let e=0;const t=this.getFrequencyData();for(let i=0;i<t.length;i++)e+=t[i];return e/t.length}}class HL{constructor(e,t,i){this.binding=e,this.valueSize=i;let s,r,l;switch(t){case"quaternion":s=this._slerp,r=this._slerpAdditive,l=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(i*6),this._workIndex=5;break;case"string":case"bool":s=this._select,r=this._select,l=this._setAdditiveIdentityOther,this.buffer=new Array(i*5);break;default:s=this._lerp,r=this._lerpAdditive,l=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(i*5)}this._mixBufferRegion=s,this._mixBufferRegionAdditive=r,this._setIdentity=l,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,t){const i=this.buffer,s=this.valueSize,r=e*s+s;let l=this.cumulativeWeight;if(l===0){for(let u=0;u!==s;++u)i[r+u]=i[u];l=t}else{l+=t;const u=t/l;this._mixBufferRegion(i,r,0,u,s)}this.cumulativeWeight=l}accumulateAdditive(e){const t=this.buffer,i=this.valueSize,s=i*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(t,s,0,e,i),this.cumulativeWeightAdditive+=e}apply(e){const t=this.valueSize,i=this.buffer,s=e*t+t,r=this.cumulativeWeight,l=this.cumulativeWeightAdditive,u=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const d=t*this._origIndex;this._mixBufferRegion(i,s,d,1-r,t)}l>0&&this._mixBufferRegionAdditive(i,s,this._addIndex*t,1,t);for(let d=t,f=t+t;d!==f;++d)if(i[d]!==i[d+t]){u.setValue(i,s);break}}saveOriginalState(){const e=this.binding,t=this.buffer,i=this.valueSize,s=i*this._origIndex;e.getValue(t,s);for(let r=i,l=s;r!==l;++r)t[r]=t[s+r%i];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,t=e+this.valueSize;for(let i=e;i<t;i++)this.buffer[i]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++)this.buffer[t+i]=this.buffer[e+i]}_select(e,t,i,s,r){if(s>=.5)for(let l=0;l!==r;++l)e[t+l]=e[i+l]}_slerp(e,t,i,s){lo.slerpFlat(e,t,e,t,e,i,s)}_slerpAdditive(e,t,i,s,r){const l=this._workIndex*r;lo.multiplyQuaternionsFlat(e,l,e,t,e,i),lo.slerpFlat(e,t,e,t,e,l,s)}_lerp(e,t,i,s,r){const l=1-s;for(let u=0;u!==r;++u){const d=t+u;e[d]=e[d]*l+e[i+u]*s}}_lerpAdditive(e,t,i,s,r){for(let l=0;l!==r;++l){const u=t+l;e[u]=e[u]+e[i+l]*s}}}const Bw="\\[\\]\\.:\\/",v$=new RegExp("["+Bw+"]","g"),Ow="[^"+Bw+"]",S$="[^"+Bw.replace("\\.","")+"]",b$=/((?:WC+[\/:])*)/.source.replace("WC",Ow),T$=/(WCOD+)?/.source.replace("WCOD",S$),M$=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Ow),w$=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Ow),A$=new RegExp("^"+b$+T$+M$+w$+"$"),E$=["material","materials","bones","map"];class R${constructor(e,t,i){const s=i||Vi.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,s)}getValue(e,t){this.bind();const i=this._targetGroup.nCachedObjects_,s=this._bindings[i];s!==void 0&&s.getValue(e,t)}setValue(e,t){const i=this._bindings;for(let s=this._targetGroup.nCachedObjects_,r=i.length;s!==r;++s)i[s].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].unbind()}}class Vi{constructor(e,t,i){this.path=t,this.parsedPath=i||Vi.parseTrackName(t),this.node=Vi.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,i){return e&&e.isAnimationObjectGroup?new Vi.Composite(e,t,i):new Vi(e,t,i)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(v$,"")}static parseTrackName(e){const t=A$.exec(e);if(t===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const i={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},s=i.nodeName&&i.nodeName.lastIndexOf(".");if(s!==void 0&&s!==-1){const r=i.nodeName.substring(s+1);E$.indexOf(r)!==-1&&(i.nodeName=i.nodeName.substring(0,s),i.objectName=r)}if(i.propertyName===null||i.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return i}static findNode(e,t){if(t===void 0||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const i=e.skeleton.getBoneByName(t);if(i!==void 0)return i}if(e.children){const i=function(r){for(let l=0;l<r.length;l++){const u=r[l];if(u.name===t||u.uuid===t)return u;const d=i(u.children);if(d)return d}return null},s=i(e.children);if(s)return s}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)e[t++]=i[s]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)i[s]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)i[s]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)i[s]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,i=t.objectName,s=t.propertyName;let r=t.propertyIndex;if(e||(e=Vi.findNode(this.rootNode,t.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(i){let f=t.objectIndex;switch(i){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let g=0;g<e.length;g++)if(e[g].name===f){f=g;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[i]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[i]}if(f!==void 0){if(e[f]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[f]}}const l=e[s];if(l===void 0){const f=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+f+"."+s+" but it wasn't found.",e);return}let u=this.Versioning.None;this.targetObject=e,e.isMaterial===!0?u=this.Versioning.NeedsUpdate:e.isObject3D===!0&&(u=this.Versioning.MatrixWorldNeedsUpdate);let d=this.BindingType.Direct;if(r!==void 0){if(s==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[r]!==void 0&&(r=e.morphTargetDictionary[r])}d=this.BindingType.ArrayElement,this.resolvedProperty=l,this.propertyIndex=r}else l.fromArray!==void 0&&l.toArray!==void 0?(d=this.BindingType.HasFromToArray,this.resolvedProperty=l):Array.isArray(l)?(d=this.BindingType.EntireArray,this.resolvedProperty=l):this.propertyName=s;this.getValue=this.GetterByBindingType[d],this.setValue=this.SetterByBindingTypeAndVersioning[d][u]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Vi.Composite=R$;Vi.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};Vi.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};Vi.prototype.GetterByBindingType=[Vi.prototype._getValue_direct,Vi.prototype._getValue_array,Vi.prototype._getValue_arrayElement,Vi.prototype._getValue_toArray];Vi.prototype.SetterByBindingTypeAndVersioning=[[Vi.prototype._setValue_direct,Vi.prototype._setValue_direct_setNeedsUpdate,Vi.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Vi.prototype._setValue_array,Vi.prototype._setValue_array_setNeedsUpdate,Vi.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Vi.prototype._setValue_arrayElement,Vi.prototype._setValue_arrayElement_setNeedsUpdate,Vi.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Vi.prototype._setValue_fromArray,Vi.prototype._setValue_fromArray_setNeedsUpdate,Vi.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class C${constructor(){this.isAnimationObjectGroup=!0,this.uuid=$o(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const e={};this._indicesByUUID=e;for(let i=0,s=arguments.length;i!==s;++i)e[arguments[i].uuid]=i;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const t=this;this.stats={objects:{get total(){return t._objects.length},get inUse(){return this.total-t.nCachedObjects_}},get bindingsPerObject(){return t._bindings.length}}}add(){const e=this._objects,t=this._indicesByUUID,i=this._paths,s=this._parsedPaths,r=this._bindings,l=r.length;let u,d=e.length,f=this.nCachedObjects_;for(let g=0,x=arguments.length;g!==x;++g){const v=arguments[g],S=v.uuid;let T=t[S];if(T===void 0){T=d++,t[S]=T,e.push(v);for(let E=0,A=l;E!==A;++E)r[E].push(new Vi(v,i[E],s[E]))}else if(T<f){u=e[T];const E=--f,A=e[E];t[A.uuid]=T,e[T]=A,t[S]=E,e[E]=v;for(let w=0,O=l;w!==O;++w){const F=r[w],B=F[E];let k=F[T];F[T]=B,k===void 0&&(k=new Vi(v,i[w],s[w])),F[E]=k}}else e[T]!==u&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=f}remove(){const e=this._objects,t=this._indicesByUUID,i=this._bindings,s=i.length;let r=this.nCachedObjects_;for(let l=0,u=arguments.length;l!==u;++l){const d=arguments[l],f=d.uuid,g=t[f];if(g!==void 0&&g>=r){const x=r++,v=e[x];t[v.uuid]=g,e[g]=v,t[f]=x,e[x]=d;for(let S=0,T=s;S!==T;++S){const E=i[S],A=E[x],w=E[g];E[g]=A,E[x]=w}}}this.nCachedObjects_=r}uncache(){const e=this._objects,t=this._indicesByUUID,i=this._bindings,s=i.length;let r=this.nCachedObjects_,l=e.length;for(let u=0,d=arguments.length;u!==d;++u){const f=arguments[u],g=f.uuid,x=t[g];if(x!==void 0)if(delete t[g],x<r){const v=--r,S=e[v],T=--l,E=e[T];t[S.uuid]=x,e[x]=S,t[E.uuid]=v,e[v]=E,e.pop();for(let A=0,w=s;A!==w;++A){const O=i[A],F=O[v],B=O[T];O[x]=F,O[v]=B,O.pop()}}else{const v=--l,S=e[v];v>0&&(t[S.uuid]=x),e[x]=S,e.pop();for(let T=0,E=s;T!==E;++T){const A=i[T];A[x]=A[v],A.pop()}}}this.nCachedObjects_=r}subscribe_(e,t){const i=this._bindingsIndicesByPath;let s=i[e];const r=this._bindings;if(s!==void 0)return r[s];const l=this._paths,u=this._parsedPaths,d=this._objects,f=d.length,g=this.nCachedObjects_,x=new Array(f);s=r.length,i[e]=s,l.push(e),u.push(t),r.push(x);for(let v=g,S=d.length;v!==S;++v){const T=d[v];x[v]=new Vi(T,e,t)}return x}unsubscribe_(e){const t=this._bindingsIndicesByPath,i=t[e];if(i!==void 0){const s=this._paths,r=this._parsedPaths,l=this._bindings,u=l.length-1,d=l[u],f=e[u];t[f]=i,l[i]=d,l.pop(),r[i]=r[u],r.pop(),s[i]=s[u],s.pop()}}}class WL{constructor(e,t,i=null,s=t.blendMode){this._mixer=e,this._clip=t,this._localRoot=i,this.blendMode=s;const r=t.tracks,l=r.length,u=new Array(l),d={endingStart:_h,endingEnd:_h};for(let f=0;f!==l;++f){const g=r[f].createInterpolant(null);u[f]=g,g.settings=d}this._interpolantSettings=d,this._interpolants=u,this._propertyBindings=new Array(l),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=WI,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,i=!1){if(e.fadeOut(t),this.fadeIn(t),i===!0){const s=this._clip.duration,r=e._clip.duration,l=r/s,u=s/r;e.warp(1,l,t),this.warp(u,1,t)}return this}crossFadeTo(e,t,i=!1){return e.crossFadeFrom(this,t,i)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,i){const s=this._mixer,r=s.time,l=this.timeScale;let u=this._timeScaleInterpolant;u===null&&(u=s._lendControlInterpolant(),this._timeScaleInterpolant=u);const d=u.parameterPositions,f=u.sampleValues;return d[0]=r,d[1]=r+i,f[0]=e/l,f[1]=t/l,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,i,s){if(!this.enabled){this._updateWeight(e);return}const r=this._startTime;if(r!==null){const d=(e-r)*i;d<0||i===0?t=0:(this._startTime=null,t=i*d)}t*=this._updateTimeScale(e);const l=this._updateTime(t),u=this._updateWeight(e);if(u>0){const d=this._interpolants,f=this._propertyBindings;switch(this.blendMode){case KM:for(let g=0,x=d.length;g!==x;++g)d[g].evaluate(l),f[g].accumulateAdditive(u);break;case Fv:default:for(let g=0,x=d.length;g!==x;++g)d[g].evaluate(l),f[g].accumulate(s,u)}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const i=this._weightInterpolant;if(i!==null){const s=i.evaluate(e)[0];t*=s,e>i.parameterPositions[1]&&(this.stopFading(),s===0&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const i=this._timeScaleInterpolant;if(i!==null){const s=i.evaluate(e)[0];t*=s,e>i.parameterPositions[1]&&(this.stopWarping(),t===0?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t}_updateTime(e){const t=this._clip.duration,i=this.loop;let s=this.time+e,r=this._loopCount;const l=i===$I;if(e===0)return r===-1?s:l&&(r&1)===1?t-s:s;if(i===HI){r===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(s>=t)s=t;else if(s<0)s=0;else{this.time=s;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=s,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(r===-1&&(e>=0?(r=0,this._setEndings(!0,this.repetitions===0,l)):this._setEndings(this.repetitions===0,!0,l)),s>=t||s<0){const u=Math.floor(s/t);s-=t*u,r+=Math.abs(u);const d=this.repetitions-r;if(d<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,s=e>0?t:0,this.time=s,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(d===1){const f=e<0;this._setEndings(f,!f,l)}else this._setEndings(!1,!1,l);this._loopCount=r,this.time=s,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:u})}}else this.time=s;if(l&&(r&1)===1)return t-s}return s}_setEndings(e,t,i){const s=this._interpolantSettings;i?(s.endingStart=xh,s.endingEnd=xh):(e?s.endingStart=this.zeroSlopeAtStart?xh:_h:s.endingStart=rg,t?s.endingEnd=this.zeroSlopeAtEnd?xh:_h:s.endingEnd=rg)}_scheduleFading(e,t,i){const s=this._mixer,r=s.time;let l=this._weightInterpolant;l===null&&(l=s._lendControlInterpolant(),this._weightInterpolant=l);const u=l.parameterPositions,d=l.sampleValues;return u[0]=r,d[0]=t,u[1]=r+e,d[1]=i,this}}const N$=new Float32Array(1);class P$ extends Jo{constructor(e){super(),this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,t){const i=e._localRoot||this._root,s=e._clip.tracks,r=s.length,l=e._propertyBindings,u=e._interpolants,d=i.uuid,f=this._bindingsByRootAndName;let g=f[d];g===void 0&&(g={},f[d]=g);for(let x=0;x!==r;++x){const v=s[x],S=v.name;let T=g[S];if(T!==void 0)++T.referenceCount,l[x]=T;else{if(T=l[x],T!==void 0){T._cacheIndex===null&&(++T.referenceCount,this._addInactiveBinding(T,d,S));continue}const E=t&&t._propertyBindings[x].binding.parsedPath;T=new HL(Vi.create(i,S,E),v.ValueTypeName,v.getValueSize()),++T.referenceCount,this._addInactiveBinding(T,d,S),l[x]=T}u[x].resultBuffer=T.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const i=(e._localRoot||this._root).uuid,s=e._clip.uuid,r=this._actionsByClip[s];this._bindAction(e,r&&r.knownActions[0]),this._addInactiveAction(e,s,i)}const t=e._propertyBindings;for(let i=0,s=t.length;i!==s;++i){const r=t[i];r.useCount++===0&&(this._lendBinding(r),r.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let i=0,s=t.length;i!==s;++i){const r=t[i];--r.useCount===0&&(r.restoreOriginalState(),this._takeBackBinding(r))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,i){const s=this._actions,r=this._actionsByClip;let l=r[t];if(l===void 0)l={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,r[t]=l;else{const u=l.knownActions;e._byClipCacheIndex=u.length,u.push(e)}e._cacheIndex=s.length,s.push(e),l.actionByRoot[i]=e}_removeInactiveAction(e){const t=this._actions,i=t[t.length-1],s=e._cacheIndex;i._cacheIndex=s,t[s]=i,t.pop(),e._cacheIndex=null;const r=e._clip.uuid,l=this._actionsByClip,u=l[r],d=u.knownActions,f=d[d.length-1],g=e._byClipCacheIndex;f._byClipCacheIndex=g,d[g]=f,d.pop(),e._byClipCacheIndex=null;const x=u.actionByRoot,v=(e._localRoot||this._root).uuid;delete x[v],d.length===0&&delete l[r],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const t=e._propertyBindings;for(let i=0,s=t.length;i!==s;++i){const r=t[i];--r.referenceCount===0&&this._removeInactiveBinding(r)}}_lendAction(e){const t=this._actions,i=e._cacheIndex,s=this._nActiveActions++,r=t[s];e._cacheIndex=s,t[s]=e,r._cacheIndex=i,t[i]=r}_takeBackAction(e){const t=this._actions,i=e._cacheIndex,s=--this._nActiveActions,r=t[s];e._cacheIndex=s,t[s]=e,r._cacheIndex=i,t[i]=r}_addInactiveBinding(e,t,i){const s=this._bindingsByRootAndName,r=this._bindings;let l=s[t];l===void 0&&(l={},s[t]=l),l[i]=e,e._cacheIndex=r.length,r.push(e)}_removeInactiveBinding(e){const t=this._bindings,i=e.binding,s=i.rootNode.uuid,r=i.path,l=this._bindingsByRootAndName,u=l[s],d=t[t.length-1],f=e._cacheIndex;d._cacheIndex=f,t[f]=d,t.pop(),delete u[r],Object.keys(u).length===0&&delete l[s]}_lendBinding(e){const t=this._bindings,i=e._cacheIndex,s=this._nActiveBindings++,r=t[s];e._cacheIndex=s,t[s]=e,r._cacheIndex=i,t[i]=r}_takeBackBinding(e){const t=this._bindings,i=e._cacheIndex,s=--this._nActiveBindings,r=t[s];e._cacheIndex=s,t[s]=e,r._cacheIndex=i,t[i]=r}_lendControlInterpolant(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let i=e[t];return i===void 0&&(i=new Mw(new Float32Array(2),new Float32Array(2),1,N$),i.__cacheIndex=t,e[t]=i),i}_takeBackControlInterpolant(e){const t=this._controlInterpolants,i=e.__cacheIndex,s=--this._nActiveControlInterpolants,r=t[s];e.__cacheIndex=s,t[s]=e,r.__cacheIndex=i,t[i]=r}clipAction(e,t,i){const s=t||this._root,r=s.uuid;let l=typeof e=="string"?dg.findByName(s,e):e;const u=l!==null?l.uuid:e,d=this._actionsByClip[u];let f=null;if(i===void 0&&(l!==null?i=l.blendMode:i=Fv),d!==void 0){const x=d.actionByRoot[r];if(x!==void 0&&x.blendMode===i)return x;f=d.knownActions[0],l===null&&(l=f._clip)}if(l===null)return null;const g=new WL(this,l,t,i);return this._bindAction(g,f),this._addInactiveAction(g,u,r),g}existingAction(e,t){const i=t||this._root,s=i.uuid,r=typeof e=="string"?dg.findByName(i,e):e,l=r?r.uuid:e,u=this._actionsByClip[l];return u!==void 0&&u.actionByRoot[s]||null}stopAllAction(){const e=this._actions,t=this._nActiveActions;for(let i=t-1;i>=0;--i)e[i].stop();return this}update(e){e*=this.timeScale;const t=this._actions,i=this._nActiveActions,s=this.time+=e,r=Math.sign(e),l=this._accuIndex^=1;for(let f=0;f!==i;++f)t[f]._update(s,e,r,l);const u=this._bindings,d=this._nActiveBindings;for(let f=0;f!==d;++f)u[f].apply(l);return this}setTime(e){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const t=this._actions,i=e.uuid,s=this._actionsByClip,r=s[i];if(r!==void 0){const l=r.knownActions;for(let u=0,d=l.length;u!==d;++u){const f=l[u];this._deactivateAction(f);const g=f._cacheIndex,x=t[t.length-1];f._cacheIndex=null,f._byClipCacheIndex=null,x._cacheIndex=g,t[g]=x,t.pop(),this._removeInactiveBindingsForAction(f)}delete s[i]}}uncacheRoot(e){const t=e.uuid,i=this._actionsByClip;for(const l in i){const u=i[l].actionByRoot,d=u[t];d!==void 0&&(this._deactivateAction(d),this._removeInactiveAction(d))}const s=this._bindingsByRootAndName,r=s[t];if(r!==void 0)for(const l in r){const u=r[l];u.restoreOriginalState(),this._removeInactiveBinding(u)}}uncacheAction(e,t){const i=this.existingAction(e,t);i!==null&&(this._deactivateAction(i),this._removeInactiveAction(i))}}class I$ extends $a{constructor(e=1,t=1,i=1,s={}){super(e,t,s),this.isRenderTarget3D=!0,this.depth=i,this.texture=new Hv(null,e,t,i),this._setTextureOptions(s),this.texture.isRenderTargetTexture=!0}}let L$=class $L{constructor(e){this.value=e}clone(){return new $L(this.value.clone===void 0?this.value:this.value.clone())}},D$=0,U$=class extends Jo{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:D$++}),this.name="",this.usage=sp,this.uniforms=[]}add(e){return this.uniforms.push(e),this}remove(e){const t=this.uniforms.indexOf(e);return t!==-1&&this.uniforms.splice(t,1),this}setName(e){return this.name=e,this}setUsage(e){return this.usage=e,this}dispose(){this.dispatchEvent({type:"dispose"})}copy(e){this.name=e.name,this.usage=e.usage;const t=e.uniforms;this.uniforms.length=0;for(let i=0,s=t.length;i<s;i++){const r=Array.isArray(t[i])?t[i]:[t[i]];for(let l=0;l<r.length;l++)this.uniforms.push(r[l].clone())}return this}clone(){return new this.constructor().copy(this)}};class XL extends Fg{constructor(e,t,i=1){super(e,t),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=i}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}class F${constructor(e,t,i,s,r,l=!1){this.isGLBufferAttribute=!0,this.name="",this.buffer=e,this.type=t,this.itemSize=i,this.elementSize=s,this.count=r,this.normalized=l,this.version=0}set needsUpdate(e){e===!0&&this.version++}setBuffer(e){return this.buffer=e,this}setType(e,t){return this.type=e,this.elementSize=t,this}setItemSize(e){return this.itemSize=e,this}setCount(e){return this.count=e,this}}const UN=new xn;class B${constructor(e,t,i=0,s=1/0){this.ray=new gp(e,t),this.near=i,this.far=s,this.camera=null,this.layers=new Wv,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}setFromXRController(e){return UN.identity().extractRotation(e.matrixWorld),this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(UN),this}intersectObject(e,t=!0,i=[]){return hM(e,this,i,t),i.sort(FN),i}intersectObjects(e,t=!0,i=[]){for(let s=0,r=e.length;s<r;s++)hM(e[s],this,i,t);return i.sort(FN),i}}function FN(a,e){return a.distance-e.distance}function hM(a,e,t,i){let s=!0;if(a.layers.test(e.layers)&&a.raycast(e,t)===!1&&(s=!1),s===!0&&i===!0){const r=a.children;for(let l=0,u=r.length;l<u;l++)hM(r[l],e,t,!0)}}class O${constructor(){this._previousTime=0,this._currentTime=0,this._startTime=performance.now(),this._delta=0,this._elapsed=0,this._timescale=1,this._document=null,this._pageVisibilityHandler=null}connect(e){this._document=e,e.hidden!==void 0&&(this._pageVisibilityHandler=V$.bind(this),e.addEventListener("visibilitychange",this._pageVisibilityHandler,!1))}disconnect(){this._pageVisibilityHandler!==null&&(this._document.removeEventListener("visibilitychange",this._pageVisibilityHandler),this._pageVisibilityHandler=null),this._document=null}getDelta(){return this._delta/1e3}getElapsed(){return this._elapsed/1e3}getTimescale(){return this._timescale}setTimescale(e){return this._timescale=e,this}reset(){return this._currentTime=performance.now()-this._startTime,this}dispose(){this.disconnect()}update(e){return this._pageVisibilityHandler!==null&&this._document.hidden===!0?this._delta=0:(this._previousTime=this._currentTime,this._currentTime=(e!==void 0?e:performance.now())-this._startTime,this._delta=(this._currentTime-this._previousTime)*this._timescale,this._elapsed+=this._delta),this}}function V$(){this._document.hidden===!1&&this.reset()}class z${constructor(e=1,t=0,i=0){this.radius=e,this.phi=t,this.theta=i}set(e,t,i){return this.radius=e,this.phi=t,this.theta=i,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=jn(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,i){return this.radius=Math.sqrt(e*e+t*t+i*i),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,i),this.phi=Math.acos(jn(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class k${constructor(e=1,t=0,i=0){this.radius=e,this.theta=t,this.y=i}set(e,t,i){return this.radius=e,this.theta=t,this.y=i,this}copy(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,i){return this.radius=Math.sqrt(e*e+i*i),this.theta=Math.atan2(e,i),this.y=t,this}clone(){return new this.constructor().copy(this)}}class Wg{constructor(e,t,i,s){Wg.prototype.isMatrix2=!0,this.elements=[1,0,0,1],e!==void 0&&this.set(e,t,i,s)}identity(){return this.set(1,0,0,1),this}fromArray(e,t=0){for(let i=0;i<4;i++)this.elements[i]=e[i+t];return this}set(e,t,i,s){const r=this.elements;return r[0]=e,r[2]=t,r[1]=i,r[3]=s,this}}const BN=new it;class G${constructor(e=new it(1/0,1/0),t=new it(-1/0,-1/0)){this.isBox2=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromPoints(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const i=BN.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(i),this.max.copy(e).add(i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,BN).distanceTo(e)}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const ON=new re,gy=new re,gf=new re,_f=new re,fT=new re,H$=new re,W$=new re;class $${constructor(e=new re,t=new re){this.start=e,this.end=t}set(e,t){return this.start.copy(e),this.end.copy(t),this}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){ON.subVectors(e,this.start),gy.subVectors(this.end,this.start);const i=gy.dot(gy);let r=gy.dot(ON)/i;return t&&(r=jn(r,0,1)),r}closestPointToPoint(e,t,i){const s=this.closestPointToPointParameter(e,t);return this.delta(i).multiplyScalar(s).add(this.start)}distanceSqToLine3(e,t=H$,i=W$){const s=10000000000000001e-32;let r,l;const u=this.start,d=e.start,f=this.end,g=e.end;gf.subVectors(f,u),_f.subVectors(g,d),fT.subVectors(u,d);const x=gf.dot(gf),v=_f.dot(_f),S=_f.dot(fT);if(x<=s&&v<=s)return t.copy(u),i.copy(d),t.sub(i),t.dot(t);if(x<=s)r=0,l=S/v,l=jn(l,0,1);else{const T=gf.dot(fT);if(v<=s)l=0,r=jn(-T/x,0,1);else{const E=gf.dot(_f),A=x*v-E*E;A!==0?r=jn((E*S-T*v)/A,0,1):r=0,l=(E*r+S)/v,l<0?(l=0,r=jn(-T/x,0,1)):l>1&&(l=1,r=jn((E-T)/x,0,1))}}return t.copy(u).add(gf.multiplyScalar(r)),i.copy(d).add(_f.multiplyScalar(l)),t.sub(i),t.dot(t)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}const VN=new re;class X$ extends Di{constructor(e,t){super(),this.light=e,this.matrixAutoUpdate=!1,this.color=t,this.type="SpotLightHelper";const i=new li,s=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let l=0,u=1,d=32;l<d;l++,u++){const f=l/d*Math.PI*2,g=u/d*Math.PI*2;s.push(Math.cos(f),Math.sin(f),1,Math.cos(g),Math.sin(g),1)}i.setAttribute("position",new vn(s,3));const r=new $r({fog:!1,toneMapped:!1});this.cone=new _l(i,r),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),this.parent?(this.parent.updateWorldMatrix(!0),this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)):this.matrix.copy(this.light.matrixWorld),this.matrixWorld.copy(this.light.matrixWorld);const e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),VN.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(VN),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const Dc=new re,_y=new xn,pT=new xn;class q$ extends _l{constructor(e){const t=qL(e),i=new li,s=[],r=[];for(let f=0;f<t.length;f++){const g=t[f];g.parent&&g.parent.isBone&&(s.push(0,0,0),s.push(0,0,0),r.push(0,0,0),r.push(0,0,0))}i.setAttribute("position",new vn(s,3)),i.setAttribute("color",new vn(r,3));const l=new $r({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(i,l),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1;const u=new Jt(255),d=new Jt(65280);this.setColors(u,d)}updateMatrixWorld(e){const t=this.bones,i=this.geometry,s=i.getAttribute("position");pT.copy(this.root.matrixWorld).invert();for(let r=0,l=0;r<t.length;r++){const u=t[r];u.parent&&u.parent.isBone&&(_y.multiplyMatrices(pT,u.matrixWorld),Dc.setFromMatrixPosition(_y),s.setXYZ(l,Dc.x,Dc.y,Dc.z),_y.multiplyMatrices(pT,u.parent.matrixWorld),Dc.setFromMatrixPosition(_y),s.setXYZ(l+1,Dc.x,Dc.y,Dc.z),l+=2)}i.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}setColors(e,t){const s=this.geometry.getAttribute("color");for(let r=0;r<s.count;r+=2)s.setXYZ(r,e.r,e.g,e.b),s.setXYZ(r+1,t.r,t.g,t.b);return s.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}function qL(a){const e=[];a.isBone===!0&&e.push(a);for(let t=0;t<a.children.length;t++)e.push(...qL(a.children[t]));return e}class Y$ extends ts{constructor(e,t,i){const s=new xp(t,4,2),r=new so({wireframe:!0,fog:!1,toneMapped:!1});super(s,r),this.light=e,this.color=i,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const Z$=new re,zN=new Jt,kN=new Jt;class K$ extends Di{constructor(e,t,i){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="HemisphereLightHelper";const s=new Vg(t);s.rotateY(Math.PI*.5),this.material=new so({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const r=s.getAttribute("position"),l=new Float32Array(r.count*3);s.setAttribute("color",new $i(l,3)),this.add(new ts(s,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const t=e.geometry.getAttribute("color");zN.copy(this.light.color),kN.copy(this.light.groundColor);for(let i=0,s=t.count;i<s;i++){const r=i<s/2?zN:kN;t.setXYZ(i,r.r,r.g,r.b)}t.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),e.lookAt(Z$.setFromMatrixPosition(this.light.matrixWorld).negate())}}class J$ extends _l{constructor(e=10,t=10,i=4473924,s=8947848){i=new Jt(i),s=new Jt(s);const r=t/2,l=e/t,u=e/2,d=[],f=[];for(let v=0,S=0,T=-u;v<=t;v++,T+=l){d.push(-u,0,T,u,0,T),d.push(T,0,-u,T,0,u);const E=v===r?i:s;E.toArray(f,S),S+=3,E.toArray(f,S),S+=3,E.toArray(f,S),S+=3,E.toArray(f,S),S+=3}const g=new li;g.setAttribute("position",new vn(d,3)),g.setAttribute("color",new vn(f,3));const x=new $r({vertexColors:!0,toneMapped:!1});super(g,x),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class j$ extends _l{constructor(e=10,t=16,i=8,s=64,r=4473924,l=8947848){r=new Jt(r),l=new Jt(l);const u=[],d=[];if(t>1)for(let x=0;x<t;x++){const v=x/t*(Math.PI*2),S=Math.sin(v)*e,T=Math.cos(v)*e;u.push(0,0,0),u.push(S,0,T);const E=x&1?r:l;d.push(E.r,E.g,E.b),d.push(E.r,E.g,E.b)}for(let x=0;x<i;x++){const v=x&1?r:l,S=e-e/i*x;for(let T=0;T<s;T++){let E=T/s*(Math.PI*2),A=Math.sin(E)*S,w=Math.cos(E)*S;u.push(A,0,w),d.push(v.r,v.g,v.b),E=(T+1)/s*(Math.PI*2),A=Math.sin(E)*S,w=Math.cos(E)*S,u.push(A,0,w),d.push(v.r,v.g,v.b)}}const f=new li;f.setAttribute("position",new vn(u,3)),f.setAttribute("color",new vn(d,3));const g=new $r({vertexColors:!0,toneMapped:!1});super(f,g),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const GN=new re,xy=new re,HN=new re;class Q$ extends Di{constructor(e,t,i){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="DirectionalLightHelper",t===void 0&&(t=1);let s=new li;s.setAttribute("position",new vn([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const r=new $r({fog:!1,toneMapped:!1});this.lightPlane=new Qc(s,r),this.add(this.lightPlane),s=new li,s.setAttribute("position",new vn([0,0,0,0,0,1],3)),this.targetLine=new Qc(s,r),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),GN.setFromMatrixPosition(this.light.matrixWorld),xy.setFromMatrixPosition(this.light.target.matrixWorld),HN.subVectors(xy,GN),this.lightPlane.lookAt(xy),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(xy),this.targetLine.scale.z=HN.length()}}const yy=new re,Ds=new Ug;class e6 extends _l{constructor(e){const t=new li,i=new $r({color:16777215,vertexColors:!0,toneMapped:!1}),s=[],r=[],l={};u("n1","n2"),u("n2","n4"),u("n4","n3"),u("n3","n1"),u("f1","f2"),u("f2","f4"),u("f4","f3"),u("f3","f1"),u("n1","f1"),u("n2","f2"),u("n3","f3"),u("n4","f4"),u("p","n1"),u("p","n2"),u("p","n3"),u("p","n4"),u("u1","u2"),u("u2","u3"),u("u3","u1"),u("c","t"),u("p","c"),u("cn1","cn2"),u("cn3","cn4"),u("cf1","cf2"),u("cf3","cf4");function u(T,E){d(T),d(E)}function d(T){s.push(0,0,0),r.push(0,0,0),l[T]===void 0&&(l[T]=[]),l[T].push(s.length/3-1)}t.setAttribute("position",new vn(s,3)),t.setAttribute("color",new vn(r,3)),super(t,i),this.type="CameraHelper",this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=l,this.update();const f=new Jt(16755200),g=new Jt(16711680),x=new Jt(43775),v=new Jt(16777215),S=new Jt(3355443);this.setColors(f,g,x,v,S)}setColors(e,t,i,s,r){const u=this.geometry.getAttribute("color");return u.setXYZ(0,e.r,e.g,e.b),u.setXYZ(1,e.r,e.g,e.b),u.setXYZ(2,e.r,e.g,e.b),u.setXYZ(3,e.r,e.g,e.b),u.setXYZ(4,e.r,e.g,e.b),u.setXYZ(5,e.r,e.g,e.b),u.setXYZ(6,e.r,e.g,e.b),u.setXYZ(7,e.r,e.g,e.b),u.setXYZ(8,e.r,e.g,e.b),u.setXYZ(9,e.r,e.g,e.b),u.setXYZ(10,e.r,e.g,e.b),u.setXYZ(11,e.r,e.g,e.b),u.setXYZ(12,e.r,e.g,e.b),u.setXYZ(13,e.r,e.g,e.b),u.setXYZ(14,e.r,e.g,e.b),u.setXYZ(15,e.r,e.g,e.b),u.setXYZ(16,e.r,e.g,e.b),u.setXYZ(17,e.r,e.g,e.b),u.setXYZ(18,e.r,e.g,e.b),u.setXYZ(19,e.r,e.g,e.b),u.setXYZ(20,e.r,e.g,e.b),u.setXYZ(21,e.r,e.g,e.b),u.setXYZ(22,e.r,e.g,e.b),u.setXYZ(23,e.r,e.g,e.b),u.setXYZ(24,t.r,t.g,t.b),u.setXYZ(25,t.r,t.g,t.b),u.setXYZ(26,t.r,t.g,t.b),u.setXYZ(27,t.r,t.g,t.b),u.setXYZ(28,t.r,t.g,t.b),u.setXYZ(29,t.r,t.g,t.b),u.setXYZ(30,t.r,t.g,t.b),u.setXYZ(31,t.r,t.g,t.b),u.setXYZ(32,i.r,i.g,i.b),u.setXYZ(33,i.r,i.g,i.b),u.setXYZ(34,i.r,i.g,i.b),u.setXYZ(35,i.r,i.g,i.b),u.setXYZ(36,i.r,i.g,i.b),u.setXYZ(37,i.r,i.g,i.b),u.setXYZ(38,s.r,s.g,s.b),u.setXYZ(39,s.r,s.g,s.b),u.setXYZ(40,r.r,r.g,r.b),u.setXYZ(41,r.r,r.g,r.b),u.setXYZ(42,r.r,r.g,r.b),u.setXYZ(43,r.r,r.g,r.b),u.setXYZ(44,r.r,r.g,r.b),u.setXYZ(45,r.r,r.g,r.b),u.setXYZ(46,r.r,r.g,r.b),u.setXYZ(47,r.r,r.g,r.b),u.setXYZ(48,r.r,r.g,r.b),u.setXYZ(49,r.r,r.g,r.b),u.needsUpdate=!0,this}update(){const e=this.geometry,t=this.pointMap,i=1,s=1;let r,l;if(Ds.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),this.camera.reversedDepth===!0)r=1,l=0;else if(this.camera.coordinateSystem===xr)r=-1,l=1;else if(this.camera.coordinateSystem===_a)r=0,l=1;else throw new Error("THREE.CameraHelper.update(): Invalid coordinate system: "+this.camera.coordinateSystem);Vs("c",t,e,Ds,0,0,r),Vs("t",t,e,Ds,0,0,l),Vs("n1",t,e,Ds,-i,-s,r),Vs("n2",t,e,Ds,i,-s,r),Vs("n3",t,e,Ds,-i,s,r),Vs("n4",t,e,Ds,i,s,r),Vs("f1",t,e,Ds,-i,-s,l),Vs("f2",t,e,Ds,i,-s,l),Vs("f3",t,e,Ds,-i,s,l),Vs("f4",t,e,Ds,i,s,l),Vs("u1",t,e,Ds,i*.7,s*1.1,r),Vs("u2",t,e,Ds,-i*.7,s*1.1,r),Vs("u3",t,e,Ds,0,s*2,r),Vs("cf1",t,e,Ds,-i,0,l),Vs("cf2",t,e,Ds,i,0,l),Vs("cf3",t,e,Ds,0,-s,l),Vs("cf4",t,e,Ds,0,s,l),Vs("cn1",t,e,Ds,-i,0,r),Vs("cn2",t,e,Ds,i,0,r),Vs("cn3",t,e,Ds,0,-s,r),Vs("cn4",t,e,Ds,0,s,r),e.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function Vs(a,e,t,i,s,r,l){yy.set(s,r,l).unproject(i);const u=e[a];if(u!==void 0){const d=t.getAttribute("position");for(let f=0,g=u.length;f<g;f++)d.setXYZ(u[f],yy.x,yy.y,yy.z)}}const vy=new Gr;class t6 extends _l{constructor(e,t=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),s=new Float32Array(24),r=new li;r.setIndex(new $i(i,1)),r.setAttribute("position",new $i(s,3)),super(r,new $r({color:t,toneMapped:!1})),this.object=e,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(){if(this.object!==void 0&&vy.setFromObject(this.object),vy.isEmpty())return;const e=vy.min,t=vy.max,i=this.geometry.attributes.position,s=i.array;s[0]=t.x,s[1]=t.y,s[2]=t.z,s[3]=e.x,s[4]=t.y,s[5]=t.z,s[6]=e.x,s[7]=e.y,s[8]=t.z,s[9]=t.x,s[10]=e.y,s[11]=t.z,s[12]=t.x,s[13]=t.y,s[14]=e.z,s[15]=e.x,s[16]=t.y,s[17]=e.z,s[18]=e.x,s[19]=e.y,s[20]=e.z,s[21]=t.x,s[22]=e.y,s[23]=e.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(e){return this.object=e,this.update(),this}copy(e,t){return super.copy(e,t),this.object=e.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class n6 extends _l{constructor(e,t=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),s=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],r=new li;r.setIndex(new $i(i,1)),r.setAttribute("position",new vn(s,3)),super(r,new $r({color:t,toneMapped:!1})),this.box=e,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(e))}dispose(){this.geometry.dispose(),this.material.dispose()}}class i6 extends Qc{constructor(e,t=1,i=16776960){const s=i,r=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],l=new li;l.setAttribute("position",new vn(r,3)),l.computeBoundingSphere(),super(l,new $r({color:s,toneMapped:!1})),this.type="PlaneHelper",this.plane=e,this.size=t;const u=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],d=new li;d.setAttribute("position",new vn(u,3)),d.computeBoundingSphere(),this.add(new ts(d,new so({color:s,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(e){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}const WN=new re;let Sy,mT;class s6 extends Di{constructor(e=new re(0,0,1),t=new re(0,0,0),i=1,s=16776960,r=i*.2,l=r*.2){super(),this.type="ArrowHelper",Sy===void 0&&(Sy=new li,Sy.setAttribute("position",new vn([0,0,0,0,1,0],3)),mT=new Og(.5,1,5,1),mT.translate(0,-.5,0)),this.position.copy(t),this.line=new Qc(Sy,new $r({color:s,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new ts(mT,new so({color:s,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(i,r,l)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{WN.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(WN,t)}}setLength(e,t=e*.2,i=t*.2){this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(i,t,i),this.cone.position.y=e,this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class r6 extends _l{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],i=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],s=new li;s.setAttribute("position",new vn(t,3)),s.setAttribute("color",new vn(i,3));const r=new $r({vertexColors:!0,toneMapped:!1});super(s,r),this.type="AxesHelper"}setColors(e,t,i){const s=new Jt,r=this.geometry.attributes.color.array;return s.set(e),s.toArray(r,0),s.toArray(r,3),s.set(t),s.toArray(r,6),s.toArray(r,9),s.set(i),s.toArray(r,12),s.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class YL{constructor(){this.type="ShapePath",this.color=new Jt,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new av,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,i,s){return this.currentPath.quadraticCurveTo(e,t,i,s),this}bezierCurveTo(e,t,i,s,r,l){return this.currentPath.bezierCurveTo(e,t,i,s,r,l),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){function t(w){const O=[];for(let F=0,B=w.length;F<B;F++){const k=w[F],Y=new Ah;Y.curves=k.curves,O.push(Y)}return O}function i(w,O){const F=O.length;let B=!1;for(let k=F-1,Y=0;Y<F;k=Y++){let $=O[k],Q=O[Y],z=Q.x-$.x,q=Q.y-$.y;if(Math.abs(q)>Number.EPSILON){if(q<0&&($=O[Y],z=-z,Q=O[k],q=-q),w.y<$.y||w.y>Q.y)continue;if(w.y===$.y){if(w.x===$.x)return!0}else{const oe=q*(w.x-$.x)-z*(w.y-$.y);if(oe===0)return!0;if(oe<0)continue;B=!B}}else{if(w.y!==$.y)continue;if(Q.x<=w.x&&w.x<=$.x||$.x<=w.x&&w.x<=Q.x)return!0}}return B}const s=Ba.isClockWise,r=this.subPaths;if(r.length===0)return[];let l,u,d;const f=[];if(r.length===1)return u=r[0],d=new Ah,d.curves=u.curves,f.push(d),f;let g=!s(r[0].getPoints());g=e?!g:g;const x=[],v=[];let S=[],T=0,E;v[T]=void 0,S[T]=[];for(let w=0,O=r.length;w<O;w++)u=r[w],E=u.getPoints(),l=s(E),l=e?!l:l,l?(!g&&v[T]&&T++,v[T]={s:new Ah,p:E},v[T].s.curves=u.curves,g&&T++,S[T]=[]):S[T].push({h:u,p:E[0]});if(!v[0])return t(r);if(v.length>1){let w=!1,O=0;for(let F=0,B=v.length;F<B;F++)x[F]=[];for(let F=0,B=v.length;F<B;F++){const k=S[F];for(let Y=0;Y<k.length;Y++){const $=k[Y];let Q=!0;for(let z=0;z<v.length;z++)i($.p,v[z].p)&&(F!==z&&O++,Q?(Q=!1,x[z].push($)):w=!0);Q&&x[F].push($)}}O>0&&w===!1&&(S=x)}let A;for(let w=0,O=v.length;w<O;w++){d=v[w].s,f.push(d),A=S[w];for(let F=0,B=A.length;F<B;F++)d.holes.push(A[F].h)}return f}}class o6 extends Jo{constructor(e,t=null){super(),this.object=e,this.domElement=t,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(e){if(e===void 0){console.warn("THREE.Controls: connect() now requires an element.");return}this.domElement!==null&&this.disconnect(),this.domElement=e}disconnect(){}dispose(){}update(){}}function a6(a,e){const t=a.image&&a.image.width?a.image.width/a.image.height:1;return t>e?(a.repeat.x=1,a.repeat.y=t/e,a.offset.x=0,a.offset.y=(1-a.repeat.y)/2):(a.repeat.x=e/t,a.repeat.y=1,a.offset.x=(1-a.repeat.x)/2,a.offset.y=0),a}function l6(a,e){const t=a.image&&a.image.width?a.image.width/a.image.height:1;return t>e?(a.repeat.x=e/t,a.repeat.y=1,a.offset.x=(1-a.repeat.x)/2,a.offset.y=0):(a.repeat.x=1,a.repeat.y=t/e,a.offset.x=0,a.offset.y=(1-a.repeat.y)/2),a}function c6(a){return a.repeat.x=1,a.repeat.y=1,a.offset.x=0,a.offset.y=0,a}function dM(a,e,t,i){const s=u6(i);switch(t){case Dv:return a*e;case nd:return a*e/s.components*s.byteLength;case eu:return a*e/s.components*s.byteLength;case ul:return a*e*2/s.components*s.byteLength;case id:return a*e*2/s.components*s.byteLength;case mp:return a*e*3/s.components*s.byteLength;case es:return a*e*4/s.components*s.byteLength;case sd:return a*e*4/s.components*s.byteLength;case Xc:case Zl:return Math.floor((a+3)/4)*Math.floor((e+3)/4)*8;case Kl:case Jl:return Math.floor((a+3)/4)*Math.floor((e+3)/4)*16;case Jf:case Qf:return Math.max(a,16)*Math.max(e,8)/4;case Kf:case jf:return Math.max(a,8)*Math.max(e,8)/2;case ep:case Uh:return Math.floor((a+3)/4)*Math.floor((e+3)/4)*8;case Fh:return Math.floor((a+3)/4)*Math.floor((e+3)/4)*16;case Bh:return Math.floor((a+3)/4)*Math.floor((e+3)/4)*16;case Oh:return Math.floor((a+4)/5)*Math.floor((e+3)/4)*16;case Vh:return Math.floor((a+4)/5)*Math.floor((e+4)/5)*16;case zh:return Math.floor((a+5)/6)*Math.floor((e+4)/5)*16;case kh:return Math.floor((a+5)/6)*Math.floor((e+5)/6)*16;case Gh:return Math.floor((a+7)/8)*Math.floor((e+4)/5)*16;case Hh:return Math.floor((a+7)/8)*Math.floor((e+5)/6)*16;case Wh:return Math.floor((a+7)/8)*Math.floor((e+7)/8)*16;case $h:return Math.floor((a+9)/10)*Math.floor((e+4)/5)*16;case Xh:return Math.floor((a+9)/10)*Math.floor((e+5)/6)*16;case qh:return Math.floor((a+9)/10)*Math.floor((e+7)/8)*16;case Yh:return Math.floor((a+9)/10)*Math.floor((e+9)/10)*16;case Zh:return Math.floor((a+11)/12)*Math.floor((e+9)/10)*16;case Kh:return Math.floor((a+11)/12)*Math.floor((e+11)/12)*16;case qc:case ev:case tv:return Math.ceil(a/4)*Math.ceil(e/4)*16;case Uv:case tp:return Math.ceil(a/4)*Math.ceil(e/4)*8;case np:case ip:return Math.ceil(a/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${t} format.`)}function u6(a){switch(a){case Ts:case Wc:return{byteLength:1,components:1};case ua:case $c:case Qs:return{byteLength:2,components:1};case Cg:case Ng:return{byteLength:2,components:4};case rs:case or:case os:return{byteLength:4,components:1};case Pg:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${a}.`)}class h6{static contain(e,t){return a6(e,t)}static cover(e,t){return l6(e,t)}static fill(e){return c6(e)}static getByteLength(e,t,i,s){return dM(e,t,i,s)}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:fp}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=fp);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function ZL(){let a=null,e=!1,t=null,i=null;function s(r,l){t(r,l),i=a.requestAnimationFrame(s)}return{start:function(){e!==!0&&t!==null&&(i=a.requestAnimationFrame(s),e=!0)},stop:function(){a.cancelAnimationFrame(i),e=!1},setAnimationLoop:function(r){t=r},setContext:function(r){a=r}}}function d6(a){const e=new WeakMap;function t(u,d){const f=u.array,g=u.usage,x=f.byteLength,v=a.createBuffer();a.bindBuffer(d,v),a.bufferData(d,f,g),u.onUploadCallback();let S;if(f instanceof Float32Array)S=a.FLOAT;else if(typeof Float16Array<"u"&&f instanceof Float16Array)S=a.HALF_FLOAT;else if(f instanceof Uint16Array)u.isFloat16BufferAttribute?S=a.HALF_FLOAT:S=a.UNSIGNED_SHORT;else if(f instanceof Int16Array)S=a.SHORT;else if(f instanceof Uint32Array)S=a.UNSIGNED_INT;else if(f instanceof Int32Array)S=a.INT;else if(f instanceof Int8Array)S=a.BYTE;else if(f instanceof Uint8Array)S=a.UNSIGNED_BYTE;else if(f instanceof Uint8ClampedArray)S=a.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+f);return{buffer:v,type:S,bytesPerElement:f.BYTES_PER_ELEMENT,version:u.version,size:x}}function i(u,d,f){const g=d.array,x=d.updateRanges;if(a.bindBuffer(f,u),x.length===0)a.bufferSubData(f,0,g);else{x.sort((S,T)=>S.start-T.start);let v=0;for(let S=1;S<x.length;S++){const T=x[v],E=x[S];E.start<=T.start+T.count+1?T.count=Math.max(T.count,E.start+E.count-T.start):(++v,x[v]=E)}x.length=v+1;for(let S=0,T=x.length;S<T;S++){const E=x[S];a.bufferSubData(f,E.start*g.BYTES_PER_ELEMENT,g,E.start,E.count)}d.clearUpdateRanges()}d.onUploadCallback()}function s(u){return u.isInterleavedBufferAttribute&&(u=u.data),e.get(u)}function r(u){u.isInterleavedBufferAttribute&&(u=u.data);const d=e.get(u);d&&(a.deleteBuffer(d.buffer),e.delete(u))}function l(u,d){if(u.isInterleavedBufferAttribute&&(u=u.data),u.isGLBufferAttribute){const g=e.get(u);(!g||g.version<u.version)&&e.set(u,{buffer:u.buffer,type:u.type,bytesPerElement:u.elementSize,version:u.version});return}const f=e.get(u);if(f===void 0)e.set(u,t(u,d));else if(f.version<u.version){if(f.size!==u.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");i(f.buffer,u,d),f.version=u.version}}return{get:s,remove:r,update:l}}var f6=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,p6=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,m6=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,g6=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,_6=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,x6=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,y6=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,v6=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,S6=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,b6=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,T6=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,M6=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,w6=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,A6=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,E6=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,R6=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,C6=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,N6=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,P6=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,I6=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,L6=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,D6=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,U6=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,F6=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,B6=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,O6=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,V6=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,z6=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,k6=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,G6=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,H6="gl_FragColor = linearToOutputTexel( gl_FragColor );",W6=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,$6=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,X6=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,q6=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,Y6=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,Z6=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,K6=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,J6=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,j6=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,Q6=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,eX=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,tX=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,nX=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,iX=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,sX=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,rX=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,oX=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,aX=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,lX=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,cX=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,uX=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,hX=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,dX=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,fX=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,pX=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,mX=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,gX=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,_X=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,xX=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,yX=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,vX=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,SX=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,bX=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,TX=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,MX=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,wX=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,AX=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,EX=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,RX=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,CX=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,NX=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,PX=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,IX=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,LX=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,DX=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,UX=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,FX=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,BX=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,OX=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,VX=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,zX=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,kX=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,GX=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,HX=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,WX=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,$X=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,XX=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,qX=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,YX=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		float depth = unpackRGBAToDepth( texture2D( depths, uv ) );
		#ifdef USE_REVERSEDEPTHBUF
			return step( depth, compare );
		#else
			return step( compare, depth );
		#endif
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		#ifdef USE_REVERSEDEPTHBUF
			float hard_shadow = step( distribution.x, compare );
		#else
			float hard_shadow = step( compare , distribution.x );
		#endif
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,ZX=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,KX=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,JX=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,jX=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,QX=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,eq=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,tq=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,nq=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,iq=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,sq=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,rq=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,oq=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,aq=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,lq=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,cq=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,uq=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,hq=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const dq=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,fq=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,pq=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,mq=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,gq=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,_q=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,xq=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,yq=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	#ifdef USE_REVERSEDEPTHBUF
		float fragCoordZ = vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ];
	#else
		float fragCoordZ = 0.5 * vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ] + 0.5;
	#endif
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,vq=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,Sq=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,bq=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,Tq=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Mq=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,wq=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Aq=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,Eq=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Rq=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Cq=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Nq=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,Pq=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Iq=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,Lq=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,Dq=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Uq=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Fq=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,Bq=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Oq=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Vq=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,zq=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,kq=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Gq=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Hq=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,Wq=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,$q=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,vi={alphahash_fragment:f6,alphahash_pars_fragment:p6,alphamap_fragment:m6,alphamap_pars_fragment:g6,alphatest_fragment:_6,alphatest_pars_fragment:x6,aomap_fragment:y6,aomap_pars_fragment:v6,batching_pars_vertex:S6,batching_vertex:b6,begin_vertex:T6,beginnormal_vertex:M6,bsdfs:w6,iridescence_fragment:A6,bumpmap_pars_fragment:E6,clipping_planes_fragment:R6,clipping_planes_pars_fragment:C6,clipping_planes_pars_vertex:N6,clipping_planes_vertex:P6,color_fragment:I6,color_pars_fragment:L6,color_pars_vertex:D6,color_vertex:U6,common:F6,cube_uv_reflection_fragment:B6,defaultnormal_vertex:O6,displacementmap_pars_vertex:V6,displacementmap_vertex:z6,emissivemap_fragment:k6,emissivemap_pars_fragment:G6,colorspace_fragment:H6,colorspace_pars_fragment:W6,envmap_fragment:$6,envmap_common_pars_fragment:X6,envmap_pars_fragment:q6,envmap_pars_vertex:Y6,envmap_physical_pars_fragment:rX,envmap_vertex:Z6,fog_vertex:K6,fog_pars_vertex:J6,fog_fragment:j6,fog_pars_fragment:Q6,gradientmap_pars_fragment:eX,lightmap_pars_fragment:tX,lights_lambert_fragment:nX,lights_lambert_pars_fragment:iX,lights_pars_begin:sX,lights_toon_fragment:oX,lights_toon_pars_fragment:aX,lights_phong_fragment:lX,lights_phong_pars_fragment:cX,lights_physical_fragment:uX,lights_physical_pars_fragment:hX,lights_fragment_begin:dX,lights_fragment_maps:fX,lights_fragment_end:pX,logdepthbuf_fragment:mX,logdepthbuf_pars_fragment:gX,logdepthbuf_pars_vertex:_X,logdepthbuf_vertex:xX,map_fragment:yX,map_pars_fragment:vX,map_particle_fragment:SX,map_particle_pars_fragment:bX,metalnessmap_fragment:TX,metalnessmap_pars_fragment:MX,morphinstance_vertex:wX,morphcolor_vertex:AX,morphnormal_vertex:EX,morphtarget_pars_vertex:RX,morphtarget_vertex:CX,normal_fragment_begin:NX,normal_fragment_maps:PX,normal_pars_fragment:IX,normal_pars_vertex:LX,normal_vertex:DX,normalmap_pars_fragment:UX,clearcoat_normal_fragment_begin:FX,clearcoat_normal_fragment_maps:BX,clearcoat_pars_fragment:OX,iridescence_pars_fragment:VX,opaque_fragment:zX,packing:kX,premultiplied_alpha_fragment:GX,project_vertex:HX,dithering_fragment:WX,dithering_pars_fragment:$X,roughnessmap_fragment:XX,roughnessmap_pars_fragment:qX,shadowmap_pars_fragment:YX,shadowmap_pars_vertex:ZX,shadowmap_vertex:KX,shadowmask_pars_fragment:JX,skinbase_vertex:jX,skinning_pars_vertex:QX,skinning_vertex:eq,skinnormal_vertex:tq,specularmap_fragment:nq,specularmap_pars_fragment:iq,tonemapping_fragment:sq,tonemapping_pars_fragment:rq,transmission_fragment:oq,transmission_pars_fragment:aq,uv_pars_fragment:lq,uv_pars_vertex:cq,uv_vertex:uq,worldpos_vertex:hq,background_vert:dq,background_frag:fq,backgroundCube_vert:pq,backgroundCube_frag:mq,cube_vert:gq,cube_frag:_q,depth_vert:xq,depth_frag:yq,distanceRGBA_vert:vq,distanceRGBA_frag:Sq,equirect_vert:bq,equirect_frag:Tq,linedashed_vert:Mq,linedashed_frag:wq,meshbasic_vert:Aq,meshbasic_frag:Eq,meshlambert_vert:Rq,meshlambert_frag:Cq,meshmatcap_vert:Nq,meshmatcap_frag:Pq,meshnormal_vert:Iq,meshnormal_frag:Lq,meshphong_vert:Dq,meshphong_frag:Uq,meshphysical_vert:Fq,meshphysical_frag:Bq,meshtoon_vert:Oq,meshtoon_frag:Vq,points_vert:zq,points_frag:kq,shadow_vert:Gq,shadow_frag:Hq,sprite_vert:Wq,sprite_frag:$q},rn={common:{diffuse:{value:new Jt(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new ni},alphaMap:{value:null},alphaMapTransform:{value:new ni},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new ni}},envmap:{envMap:{value:null},envMapRotation:{value:new ni},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new ni}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new ni}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new ni},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new ni},normalScale:{value:new it(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new ni},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new ni}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new ni}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new ni}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Jt(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Jt(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new ni},alphaTest:{value:0},uvTransform:{value:new ni}},sprite:{diffuse:{value:new Jt(16777215)},opacity:{value:1},center:{value:new it(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new ni},alphaMap:{value:null},alphaMapTransform:{value:new ni},alphaTest:{value:0}}},ll={basic:{uniforms:Qr([rn.common,rn.specularmap,rn.envmap,rn.aomap,rn.lightmap,rn.fog]),vertexShader:vi.meshbasic_vert,fragmentShader:vi.meshbasic_frag},lambert:{uniforms:Qr([rn.common,rn.specularmap,rn.envmap,rn.aomap,rn.lightmap,rn.emissivemap,rn.bumpmap,rn.normalmap,rn.displacementmap,rn.fog,rn.lights,{emissive:{value:new Jt(0)}}]),vertexShader:vi.meshlambert_vert,fragmentShader:vi.meshlambert_frag},phong:{uniforms:Qr([rn.common,rn.specularmap,rn.envmap,rn.aomap,rn.lightmap,rn.emissivemap,rn.bumpmap,rn.normalmap,rn.displacementmap,rn.fog,rn.lights,{emissive:{value:new Jt(0)},specular:{value:new Jt(1118481)},shininess:{value:30}}]),vertexShader:vi.meshphong_vert,fragmentShader:vi.meshphong_frag},standard:{uniforms:Qr([rn.common,rn.envmap,rn.aomap,rn.lightmap,rn.emissivemap,rn.bumpmap,rn.normalmap,rn.displacementmap,rn.roughnessmap,rn.metalnessmap,rn.fog,rn.lights,{emissive:{value:new Jt(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:vi.meshphysical_vert,fragmentShader:vi.meshphysical_frag},toon:{uniforms:Qr([rn.common,rn.aomap,rn.lightmap,rn.emissivemap,rn.bumpmap,rn.normalmap,rn.displacementmap,rn.gradientmap,rn.fog,rn.lights,{emissive:{value:new Jt(0)}}]),vertexShader:vi.meshtoon_vert,fragmentShader:vi.meshtoon_frag},matcap:{uniforms:Qr([rn.common,rn.bumpmap,rn.normalmap,rn.displacementmap,rn.fog,{matcap:{value:null}}]),vertexShader:vi.meshmatcap_vert,fragmentShader:vi.meshmatcap_frag},points:{uniforms:Qr([rn.points,rn.fog]),vertexShader:vi.points_vert,fragmentShader:vi.points_frag},dashed:{uniforms:Qr([rn.common,rn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:vi.linedashed_vert,fragmentShader:vi.linedashed_frag},depth:{uniforms:Qr([rn.common,rn.displacementmap]),vertexShader:vi.depth_vert,fragmentShader:vi.depth_frag},normal:{uniforms:Qr([rn.common,rn.bumpmap,rn.normalmap,rn.displacementmap,{opacity:{value:1}}]),vertexShader:vi.meshnormal_vert,fragmentShader:vi.meshnormal_frag},sprite:{uniforms:Qr([rn.sprite,rn.fog]),vertexShader:vi.sprite_vert,fragmentShader:vi.sprite_frag},background:{uniforms:{uvTransform:{value:new ni},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:vi.background_vert,fragmentShader:vi.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new ni}},vertexShader:vi.backgroundCube_vert,fragmentShader:vi.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:vi.cube_vert,fragmentShader:vi.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:vi.equirect_vert,fragmentShader:vi.equirect_frag},distanceRGBA:{uniforms:Qr([rn.common,rn.displacementmap,{referencePosition:{value:new re},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:vi.distanceRGBA_vert,fragmentShader:vi.distanceRGBA_frag},shadow:{uniforms:Qr([rn.lights,rn.fog,{color:{value:new Jt(0)},opacity:{value:1}}]),vertexShader:vi.shadow_vert,fragmentShader:vi.shadow_frag}};ll.physical={uniforms:Qr([ll.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new ni},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new ni},clearcoatNormalScale:{value:new it(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new ni},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new ni},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new ni},sheen:{value:0},sheenColor:{value:new Jt(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new ni},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new ni},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new ni},transmissionSamplerSize:{value:new it},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new ni},attenuationDistance:{value:0},attenuationColor:{value:new Jt(0)},specularColor:{value:new Jt(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new ni},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new ni},anisotropyVector:{value:new it},anisotropyMap:{value:null},anisotropyMapTransform:{value:new ni}}]),vertexShader:vi.meshphysical_vert,fragmentShader:vi.meshphysical_frag};const by={r:0,b:0,g:0},ih=new co,Xq=new xn;function qq(a,e,t,i,s,r,l){const u=new Jt(0);let d=r===!0?0:1,f,g,x=null,v=0,S=null;function T(F){let B=F.isScene===!0?F.background:null;return B&&B.isTexture&&(B=(F.backgroundBlurriness>0?t:e).get(B)),B}function E(F){let B=!1;const k=T(F);k===null?w(u,d):k&&k.isColor&&(w(k,1),B=!0);const Y=a.xr.getEnvironmentBlendMode();Y==="additive"?i.buffers.color.setClear(0,0,0,1,l):Y==="alpha-blend"&&i.buffers.color.setClear(0,0,0,0,l),(a.autoClear||B)&&(i.buffers.depth.setTest(!0),i.buffers.depth.setMask(!0),i.buffers.color.setMask(!0),a.clear(a.autoClearColor,a.autoClearDepth,a.autoClearStencil))}function A(F,B){const k=T(B);k&&(k.isCubeTexture||k.mapping===nc)?(g===void 0&&(g=new ts(new cc(1,1,1),new er({name:"BackgroundCubeMaterial",uniforms:rp(ll.backgroundCube.uniforms),vertexShader:ll.backgroundCube.vertexShader,fragmentShader:ll.backgroundCube.fragmentShader,side:ns,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),g.geometry.deleteAttribute("normal"),g.geometry.deleteAttribute("uv"),g.onBeforeRender=function(Y,$,Q){this.matrixWorld.copyPosition(Q.matrixWorld)},Object.defineProperty(g.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),s.update(g)),ih.copy(B.backgroundRotation),ih.x*=-1,ih.y*=-1,ih.z*=-1,k.isCubeTexture&&k.isRenderTargetTexture===!1&&(ih.y*=-1,ih.z*=-1),g.material.uniforms.envMap.value=k,g.material.uniforms.flipEnvMap.value=k.isCubeTexture&&k.isRenderTargetTexture===!1?-1:1,g.material.uniforms.backgroundBlurriness.value=B.backgroundBlurriness,g.material.uniforms.backgroundIntensity.value=B.backgroundIntensity,g.material.uniforms.backgroundRotation.value.setFromMatrix4(Xq.makeRotationFromEuler(ih)),g.material.toneMapped=zn.getTransfer(k.colorSpace)!==un,(x!==k||v!==k.version||S!==a.toneMapping)&&(g.material.needsUpdate=!0,x=k,v=k.version,S=a.toneMapping),g.layers.enableAll(),F.unshift(g,g.geometry,g.material,0,0,null)):k&&k.isTexture&&(f===void 0&&(f=new ts(new iu(2,2),new er({name:"BackgroundMaterial",uniforms:rp(ll.background.uniforms),vertexShader:ll.background.vertexShader,fragmentShader:ll.background.fragmentShader,side:ao,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),f.geometry.deleteAttribute("normal"),Object.defineProperty(f.material,"map",{get:function(){return this.uniforms.t2D.value}}),s.update(f)),f.material.uniforms.t2D.value=k,f.material.uniforms.backgroundIntensity.value=B.backgroundIntensity,f.material.toneMapped=zn.getTransfer(k.colorSpace)!==un,k.matrixAutoUpdate===!0&&k.updateMatrix(),f.material.uniforms.uvTransform.value.copy(k.matrix),(x!==k||v!==k.version||S!==a.toneMapping)&&(f.material.needsUpdate=!0,x=k,v=k.version,S=a.toneMapping),f.layers.enableAll(),F.unshift(f,f.geometry,f.material,0,0,null))}function w(F,B){F.getRGB(by,uL(a)),i.buffers.color.setClear(by.r,by.g,by.b,B,l)}function O(){g!==void 0&&(g.geometry.dispose(),g.material.dispose(),g=void 0),f!==void 0&&(f.geometry.dispose(),f.material.dispose(),f=void 0)}return{getClearColor:function(){return u},setClearColor:function(F,B=1){u.set(F),d=B,w(u,d)},getClearAlpha:function(){return d},setClearAlpha:function(F){d=F,w(u,d)},render:E,addToRenderList:A,dispose:O}}function Yq(a,e){const t=a.getParameter(a.MAX_VERTEX_ATTRIBS),i={},s=v(null);let r=s,l=!1;function u(q,oe,Ce,Ne,Oe){let Be=!1;const He=x(Ne,Ce,oe);r!==He&&(r=He,f(r.object)),Be=S(q,Ne,Ce,Oe),Be&&T(q,Ne,Ce,Oe),Oe!==null&&e.update(Oe,a.ELEMENT_ARRAY_BUFFER),(Be||l)&&(l=!1,B(q,oe,Ce,Ne),Oe!==null&&a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,e.get(Oe).buffer))}function d(){return a.createVertexArray()}function f(q){return a.bindVertexArray(q)}function g(q){return a.deleteVertexArray(q)}function x(q,oe,Ce){const Ne=Ce.wireframe===!0;let Oe=i[q.id];Oe===void 0&&(Oe={},i[q.id]=Oe);let Be=Oe[oe.id];Be===void 0&&(Be={},Oe[oe.id]=Be);let He=Be[Ne];return He===void 0&&(He=v(d()),Be[Ne]=He),He}function v(q){const oe=[],Ce=[],Ne=[];for(let Oe=0;Oe<t;Oe++)oe[Oe]=0,Ce[Oe]=0,Ne[Oe]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:oe,enabledAttributes:Ce,attributeDivisors:Ne,object:q,attributes:{},index:null}}function S(q,oe,Ce,Ne){const Oe=r.attributes,Be=oe.attributes;let He=0;const ct=Ce.getAttributes();for(const Ve in ct)if(ct[Ve].location>=0){const Gt=Oe[Ve];let pn=Be[Ve];if(pn===void 0&&(Ve==="instanceMatrix"&&q.instanceMatrix&&(pn=q.instanceMatrix),Ve==="instanceColor"&&q.instanceColor&&(pn=q.instanceColor)),Gt===void 0||Gt.attribute!==pn||pn&&Gt.data!==pn.data)return!0;He++}return r.attributesNum!==He||r.index!==Ne}function T(q,oe,Ce,Ne){const Oe={},Be=oe.attributes;let He=0;const ct=Ce.getAttributes();for(const Ve in ct)if(ct[Ve].location>=0){let Gt=Be[Ve];Gt===void 0&&(Ve==="instanceMatrix"&&q.instanceMatrix&&(Gt=q.instanceMatrix),Ve==="instanceColor"&&q.instanceColor&&(Gt=q.instanceColor));const pn={};pn.attribute=Gt,Gt&&Gt.data&&(pn.data=Gt.data),Oe[Ve]=pn,He++}r.attributes=Oe,r.attributesNum=He,r.index=Ne}function E(){const q=r.newAttributes;for(let oe=0,Ce=q.length;oe<Ce;oe++)q[oe]=0}function A(q){w(q,0)}function w(q,oe){const Ce=r.newAttributes,Ne=r.enabledAttributes,Oe=r.attributeDivisors;Ce[q]=1,Ne[q]===0&&(a.enableVertexAttribArray(q),Ne[q]=1),Oe[q]!==oe&&(a.vertexAttribDivisor(q,oe),Oe[q]=oe)}function O(){const q=r.newAttributes,oe=r.enabledAttributes;for(let Ce=0,Ne=oe.length;Ce<Ne;Ce++)oe[Ce]!==q[Ce]&&(a.disableVertexAttribArray(Ce),oe[Ce]=0)}function F(q,oe,Ce,Ne,Oe,Be,He){He===!0?a.vertexAttribIPointer(q,oe,Ce,Oe,Be):a.vertexAttribPointer(q,oe,Ce,Ne,Oe,Be)}function B(q,oe,Ce,Ne){E();const Oe=Ne.attributes,Be=Ce.getAttributes(),He=oe.defaultAttributeValues;for(const ct in Be){const Ve=Be[ct];if(Ve.location>=0){let Ct=Oe[ct];if(Ct===void 0&&(ct==="instanceMatrix"&&q.instanceMatrix&&(Ct=q.instanceMatrix),ct==="instanceColor"&&q.instanceColor&&(Ct=q.instanceColor)),Ct!==void 0){const Gt=Ct.normalized,pn=Ct.itemSize,qn=e.get(Ct);if(qn===void 0)continue;const yi=qn.buffer,bi=qn.type,rt=qn.bytesPerElement,Xt=bi===a.INT||bi===a.UNSIGNED_INT||Ct.gpuType===or;if(Ct.isInterleavedBufferAttribute){const At=Ct.data,In=At.stride,gn=Ct.offset;if(At.isInstancedInterleavedBuffer){for(let kn=0;kn<Ve.locationSize;kn++)w(Ve.location+kn,At.meshPerAttribute);q.isInstancedMesh!==!0&&Ne._maxInstanceCount===void 0&&(Ne._maxInstanceCount=At.meshPerAttribute*At.count)}else for(let kn=0;kn<Ve.locationSize;kn++)A(Ve.location+kn);a.bindBuffer(a.ARRAY_BUFFER,yi);for(let kn=0;kn<Ve.locationSize;kn++)F(Ve.location+kn,pn/Ve.locationSize,bi,Gt,In*rt,(gn+pn/Ve.locationSize*kn)*rt,Xt)}else{if(Ct.isInstancedBufferAttribute){for(let At=0;At<Ve.locationSize;At++)w(Ve.location+At,Ct.meshPerAttribute);q.isInstancedMesh!==!0&&Ne._maxInstanceCount===void 0&&(Ne._maxInstanceCount=Ct.meshPerAttribute*Ct.count)}else for(let At=0;At<Ve.locationSize;At++)A(Ve.location+At);a.bindBuffer(a.ARRAY_BUFFER,yi);for(let At=0;At<Ve.locationSize;At++)F(Ve.location+At,pn/Ve.locationSize,bi,Gt,pn*rt,pn/Ve.locationSize*At*rt,Xt)}}else if(He!==void 0){const Gt=He[ct];if(Gt!==void 0)switch(Gt.length){case 2:a.vertexAttrib2fv(Ve.location,Gt);break;case 3:a.vertexAttrib3fv(Ve.location,Gt);break;case 4:a.vertexAttrib4fv(Ve.location,Gt);break;default:a.vertexAttrib1fv(Ve.location,Gt)}}}}O()}function k(){Q();for(const q in i){const oe=i[q];for(const Ce in oe){const Ne=oe[Ce];for(const Oe in Ne)g(Ne[Oe].object),delete Ne[Oe];delete oe[Ce]}delete i[q]}}function Y(q){if(i[q.id]===void 0)return;const oe=i[q.id];for(const Ce in oe){const Ne=oe[Ce];for(const Oe in Ne)g(Ne[Oe].object),delete Ne[Oe];delete oe[Ce]}delete i[q.id]}function $(q){for(const oe in i){const Ce=i[oe];if(Ce[q.id]===void 0)continue;const Ne=Ce[q.id];for(const Oe in Ne)g(Ne[Oe].object),delete Ne[Oe];delete Ce[q.id]}}function Q(){z(),l=!0,r!==s&&(r=s,f(r.object))}function z(){s.geometry=null,s.program=null,s.wireframe=!1}return{setup:u,reset:Q,resetDefaultState:z,dispose:k,releaseStatesOfGeometry:Y,releaseStatesOfProgram:$,initAttributes:E,enableAttribute:A,disableUnusedAttributes:O}}function Zq(a,e,t){let i;function s(f){i=f}function r(f,g){a.drawArrays(i,f,g),t.update(g,i,1)}function l(f,g,x){x!==0&&(a.drawArraysInstanced(i,f,g,x),t.update(g,i,x))}function u(f,g,x){if(x===0)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i,f,0,g,0,x);let S=0;for(let T=0;T<x;T++)S+=g[T];t.update(S,i,1)}function d(f,g,x,v){if(x===0)return;const S=e.get("WEBGL_multi_draw");if(S===null)for(let T=0;T<f.length;T++)l(f[T],g[T],v[T]);else{S.multiDrawArraysInstancedWEBGL(i,f,0,g,0,v,0,x);let T=0;for(let E=0;E<x;E++)T+=g[E]*v[E];t.update(T,i,1)}}this.setMode=s,this.render=r,this.renderInstances=l,this.renderMultiDraw=u,this.renderMultiDrawInstances=d}function Kq(a,e,t,i){let s;function r(){if(s!==void 0)return s;if(e.has("EXT_texture_filter_anisotropic")===!0){const $=e.get("EXT_texture_filter_anisotropic");s=a.getParameter($.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else s=0;return s}function l($){return!($!==es&&i.convert($)!==a.getParameter(a.IMPLEMENTATION_COLOR_READ_FORMAT))}function u($){const Q=$===Qs&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!($!==Ts&&i.convert($)!==a.getParameter(a.IMPLEMENTATION_COLOR_READ_TYPE)&&$!==os&&!Q)}function d($){if($==="highp"){if(a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).precision>0&&a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).precision>0)return"highp";$="mediump"}return $==="mediump"&&a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).precision>0&&a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let f=t.precision!==void 0?t.precision:"highp";const g=d(f);g!==f&&(console.warn("THREE.WebGLRenderer:",f,"not supported, using",g,"instead."),f=g);const x=t.logarithmicDepthBuffer===!0,v=t.reversedDepthBuffer===!0&&e.has("EXT_clip_control"),S=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),T=a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS),E=a.getParameter(a.MAX_TEXTURE_SIZE),A=a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE),w=a.getParameter(a.MAX_VERTEX_ATTRIBS),O=a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS),F=a.getParameter(a.MAX_VARYING_VECTORS),B=a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS),k=T>0,Y=a.getParameter(a.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:r,getMaxPrecision:d,textureFormatReadable:l,textureTypeReadable:u,precision:f,logarithmicDepthBuffer:x,reversedDepthBuffer:v,maxTextures:S,maxVertexTextures:T,maxTextureSize:E,maxCubemapSize:A,maxAttributes:w,maxVertexUniforms:O,maxVaryings:F,maxFragmentUniforms:B,vertexTextures:k,maxSamples:Y}}function Jq(a){const e=this;let t=null,i=0,s=!1,r=!1;const l=new al,u=new ni,d={value:null,needsUpdate:!1};this.uniform=d,this.numPlanes=0,this.numIntersection=0,this.init=function(x,v){const S=x.length!==0||v||i!==0||s;return s=v,i=x.length,S},this.beginShadows=function(){r=!0,g(null)},this.endShadows=function(){r=!1},this.setGlobalState=function(x,v){t=g(x,v,0)},this.setState=function(x,v,S){const T=x.clippingPlanes,E=x.clipIntersection,A=x.clipShadows,w=a.get(x);if(!s||T===null||T.length===0||r&&!A)r?g(null):f();else{const O=r?0:i,F=O*4;let B=w.clippingState||null;d.value=B,B=g(T,v,F,S);for(let k=0;k!==F;++k)B[k]=t[k];w.clippingState=B,this.numIntersection=E?this.numPlanes:0,this.numPlanes+=O}};function f(){d.value!==t&&(d.value=t,d.needsUpdate=i>0),e.numPlanes=i,e.numIntersection=0}function g(x,v,S,T){const E=x!==null?x.length:0;let A=null;if(E!==0){if(A=d.value,T!==!0||A===null){const w=S+E*4,O=v.matrixWorldInverse;u.getNormalMatrix(O),(A===null||A.length<w)&&(A=new Float32Array(w));for(let F=0,B=S;F!==E;++F,B+=4)l.copy(x[F]).applyMatrix4(O,u),l.normal.toArray(A,B),A[B+3]=l.constant}d.value=A,d.needsUpdate=!0}return e.numPlanes=E,e.numIntersection=0,A}}function jq(a){let e=new WeakMap;function t(l,u){return u===Kc?l.mapping=qo:u===Jc&&(l.mapping=ga),l}function i(l){if(l&&l.isTexture){const u=l.mapping;if(u===Kc||u===Jc)if(e.has(l)){const d=e.get(l).texture;return t(d,l.mapping)}else{const d=l.image;if(d&&d.height>0){const f=new sw(d.height);return f.fromEquirectangularTexture(a,l),e.set(l,f),l.addEventListener("dispose",s),t(f.texture,l.mapping)}else return null}}return l}function s(l){const u=l.target;u.removeEventListener("dispose",s);const d=e.get(u);d!==void 0&&(e.delete(u),d.dispose())}function r(){e=new WeakMap}return{get:i,dispose:r}}const Pf=4,$N=[.125,.215,.35,.446,.526,.582],ph=20,gT=new ru,XN=new Jt;let _T=null,xT=0,yT=0,vT=!1;const dh=(1+Math.sqrt(5))/2,xf=1/dh,qN=[new re(-dh,xf,0),new re(dh,xf,0),new re(-xf,0,dh),new re(xf,0,dh),new re(0,dh,-xf),new re(0,dh,xf),new re(-1,1,-1),new re(1,1,-1),new re(-1,1,1),new re(1,1,1)],Qq=new re;let YN=class{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,i=.1,s=100,r={}){const{size:l=256,position:u=Qq}=r;_T=this._renderer.getRenderTarget(),xT=this._renderer.getActiveCubeFace(),yT=this._renderer.getActiveMipmapLevel(),vT=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(l);const d=this._allocateTargets();return d.depthBuffer=!0,this._sceneToCubeUV(e,i,s,d,u),t>0&&this._blur(d,0,0,t),this._applyPMREM(d),this._cleanup(d),d}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=JN(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=KN(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(_T,xT,yT),this._renderer.xr.enabled=vT,e.scissorTest=!1,Ty(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===qo||e.mapping===ga?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),_T=this._renderer.getRenderTarget(),xT=this._renderer.getActiveCubeFace(),yT=this._renderer.getActiveMipmapLevel(),vT=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const i=t||this._allocateTargets();return this._textureToCubeUV(e,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,i={magFilter:Ni,minFilter:Ni,generateMipmaps:!1,type:Qs,format:es,colorSpace:sc,depthBuffer:!1},s=ZN(e,t,i);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=ZN(e,t,i);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=e9(r)),this._blurMaterial=t9(r,e,t)}return s}_compileMaterial(e){const t=new ts(this._lodPlanes[0],e);this._renderer.compile(t,gT)}_sceneToCubeUV(e,t,i,s,r){const d=new Gs(90,1,t,i),f=[1,-1,1,1,1,1],g=[1,1,1,-1,-1,-1],x=this._renderer,v=x.autoClear,S=x.toneMapping;x.getClearColor(XN),x.toneMapping=Nr,x.autoClear=!1,x.state.buffers.depth.getReversed()&&(x.setRenderTarget(s),x.clearDepth(),x.setRenderTarget(null));const E=new so({name:"PMREM.Background",side:ns,depthWrite:!1,depthTest:!1}),A=new ts(new cc,E);let w=!1;const O=e.background;O?O.isColor&&(E.color.copy(O),e.background=null,w=!0):(E.color.copy(XN),w=!0);for(let F=0;F<6;F++){const B=F%3;B===0?(d.up.set(0,f[F],0),d.position.set(r.x,r.y,r.z),d.lookAt(r.x+g[F],r.y,r.z)):B===1?(d.up.set(0,0,f[F]),d.position.set(r.x,r.y,r.z),d.lookAt(r.x,r.y+g[F],r.z)):(d.up.set(0,f[F],0),d.position.set(r.x,r.y,r.z),d.lookAt(r.x,r.y,r.z+g[F]));const k=this._cubeSize;Ty(s,B*k,F>2?k:0,k,k),x.setRenderTarget(s),w&&x.render(A,d),x.render(e,d)}A.geometry.dispose(),A.material.dispose(),x.toneMapping=S,x.autoClear=v,e.background=O}_textureToCubeUV(e,t){const i=this._renderer,s=e.mapping===qo||e.mapping===ga;s?(this._cubemapMaterial===null&&(this._cubemapMaterial=JN()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=KN());const r=s?this._cubemapMaterial:this._equirectMaterial,l=new ts(this._lodPlanes[0],r),u=r.uniforms;u.envMap.value=e;const d=this._cubeSize;Ty(t,0,0,3*d,2*d),i.setRenderTarget(t),i.render(l,gT)}_applyPMREM(e){const t=this._renderer,i=t.autoClear;t.autoClear=!1;const s=this._lodPlanes.length;for(let r=1;r<s;r++){const l=Math.sqrt(this._sigmas[r]*this._sigmas[r]-this._sigmas[r-1]*this._sigmas[r-1]),u=qN[(s-r-1)%qN.length];this._blur(e,r-1,r,l,u)}t.autoClear=i}_blur(e,t,i,s,r){const l=this._pingPongRenderTarget;this._halfBlur(e,l,t,i,s,"latitudinal",r),this._halfBlur(l,e,i,i,s,"longitudinal",r)}_halfBlur(e,t,i,s,r,l,u){const d=this._renderer,f=this._blurMaterial;l!=="latitudinal"&&l!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const g=3,x=new ts(this._lodPlanes[s],f),v=f.uniforms,S=this._sizeLods[i]-1,T=isFinite(r)?Math.PI/(2*S):2*Math.PI/(2*ph-1),E=r/T,A=isFinite(r)?1+Math.floor(g*E):ph;A>ph&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${A} samples when the maximum is set to ${ph}`);const w=[];let O=0;for(let $=0;$<ph;++$){const Q=$/E,z=Math.exp(-Q*Q/2);w.push(z),$===0?O+=z:$<A&&(O+=2*z)}for(let $=0;$<w.length;$++)w[$]=w[$]/O;v.envMap.value=e.texture,v.samples.value=A,v.weights.value=w,v.latitudinal.value=l==="latitudinal",u&&(v.poleAxis.value=u);const{_lodMax:F}=this;v.dTheta.value=T,v.mipInt.value=F-i;const B=this._sizeLods[s],k=3*B*(s>F-Pf?s-F+Pf:0),Y=4*(this._cubeSize-B);Ty(t,k,Y,3*B,2*B),d.setRenderTarget(t),d.render(x,gT)}};function e9(a){const e=[],t=[],i=[];let s=a;const r=a-Pf+1+$N.length;for(let l=0;l<r;l++){const u=Math.pow(2,s);t.push(u);let d=1/u;l>a-Pf?d=$N[l-a+Pf-1]:l===0&&(d=0),i.push(d);const f=1/(u-2),g=-f,x=1+f,v=[g,g,x,g,x,x,g,g,x,x,g,x],S=6,T=6,E=3,A=2,w=1,O=new Float32Array(E*T*S),F=new Float32Array(A*T*S),B=new Float32Array(w*T*S);for(let Y=0;Y<S;Y++){const $=Y%3*2/3-1,Q=Y>2?0:-1,z=[$,Q,0,$+2/3,Q,0,$+2/3,Q+1,0,$,Q,0,$+2/3,Q+1,0,$,Q+1,0];O.set(z,E*T*Y),F.set(v,A*T*Y);const q=[Y,Y,Y,Y,Y,Y];B.set(q,w*T*Y)}const k=new li;k.setAttribute("position",new $i(O,E)),k.setAttribute("uv",new $i(F,A)),k.setAttribute("faceIndex",new $i(B,w)),e.push(k),s>Pf&&s--}return{lodPlanes:e,sizeLods:t,sigmas:i}}function ZN(a,e,t){const i=new Yo(a,e,t);return i.texture.mapping=nc,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function Ty(a,e,t,i,s){a.viewport.set(e,t,i,s),a.scissor.set(e,t,i,s)}function t9(a,e,t){const i=new Float32Array(ph),s=new re(0,1,0);return new er({name:"SphericalGaussianBlur",defines:{n:ph,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${a}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:s}},vertexShader:Vw(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:kr,depthTest:!1,depthWrite:!1})}function KN(){return new er({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Vw(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:kr,depthTest:!1,depthWrite:!1})}function JN(){return new er({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Vw(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:kr,depthTest:!1,depthWrite:!1})}function Vw(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function n9(a){let e=new WeakMap,t=null;function i(u){if(u&&u.isTexture){const d=u.mapping,f=d===Kc||d===Jc,g=d===qo||d===ga;if(f||g){let x=e.get(u);const v=x!==void 0?x.texture.pmremVersion:0;if(u.isRenderTargetTexture&&u.pmremVersion!==v)return t===null&&(t=new YN(a)),x=f?t.fromEquirectangular(u,x):t.fromCubemap(u,x),x.texture.pmremVersion=u.pmremVersion,e.set(u,x),x.texture;if(x!==void 0)return x.texture;{const S=u.image;return f&&S&&S.height>0||g&&S&&s(S)?(t===null&&(t=new YN(a)),x=f?t.fromEquirectangular(u):t.fromCubemap(u),x.texture.pmremVersion=u.pmremVersion,e.set(u,x),u.addEventListener("dispose",r),x.texture):null}}}return u}function s(u){let d=0;const f=6;for(let g=0;g<f;g++)u[g]!==void 0&&d++;return d===f}function r(u){const d=u.target;d.removeEventListener("dispose",r);const f=e.get(d);f!==void 0&&(e.delete(d),f.dispose())}function l(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:i,dispose:l}}function i9(a){const e={};function t(i){if(e[i]!==void 0)return e[i];let s;switch(i){case"WEBGL_depth_texture":s=a.getExtension("WEBGL_depth_texture")||a.getExtension("MOZ_WEBGL_depth_texture")||a.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=a.getExtension(i)}return e[i]=s,s}return{has:function(i){return t(i)!==null},init:function(){t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance"),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture"),t("WEBGL_render_shared_exponent")},get:function(i){const s=t(i);return s===null&&Eo("THREE.WebGLRenderer: "+i+" extension not supported."),s}}}function s9(a,e,t,i){const s={},r=new WeakMap;function l(x){const v=x.target;v.index!==null&&e.remove(v.index);for(const T in v.attributes)e.remove(v.attributes[T]);v.removeEventListener("dispose",l),delete s[v.id];const S=r.get(v);S&&(e.remove(S),r.delete(v)),i.releaseStatesOfGeometry(v),v.isInstancedBufferGeometry===!0&&delete v._maxInstanceCount,t.memory.geometries--}function u(x,v){return s[v.id]===!0||(v.addEventListener("dispose",l),s[v.id]=!0,t.memory.geometries++),v}function d(x){const v=x.attributes;for(const S in v)e.update(v[S],a.ARRAY_BUFFER)}function f(x){const v=[],S=x.index,T=x.attributes.position;let E=0;if(S!==null){const O=S.array;E=S.version;for(let F=0,B=O.length;F<B;F+=3){const k=O[F+0],Y=O[F+1],$=O[F+2];v.push(k,Y,Y,$,$,k)}}else if(T!==void 0){const O=T.array;E=T.version;for(let F=0,B=O.length/3-1;F<B;F+=3){const k=F+0,Y=F+1,$=F+2;v.push(k,Y,Y,$,$,k)}}else return;const A=new(ew(v)?Xv:$v)(v,1);A.version=E;const w=r.get(x);w&&e.remove(w),r.set(x,A)}function g(x){const v=r.get(x);if(v){const S=x.index;S!==null&&v.version<S.version&&f(x)}else f(x);return r.get(x)}return{get:u,update:d,getWireframeAttribute:g}}function r9(a,e,t){let i;function s(v){i=v}let r,l;function u(v){r=v.type,l=v.bytesPerElement}function d(v,S){a.drawElements(i,S,r,v*l),t.update(S,i,1)}function f(v,S,T){T!==0&&(a.drawElementsInstanced(i,S,r,v*l,T),t.update(S,i,T))}function g(v,S,T){if(T===0)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i,S,0,r,v,0,T);let A=0;for(let w=0;w<T;w++)A+=S[w];t.update(A,i,1)}function x(v,S,T,E){if(T===0)return;const A=e.get("WEBGL_multi_draw");if(A===null)for(let w=0;w<v.length;w++)f(v[w]/l,S[w],E[w]);else{A.multiDrawElementsInstancedWEBGL(i,S,0,r,v,0,E,0,T);let w=0;for(let O=0;O<T;O++)w+=S[O]*E[O];t.update(w,i,1)}}this.setMode=s,this.setIndex=u,this.render=d,this.renderInstances=f,this.renderMultiDraw=g,this.renderMultiDrawInstances=x}function o9(a){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function i(r,l,u){switch(t.calls++,l){case a.TRIANGLES:t.triangles+=u*(r/3);break;case a.LINES:t.lines+=u*(r/2);break;case a.LINE_STRIP:t.lines+=u*(r-1);break;case a.LINE_LOOP:t.lines+=u*r;break;case a.POINTS:t.points+=u*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",l);break}}function s(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:s,update:i}}function a9(a,e,t){const i=new WeakMap,s=new Un;function r(l,u,d){const f=l.morphTargetInfluences,g=u.morphAttributes.position||u.morphAttributes.normal||u.morphAttributes.color,x=g!==void 0?g.length:0;let v=i.get(u);if(v===void 0||v.count!==x){let q=function(){Q.dispose(),i.delete(u),u.removeEventListener("dispose",q)};var S=q;v!==void 0&&v.texture.dispose();const T=u.morphAttributes.position!==void 0,E=u.morphAttributes.normal!==void 0,A=u.morphAttributes.color!==void 0,w=u.morphAttributes.position||[],O=u.morphAttributes.normal||[],F=u.morphAttributes.color||[];let B=0;T===!0&&(B=1),E===!0&&(B=2),A===!0&&(B=3);let k=u.attributes.position.count*B,Y=1;k>e.maxTextureSize&&(Y=Math.ceil(k/e.maxTextureSize),k=e.maxTextureSize);const $=new Float32Array(k*Y*4*x),Q=new Dg($,k,Y,x);Q.type=os,Q.needsUpdate=!0;const z=B*4;for(let oe=0;oe<x;oe++){const Ce=w[oe],Ne=O[oe],Oe=F[oe],Be=k*Y*4*oe;for(let He=0;He<Ce.count;He++){const ct=He*z;T===!0&&(s.fromBufferAttribute(Ce,He),$[Be+ct+0]=s.x,$[Be+ct+1]=s.y,$[Be+ct+2]=s.z,$[Be+ct+3]=0),E===!0&&(s.fromBufferAttribute(Ne,He),$[Be+ct+4]=s.x,$[Be+ct+5]=s.y,$[Be+ct+6]=s.z,$[Be+ct+7]=0),A===!0&&(s.fromBufferAttribute(Oe,He),$[Be+ct+8]=s.x,$[Be+ct+9]=s.y,$[Be+ct+10]=s.z,$[Be+ct+11]=Oe.itemSize===4?s.w:1)}}v={count:x,texture:Q,size:new it(k,Y)},i.set(u,v),u.addEventListener("dispose",q)}if(l.isInstancedMesh===!0&&l.morphTexture!==null)d.getUniforms().setValue(a,"morphTexture",l.morphTexture,t);else{let T=0;for(let A=0;A<f.length;A++)T+=f[A];const E=u.morphTargetsRelative?1:1-T;d.getUniforms().setValue(a,"morphTargetBaseInfluence",E),d.getUniforms().setValue(a,"morphTargetInfluences",f)}d.getUniforms().setValue(a,"morphTargetsTexture",v.texture,t),d.getUniforms().setValue(a,"morphTargetsTextureSize",v.size)}return{update:r}}function l9(a,e,t,i){let s=new WeakMap;function r(d){const f=i.render.frame,g=d.geometry,x=e.get(d,g);if(s.get(x)!==f&&(e.update(x),s.set(x,f)),d.isInstancedMesh&&(d.hasEventListener("dispose",u)===!1&&d.addEventListener("dispose",u),s.get(d)!==f&&(t.update(d.instanceMatrix,a.ARRAY_BUFFER),d.instanceColor!==null&&t.update(d.instanceColor,a.ARRAY_BUFFER),s.set(d,f))),d.isSkinnedMesh){const v=d.skeleton;s.get(v)!==f&&(v.update(),s.set(v,f))}return x}function l(){s=new WeakMap}function u(d){const f=d.target;f.removeEventListener("dispose",u),t.remove(f.instanceMatrix),f.instanceColor!==null&&t.remove(f.instanceColor)}return{update:r,dispose:l}}const KL=new ds,jN=new Ro(1,1),JL=new Dg,jL=new Hv,QL=new tu,QN=[],eP=[],tP=new Float32Array(16),nP=new Float32Array(9),iP=new Float32Array(4);function yp(a,e,t){const i=a[0];if(i<=0||i>0)return a;const s=e*t;let r=QN[s];if(r===void 0&&(r=new Float32Array(s),QN[s]=r),e!==0){i.toArray(r,0);for(let l=1,u=0;l!==e;++l)u+=t,a[l].toArray(r,u)}return r}function ar(a,e){if(a.length!==e.length)return!1;for(let t=0,i=a.length;t<i;t++)if(a[t]!==e[t])return!1;return!0}function lr(a,e){for(let t=0,i=e.length;t<i;t++)a[t]=e[t]}function p0(a,e){let t=eP[e];t===void 0&&(t=new Int32Array(e),eP[e]=t);for(let i=0;i!==e;++i)t[i]=a.allocateTextureUnit();return t}function c9(a,e){const t=this.cache;t[0]!==e&&(a.uniform1f(this.addr,e),t[0]=e)}function u9(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(a.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(ar(t,e))return;a.uniform2fv(this.addr,e),lr(t,e)}}function h9(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(a.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(a.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(ar(t,e))return;a.uniform3fv(this.addr,e),lr(t,e)}}function d9(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(a.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(ar(t,e))return;a.uniform4fv(this.addr,e),lr(t,e)}}function f9(a,e){const t=this.cache,i=e.elements;if(i===void 0){if(ar(t,e))return;a.uniformMatrix2fv(this.addr,!1,e),lr(t,e)}else{if(ar(t,i))return;iP.set(i),a.uniformMatrix2fv(this.addr,!1,iP),lr(t,i)}}function p9(a,e){const t=this.cache,i=e.elements;if(i===void 0){if(ar(t,e))return;a.uniformMatrix3fv(this.addr,!1,e),lr(t,e)}else{if(ar(t,i))return;nP.set(i),a.uniformMatrix3fv(this.addr,!1,nP),lr(t,i)}}function m9(a,e){const t=this.cache,i=e.elements;if(i===void 0){if(ar(t,e))return;a.uniformMatrix4fv(this.addr,!1,e),lr(t,e)}else{if(ar(t,i))return;tP.set(i),a.uniformMatrix4fv(this.addr,!1,tP),lr(t,i)}}function g9(a,e){const t=this.cache;t[0]!==e&&(a.uniform1i(this.addr,e),t[0]=e)}function _9(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(a.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(ar(t,e))return;a.uniform2iv(this.addr,e),lr(t,e)}}function x9(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(a.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(ar(t,e))return;a.uniform3iv(this.addr,e),lr(t,e)}}function y9(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(a.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(ar(t,e))return;a.uniform4iv(this.addr,e),lr(t,e)}}function v9(a,e){const t=this.cache;t[0]!==e&&(a.uniform1ui(this.addr,e),t[0]=e)}function S9(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(a.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(ar(t,e))return;a.uniform2uiv(this.addr,e),lr(t,e)}}function b9(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(a.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(ar(t,e))return;a.uniform3uiv(this.addr,e),lr(t,e)}}function T9(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(a.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(ar(t,e))return;a.uniform4uiv(this.addr,e),lr(t,e)}}function M9(a,e,t){const i=this.cache,s=t.allocateTextureUnit();i[0]!==s&&(a.uniform1i(this.addr,s),i[0]=s);let r;this.type===a.SAMPLER_2D_SHADOW?(jN.compareFunction=Lg,r=jN):r=KL,t.setTexture2D(e||r,s)}function w9(a,e,t){const i=this.cache,s=t.allocateTextureUnit();i[0]!==s&&(a.uniform1i(this.addr,s),i[0]=s),t.setTexture3D(e||jL,s)}function A9(a,e,t){const i=this.cache,s=t.allocateTextureUnit();i[0]!==s&&(a.uniform1i(this.addr,s),i[0]=s),t.setTextureCube(e||QL,s)}function E9(a,e,t){const i=this.cache,s=t.allocateTextureUnit();i[0]!==s&&(a.uniform1i(this.addr,s),i[0]=s),t.setTexture2DArray(e||JL,s)}function R9(a){switch(a){case 5126:return c9;case 35664:return u9;case 35665:return h9;case 35666:return d9;case 35674:return f9;case 35675:return p9;case 35676:return m9;case 5124:case 35670:return g9;case 35667:case 35671:return _9;case 35668:case 35672:return x9;case 35669:case 35673:return y9;case 5125:return v9;case 36294:return S9;case 36295:return b9;case 36296:return T9;case 35678:case 36198:case 36298:case 36306:case 35682:return M9;case 35679:case 36299:case 36307:return w9;case 35680:case 36300:case 36308:case 36293:return A9;case 36289:case 36303:case 36311:case 36292:return E9}}function C9(a,e){a.uniform1fv(this.addr,e)}function N9(a,e){const t=yp(e,this.size,2);a.uniform2fv(this.addr,t)}function P9(a,e){const t=yp(e,this.size,3);a.uniform3fv(this.addr,t)}function I9(a,e){const t=yp(e,this.size,4);a.uniform4fv(this.addr,t)}function L9(a,e){const t=yp(e,this.size,4);a.uniformMatrix2fv(this.addr,!1,t)}function D9(a,e){const t=yp(e,this.size,9);a.uniformMatrix3fv(this.addr,!1,t)}function U9(a,e){const t=yp(e,this.size,16);a.uniformMatrix4fv(this.addr,!1,t)}function F9(a,e){a.uniform1iv(this.addr,e)}function B9(a,e){a.uniform2iv(this.addr,e)}function O9(a,e){a.uniform3iv(this.addr,e)}function V9(a,e){a.uniform4iv(this.addr,e)}function z9(a,e){a.uniform1uiv(this.addr,e)}function k9(a,e){a.uniform2uiv(this.addr,e)}function G9(a,e){a.uniform3uiv(this.addr,e)}function H9(a,e){a.uniform4uiv(this.addr,e)}function W9(a,e,t){const i=this.cache,s=e.length,r=p0(t,s);ar(i,r)||(a.uniform1iv(this.addr,r),lr(i,r));for(let l=0;l!==s;++l)t.setTexture2D(e[l]||KL,r[l])}function $9(a,e,t){const i=this.cache,s=e.length,r=p0(t,s);ar(i,r)||(a.uniform1iv(this.addr,r),lr(i,r));for(let l=0;l!==s;++l)t.setTexture3D(e[l]||jL,r[l])}function X9(a,e,t){const i=this.cache,s=e.length,r=p0(t,s);ar(i,r)||(a.uniform1iv(this.addr,r),lr(i,r));for(let l=0;l!==s;++l)t.setTextureCube(e[l]||QL,r[l])}function q9(a,e,t){const i=this.cache,s=e.length,r=p0(t,s);ar(i,r)||(a.uniform1iv(this.addr,r),lr(i,r));for(let l=0;l!==s;++l)t.setTexture2DArray(e[l]||JL,r[l])}function Y9(a){switch(a){case 5126:return C9;case 35664:return N9;case 35665:return P9;case 35666:return I9;case 35674:return L9;case 35675:return D9;case 35676:return U9;case 5124:case 35670:return F9;case 35667:case 35671:return B9;case 35668:case 35672:return O9;case 35669:case 35673:return V9;case 5125:return z9;case 36294:return k9;case 36295:return G9;case 36296:return H9;case 35678:case 36198:case 36298:case 36306:case 35682:return W9;case 35679:case 36299:case 36307:return $9;case 35680:case 36300:case 36308:case 36293:return X9;case 36289:case 36303:case 36311:case 36292:return q9}}class Z9{constructor(e,t,i){this.id=e,this.addr=i,this.cache=[],this.type=t.type,this.setValue=R9(t.type)}}class K9{constructor(e,t,i){this.id=e,this.addr=i,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=Y9(t.type)}}class J9{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,i){const s=this.seq;for(let r=0,l=s.length;r!==l;++r){const u=s[r];u.setValue(e,t[u.id],i)}}}const ST=/(\w+)(\])?(\[|\.)?/g;function sP(a,e){a.seq.push(e),a.map[e.id]=e}function j9(a,e,t){const i=a.name,s=i.length;for(ST.lastIndex=0;;){const r=ST.exec(i),l=ST.lastIndex;let u=r[1];const d=r[2]==="]",f=r[3];if(d&&(u=u|0),f===void 0||f==="["&&l+2===s){sP(t,f===void 0?new Z9(u,a,e):new K9(u,a,e));break}else{let x=t.map[u];x===void 0&&(x=new J9(u),sP(t,x)),t=x}}}class $y{constructor(e,t){this.seq=[],this.map={};const i=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let s=0;s<i;++s){const r=e.getActiveUniform(t,s),l=e.getUniformLocation(t,r.name);j9(r,l,this)}}setValue(e,t,i,s){const r=this.map[t];r!==void 0&&r.setValue(e,i,s)}setOptional(e,t,i){const s=t[i];s!==void 0&&this.setValue(e,i,s)}static upload(e,t,i,s){for(let r=0,l=t.length;r!==l;++r){const u=t[r],d=i[u.id];d.needsUpdate!==!1&&u.setValue(e,d.value,s)}}static seqWithValue(e,t){const i=[];for(let s=0,r=e.length;s!==r;++s){const l=e[s];l.id in t&&i.push(l)}return i}}function rP(a,e,t){const i=a.createShader(e);return a.shaderSource(i,t),a.compileShader(i),i}const Q9=37297;let eY=0;function tY(a,e){const t=a.split(`
`),i=[],s=Math.max(e-6,0),r=Math.min(e+6,t.length);for(let l=s;l<r;l++){const u=l+1;i.push(`${u===e?">":" "} ${u}: ${t[l]}`)}return i.join(`
`)}const oP=new ni;function nY(a){zn._getMatrix(oP,zn.workingColorSpace,a);const e=`mat3( ${oP.elements.map(t=>t.toFixed(4))} )`;switch(zn.getTransfer(a)){case Jh:return[e,"LinearTransferOETF"];case un:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",a),[e,"LinearTransferOETF"]}}function aP(a,e,t){const i=a.getShaderParameter(e,a.COMPILE_STATUS),r=(a.getShaderInfoLog(e)||"").trim();if(i&&r==="")return"";const l=/ERROR: 0:(\d+)/.exec(r);if(l){const u=parseInt(l[1]);return t.toUpperCase()+`

`+r+`

`+tY(a.getShaderSource(e),u)}else return r}function iY(a,e){const t=nY(e);return[`vec4 ${a}( vec4 value ) {`,`	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,"}"].join(`
`)}function sY(a,e){let t;switch(e){case WM:t="Linear";break;case $M:t="Reinhard";break;case XM:t="Cineon";break;case qM:t="ACESFilmic";break;case YM:t="AgX";break;case ZM:t="Neutral";break;case VI:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+a+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}const My=new re;function rY(){zn.getLuminanceCoefficients(My);const a=My.x.toFixed(4),e=My.y.toFixed(4),t=My.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${a}, ${e}, ${t} );`,"	return dot( weights, rgb );","}"].join(`
`)}function oY(a){return[a.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",a.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(zm).join(`
`)}function aY(a){const e=[];for(const t in a){const i=a[t];i!==!1&&e.push("#define "+t+" "+i)}return e.join(`
`)}function lY(a,e){const t={},i=a.getProgramParameter(e,a.ACTIVE_ATTRIBUTES);for(let s=0;s<i;s++){const r=a.getActiveAttrib(e,s),l=r.name;let u=1;r.type===a.FLOAT_MAT2&&(u=2),r.type===a.FLOAT_MAT3&&(u=3),r.type===a.FLOAT_MAT4&&(u=4),t[l]={type:r.type,location:a.getAttribLocation(e,l),locationSize:u}}return t}function zm(a){return a!==""}function lP(a,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return a.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function cP(a,e){return a.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const cY=/^[ \t]*#include +<([\w\d./]+)>/gm;function fM(a){return a.replace(cY,hY)}const uY=new Map;function hY(a,e){let t=vi[e];if(t===void 0){const i=uY.get(e);if(i!==void 0)t=vi[i],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,i);else throw new Error("Can not resolve #include <"+e+">")}return fM(t)}const dY=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function uP(a){return a.replace(dY,fY)}function fY(a,e,t,i){let s="";for(let r=parseInt(e);r<parseInt(t);r++)s+=i.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return s}function hP(a){let e=`precision ${a.precision} float;
	precision ${a.precision} int;
	precision ${a.precision} sampler2D;
	precision ${a.precision} samplerCube;
	precision ${a.precision} sampler3D;
	precision ${a.precision} sampler2DArray;
	precision ${a.precision} sampler2DShadow;
	precision ${a.precision} samplerCubeShadow;
	precision ${a.precision} sampler2DArrayShadow;
	precision ${a.precision} isampler2D;
	precision ${a.precision} isampler3D;
	precision ${a.precision} isamplerCube;
	precision ${a.precision} isampler2DArray;
	precision ${a.precision} usampler2D;
	precision ${a.precision} usampler3D;
	precision ${a.precision} usamplerCube;
	precision ${a.precision} usampler2DArray;
	`;return a.precision==="highp"?e+=`
#define HIGH_PRECISION`:a.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:a.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function pY(a){let e="SHADOWMAP_TYPE_BASIC";return a.shadowMapType===Tv?e="SHADOWMAP_TYPE_PCF":a.shadowMapType===DI?e="SHADOWMAP_TYPE_PCF_SOFT":a.shadowMapType===So&&(e="SHADOWMAP_TYPE_VSM"),e}function mY(a){let e="ENVMAP_TYPE_CUBE";if(a.envMap)switch(a.envMapMode){case qo:case ga:e="ENVMAP_TYPE_CUBE";break;case nc:e="ENVMAP_TYPE_CUBE_UV";break}return e}function gY(a){let e="ENVMAP_MODE_REFLECTION";if(a.envMap)switch(a.envMapMode){case ga:e="ENVMAP_MODE_REFRACTION";break}return e}function _Y(a){let e="ENVMAP_BLENDING_NONE";if(a.envMap)switch(a.combine){case pp:e="ENVMAP_BLENDING_MULTIPLY";break;case GM:e="ENVMAP_BLENDING_MIX";break;case HM:e="ENVMAP_BLENDING_ADD";break}return e}function xY(a){const e=a.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,i=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),112)),texelHeight:i,maxMip:t}}function yY(a,e,t,i){const s=a.getContext(),r=t.defines;let l=t.vertexShader,u=t.fragmentShader;const d=pY(t),f=mY(t),g=gY(t),x=_Y(t),v=xY(t),S=oY(t),T=aY(r),E=s.createProgram();let A,w,O=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(A=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,T].filter(zm).join(`
`),A.length>0&&(A+=`
`),w=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,T].filter(zm).join(`
`),w.length>0&&(w+=`
`)):(A=[hP(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,T,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.batchingColor?"#define USE_BATCHING_COLOR":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+g:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+d:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reversedDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(zm).join(`
`),w=[hP(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,T,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+f:"",t.envMap?"#define "+g:"",t.envMap?"#define "+x:"",v?"#define CUBEUV_TEXEL_WIDTH "+v.texelWidth:"",v?"#define CUBEUV_TEXEL_HEIGHT "+v.texelHeight:"",v?"#define CUBEUV_MAX_MIP "+v.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.dispersion?"#define USE_DISPERSION":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor||t.batchingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+d:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reversedDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==Nr?"#define TONE_MAPPING":"",t.toneMapping!==Nr?vi.tonemapping_pars_fragment:"",t.toneMapping!==Nr?sY("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",vi.colorspace_pars_fragment,iY("linearToOutputTexel",t.outputColorSpace),rY(),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(zm).join(`
`)),l=fM(l),l=lP(l,t),l=cP(l,t),u=fM(u),u=lP(u,t),u=cP(u,t),l=uP(l),u=uP(u),t.isRawShaderMaterial!==!0&&(O=`#version 300 es
`,A=[S,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+A,w=["#define varying in",t.glslVersion===rM?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===rM?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+w);const F=O+A+l,B=O+w+u,k=rP(s,s.VERTEX_SHADER,F),Y=rP(s,s.FRAGMENT_SHADER,B);s.attachShader(E,k),s.attachShader(E,Y),t.index0AttributeName!==void 0?s.bindAttribLocation(E,0,t.index0AttributeName):t.morphTargets===!0&&s.bindAttribLocation(E,0,"position"),s.linkProgram(E);function $(oe){if(a.debug.checkShaderErrors){const Ce=s.getProgramInfoLog(E)||"",Ne=s.getShaderInfoLog(k)||"",Oe=s.getShaderInfoLog(Y)||"",Be=Ce.trim(),He=Ne.trim(),ct=Oe.trim();let Ve=!0,Ct=!0;if(s.getProgramParameter(E,s.LINK_STATUS)===!1)if(Ve=!1,typeof a.debug.onShaderError=="function")a.debug.onShaderError(s,E,k,Y);else{const Gt=aP(s,k,"vertex"),pn=aP(s,Y,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(E,s.VALIDATE_STATUS)+`

Material Name: `+oe.name+`
Material Type: `+oe.type+`

Program Info Log: `+Be+`
`+Gt+`
`+pn)}else Be!==""?console.warn("THREE.WebGLProgram: Program Info Log:",Be):(He===""||ct==="")&&(Ct=!1);Ct&&(oe.diagnostics={runnable:Ve,programLog:Be,vertexShader:{log:He,prefix:A},fragmentShader:{log:ct,prefix:w}})}s.deleteShader(k),s.deleteShader(Y),Q=new $y(s,E),z=lY(s,E)}let Q;this.getUniforms=function(){return Q===void 0&&$(this),Q};let z;this.getAttributes=function(){return z===void 0&&$(this),z};let q=t.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return q===!1&&(q=s.getProgramParameter(E,Q9)),q},this.destroy=function(){i.releaseStatesOfProgram(this),s.deleteProgram(E),this.program=void 0},this.type=t.shaderType,this.name=t.shaderName,this.id=eY++,this.cacheKey=e,this.usedTimes=1,this.program=E,this.vertexShader=k,this.fragmentShader=Y,this}let vY=0;class SY{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,i=e.fragmentShader,s=this._getShaderStage(t),r=this._getShaderStage(i),l=this._getShaderCacheForMaterial(e);return l.has(s)===!1&&(l.add(s),s.usedTimes++),l.has(r)===!1&&(l.add(r),r.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const i of t)i.usedTimes--,i.usedTimes===0&&this.shaderCache.delete(i.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let i=t.get(e);return i===void 0&&(i=new Set,t.set(e,i)),i}_getShaderStage(e){const t=this.shaderCache;let i=t.get(e);return i===void 0&&(i=new bY(e),t.set(e,i)),i}}class bY{constructor(e){this.id=vY++,this.code=e,this.usedTimes=0}}function TY(a,e,t,i,s,r,l){const u=new Wv,d=new SY,f=new Set,g=[],x=s.logarithmicDepthBuffer,v=s.vertexTextures;let S=s.precision;const T={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function E(z){return f.add(z),z===0?"uv":`uv${z}`}function A(z,q,oe,Ce,Ne){const Oe=Ce.fog,Be=Ne.geometry,He=z.isMeshStandardMaterial?Ce.environment:null,ct=(z.isMeshStandardMaterial?t:e).get(z.envMap||He),Ve=ct&&ct.mapping===nc?ct.image.height:null,Ct=T[z.type];z.precision!==null&&(S=s.getMaxPrecision(z.precision),S!==z.precision&&console.warn("THREE.WebGLProgram.getParameters:",z.precision,"not supported, using",S,"instead."));const Gt=Be.morphAttributes.position||Be.morphAttributes.normal||Be.morphAttributes.color,pn=Gt!==void 0?Gt.length:0;let qn=0;Be.morphAttributes.position!==void 0&&(qn=1),Be.morphAttributes.normal!==void 0&&(qn=2),Be.morphAttributes.color!==void 0&&(qn=3);let yi,bi,rt,Xt;if(Ct){const Ii=ll[Ct];yi=Ii.vertexShader,bi=Ii.fragmentShader}else yi=z.vertexShader,bi=z.fragmentShader,d.update(z),rt=d.getVertexShaderID(z),Xt=d.getFragmentShaderID(z);const At=a.getRenderTarget(),In=a.state.buffers.depth.getReversed(),gn=Ne.isInstancedMesh===!0,kn=Ne.isBatchedMesh===!0,Ki=!!z.map,Ue=!!z.matcap,ee=!!ct,ve=!!z.aoMap,de=!!z.lightMap,we=!!z.bumpMap,Ie=!!z.normalMap,lt=!!z.displacementMap,Xe=!!z.emissiveMap,qe=!!z.metalnessMap,Ft=!!z.roughnessMap,Bt=z.anisotropy>0,se=z.clearcoat>0,X=z.dispersion>0,Se=z.iridescence>0,Me=z.sheen>0,Ge=z.transmission>0,De=Bt&&!!z.anisotropyMap,Et=se&&!!z.clearcoatMap,et=se&&!!z.clearcoatNormalMap,kt=se&&!!z.clearcoatRoughnessMap,It=Se&&!!z.iridescenceMap,Ye=Se&&!!z.iridescenceThicknessMap,mt=Me&&!!z.sheenColorMap,ft=Me&&!!z.sheenRoughnessMap,Lt=!!z.specularMap,yt=!!z.specularColorMap,bn=!!z.specularIntensityMap,ge=Ge&&!!z.transmissionMap,bt=Ge&&!!z.thicknessMap,Ht=!!z.gradientMap,Qt=!!z.alphaMap,wt=z.alphaTest>0,ut=!!z.alphaHash,ln=!!z.extensions;let Yn=Nr;z.toneMapped&&(At===null||At.isXRRenderTarget===!0)&&(Yn=a.toneMapping);const Pi={shaderID:Ct,shaderType:z.type,shaderName:z.name,vertexShader:yi,fragmentShader:bi,defines:z.defines,customVertexShaderID:rt,customFragmentShaderID:Xt,isRawShaderMaterial:z.isRawShaderMaterial===!0,glslVersion:z.glslVersion,precision:S,batching:kn,batchingColor:kn&&Ne._colorsTexture!==null,instancing:gn,instancingColor:gn&&Ne.instanceColor!==null,instancingMorph:gn&&Ne.morphTexture!==null,supportsVertexTextures:v,outputColorSpace:At===null?a.outputColorSpace:At.isXRRenderTarget===!0?At.texture.colorSpace:sc,alphaToCoverage:!!z.alphaToCoverage,map:Ki,matcap:Ue,envMap:ee,envMapMode:ee&&ct.mapping,envMapCubeUVHeight:Ve,aoMap:ve,lightMap:de,bumpMap:we,normalMap:Ie,displacementMap:v&&lt,emissiveMap:Xe,normalMapObjectSpace:Ie&&z.normalMapType===JM,normalMapTangentSpace:Ie&&z.normalMapType===gl,metalnessMap:qe,roughnessMap:Ft,anisotropy:Bt,anisotropyMap:De,clearcoat:se,clearcoatMap:Et,clearcoatNormalMap:et,clearcoatRoughnessMap:kt,dispersion:X,iridescence:Se,iridescenceMap:It,iridescenceThicknessMap:Ye,sheen:Me,sheenColorMap:mt,sheenRoughnessMap:ft,specularMap:Lt,specularColorMap:yt,specularIntensityMap:bn,transmission:Ge,transmissionMap:ge,thicknessMap:bt,gradientMap:Ht,opaque:z.transparent===!1&&z.blending===To&&z.alphaToCoverage===!1,alphaMap:Qt,alphaTest:wt,alphaHash:ut,combine:z.combine,mapUv:Ki&&E(z.map.channel),aoMapUv:ve&&E(z.aoMap.channel),lightMapUv:de&&E(z.lightMap.channel),bumpMapUv:we&&E(z.bumpMap.channel),normalMapUv:Ie&&E(z.normalMap.channel),displacementMapUv:lt&&E(z.displacementMap.channel),emissiveMapUv:Xe&&E(z.emissiveMap.channel),metalnessMapUv:qe&&E(z.metalnessMap.channel),roughnessMapUv:Ft&&E(z.roughnessMap.channel),anisotropyMapUv:De&&E(z.anisotropyMap.channel),clearcoatMapUv:Et&&E(z.clearcoatMap.channel),clearcoatNormalMapUv:et&&E(z.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:kt&&E(z.clearcoatRoughnessMap.channel),iridescenceMapUv:It&&E(z.iridescenceMap.channel),iridescenceThicknessMapUv:Ye&&E(z.iridescenceThicknessMap.channel),sheenColorMapUv:mt&&E(z.sheenColorMap.channel),sheenRoughnessMapUv:ft&&E(z.sheenRoughnessMap.channel),specularMapUv:Lt&&E(z.specularMap.channel),specularColorMapUv:yt&&E(z.specularColorMap.channel),specularIntensityMapUv:bn&&E(z.specularIntensityMap.channel),transmissionMapUv:ge&&E(z.transmissionMap.channel),thicknessMapUv:bt&&E(z.thicknessMap.channel),alphaMapUv:Qt&&E(z.alphaMap.channel),vertexTangents:!!Be.attributes.tangent&&(Ie||Bt),vertexColors:z.vertexColors,vertexAlphas:z.vertexColors===!0&&!!Be.attributes.color&&Be.attributes.color.itemSize===4,pointsUvs:Ne.isPoints===!0&&!!Be.attributes.uv&&(Ki||Qt),fog:!!Oe,useFog:z.fog===!0,fogExp2:!!Oe&&Oe.isFogExp2,flatShading:z.flatShading===!0&&z.wireframe===!1,sizeAttenuation:z.sizeAttenuation===!0,logarithmicDepthBuffer:x,reversedDepthBuffer:In,skinning:Ne.isSkinnedMesh===!0,morphTargets:Be.morphAttributes.position!==void 0,morphNormals:Be.morphAttributes.normal!==void 0,morphColors:Be.morphAttributes.color!==void 0,morphTargetsCount:pn,morphTextureStride:qn,numDirLights:q.directional.length,numPointLights:q.point.length,numSpotLights:q.spot.length,numSpotLightMaps:q.spotLightMap.length,numRectAreaLights:q.rectArea.length,numHemiLights:q.hemi.length,numDirLightShadows:q.directionalShadowMap.length,numPointLightShadows:q.pointShadowMap.length,numSpotLightShadows:q.spotShadowMap.length,numSpotLightShadowsWithMaps:q.numSpotLightShadowsWithMaps,numLightProbes:q.numLightProbes,numClippingPlanes:l.numPlanes,numClipIntersection:l.numIntersection,dithering:z.dithering,shadowMapEnabled:a.shadowMap.enabled&&oe.length>0,shadowMapType:a.shadowMap.type,toneMapping:Yn,decodeVideoTexture:Ki&&z.map.isVideoTexture===!0&&zn.getTransfer(z.map.colorSpace)===un,decodeVideoTextureEmissive:Xe&&z.emissiveMap.isVideoTexture===!0&&zn.getTransfer(z.emissiveMap.colorSpace)===un,premultipliedAlpha:z.premultipliedAlpha,doubleSided:z.side===_r,flipSided:z.side===ns,useDepthPacking:z.depthPacking>=0,depthPacking:z.depthPacking||0,index0AttributeName:z.index0AttributeName,extensionClipCullDistance:ln&&z.extensions.clipCullDistance===!0&&i.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(ln&&z.extensions.multiDraw===!0||kn)&&i.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:z.customProgramCacheKey()};return Pi.vertexUv1s=f.has(1),Pi.vertexUv2s=f.has(2),Pi.vertexUv3s=f.has(3),f.clear(),Pi}function w(z){const q=[];if(z.shaderID?q.push(z.shaderID):(q.push(z.customVertexShaderID),q.push(z.customFragmentShaderID)),z.defines!==void 0)for(const oe in z.defines)q.push(oe),q.push(z.defines[oe]);return z.isRawShaderMaterial===!1&&(O(q,z),F(q,z),q.push(a.outputColorSpace)),q.push(z.customProgramCacheKey),q.join()}function O(z,q){z.push(q.precision),z.push(q.outputColorSpace),z.push(q.envMapMode),z.push(q.envMapCubeUVHeight),z.push(q.mapUv),z.push(q.alphaMapUv),z.push(q.lightMapUv),z.push(q.aoMapUv),z.push(q.bumpMapUv),z.push(q.normalMapUv),z.push(q.displacementMapUv),z.push(q.emissiveMapUv),z.push(q.metalnessMapUv),z.push(q.roughnessMapUv),z.push(q.anisotropyMapUv),z.push(q.clearcoatMapUv),z.push(q.clearcoatNormalMapUv),z.push(q.clearcoatRoughnessMapUv),z.push(q.iridescenceMapUv),z.push(q.iridescenceThicknessMapUv),z.push(q.sheenColorMapUv),z.push(q.sheenRoughnessMapUv),z.push(q.specularMapUv),z.push(q.specularColorMapUv),z.push(q.specularIntensityMapUv),z.push(q.transmissionMapUv),z.push(q.thicknessMapUv),z.push(q.combine),z.push(q.fogExp2),z.push(q.sizeAttenuation),z.push(q.morphTargetsCount),z.push(q.morphAttributeCount),z.push(q.numDirLights),z.push(q.numPointLights),z.push(q.numSpotLights),z.push(q.numSpotLightMaps),z.push(q.numHemiLights),z.push(q.numRectAreaLights),z.push(q.numDirLightShadows),z.push(q.numPointLightShadows),z.push(q.numSpotLightShadows),z.push(q.numSpotLightShadowsWithMaps),z.push(q.numLightProbes),z.push(q.shadowMapType),z.push(q.toneMapping),z.push(q.numClippingPlanes),z.push(q.numClipIntersection),z.push(q.depthPacking)}function F(z,q){u.disableAll(),q.supportsVertexTextures&&u.enable(0),q.instancing&&u.enable(1),q.instancingColor&&u.enable(2),q.instancingMorph&&u.enable(3),q.matcap&&u.enable(4),q.envMap&&u.enable(5),q.normalMapObjectSpace&&u.enable(6),q.normalMapTangentSpace&&u.enable(7),q.clearcoat&&u.enable(8),q.iridescence&&u.enable(9),q.alphaTest&&u.enable(10),q.vertexColors&&u.enable(11),q.vertexAlphas&&u.enable(12),q.vertexUv1s&&u.enable(13),q.vertexUv2s&&u.enable(14),q.vertexUv3s&&u.enable(15),q.vertexTangents&&u.enable(16),q.anisotropy&&u.enable(17),q.alphaHash&&u.enable(18),q.batching&&u.enable(19),q.dispersion&&u.enable(20),q.batchingColor&&u.enable(21),q.gradientMap&&u.enable(22),z.push(u.mask),u.disableAll(),q.fog&&u.enable(0),q.useFog&&u.enable(1),q.flatShading&&u.enable(2),q.logarithmicDepthBuffer&&u.enable(3),q.reversedDepthBuffer&&u.enable(4),q.skinning&&u.enable(5),q.morphTargets&&u.enable(6),q.morphNormals&&u.enable(7),q.morphColors&&u.enable(8),q.premultipliedAlpha&&u.enable(9),q.shadowMapEnabled&&u.enable(10),q.doubleSided&&u.enable(11),q.flipSided&&u.enable(12),q.useDepthPacking&&u.enable(13),q.dithering&&u.enable(14),q.transmission&&u.enable(15),q.sheen&&u.enable(16),q.opaque&&u.enable(17),q.pointsUvs&&u.enable(18),q.decodeVideoTexture&&u.enable(19),q.decodeVideoTextureEmissive&&u.enable(20),q.alphaToCoverage&&u.enable(21),z.push(u.mask)}function B(z){const q=T[z.type];let oe;if(q){const Ce=ll[q];oe=i8.clone(Ce.uniforms)}else oe=z.uniforms;return oe}function k(z,q){let oe;for(let Ce=0,Ne=g.length;Ce<Ne;Ce++){const Oe=g[Ce];if(Oe.cacheKey===q){oe=Oe,++oe.usedTimes;break}}return oe===void 0&&(oe=new yY(a,q,z,r),g.push(oe)),oe}function Y(z){if(--z.usedTimes===0){const q=g.indexOf(z);g[q]=g[g.length-1],g.pop(),z.destroy()}}function $(z){d.remove(z)}function Q(){d.dispose()}return{getParameters:A,getProgramCacheKey:w,getUniforms:B,acquireProgram:k,releaseProgram:Y,releaseShaderCache:$,programs:g,dispose:Q}}function MY(){let a=new WeakMap;function e(l){return a.has(l)}function t(l){let u=a.get(l);return u===void 0&&(u={},a.set(l,u)),u}function i(l){a.delete(l)}function s(l,u,d){a.get(l)[u]=d}function r(){a=new WeakMap}return{has:e,get:t,remove:i,update:s,dispose:r}}function wY(a,e){return a.groupOrder!==e.groupOrder?a.groupOrder-e.groupOrder:a.renderOrder!==e.renderOrder?a.renderOrder-e.renderOrder:a.material.id!==e.material.id?a.material.id-e.material.id:a.z!==e.z?a.z-e.z:a.id-e.id}function dP(a,e){return a.groupOrder!==e.groupOrder?a.groupOrder-e.groupOrder:a.renderOrder!==e.renderOrder?a.renderOrder-e.renderOrder:a.z!==e.z?e.z-a.z:a.id-e.id}function fP(){const a=[];let e=0;const t=[],i=[],s=[];function r(){e=0,t.length=0,i.length=0,s.length=0}function l(x,v,S,T,E,A){let w=a[e];return w===void 0?(w={id:x.id,object:x,geometry:v,material:S,groupOrder:T,renderOrder:x.renderOrder,z:E,group:A},a[e]=w):(w.id=x.id,w.object=x,w.geometry=v,w.material=S,w.groupOrder=T,w.renderOrder=x.renderOrder,w.z=E,w.group=A),e++,w}function u(x,v,S,T,E,A){const w=l(x,v,S,T,E,A);S.transmission>0?i.push(w):S.transparent===!0?s.push(w):t.push(w)}function d(x,v,S,T,E,A){const w=l(x,v,S,T,E,A);S.transmission>0?i.unshift(w):S.transparent===!0?s.unshift(w):t.unshift(w)}function f(x,v){t.length>1&&t.sort(x||wY),i.length>1&&i.sort(v||dP),s.length>1&&s.sort(v||dP)}function g(){for(let x=e,v=a.length;x<v;x++){const S=a[x];if(S.id===null)break;S.id=null,S.object=null,S.geometry=null,S.material=null,S.group=null}}return{opaque:t,transmissive:i,transparent:s,init:r,push:u,unshift:d,finish:g,sort:f}}function AY(){let a=new WeakMap;function e(i,s){const r=a.get(i);let l;return r===void 0?(l=new fP,a.set(i,[l])):s>=r.length?(l=new fP,r.push(l)):l=r[s],l}function t(){a=new WeakMap}return{get:e,dispose:t}}function EY(){const a={};return{get:function(e){if(a[e.id]!==void 0)return a[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new re,color:new Jt};break;case"SpotLight":t={position:new re,direction:new re,color:new Jt,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new re,color:new Jt,distance:0,decay:0};break;case"HemisphereLight":t={direction:new re,skyColor:new Jt,groundColor:new Jt};break;case"RectAreaLight":t={color:new Jt,position:new re,halfWidth:new re,halfHeight:new re};break}return a[e.id]=t,t}}}function RY(){const a={};return{get:function(e){if(a[e.id]!==void 0)return a[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new it};break;case"SpotLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new it};break;case"PointLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new it,shadowCameraNear:1,shadowCameraFar:1e3};break}return a[e.id]=t,t}}}let CY=0;function NY(a,e){return(e.castShadow?2:0)-(a.castShadow?2:0)+(e.map?1:0)-(a.map?1:0)}function PY(a){const e=new EY,t=RY(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let f=0;f<9;f++)i.probe.push(new re);const s=new re,r=new xn,l=new xn;function u(f){let g=0,x=0,v=0;for(let z=0;z<9;z++)i.probe[z].set(0,0,0);let S=0,T=0,E=0,A=0,w=0,O=0,F=0,B=0,k=0,Y=0,$=0;f.sort(NY);for(let z=0,q=f.length;z<q;z++){const oe=f[z],Ce=oe.color,Ne=oe.intensity,Oe=oe.distance,Be=oe.shadow&&oe.shadow.map?oe.shadow.map.texture:null;if(oe.isAmbientLight)g+=Ce.r*Ne,x+=Ce.g*Ne,v+=Ce.b*Ne;else if(oe.isLightProbe){for(let He=0;He<9;He++)i.probe[He].addScaledVector(oe.sh.coefficients[He],Ne);$++}else if(oe.isDirectionalLight){const He=e.get(oe);if(He.color.copy(oe.color).multiplyScalar(oe.intensity),oe.castShadow){const ct=oe.shadow,Ve=t.get(oe);Ve.shadowIntensity=ct.intensity,Ve.shadowBias=ct.bias,Ve.shadowNormalBias=ct.normalBias,Ve.shadowRadius=ct.radius,Ve.shadowMapSize=ct.mapSize,i.directionalShadow[S]=Ve,i.directionalShadowMap[S]=Be,i.directionalShadowMatrix[S]=oe.shadow.matrix,O++}i.directional[S]=He,S++}else if(oe.isSpotLight){const He=e.get(oe);He.position.setFromMatrixPosition(oe.matrixWorld),He.color.copy(Ce).multiplyScalar(Ne),He.distance=Oe,He.coneCos=Math.cos(oe.angle),He.penumbraCos=Math.cos(oe.angle*(1-oe.penumbra)),He.decay=oe.decay,i.spot[E]=He;const ct=oe.shadow;if(oe.map&&(i.spotLightMap[k]=oe.map,k++,ct.updateMatrices(oe),oe.castShadow&&Y++),i.spotLightMatrix[E]=ct.matrix,oe.castShadow){const Ve=t.get(oe);Ve.shadowIntensity=ct.intensity,Ve.shadowBias=ct.bias,Ve.shadowNormalBias=ct.normalBias,Ve.shadowRadius=ct.radius,Ve.shadowMapSize=ct.mapSize,i.spotShadow[E]=Ve,i.spotShadowMap[E]=Be,B++}E++}else if(oe.isRectAreaLight){const He=e.get(oe);He.color.copy(Ce).multiplyScalar(Ne),He.halfWidth.set(oe.width*.5,0,0),He.halfHeight.set(0,oe.height*.5,0),i.rectArea[A]=He,A++}else if(oe.isPointLight){const He=e.get(oe);if(He.color.copy(oe.color).multiplyScalar(oe.intensity),He.distance=oe.distance,He.decay=oe.decay,oe.castShadow){const ct=oe.shadow,Ve=t.get(oe);Ve.shadowIntensity=ct.intensity,Ve.shadowBias=ct.bias,Ve.shadowNormalBias=ct.normalBias,Ve.shadowRadius=ct.radius,Ve.shadowMapSize=ct.mapSize,Ve.shadowCameraNear=ct.camera.near,Ve.shadowCameraFar=ct.camera.far,i.pointShadow[T]=Ve,i.pointShadowMap[T]=Be,i.pointShadowMatrix[T]=oe.shadow.matrix,F++}i.point[T]=He,T++}else if(oe.isHemisphereLight){const He=e.get(oe);He.skyColor.copy(oe.color).multiplyScalar(Ne),He.groundColor.copy(oe.groundColor).multiplyScalar(Ne),i.hemi[w]=He,w++}}A>0&&(a.has("OES_texture_float_linear")===!0?(i.rectAreaLTC1=rn.LTC_FLOAT_1,i.rectAreaLTC2=rn.LTC_FLOAT_2):(i.rectAreaLTC1=rn.LTC_HALF_1,i.rectAreaLTC2=rn.LTC_HALF_2)),i.ambient[0]=g,i.ambient[1]=x,i.ambient[2]=v;const Q=i.hash;(Q.directionalLength!==S||Q.pointLength!==T||Q.spotLength!==E||Q.rectAreaLength!==A||Q.hemiLength!==w||Q.numDirectionalShadows!==O||Q.numPointShadows!==F||Q.numSpotShadows!==B||Q.numSpotMaps!==k||Q.numLightProbes!==$)&&(i.directional.length=S,i.spot.length=E,i.rectArea.length=A,i.point.length=T,i.hemi.length=w,i.directionalShadow.length=O,i.directionalShadowMap.length=O,i.pointShadow.length=F,i.pointShadowMap.length=F,i.spotShadow.length=B,i.spotShadowMap.length=B,i.directionalShadowMatrix.length=O,i.pointShadowMatrix.length=F,i.spotLightMatrix.length=B+k-Y,i.spotLightMap.length=k,i.numSpotLightShadowsWithMaps=Y,i.numLightProbes=$,Q.directionalLength=S,Q.pointLength=T,Q.spotLength=E,Q.rectAreaLength=A,Q.hemiLength=w,Q.numDirectionalShadows=O,Q.numPointShadows=F,Q.numSpotShadows=B,Q.numSpotMaps=k,Q.numLightProbes=$,i.version=CY++)}function d(f,g){let x=0,v=0,S=0,T=0,E=0;const A=g.matrixWorldInverse;for(let w=0,O=f.length;w<O;w++){const F=f[w];if(F.isDirectionalLight){const B=i.directional[x];B.direction.setFromMatrixPosition(F.matrixWorld),s.setFromMatrixPosition(F.target.matrixWorld),B.direction.sub(s),B.direction.transformDirection(A),x++}else if(F.isSpotLight){const B=i.spot[S];B.position.setFromMatrixPosition(F.matrixWorld),B.position.applyMatrix4(A),B.direction.setFromMatrixPosition(F.matrixWorld),s.setFromMatrixPosition(F.target.matrixWorld),B.direction.sub(s),B.direction.transformDirection(A),S++}else if(F.isRectAreaLight){const B=i.rectArea[T];B.position.setFromMatrixPosition(F.matrixWorld),B.position.applyMatrix4(A),l.identity(),r.copy(F.matrixWorld),r.premultiply(A),l.extractRotation(r),B.halfWidth.set(F.width*.5,0,0),B.halfHeight.set(0,F.height*.5,0),B.halfWidth.applyMatrix4(l),B.halfHeight.applyMatrix4(l),T++}else if(F.isPointLight){const B=i.point[v];B.position.setFromMatrixPosition(F.matrixWorld),B.position.applyMatrix4(A),v++}else if(F.isHemisphereLight){const B=i.hemi[E];B.direction.setFromMatrixPosition(F.matrixWorld),B.direction.transformDirection(A),E++}}}return{setup:u,setupView:d,state:i}}function pP(a){const e=new PY(a),t=[],i=[];function s(g){f.camera=g,t.length=0,i.length=0}function r(g){t.push(g)}function l(g){i.push(g)}function u(){e.setup(t)}function d(g){e.setupView(t,g)}const f={lightsArray:t,shadowsArray:i,camera:null,lights:e,transmissionRenderTarget:{}};return{init:s,state:f,setupLights:u,setupLightsView:d,pushLight:r,pushShadow:l}}function IY(a){let e=new WeakMap;function t(s,r=0){const l=e.get(s);let u;return l===void 0?(u=new pP(a),e.set(s,[u])):r>=l.length?(u=new pP(a),l.push(u)):u=l[r],u}function i(){e=new WeakMap}return{get:t,dispose:i}}const LY=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,DY=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function UY(a,e,t){let i=new od;const s=new it,r=new it,l=new Un,u=new vw({depthPacking:qI}),d=new Sw,f={},g=t.maxTextureSize,x={[ao]:ns,[ns]:ao,[_r]:_r},v=new er({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new it},radius:{value:4}},vertexShader:LY,fragmentShader:DY}),S=v.clone();S.defines.HORIZONTAL_PASS=1;const T=new li;T.setAttribute("position",new $i(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const E=new ts(T,v),A=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Tv;let w=this.type;this.render=function(Y,$,Q){if(A.enabled===!1||A.autoUpdate===!1&&A.needsUpdate===!1||Y.length===0)return;const z=a.getRenderTarget(),q=a.getActiveCubeFace(),oe=a.getActiveMipmapLevel(),Ce=a.state;Ce.setBlending(kr),Ce.buffers.depth.getReversed()?Ce.buffers.color.setClear(0,0,0,0):Ce.buffers.color.setClear(1,1,1,1),Ce.buffers.depth.setTest(!0),Ce.setScissorTest(!1);const Ne=w!==So&&this.type===So,Oe=w===So&&this.type!==So;for(let Be=0,He=Y.length;Be<He;Be++){const ct=Y[Be],Ve=ct.shadow;if(Ve===void 0){console.warn("THREE.WebGLShadowMap:",ct,"has no shadow.");continue}if(Ve.autoUpdate===!1&&Ve.needsUpdate===!1)continue;s.copy(Ve.mapSize);const Ct=Ve.getFrameExtents();if(s.multiply(Ct),r.copy(Ve.mapSize),(s.x>g||s.y>g)&&(s.x>g&&(r.x=Math.floor(g/Ct.x),s.x=r.x*Ct.x,Ve.mapSize.x=r.x),s.y>g&&(r.y=Math.floor(g/Ct.y),s.y=r.y*Ct.y,Ve.mapSize.y=r.y)),Ve.map===null||Ne===!0||Oe===!0){const pn=this.type!==So?{minFilter:Ci,magFilter:Ci}:{};Ve.map!==null&&Ve.map.dispose(),Ve.map=new Yo(s.x,s.y,pn),Ve.map.texture.name=ct.name+".shadowMap",Ve.camera.updateProjectionMatrix()}a.setRenderTarget(Ve.map),a.clear();const Gt=Ve.getViewportCount();for(let pn=0;pn<Gt;pn++){const qn=Ve.getViewport(pn);l.set(r.x*qn.x,r.y*qn.y,r.x*qn.z,r.y*qn.w),Ce.viewport(l),Ve.updateMatrices(ct,pn),i=Ve.getFrustum(),B($,Q,Ve.camera,ct,this.type)}Ve.isPointLightShadow!==!0&&this.type===So&&O(Ve,Q),Ve.needsUpdate=!1}w=this.type,A.needsUpdate=!1,a.setRenderTarget(z,q,oe)};function O(Y,$){const Q=e.update(E);v.defines.VSM_SAMPLES!==Y.blurSamples&&(v.defines.VSM_SAMPLES=Y.blurSamples,S.defines.VSM_SAMPLES=Y.blurSamples,v.needsUpdate=!0,S.needsUpdate=!0),Y.mapPass===null&&(Y.mapPass=new Yo(s.x,s.y)),v.uniforms.shadow_pass.value=Y.map.texture,v.uniforms.resolution.value=Y.mapSize,v.uniforms.radius.value=Y.radius,a.setRenderTarget(Y.mapPass),a.clear(),a.renderBufferDirect($,null,Q,v,E,null),S.uniforms.shadow_pass.value=Y.mapPass.texture,S.uniforms.resolution.value=Y.mapSize,S.uniforms.radius.value=Y.radius,a.setRenderTarget(Y.map),a.clear(),a.renderBufferDirect($,null,Q,S,E,null)}function F(Y,$,Q,z){let q=null;const oe=Q.isPointLight===!0?Y.customDistanceMaterial:Y.customDepthMaterial;if(oe!==void 0)q=oe;else if(q=Q.isPointLight===!0?d:u,a.localClippingEnabled&&$.clipShadows===!0&&Array.isArray($.clippingPlanes)&&$.clippingPlanes.length!==0||$.displacementMap&&$.displacementScale!==0||$.alphaMap&&$.alphaTest>0||$.map&&$.alphaTest>0||$.alphaToCoverage===!0){const Ce=q.uuid,Ne=$.uuid;let Oe=f[Ce];Oe===void 0&&(Oe={},f[Ce]=Oe);let Be=Oe[Ne];Be===void 0&&(Be=q.clone(),Oe[Ne]=Be,$.addEventListener("dispose",k)),q=Be}if(q.visible=$.visible,q.wireframe=$.wireframe,z===So?q.side=$.shadowSide!==null?$.shadowSide:$.side:q.side=$.shadowSide!==null?$.shadowSide:x[$.side],q.alphaMap=$.alphaMap,q.alphaTest=$.alphaToCoverage===!0?.5:$.alphaTest,q.map=$.map,q.clipShadows=$.clipShadows,q.clippingPlanes=$.clippingPlanes,q.clipIntersection=$.clipIntersection,q.displacementMap=$.displacementMap,q.displacementScale=$.displacementScale,q.displacementBias=$.displacementBias,q.wireframeLinewidth=$.wireframeLinewidth,q.linewidth=$.linewidth,Q.isPointLight===!0&&q.isMeshDistanceMaterial===!0){const Ce=a.properties.get(q);Ce.light=Q}return q}function B(Y,$,Q,z,q){if(Y.visible===!1)return;if(Y.layers.test($.layers)&&(Y.isMesh||Y.isLine||Y.isPoints)&&(Y.castShadow||Y.receiveShadow&&q===So)&&(!Y.frustumCulled||i.intersectsObject(Y))){Y.modelViewMatrix.multiplyMatrices(Q.matrixWorldInverse,Y.matrixWorld);const Ne=e.update(Y),Oe=Y.material;if(Array.isArray(Oe)){const Be=Ne.groups;for(let He=0,ct=Be.length;He<ct;He++){const Ve=Be[He],Ct=Oe[Ve.materialIndex];if(Ct&&Ct.visible){const Gt=F(Y,Ct,z,q);Y.onBeforeShadow(a,Y,$,Q,Ne,Gt,Ve),a.renderBufferDirect(Q,null,Ne,Gt,Y,Ve),Y.onAfterShadow(a,Y,$,Q,Ne,Gt,Ve)}}}else if(Oe.visible){const Be=F(Y,Oe,z,q);Y.onBeforeShadow(a,Y,$,Q,Ne,Be,null),a.renderBufferDirect(Q,null,Ne,Be,Y,null),Y.onAfterShadow(a,Y,$,Q,Ne,Be,null)}}const Ce=Y.children;for(let Ne=0,Oe=Ce.length;Ne<Oe;Ne++)B(Ce[Ne],$,Q,z,q)}function k(Y){Y.target.removeEventListener("dispose",k);for(const Q in f){const z=f[Q],q=Y.target.uuid;q in z&&(z[q].dispose(),delete z[q])}}}const FY={[Hf]:Wf,[$f]:Yf,[Xf]:Zf,[tc]:qf,[Wf]:Hf,[Yf]:$f,[Zf]:Xf,[qf]:tc};function BY(a,e){function t(){let ge=!1;const bt=new Un;let Ht=null;const Qt=new Un(0,0,0,0);return{setMask:function(wt){Ht!==wt&&!ge&&(a.colorMask(wt,wt,wt,wt),Ht=wt)},setLocked:function(wt){ge=wt},setClear:function(wt,ut,ln,Yn,Pi){Pi===!0&&(wt*=Yn,ut*=Yn,ln*=Yn),bt.set(wt,ut,ln,Yn),Qt.equals(bt)===!1&&(a.clearColor(wt,ut,ln,Yn),Qt.copy(bt))},reset:function(){ge=!1,Ht=null,Qt.set(-1,0,0,0)}}}function i(){let ge=!1,bt=!1,Ht=null,Qt=null,wt=null;return{setReversed:function(ut){if(bt!==ut){const ln=e.get("EXT_clip_control");ut?ln.clipControlEXT(ln.LOWER_LEFT_EXT,ln.ZERO_TO_ONE_EXT):ln.clipControlEXT(ln.LOWER_LEFT_EXT,ln.NEGATIVE_ONE_TO_ONE_EXT),bt=ut;const Yn=wt;wt=null,this.setClear(Yn)}},getReversed:function(){return bt},setTest:function(ut){ut?At(a.DEPTH_TEST):In(a.DEPTH_TEST)},setMask:function(ut){Ht!==ut&&!ge&&(a.depthMask(ut),Ht=ut)},setFunc:function(ut){if(bt&&(ut=FY[ut]),Qt!==ut){switch(ut){case Hf:a.depthFunc(a.NEVER);break;case Wf:a.depthFunc(a.ALWAYS);break;case $f:a.depthFunc(a.LESS);break;case tc:a.depthFunc(a.LEQUAL);break;case Xf:a.depthFunc(a.EQUAL);break;case qf:a.depthFunc(a.GEQUAL);break;case Yf:a.depthFunc(a.GREATER);break;case Zf:a.depthFunc(a.NOTEQUAL);break;default:a.depthFunc(a.LEQUAL)}Qt=ut}},setLocked:function(ut){ge=ut},setClear:function(ut){wt!==ut&&(bt&&(ut=1-ut),a.clearDepth(ut),wt=ut)},reset:function(){ge=!1,Ht=null,Qt=null,wt=null,bt=!1}}}function s(){let ge=!1,bt=null,Ht=null,Qt=null,wt=null,ut=null,ln=null,Yn=null,Pi=null;return{setTest:function(Ii){ge||(Ii?At(a.STENCIL_TEST):In(a.STENCIL_TEST))},setMask:function(Ii){bt!==Ii&&!ge&&(a.stencilMask(Ii),bt=Ii)},setFunc:function(Ii,nr,vs){(Ht!==Ii||Qt!==nr||wt!==vs)&&(a.stencilFunc(Ii,nr,vs),Ht=Ii,Qt=nr,wt=vs)},setOp:function(Ii,nr,vs){(ut!==Ii||ln!==nr||Yn!==vs)&&(a.stencilOp(Ii,nr,vs),ut=Ii,ln=nr,Yn=vs)},setLocked:function(Ii){ge=Ii},setClear:function(Ii){Pi!==Ii&&(a.clearStencil(Ii),Pi=Ii)},reset:function(){ge=!1,bt=null,Ht=null,Qt=null,wt=null,ut=null,ln=null,Yn=null,Pi=null}}}const r=new t,l=new i,u=new s,d=new WeakMap,f=new WeakMap;let g={},x={},v=new WeakMap,S=[],T=null,E=!1,A=null,w=null,O=null,F=null,B=null,k=null,Y=null,$=new Jt(0,0,0),Q=0,z=!1,q=null,oe=null,Ce=null,Ne=null,Oe=null;const Be=a.getParameter(a.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let He=!1,ct=0;const Ve=a.getParameter(a.VERSION);Ve.indexOf("WebGL")!==-1?(ct=parseFloat(/^WebGL (\d)/.exec(Ve)[1]),He=ct>=1):Ve.indexOf("OpenGL ES")!==-1&&(ct=parseFloat(/^OpenGL ES (\d)/.exec(Ve)[1]),He=ct>=2);let Ct=null,Gt={};const pn=a.getParameter(a.SCISSOR_BOX),qn=a.getParameter(a.VIEWPORT),yi=new Un().fromArray(pn),bi=new Un().fromArray(qn);function rt(ge,bt,Ht,Qt){const wt=new Uint8Array(4),ut=a.createTexture();a.bindTexture(ge,ut),a.texParameteri(ge,a.TEXTURE_MIN_FILTER,a.NEAREST),a.texParameteri(ge,a.TEXTURE_MAG_FILTER,a.NEAREST);for(let ln=0;ln<Ht;ln++)ge===a.TEXTURE_3D||ge===a.TEXTURE_2D_ARRAY?a.texImage3D(bt,0,a.RGBA,1,1,Qt,0,a.RGBA,a.UNSIGNED_BYTE,wt):a.texImage2D(bt+ln,0,a.RGBA,1,1,0,a.RGBA,a.UNSIGNED_BYTE,wt);return ut}const Xt={};Xt[a.TEXTURE_2D]=rt(a.TEXTURE_2D,a.TEXTURE_2D,1),Xt[a.TEXTURE_CUBE_MAP]=rt(a.TEXTURE_CUBE_MAP,a.TEXTURE_CUBE_MAP_POSITIVE_X,6),Xt[a.TEXTURE_2D_ARRAY]=rt(a.TEXTURE_2D_ARRAY,a.TEXTURE_2D_ARRAY,1,1),Xt[a.TEXTURE_3D]=rt(a.TEXTURE_3D,a.TEXTURE_3D,1,1),r.setClear(0,0,0,1),l.setClear(1),u.setClear(0),At(a.DEPTH_TEST),l.setFunc(tc),we(!1),Ie(Qy),At(a.CULL_FACE),ve(kr);function At(ge){g[ge]!==!0&&(a.enable(ge),g[ge]=!0)}function In(ge){g[ge]!==!1&&(a.disable(ge),g[ge]=!1)}function gn(ge,bt){return x[ge]!==bt?(a.bindFramebuffer(ge,bt),x[ge]=bt,ge===a.DRAW_FRAMEBUFFER&&(x[a.FRAMEBUFFER]=bt),ge===a.FRAMEBUFFER&&(x[a.DRAW_FRAMEBUFFER]=bt),!0):!1}function kn(ge,bt){let Ht=S,Qt=!1;if(ge){Ht=v.get(bt),Ht===void 0&&(Ht=[],v.set(bt,Ht));const wt=ge.textures;if(Ht.length!==wt.length||Ht[0]!==a.COLOR_ATTACHMENT0){for(let ut=0,ln=wt.length;ut<ln;ut++)Ht[ut]=a.COLOR_ATTACHMENT0+ut;Ht.length=wt.length,Qt=!0}}else Ht[0]!==a.BACK&&(Ht[0]=a.BACK,Qt=!0);Qt&&a.drawBuffers(Ht)}function Ki(ge){return T!==ge?(a.useProgram(ge),T=ge,!0):!1}const Ue={[Rr]:a.FUNC_ADD,[Mv]:a.FUNC_SUBTRACT,[wv]:a.FUNC_REVERSE_SUBTRACT};Ue[zM]=a.MIN,Ue[kM]=a.MAX;const ee={[ol]:a.ZERO,[Av]:a.ONE,[Ev]:a.SRC_COLOR,[kf]:a.SRC_ALPHA,[Lv]:a.SRC_ALPHA_SATURATE,[Pv]:a.DST_COLOR,[Cv]:a.DST_ALPHA,[Rv]:a.ONE_MINUS_SRC_COLOR,[Gf]:a.ONE_MINUS_SRC_ALPHA,[Iv]:a.ONE_MINUS_DST_COLOR,[Nv]:a.ONE_MINUS_DST_ALPHA,[UI]:a.CONSTANT_COLOR,[FI]:a.ONE_MINUS_CONSTANT_COLOR,[BI]:a.CONSTANT_ALPHA,[OI]:a.ONE_MINUS_CONSTANT_ALPHA};function ve(ge,bt,Ht,Qt,wt,ut,ln,Yn,Pi,Ii){if(ge===kr){E===!0&&(In(a.BLEND),E=!1);return}if(E===!1&&(At(a.BLEND),E=!0),ge!==Mh){if(ge!==A||Ii!==z){if((w!==Rr||B!==Rr)&&(a.blendEquation(a.FUNC_ADD),w=Rr,B=Rr),Ii)switch(ge){case To:a.blendFuncSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA);break;case Ih:a.blendFunc(a.ONE,a.ONE);break;case Lh:a.blendFuncSeparate(a.ZERO,a.ONE_MINUS_SRC_COLOR,a.ZERO,a.ONE);break;case Dh:a.blendFuncSeparate(a.DST_COLOR,a.ONE_MINUS_SRC_ALPHA,a.ZERO,a.ONE);break;default:console.error("THREE.WebGLState: Invalid blending: ",ge);break}else switch(ge){case To:a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA);break;case Ih:a.blendFuncSeparate(a.SRC_ALPHA,a.ONE,a.ONE,a.ONE);break;case Lh:console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");break;case Dh:console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");break;default:console.error("THREE.WebGLState: Invalid blending: ",ge);break}O=null,F=null,k=null,Y=null,$.set(0,0,0),Q=0,A=ge,z=Ii}return}wt=wt||bt,ut=ut||Ht,ln=ln||Qt,(bt!==w||wt!==B)&&(a.blendEquationSeparate(Ue[bt],Ue[wt]),w=bt,B=wt),(Ht!==O||Qt!==F||ut!==k||ln!==Y)&&(a.blendFuncSeparate(ee[Ht],ee[Qt],ee[ut],ee[ln]),O=Ht,F=Qt,k=ut,Y=ln),(Yn.equals($)===!1||Pi!==Q)&&(a.blendColor(Yn.r,Yn.g,Yn.b,Pi),$.copy(Yn),Q=Pi),A=ge,z=!1}function de(ge,bt){ge.side===_r?In(a.CULL_FACE):At(a.CULL_FACE);let Ht=ge.side===ns;bt&&(Ht=!Ht),we(Ht),ge.blending===To&&ge.transparent===!1?ve(kr):ve(ge.blending,ge.blendEquation,ge.blendSrc,ge.blendDst,ge.blendEquationAlpha,ge.blendSrcAlpha,ge.blendDstAlpha,ge.blendColor,ge.blendAlpha,ge.premultipliedAlpha),l.setFunc(ge.depthFunc),l.setTest(ge.depthTest),l.setMask(ge.depthWrite),r.setMask(ge.colorWrite);const Qt=ge.stencilWrite;u.setTest(Qt),Qt&&(u.setMask(ge.stencilWriteMask),u.setFunc(ge.stencilFunc,ge.stencilRef,ge.stencilFuncMask),u.setOp(ge.stencilFail,ge.stencilZFail,ge.stencilZPass)),Xe(ge.polygonOffset,ge.polygonOffsetFactor,ge.polygonOffsetUnits),ge.alphaToCoverage===!0?At(a.SAMPLE_ALPHA_TO_COVERAGE):In(a.SAMPLE_ALPHA_TO_COVERAGE)}function we(ge){q!==ge&&(ge?a.frontFace(a.CW):a.frontFace(a.CCW),q=ge)}function Ie(ge){ge!==OM?(At(a.CULL_FACE),ge!==oe&&(ge===Qy?a.cullFace(a.BACK):ge===VM?a.cullFace(a.FRONT):a.cullFace(a.FRONT_AND_BACK))):In(a.CULL_FACE),oe=ge}function lt(ge){ge!==Ce&&(He&&a.lineWidth(ge),Ce=ge)}function Xe(ge,bt,Ht){ge?(At(a.POLYGON_OFFSET_FILL),(Ne!==bt||Oe!==Ht)&&(a.polygonOffset(bt,Ht),Ne=bt,Oe=Ht)):In(a.POLYGON_OFFSET_FILL)}function qe(ge){ge?At(a.SCISSOR_TEST):In(a.SCISSOR_TEST)}function Ft(ge){ge===void 0&&(ge=a.TEXTURE0+Be-1),Ct!==ge&&(a.activeTexture(ge),Ct=ge)}function Bt(ge,bt,Ht){Ht===void 0&&(Ct===null?Ht=a.TEXTURE0+Be-1:Ht=Ct);let Qt=Gt[Ht];Qt===void 0&&(Qt={type:void 0,texture:void 0},Gt[Ht]=Qt),(Qt.type!==ge||Qt.texture!==bt)&&(Ct!==Ht&&(a.activeTexture(Ht),Ct=Ht),a.bindTexture(ge,bt||Xt[ge]),Qt.type=ge,Qt.texture=bt)}function se(){const ge=Gt[Ct];ge!==void 0&&ge.type!==void 0&&(a.bindTexture(ge.type,null),ge.type=void 0,ge.texture=void 0)}function X(){try{a.compressedTexImage2D(...arguments)}catch(ge){console.error("THREE.WebGLState:",ge)}}function Se(){try{a.compressedTexImage3D(...arguments)}catch(ge){console.error("THREE.WebGLState:",ge)}}function Me(){try{a.texSubImage2D(...arguments)}catch(ge){console.error("THREE.WebGLState:",ge)}}function Ge(){try{a.texSubImage3D(...arguments)}catch(ge){console.error("THREE.WebGLState:",ge)}}function De(){try{a.compressedTexSubImage2D(...arguments)}catch(ge){console.error("THREE.WebGLState:",ge)}}function Et(){try{a.compressedTexSubImage3D(...arguments)}catch(ge){console.error("THREE.WebGLState:",ge)}}function et(){try{a.texStorage2D(...arguments)}catch(ge){console.error("THREE.WebGLState:",ge)}}function kt(){try{a.texStorage3D(...arguments)}catch(ge){console.error("THREE.WebGLState:",ge)}}function It(){try{a.texImage2D(...arguments)}catch(ge){console.error("THREE.WebGLState:",ge)}}function Ye(){try{a.texImage3D(...arguments)}catch(ge){console.error("THREE.WebGLState:",ge)}}function mt(ge){yi.equals(ge)===!1&&(a.scissor(ge.x,ge.y,ge.z,ge.w),yi.copy(ge))}function ft(ge){bi.equals(ge)===!1&&(a.viewport(ge.x,ge.y,ge.z,ge.w),bi.copy(ge))}function Lt(ge,bt){let Ht=f.get(bt);Ht===void 0&&(Ht=new WeakMap,f.set(bt,Ht));let Qt=Ht.get(ge);Qt===void 0&&(Qt=a.getUniformBlockIndex(bt,ge.name),Ht.set(ge,Qt))}function yt(ge,bt){const Qt=f.get(bt).get(ge);d.get(bt)!==Qt&&(a.uniformBlockBinding(bt,Qt,ge.__bindingPointIndex),d.set(bt,Qt))}function bn(){a.disable(a.BLEND),a.disable(a.CULL_FACE),a.disable(a.DEPTH_TEST),a.disable(a.POLYGON_OFFSET_FILL),a.disable(a.SCISSOR_TEST),a.disable(a.STENCIL_TEST),a.disable(a.SAMPLE_ALPHA_TO_COVERAGE),a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ONE,a.ZERO),a.blendFuncSeparate(a.ONE,a.ZERO,a.ONE,a.ZERO),a.blendColor(0,0,0,0),a.colorMask(!0,!0,!0,!0),a.clearColor(0,0,0,0),a.depthMask(!0),a.depthFunc(a.LESS),l.setReversed(!1),a.clearDepth(1),a.stencilMask(4294967295),a.stencilFunc(a.ALWAYS,0,4294967295),a.stencilOp(a.KEEP,a.KEEP,a.KEEP),a.clearStencil(0),a.cullFace(a.BACK),a.frontFace(a.CCW),a.polygonOffset(0,0),a.activeTexture(a.TEXTURE0),a.bindFramebuffer(a.FRAMEBUFFER,null),a.bindFramebuffer(a.DRAW_FRAMEBUFFER,null),a.bindFramebuffer(a.READ_FRAMEBUFFER,null),a.useProgram(null),a.lineWidth(1),a.scissor(0,0,a.canvas.width,a.canvas.height),a.viewport(0,0,a.canvas.width,a.canvas.height),g={},Ct=null,Gt={},x={},v=new WeakMap,S=[],T=null,E=!1,A=null,w=null,O=null,F=null,B=null,k=null,Y=null,$=new Jt(0,0,0),Q=0,z=!1,q=null,oe=null,Ce=null,Ne=null,Oe=null,yi.set(0,0,a.canvas.width,a.canvas.height),bi.set(0,0,a.canvas.width,a.canvas.height),r.reset(),l.reset(),u.reset()}return{buffers:{color:r,depth:l,stencil:u},enable:At,disable:In,bindFramebuffer:gn,drawBuffers:kn,useProgram:Ki,setBlending:ve,setMaterial:de,setFlipSided:we,setCullFace:Ie,setLineWidth:lt,setPolygonOffset:Xe,setScissorTest:qe,activeTexture:Ft,bindTexture:Bt,unbindTexture:se,compressedTexImage2D:X,compressedTexImage3D:Se,texImage2D:It,texImage3D:Ye,updateUBOMapping:Lt,uniformBlockBinding:yt,texStorage2D:et,texStorage3D:kt,texSubImage2D:Me,texSubImage3D:Ge,compressedTexSubImage2D:De,compressedTexSubImage3D:Et,scissor:mt,viewport:ft,reset:bn}}function OY(a,e,t,i,s,r,l){const u=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,d=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),f=new it,g=new WeakMap;let x;const v=new WeakMap;let S=!1;try{S=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function T(se,X){return S?new OffscreenCanvas(se,X):og("canvas")}function E(se,X,Se){let Me=1;const Ge=Bt(se);if((Ge.width>Se||Ge.height>Se)&&(Me=Se/Math.max(Ge.width,Ge.height)),Me<1)if(typeof HTMLImageElement<"u"&&se instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&se instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&se instanceof ImageBitmap||typeof VideoFrame<"u"&&se instanceof VideoFrame){const De=Math.floor(Me*Ge.width),Et=Math.floor(Me*Ge.height);x===void 0&&(x=T(De,Et));const et=X?T(De,Et):x;return et.width=De,et.height=Et,et.getContext("2d").drawImage(se,0,0,De,Et),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+Ge.width+"x"+Ge.height+") to ("+De+"x"+Et+")."),et}else return"data"in se&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+Ge.width+"x"+Ge.height+")."),se;return se}function A(se){return se.generateMipmaps}function w(se){a.generateMipmap(se)}function O(se){return se.isWebGLCubeRenderTarget?a.TEXTURE_CUBE_MAP:se.isWebGL3DRenderTarget?a.TEXTURE_3D:se.isWebGLArrayRenderTarget||se.isCompressedArrayTexture?a.TEXTURE_2D_ARRAY:a.TEXTURE_2D}function F(se,X,Se,Me,Ge=!1){if(se!==null){if(a[se]!==void 0)return a[se];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+se+"'")}let De=X;if(X===a.RED&&(Se===a.FLOAT&&(De=a.R32F),Se===a.HALF_FLOAT&&(De=a.R16F),Se===a.UNSIGNED_BYTE&&(De=a.R8)),X===a.RED_INTEGER&&(Se===a.UNSIGNED_BYTE&&(De=a.R8UI),Se===a.UNSIGNED_SHORT&&(De=a.R16UI),Se===a.UNSIGNED_INT&&(De=a.R32UI),Se===a.BYTE&&(De=a.R8I),Se===a.SHORT&&(De=a.R16I),Se===a.INT&&(De=a.R32I)),X===a.RG&&(Se===a.FLOAT&&(De=a.RG32F),Se===a.HALF_FLOAT&&(De=a.RG16F),Se===a.UNSIGNED_BYTE&&(De=a.RG8)),X===a.RG_INTEGER&&(Se===a.UNSIGNED_BYTE&&(De=a.RG8UI),Se===a.UNSIGNED_SHORT&&(De=a.RG16UI),Se===a.UNSIGNED_INT&&(De=a.RG32UI),Se===a.BYTE&&(De=a.RG8I),Se===a.SHORT&&(De=a.RG16I),Se===a.INT&&(De=a.RG32I)),X===a.RGB_INTEGER&&(Se===a.UNSIGNED_BYTE&&(De=a.RGB8UI),Se===a.UNSIGNED_SHORT&&(De=a.RGB16UI),Se===a.UNSIGNED_INT&&(De=a.RGB32UI),Se===a.BYTE&&(De=a.RGB8I),Se===a.SHORT&&(De=a.RGB16I),Se===a.INT&&(De=a.RGB32I)),X===a.RGBA_INTEGER&&(Se===a.UNSIGNED_BYTE&&(De=a.RGBA8UI),Se===a.UNSIGNED_SHORT&&(De=a.RGBA16UI),Se===a.UNSIGNED_INT&&(De=a.RGBA32UI),Se===a.BYTE&&(De=a.RGBA8I),Se===a.SHORT&&(De=a.RGBA16I),Se===a.INT&&(De=a.RGBA32I)),X===a.RGB&&Se===a.UNSIGNED_INT_5_9_9_9_REV&&(De=a.RGB9_E5),X===a.RGBA){const Et=Ge?Jh:zn.getTransfer(Me);Se===a.FLOAT&&(De=a.RGBA32F),Se===a.HALF_FLOAT&&(De=a.RGBA16F),Se===a.UNSIGNED_BYTE&&(De=Et===un?a.SRGB8_ALPHA8:a.RGBA8),Se===a.UNSIGNED_SHORT_4_4_4_4&&(De=a.RGBA4),Se===a.UNSIGNED_SHORT_5_5_5_1&&(De=a.RGB5_A1)}return(De===a.R16F||De===a.R32F||De===a.RG16F||De===a.RG32F||De===a.RGBA16F||De===a.RGBA32F)&&e.get("EXT_color_buffer_float"),De}function B(se,X){let Se;return se?X===null||X===rs||X===Mo?Se=a.DEPTH24_STENCIL8:X===os?Se=a.DEPTH32F_STENCIL8:X===ua&&(Se=a.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):X===null||X===rs||X===Mo?Se=a.DEPTH_COMPONENT24:X===os?Se=a.DEPTH_COMPONENT32F:X===ua&&(Se=a.DEPTH_COMPONENT16),Se}function k(se,X){return A(se)===!0||se.isFramebufferTexture&&se.minFilter!==Ci&&se.minFilter!==Ni?Math.log2(Math.max(X.width,X.height))+1:se.mipmaps!==void 0&&se.mipmaps.length>0?se.mipmaps.length:se.isCompressedTexture&&Array.isArray(se.image)?X.mipmaps.length:1}function Y(se){const X=se.target;X.removeEventListener("dispose",Y),Q(X),X.isVideoTexture&&g.delete(X)}function $(se){const X=se.target;X.removeEventListener("dispose",$),q(X)}function Q(se){const X=i.get(se);if(X.__webglInit===void 0)return;const Se=se.source,Me=v.get(Se);if(Me){const Ge=Me[X.__cacheKey];Ge.usedTimes--,Ge.usedTimes===0&&z(se),Object.keys(Me).length===0&&v.delete(Se)}i.remove(se)}function z(se){const X=i.get(se);a.deleteTexture(X.__webglTexture);const Se=se.source,Me=v.get(Se);delete Me[X.__cacheKey],l.memory.textures--}function q(se){const X=i.get(se);if(se.depthTexture&&(se.depthTexture.dispose(),i.remove(se.depthTexture)),se.isWebGLCubeRenderTarget)for(let Me=0;Me<6;Me++){if(Array.isArray(X.__webglFramebuffer[Me]))for(let Ge=0;Ge<X.__webglFramebuffer[Me].length;Ge++)a.deleteFramebuffer(X.__webglFramebuffer[Me][Ge]);else a.deleteFramebuffer(X.__webglFramebuffer[Me]);X.__webglDepthbuffer&&a.deleteRenderbuffer(X.__webglDepthbuffer[Me])}else{if(Array.isArray(X.__webglFramebuffer))for(let Me=0;Me<X.__webglFramebuffer.length;Me++)a.deleteFramebuffer(X.__webglFramebuffer[Me]);else a.deleteFramebuffer(X.__webglFramebuffer);if(X.__webglDepthbuffer&&a.deleteRenderbuffer(X.__webglDepthbuffer),X.__webglMultisampledFramebuffer&&a.deleteFramebuffer(X.__webglMultisampledFramebuffer),X.__webglColorRenderbuffer)for(let Me=0;Me<X.__webglColorRenderbuffer.length;Me++)X.__webglColorRenderbuffer[Me]&&a.deleteRenderbuffer(X.__webglColorRenderbuffer[Me]);X.__webglDepthRenderbuffer&&a.deleteRenderbuffer(X.__webglDepthRenderbuffer)}const Se=se.textures;for(let Me=0,Ge=Se.length;Me<Ge;Me++){const De=i.get(Se[Me]);De.__webglTexture&&(a.deleteTexture(De.__webglTexture),l.memory.textures--),i.remove(Se[Me])}i.remove(se)}let oe=0;function Ce(){oe=0}function Ne(){const se=oe;return se>=s.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+se+" texture units while this GPU supports only "+s.maxTextures),oe+=1,se}function Oe(se){const X=[];return X.push(se.wrapS),X.push(se.wrapT),X.push(se.wrapR||0),X.push(se.magFilter),X.push(se.minFilter),X.push(se.anisotropy),X.push(se.internalFormat),X.push(se.format),X.push(se.type),X.push(se.generateMipmaps),X.push(se.premultiplyAlpha),X.push(se.flipY),X.push(se.unpackAlignment),X.push(se.colorSpace),X.join()}function Be(se,X){const Se=i.get(se);if(se.isVideoTexture&&qe(se),se.isRenderTargetTexture===!1&&se.isExternalTexture!==!0&&se.version>0&&Se.__version!==se.version){const Me=se.image;if(Me===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(Me.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{Xt(Se,se,X);return}}else se.isExternalTexture&&(Se.__webglTexture=se.sourceTexture?se.sourceTexture:null);t.bindTexture(a.TEXTURE_2D,Se.__webglTexture,a.TEXTURE0+X)}function He(se,X){const Se=i.get(se);if(se.isRenderTargetTexture===!1&&se.version>0&&Se.__version!==se.version){Xt(Se,se,X);return}t.bindTexture(a.TEXTURE_2D_ARRAY,Se.__webglTexture,a.TEXTURE0+X)}function ct(se,X){const Se=i.get(se);if(se.isRenderTargetTexture===!1&&se.version>0&&Se.__version!==se.version){Xt(Se,se,X);return}t.bindTexture(a.TEXTURE_3D,Se.__webglTexture,a.TEXTURE0+X)}function Ve(se,X){const Se=i.get(se);if(se.version>0&&Se.__version!==se.version){At(Se,se,X);return}t.bindTexture(a.TEXTURE_CUBE_MAP,Se.__webglTexture,a.TEXTURE0+X)}const Ct={[za]:a.REPEAT,[js]:a.CLAMP_TO_EDGE,[ic]:a.MIRRORED_REPEAT},Gt={[Ci]:a.NEAREST,[Rg]:a.NEAREST_MIPMAP_NEAREST,[Fa]:a.NEAREST_MIPMAP_LINEAR,[Ni]:a.LINEAR,[Hc]:a.LINEAR_MIPMAP_NEAREST,[Cr]:a.LINEAR_MIPMAP_LINEAR},pn={[Bv]:a.NEVER,[Gv]:a.ALWAYS,[Ig]:a.LESS,[Lg]:a.LEQUAL,[Ov]:a.EQUAL,[kv]:a.GEQUAL,[Vv]:a.GREATER,[zv]:a.NOTEQUAL};function qn(se,X){if(X.type===os&&e.has("OES_texture_float_linear")===!1&&(X.magFilter===Ni||X.magFilter===Hc||X.magFilter===Fa||X.magFilter===Cr||X.minFilter===Ni||X.minFilter===Hc||X.minFilter===Fa||X.minFilter===Cr)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),a.texParameteri(se,a.TEXTURE_WRAP_S,Ct[X.wrapS]),a.texParameteri(se,a.TEXTURE_WRAP_T,Ct[X.wrapT]),(se===a.TEXTURE_3D||se===a.TEXTURE_2D_ARRAY)&&a.texParameteri(se,a.TEXTURE_WRAP_R,Ct[X.wrapR]),a.texParameteri(se,a.TEXTURE_MAG_FILTER,Gt[X.magFilter]),a.texParameteri(se,a.TEXTURE_MIN_FILTER,Gt[X.minFilter]),X.compareFunction&&(a.texParameteri(se,a.TEXTURE_COMPARE_MODE,a.COMPARE_REF_TO_TEXTURE),a.texParameteri(se,a.TEXTURE_COMPARE_FUNC,pn[X.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){if(X.magFilter===Ci||X.minFilter!==Fa&&X.minFilter!==Cr||X.type===os&&e.has("OES_texture_float_linear")===!1)return;if(X.anisotropy>1||i.get(X).__currentAnisotropy){const Se=e.get("EXT_texture_filter_anisotropic");a.texParameterf(se,Se.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(X.anisotropy,s.getMaxAnisotropy())),i.get(X).__currentAnisotropy=X.anisotropy}}}function yi(se,X){let Se=!1;se.__webglInit===void 0&&(se.__webglInit=!0,X.addEventListener("dispose",Y));const Me=X.source;let Ge=v.get(Me);Ge===void 0&&(Ge={},v.set(Me,Ge));const De=Oe(X);if(De!==se.__cacheKey){Ge[De]===void 0&&(Ge[De]={texture:a.createTexture(),usedTimes:0},l.memory.textures++,Se=!0),Ge[De].usedTimes++;const Et=Ge[se.__cacheKey];Et!==void 0&&(Ge[se.__cacheKey].usedTimes--,Et.usedTimes===0&&z(X)),se.__cacheKey=De,se.__webglTexture=Ge[De].texture}return Se}function bi(se,X,Se){return Math.floor(Math.floor(se/Se)/X)}function rt(se,X,Se,Me){const De=se.updateRanges;if(De.length===0)t.texSubImage2D(a.TEXTURE_2D,0,0,0,X.width,X.height,Se,Me,X.data);else{De.sort((Ye,mt)=>Ye.start-mt.start);let Et=0;for(let Ye=1;Ye<De.length;Ye++){const mt=De[Et],ft=De[Ye],Lt=mt.start+mt.count,yt=bi(ft.start,X.width,4),bn=bi(mt.start,X.width,4);ft.start<=Lt+1&&yt===bn&&bi(ft.start+ft.count-1,X.width,4)===yt?mt.count=Math.max(mt.count,ft.start+ft.count-mt.start):(++Et,De[Et]=ft)}De.length=Et+1;const et=a.getParameter(a.UNPACK_ROW_LENGTH),kt=a.getParameter(a.UNPACK_SKIP_PIXELS),It=a.getParameter(a.UNPACK_SKIP_ROWS);a.pixelStorei(a.UNPACK_ROW_LENGTH,X.width);for(let Ye=0,mt=De.length;Ye<mt;Ye++){const ft=De[Ye],Lt=Math.floor(ft.start/4),yt=Math.ceil(ft.count/4),bn=Lt%X.width,ge=Math.floor(Lt/X.width),bt=yt,Ht=1;a.pixelStorei(a.UNPACK_SKIP_PIXELS,bn),a.pixelStorei(a.UNPACK_SKIP_ROWS,ge),t.texSubImage2D(a.TEXTURE_2D,0,bn,ge,bt,Ht,Se,Me,X.data)}se.clearUpdateRanges(),a.pixelStorei(a.UNPACK_ROW_LENGTH,et),a.pixelStorei(a.UNPACK_SKIP_PIXELS,kt),a.pixelStorei(a.UNPACK_SKIP_ROWS,It)}}function Xt(se,X,Se){let Me=a.TEXTURE_2D;(X.isDataArrayTexture||X.isCompressedArrayTexture)&&(Me=a.TEXTURE_2D_ARRAY),X.isData3DTexture&&(Me=a.TEXTURE_3D);const Ge=yi(se,X),De=X.source;t.bindTexture(Me,se.__webglTexture,a.TEXTURE0+Se);const Et=i.get(De);if(De.version!==Et.__version||Ge===!0){t.activeTexture(a.TEXTURE0+Se);const et=zn.getPrimaries(zn.workingColorSpace),kt=X.colorSpace===no?null:zn.getPrimaries(X.colorSpace),It=X.colorSpace===no||et===kt?a.NONE:a.BROWSER_DEFAULT_WEBGL;a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,X.flipY),a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL,X.premultiplyAlpha),a.pixelStorei(a.UNPACK_ALIGNMENT,X.unpackAlignment),a.pixelStorei(a.UNPACK_COLORSPACE_CONVERSION_WEBGL,It);let Ye=E(X.image,!1,s.maxTextureSize);Ye=Ft(X,Ye);const mt=r.convert(X.format,X.colorSpace),ft=r.convert(X.type);let Lt=F(X.internalFormat,mt,ft,X.colorSpace,X.isVideoTexture);qn(Me,X);let yt;const bn=X.mipmaps,ge=X.isVideoTexture!==!0,bt=Et.__version===void 0||Ge===!0,Ht=De.dataReady,Qt=k(X,Ye);if(X.isDepthTexture)Lt=B(X.format===Ao,X.type),bt&&(ge?t.texStorage2D(a.TEXTURE_2D,1,Lt,Ye.width,Ye.height):t.texImage2D(a.TEXTURE_2D,0,Lt,Ye.width,Ye.height,0,mt,ft,null));else if(X.isDataTexture)if(bn.length>0){ge&&bt&&t.texStorage2D(a.TEXTURE_2D,Qt,Lt,bn[0].width,bn[0].height);for(let wt=0,ut=bn.length;wt<ut;wt++)yt=bn[wt],ge?Ht&&t.texSubImage2D(a.TEXTURE_2D,wt,0,0,yt.width,yt.height,mt,ft,yt.data):t.texImage2D(a.TEXTURE_2D,wt,Lt,yt.width,yt.height,0,mt,ft,yt.data);X.generateMipmaps=!1}else ge?(bt&&t.texStorage2D(a.TEXTURE_2D,Qt,Lt,Ye.width,Ye.height),Ht&&rt(X,Ye,mt,ft)):t.texImage2D(a.TEXTURE_2D,0,Lt,Ye.width,Ye.height,0,mt,ft,Ye.data);else if(X.isCompressedTexture)if(X.isCompressedArrayTexture){ge&&bt&&t.texStorage3D(a.TEXTURE_2D_ARRAY,Qt,Lt,bn[0].width,bn[0].height,Ye.depth);for(let wt=0,ut=bn.length;wt<ut;wt++)if(yt=bn[wt],X.format!==es)if(mt!==null)if(ge){if(Ht)if(X.layerUpdates.size>0){const ln=dM(yt.width,yt.height,X.format,X.type);for(const Yn of X.layerUpdates){const Pi=yt.data.subarray(Yn*ln/yt.data.BYTES_PER_ELEMENT,(Yn+1)*ln/yt.data.BYTES_PER_ELEMENT);t.compressedTexSubImage3D(a.TEXTURE_2D_ARRAY,wt,0,0,Yn,yt.width,yt.height,1,mt,Pi)}X.clearLayerUpdates()}else t.compressedTexSubImage3D(a.TEXTURE_2D_ARRAY,wt,0,0,0,yt.width,yt.height,Ye.depth,mt,yt.data)}else t.compressedTexImage3D(a.TEXTURE_2D_ARRAY,wt,Lt,yt.width,yt.height,Ye.depth,0,yt.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else ge?Ht&&t.texSubImage3D(a.TEXTURE_2D_ARRAY,wt,0,0,0,yt.width,yt.height,Ye.depth,mt,ft,yt.data):t.texImage3D(a.TEXTURE_2D_ARRAY,wt,Lt,yt.width,yt.height,Ye.depth,0,mt,ft,yt.data)}else{ge&&bt&&t.texStorage2D(a.TEXTURE_2D,Qt,Lt,bn[0].width,bn[0].height);for(let wt=0,ut=bn.length;wt<ut;wt++)yt=bn[wt],X.format!==es?mt!==null?ge?Ht&&t.compressedTexSubImage2D(a.TEXTURE_2D,wt,0,0,yt.width,yt.height,mt,yt.data):t.compressedTexImage2D(a.TEXTURE_2D,wt,Lt,yt.width,yt.height,0,yt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):ge?Ht&&t.texSubImage2D(a.TEXTURE_2D,wt,0,0,yt.width,yt.height,mt,ft,yt.data):t.texImage2D(a.TEXTURE_2D,wt,Lt,yt.width,yt.height,0,mt,ft,yt.data)}else if(X.isDataArrayTexture)if(ge){if(bt&&t.texStorage3D(a.TEXTURE_2D_ARRAY,Qt,Lt,Ye.width,Ye.height,Ye.depth),Ht)if(X.layerUpdates.size>0){const wt=dM(Ye.width,Ye.height,X.format,X.type);for(const ut of X.layerUpdates){const ln=Ye.data.subarray(ut*wt/Ye.data.BYTES_PER_ELEMENT,(ut+1)*wt/Ye.data.BYTES_PER_ELEMENT);t.texSubImage3D(a.TEXTURE_2D_ARRAY,0,0,0,ut,Ye.width,Ye.height,1,mt,ft,ln)}X.clearLayerUpdates()}else t.texSubImage3D(a.TEXTURE_2D_ARRAY,0,0,0,0,Ye.width,Ye.height,Ye.depth,mt,ft,Ye.data)}else t.texImage3D(a.TEXTURE_2D_ARRAY,0,Lt,Ye.width,Ye.height,Ye.depth,0,mt,ft,Ye.data);else if(X.isData3DTexture)ge?(bt&&t.texStorage3D(a.TEXTURE_3D,Qt,Lt,Ye.width,Ye.height,Ye.depth),Ht&&t.texSubImage3D(a.TEXTURE_3D,0,0,0,0,Ye.width,Ye.height,Ye.depth,mt,ft,Ye.data)):t.texImage3D(a.TEXTURE_3D,0,Lt,Ye.width,Ye.height,Ye.depth,0,mt,ft,Ye.data);else if(X.isFramebufferTexture){if(bt)if(ge)t.texStorage2D(a.TEXTURE_2D,Qt,Lt,Ye.width,Ye.height);else{let wt=Ye.width,ut=Ye.height;for(let ln=0;ln<Qt;ln++)t.texImage2D(a.TEXTURE_2D,ln,Lt,wt,ut,0,mt,ft,null),wt>>=1,ut>>=1}}else if(bn.length>0){if(ge&&bt){const wt=Bt(bn[0]);t.texStorage2D(a.TEXTURE_2D,Qt,Lt,wt.width,wt.height)}for(let wt=0,ut=bn.length;wt<ut;wt++)yt=bn[wt],ge?Ht&&t.texSubImage2D(a.TEXTURE_2D,wt,0,0,mt,ft,yt):t.texImage2D(a.TEXTURE_2D,wt,Lt,mt,ft,yt);X.generateMipmaps=!1}else if(ge){if(bt){const wt=Bt(Ye);t.texStorage2D(a.TEXTURE_2D,Qt,Lt,wt.width,wt.height)}Ht&&t.texSubImage2D(a.TEXTURE_2D,0,0,0,mt,ft,Ye)}else t.texImage2D(a.TEXTURE_2D,0,Lt,mt,ft,Ye);A(X)&&w(Me),Et.__version=De.version,X.onUpdate&&X.onUpdate(X)}se.__version=X.version}function At(se,X,Se){if(X.image.length!==6)return;const Me=yi(se,X),Ge=X.source;t.bindTexture(a.TEXTURE_CUBE_MAP,se.__webglTexture,a.TEXTURE0+Se);const De=i.get(Ge);if(Ge.version!==De.__version||Me===!0){t.activeTexture(a.TEXTURE0+Se);const Et=zn.getPrimaries(zn.workingColorSpace),et=X.colorSpace===no?null:zn.getPrimaries(X.colorSpace),kt=X.colorSpace===no||Et===et?a.NONE:a.BROWSER_DEFAULT_WEBGL;a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,X.flipY),a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL,X.premultiplyAlpha),a.pixelStorei(a.UNPACK_ALIGNMENT,X.unpackAlignment),a.pixelStorei(a.UNPACK_COLORSPACE_CONVERSION_WEBGL,kt);const It=X.isCompressedTexture||X.image[0].isCompressedTexture,Ye=X.image[0]&&X.image[0].isDataTexture,mt=[];for(let ut=0;ut<6;ut++)!It&&!Ye?mt[ut]=E(X.image[ut],!0,s.maxCubemapSize):mt[ut]=Ye?X.image[ut].image:X.image[ut],mt[ut]=Ft(X,mt[ut]);const ft=mt[0],Lt=r.convert(X.format,X.colorSpace),yt=r.convert(X.type),bn=F(X.internalFormat,Lt,yt,X.colorSpace),ge=X.isVideoTexture!==!0,bt=De.__version===void 0||Me===!0,Ht=Ge.dataReady;let Qt=k(X,ft);qn(a.TEXTURE_CUBE_MAP,X);let wt;if(It){ge&&bt&&t.texStorage2D(a.TEXTURE_CUBE_MAP,Qt,bn,ft.width,ft.height);for(let ut=0;ut<6;ut++){wt=mt[ut].mipmaps;for(let ln=0;ln<wt.length;ln++){const Yn=wt[ln];X.format!==es?Lt!==null?ge?Ht&&t.compressedTexSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,ln,0,0,Yn.width,Yn.height,Lt,Yn.data):t.compressedTexImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,ln,bn,Yn.width,Yn.height,0,Yn.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):ge?Ht&&t.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,ln,0,0,Yn.width,Yn.height,Lt,yt,Yn.data):t.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,ln,bn,Yn.width,Yn.height,0,Lt,yt,Yn.data)}}}else{if(wt=X.mipmaps,ge&&bt){wt.length>0&&Qt++;const ut=Bt(mt[0]);t.texStorage2D(a.TEXTURE_CUBE_MAP,Qt,bn,ut.width,ut.height)}for(let ut=0;ut<6;ut++)if(Ye){ge?Ht&&t.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,0,0,0,mt[ut].width,mt[ut].height,Lt,yt,mt[ut].data):t.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,0,bn,mt[ut].width,mt[ut].height,0,Lt,yt,mt[ut].data);for(let ln=0;ln<wt.length;ln++){const Pi=wt[ln].image[ut].image;ge?Ht&&t.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,ln+1,0,0,Pi.width,Pi.height,Lt,yt,Pi.data):t.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,ln+1,bn,Pi.width,Pi.height,0,Lt,yt,Pi.data)}}else{ge?Ht&&t.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,0,0,0,Lt,yt,mt[ut]):t.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,0,bn,Lt,yt,mt[ut]);for(let ln=0;ln<wt.length;ln++){const Yn=wt[ln];ge?Ht&&t.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,ln+1,0,0,Lt,yt,Yn.image[ut]):t.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+ut,ln+1,bn,Lt,yt,Yn.image[ut])}}}A(X)&&w(a.TEXTURE_CUBE_MAP),De.__version=Ge.version,X.onUpdate&&X.onUpdate(X)}se.__version=X.version}function In(se,X,Se,Me,Ge,De){const Et=r.convert(Se.format,Se.colorSpace),et=r.convert(Se.type),kt=F(Se.internalFormat,Et,et,Se.colorSpace),It=i.get(X),Ye=i.get(Se);if(Ye.__renderTarget=X,!It.__hasExternalTextures){const mt=Math.max(1,X.width>>De),ft=Math.max(1,X.height>>De);Ge===a.TEXTURE_3D||Ge===a.TEXTURE_2D_ARRAY?t.texImage3D(Ge,De,kt,mt,ft,X.depth,0,Et,et,null):t.texImage2D(Ge,De,kt,mt,ft,0,Et,et,null)}t.bindFramebuffer(a.FRAMEBUFFER,se),Xe(X)?u.framebufferTexture2DMultisampleEXT(a.FRAMEBUFFER,Me,Ge,Ye.__webglTexture,0,lt(X)):(Ge===a.TEXTURE_2D||Ge>=a.TEXTURE_CUBE_MAP_POSITIVE_X&&Ge<=a.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&a.framebufferTexture2D(a.FRAMEBUFFER,Me,Ge,Ye.__webglTexture,De),t.bindFramebuffer(a.FRAMEBUFFER,null)}function gn(se,X,Se){if(a.bindRenderbuffer(a.RENDERBUFFER,se),X.depthBuffer){const Me=X.depthTexture,Ge=Me&&Me.isDepthTexture?Me.type:null,De=B(X.stencilBuffer,Ge),Et=X.stencilBuffer?a.DEPTH_STENCIL_ATTACHMENT:a.DEPTH_ATTACHMENT,et=lt(X);Xe(X)?u.renderbufferStorageMultisampleEXT(a.RENDERBUFFER,et,De,X.width,X.height):Se?a.renderbufferStorageMultisample(a.RENDERBUFFER,et,De,X.width,X.height):a.renderbufferStorage(a.RENDERBUFFER,De,X.width,X.height),a.framebufferRenderbuffer(a.FRAMEBUFFER,Et,a.RENDERBUFFER,se)}else{const Me=X.textures;for(let Ge=0;Ge<Me.length;Ge++){const De=Me[Ge],Et=r.convert(De.format,De.colorSpace),et=r.convert(De.type),kt=F(De.internalFormat,Et,et,De.colorSpace),It=lt(X);Se&&Xe(X)===!1?a.renderbufferStorageMultisample(a.RENDERBUFFER,It,kt,X.width,X.height):Xe(X)?u.renderbufferStorageMultisampleEXT(a.RENDERBUFFER,It,kt,X.width,X.height):a.renderbufferStorage(a.RENDERBUFFER,kt,X.width,X.height)}}a.bindRenderbuffer(a.RENDERBUFFER,null)}function kn(se,X){if(X&&X.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(a.FRAMEBUFFER,se),!(X.depthTexture&&X.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const Me=i.get(X.depthTexture);Me.__renderTarget=X,(!Me.__webglTexture||X.depthTexture.image.width!==X.width||X.depthTexture.image.height!==X.height)&&(X.depthTexture.image.width=X.width,X.depthTexture.image.height=X.height,X.depthTexture.needsUpdate=!0),Be(X.depthTexture,0);const Ge=Me.__webglTexture,De=lt(X);if(X.depthTexture.format===wo)Xe(X)?u.framebufferTexture2DMultisampleEXT(a.FRAMEBUFFER,a.DEPTH_ATTACHMENT,a.TEXTURE_2D,Ge,0,De):a.framebufferTexture2D(a.FRAMEBUFFER,a.DEPTH_ATTACHMENT,a.TEXTURE_2D,Ge,0);else if(X.depthTexture.format===Ao)Xe(X)?u.framebufferTexture2DMultisampleEXT(a.FRAMEBUFFER,a.DEPTH_STENCIL_ATTACHMENT,a.TEXTURE_2D,Ge,0,De):a.framebufferTexture2D(a.FRAMEBUFFER,a.DEPTH_STENCIL_ATTACHMENT,a.TEXTURE_2D,Ge,0);else throw new Error("Unknown depthTexture format")}function Ki(se){const X=i.get(se),Se=se.isWebGLCubeRenderTarget===!0;if(X.__boundDepthTexture!==se.depthTexture){const Me=se.depthTexture;if(X.__depthDisposeCallback&&X.__depthDisposeCallback(),Me){const Ge=()=>{delete X.__boundDepthTexture,delete X.__depthDisposeCallback,Me.removeEventListener("dispose",Ge)};Me.addEventListener("dispose",Ge),X.__depthDisposeCallback=Ge}X.__boundDepthTexture=Me}if(se.depthTexture&&!X.__autoAllocateDepthBuffer){if(Se)throw new Error("target.depthTexture not supported in Cube render targets");const Me=se.texture.mipmaps;Me&&Me.length>0?kn(X.__webglFramebuffer[0],se):kn(X.__webglFramebuffer,se)}else if(Se){X.__webglDepthbuffer=[];for(let Me=0;Me<6;Me++)if(t.bindFramebuffer(a.FRAMEBUFFER,X.__webglFramebuffer[Me]),X.__webglDepthbuffer[Me]===void 0)X.__webglDepthbuffer[Me]=a.createRenderbuffer(),gn(X.__webglDepthbuffer[Me],se,!1);else{const Ge=se.stencilBuffer?a.DEPTH_STENCIL_ATTACHMENT:a.DEPTH_ATTACHMENT,De=X.__webglDepthbuffer[Me];a.bindRenderbuffer(a.RENDERBUFFER,De),a.framebufferRenderbuffer(a.FRAMEBUFFER,Ge,a.RENDERBUFFER,De)}}else{const Me=se.texture.mipmaps;if(Me&&Me.length>0?t.bindFramebuffer(a.FRAMEBUFFER,X.__webglFramebuffer[0]):t.bindFramebuffer(a.FRAMEBUFFER,X.__webglFramebuffer),X.__webglDepthbuffer===void 0)X.__webglDepthbuffer=a.createRenderbuffer(),gn(X.__webglDepthbuffer,se,!1);else{const Ge=se.stencilBuffer?a.DEPTH_STENCIL_ATTACHMENT:a.DEPTH_ATTACHMENT,De=X.__webglDepthbuffer;a.bindRenderbuffer(a.RENDERBUFFER,De),a.framebufferRenderbuffer(a.FRAMEBUFFER,Ge,a.RENDERBUFFER,De)}}t.bindFramebuffer(a.FRAMEBUFFER,null)}function Ue(se,X,Se){const Me=i.get(se);X!==void 0&&In(Me.__webglFramebuffer,se,se.texture,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,0),Se!==void 0&&Ki(se)}function ee(se){const X=se.texture,Se=i.get(se),Me=i.get(X);se.addEventListener("dispose",$);const Ge=se.textures,De=se.isWebGLCubeRenderTarget===!0,Et=Ge.length>1;if(Et||(Me.__webglTexture===void 0&&(Me.__webglTexture=a.createTexture()),Me.__version=X.version,l.memory.textures++),De){Se.__webglFramebuffer=[];for(let et=0;et<6;et++)if(X.mipmaps&&X.mipmaps.length>0){Se.__webglFramebuffer[et]=[];for(let kt=0;kt<X.mipmaps.length;kt++)Se.__webglFramebuffer[et][kt]=a.createFramebuffer()}else Se.__webglFramebuffer[et]=a.createFramebuffer()}else{if(X.mipmaps&&X.mipmaps.length>0){Se.__webglFramebuffer=[];for(let et=0;et<X.mipmaps.length;et++)Se.__webglFramebuffer[et]=a.createFramebuffer()}else Se.__webglFramebuffer=a.createFramebuffer();if(Et)for(let et=0,kt=Ge.length;et<kt;et++){const It=i.get(Ge[et]);It.__webglTexture===void 0&&(It.__webglTexture=a.createTexture(),l.memory.textures++)}if(se.samples>0&&Xe(se)===!1){Se.__webglMultisampledFramebuffer=a.createFramebuffer(),Se.__webglColorRenderbuffer=[],t.bindFramebuffer(a.FRAMEBUFFER,Se.__webglMultisampledFramebuffer);for(let et=0;et<Ge.length;et++){const kt=Ge[et];Se.__webglColorRenderbuffer[et]=a.createRenderbuffer(),a.bindRenderbuffer(a.RENDERBUFFER,Se.__webglColorRenderbuffer[et]);const It=r.convert(kt.format,kt.colorSpace),Ye=r.convert(kt.type),mt=F(kt.internalFormat,It,Ye,kt.colorSpace,se.isXRRenderTarget===!0),ft=lt(se);a.renderbufferStorageMultisample(a.RENDERBUFFER,ft,mt,se.width,se.height),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0+et,a.RENDERBUFFER,Se.__webglColorRenderbuffer[et])}a.bindRenderbuffer(a.RENDERBUFFER,null),se.depthBuffer&&(Se.__webglDepthRenderbuffer=a.createRenderbuffer(),gn(Se.__webglDepthRenderbuffer,se,!0)),t.bindFramebuffer(a.FRAMEBUFFER,null)}}if(De){t.bindTexture(a.TEXTURE_CUBE_MAP,Me.__webglTexture),qn(a.TEXTURE_CUBE_MAP,X);for(let et=0;et<6;et++)if(X.mipmaps&&X.mipmaps.length>0)for(let kt=0;kt<X.mipmaps.length;kt++)In(Se.__webglFramebuffer[et][kt],se,X,a.COLOR_ATTACHMENT0,a.TEXTURE_CUBE_MAP_POSITIVE_X+et,kt);else In(Se.__webglFramebuffer[et],se,X,a.COLOR_ATTACHMENT0,a.TEXTURE_CUBE_MAP_POSITIVE_X+et,0);A(X)&&w(a.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(Et){for(let et=0,kt=Ge.length;et<kt;et++){const It=Ge[et],Ye=i.get(It);let mt=a.TEXTURE_2D;(se.isWebGL3DRenderTarget||se.isWebGLArrayRenderTarget)&&(mt=se.isWebGL3DRenderTarget?a.TEXTURE_3D:a.TEXTURE_2D_ARRAY),t.bindTexture(mt,Ye.__webglTexture),qn(mt,It),In(Se.__webglFramebuffer,se,It,a.COLOR_ATTACHMENT0+et,mt,0),A(It)&&w(mt)}t.unbindTexture()}else{let et=a.TEXTURE_2D;if((se.isWebGL3DRenderTarget||se.isWebGLArrayRenderTarget)&&(et=se.isWebGL3DRenderTarget?a.TEXTURE_3D:a.TEXTURE_2D_ARRAY),t.bindTexture(et,Me.__webglTexture),qn(et,X),X.mipmaps&&X.mipmaps.length>0)for(let kt=0;kt<X.mipmaps.length;kt++)In(Se.__webglFramebuffer[kt],se,X,a.COLOR_ATTACHMENT0,et,kt);else In(Se.__webglFramebuffer,se,X,a.COLOR_ATTACHMENT0,et,0);A(X)&&w(et),t.unbindTexture()}se.depthBuffer&&Ki(se)}function ve(se){const X=se.textures;for(let Se=0,Me=X.length;Se<Me;Se++){const Ge=X[Se];if(A(Ge)){const De=O(se),Et=i.get(Ge).__webglTexture;t.bindTexture(De,Et),w(De),t.unbindTexture()}}}const de=[],we=[];function Ie(se){if(se.samples>0){if(Xe(se)===!1){const X=se.textures,Se=se.width,Me=se.height;let Ge=a.COLOR_BUFFER_BIT;const De=se.stencilBuffer?a.DEPTH_STENCIL_ATTACHMENT:a.DEPTH_ATTACHMENT,Et=i.get(se),et=X.length>1;if(et)for(let It=0;It<X.length;It++)t.bindFramebuffer(a.FRAMEBUFFER,Et.__webglMultisampledFramebuffer),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0+It,a.RENDERBUFFER,null),t.bindFramebuffer(a.FRAMEBUFFER,Et.__webglFramebuffer),a.framebufferTexture2D(a.DRAW_FRAMEBUFFER,a.COLOR_ATTACHMENT0+It,a.TEXTURE_2D,null,0);t.bindFramebuffer(a.READ_FRAMEBUFFER,Et.__webglMultisampledFramebuffer);const kt=se.texture.mipmaps;kt&&kt.length>0?t.bindFramebuffer(a.DRAW_FRAMEBUFFER,Et.__webglFramebuffer[0]):t.bindFramebuffer(a.DRAW_FRAMEBUFFER,Et.__webglFramebuffer);for(let It=0;It<X.length;It++){if(se.resolveDepthBuffer&&(se.depthBuffer&&(Ge|=a.DEPTH_BUFFER_BIT),se.stencilBuffer&&se.resolveStencilBuffer&&(Ge|=a.STENCIL_BUFFER_BIT)),et){a.framebufferRenderbuffer(a.READ_FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.RENDERBUFFER,Et.__webglColorRenderbuffer[It]);const Ye=i.get(X[It]).__webglTexture;a.framebufferTexture2D(a.DRAW_FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,Ye,0)}a.blitFramebuffer(0,0,Se,Me,0,0,Se,Me,Ge,a.NEAREST),d===!0&&(de.length=0,we.length=0,de.push(a.COLOR_ATTACHMENT0+It),se.depthBuffer&&se.resolveDepthBuffer===!1&&(de.push(De),we.push(De),a.invalidateFramebuffer(a.DRAW_FRAMEBUFFER,we)),a.invalidateFramebuffer(a.READ_FRAMEBUFFER,de))}if(t.bindFramebuffer(a.READ_FRAMEBUFFER,null),t.bindFramebuffer(a.DRAW_FRAMEBUFFER,null),et)for(let It=0;It<X.length;It++){t.bindFramebuffer(a.FRAMEBUFFER,Et.__webglMultisampledFramebuffer),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0+It,a.RENDERBUFFER,Et.__webglColorRenderbuffer[It]);const Ye=i.get(X[It]).__webglTexture;t.bindFramebuffer(a.FRAMEBUFFER,Et.__webglFramebuffer),a.framebufferTexture2D(a.DRAW_FRAMEBUFFER,a.COLOR_ATTACHMENT0+It,a.TEXTURE_2D,Ye,0)}t.bindFramebuffer(a.DRAW_FRAMEBUFFER,Et.__webglMultisampledFramebuffer)}else if(se.depthBuffer&&se.resolveDepthBuffer===!1&&d){const X=se.stencilBuffer?a.DEPTH_STENCIL_ATTACHMENT:a.DEPTH_ATTACHMENT;a.invalidateFramebuffer(a.DRAW_FRAMEBUFFER,[X])}}}function lt(se){return Math.min(s.maxSamples,se.samples)}function Xe(se){const X=i.get(se);return se.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&X.__useRenderToTexture!==!1}function qe(se){const X=l.render.frame;g.get(se)!==X&&(g.set(se,X),se.update())}function Ft(se,X){const Se=se.colorSpace,Me=se.format,Ge=se.type;return se.isCompressedTexture===!0||se.isVideoTexture===!0||Se!==sc&&Se!==no&&(zn.getTransfer(Se)===un?(Me!==es||Ge!==Ts)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",Se)),X}function Bt(se){return typeof HTMLImageElement<"u"&&se instanceof HTMLImageElement?(f.width=se.naturalWidth||se.width,f.height=se.naturalHeight||se.height):typeof VideoFrame<"u"&&se instanceof VideoFrame?(f.width=se.displayWidth,f.height=se.displayHeight):(f.width=se.width,f.height=se.height),f}this.allocateTextureUnit=Ne,this.resetTextureUnits=Ce,this.setTexture2D=Be,this.setTexture2DArray=He,this.setTexture3D=ct,this.setTextureCube=Ve,this.rebindTextures=Ue,this.setupRenderTarget=ee,this.updateRenderTargetMipmap=ve,this.updateMultisampleRenderTarget=Ie,this.setupDepthRenderbuffer=Ki,this.setupFrameBufferTexture=In,this.useMultisampledRTT=Xe}function VY(a,e){function t(i,s=no){let r;const l=zn.getTransfer(s);if(i===Ts)return a.UNSIGNED_BYTE;if(i===Cg)return a.UNSIGNED_SHORT_4_4_4_4;if(i===Ng)return a.UNSIGNED_SHORT_5_5_5_1;if(i===Pg)return a.UNSIGNED_INT_5_9_9_9_REV;if(i===Wc)return a.BYTE;if(i===$c)return a.SHORT;if(i===ua)return a.UNSIGNED_SHORT;if(i===or)return a.INT;if(i===rs)return a.UNSIGNED_INT;if(i===os)return a.FLOAT;if(i===Qs)return a.HALF_FLOAT;if(i===Dv)return a.ALPHA;if(i===mp)return a.RGB;if(i===es)return a.RGBA;if(i===wo)return a.DEPTH_COMPONENT;if(i===Ao)return a.DEPTH_STENCIL;if(i===nd)return a.RED;if(i===eu)return a.RED_INTEGER;if(i===ul)return a.RG;if(i===id)return a.RG_INTEGER;if(i===sd)return a.RGBA_INTEGER;if(i===Xc||i===Zl||i===Kl||i===Jl)if(l===un)if(r=e.get("WEBGL_compressed_texture_s3tc_srgb"),r!==null){if(i===Xc)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(i===Zl)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(i===Kl)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(i===Jl)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(r=e.get("WEBGL_compressed_texture_s3tc"),r!==null){if(i===Xc)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(i===Zl)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(i===Kl)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(i===Jl)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(i===Kf||i===Jf||i===jf||i===Qf)if(r=e.get("WEBGL_compressed_texture_pvrtc"),r!==null){if(i===Kf)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(i===Jf)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(i===jf)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(i===Qf)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(i===ep||i===Uh||i===Fh)if(r=e.get("WEBGL_compressed_texture_etc"),r!==null){if(i===ep||i===Uh)return l===un?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(i===Fh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(i===Bh||i===Oh||i===Vh||i===zh||i===kh||i===Gh||i===Hh||i===Wh||i===$h||i===Xh||i===qh||i===Yh||i===Zh||i===Kh)if(r=e.get("WEBGL_compressed_texture_astc"),r!==null){if(i===Bh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(i===Oh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(i===Vh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(i===zh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(i===kh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(i===Gh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(i===Hh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(i===Wh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(i===$h)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(i===Xh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(i===qh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(i===Yh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(i===Zh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(i===Kh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(i===qc||i===ev||i===tv)if(r=e.get("EXT_texture_compression_bptc"),r!==null){if(i===qc)return l===un?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(i===ev)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(i===tv)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(i===Uv||i===tp||i===np||i===ip)if(r=e.get("EXT_texture_compression_rgtc"),r!==null){if(i===qc)return r.COMPRESSED_RED_RGTC1_EXT;if(i===tp)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(i===np)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(i===ip)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return i===Mo?a.UNSIGNED_INT_24_8:a[i]!==void 0?a[i]:null}return{convert:t}}class eD extends ds{constructor(e=null){super(),this.sourceTexture=e,this.isExternalTexture=!0}}const zY=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,kY=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class GY{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t){if(this.texture===null){const i=new eD(e.texture);(e.depthNear!==t.depthNear||e.depthFar!==t.depthFar)&&(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=i}}getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport,i=new er({vertexShader:zY,fragmentShader:kY,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new ts(new iu(20,20),i)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class HY extends Jo{constructor(e,t){super();const i=this;let s=null,r=1,l=null,u="local-floor",d=1,f=null,g=null,x=null,v=null,S=null,T=null;const E=new GY,A={},w=t.getContextAttributes();let O=null,F=null;const B=[],k=[],Y=new it;let $=null;const Q=new Gs;Q.viewport=new Un;const z=new Gs;z.viewport=new Un;const q=[Q,z],oe=new Fw;let Ce=null,Ne=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(rt){let Xt=B[rt];return Xt===void 0&&(Xt=new Xm,B[rt]=Xt),Xt.getTargetRaySpace()},this.getControllerGrip=function(rt){let Xt=B[rt];return Xt===void 0&&(Xt=new Xm,B[rt]=Xt),Xt.getGripSpace()},this.getHand=function(rt){let Xt=B[rt];return Xt===void 0&&(Xt=new Xm,B[rt]=Xt),Xt.getHandSpace()};function Oe(rt){const Xt=k.indexOf(rt.inputSource);if(Xt===-1)return;const At=B[Xt];At!==void 0&&(At.update(rt.inputSource,rt.frame,f||l),At.dispatchEvent({type:rt.type,data:rt.inputSource}))}function Be(){s.removeEventListener("select",Oe),s.removeEventListener("selectstart",Oe),s.removeEventListener("selectend",Oe),s.removeEventListener("squeeze",Oe),s.removeEventListener("squeezestart",Oe),s.removeEventListener("squeezeend",Oe),s.removeEventListener("end",Be),s.removeEventListener("inputsourceschange",He);for(let rt=0;rt<B.length;rt++){const Xt=k[rt];Xt!==null&&(k[rt]=null,B[rt].disconnect(Xt))}Ce=null,Ne=null,E.reset();for(const rt in A)delete A[rt];e.setRenderTarget(O),S=null,v=null,x=null,s=null,F=null,bi.stop(),i.isPresenting=!1,e.setPixelRatio($),e.setSize(Y.width,Y.height,!1),i.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(rt){r=rt,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(rt){u=rt,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return f||l},this.setReferenceSpace=function(rt){f=rt},this.getBaseLayer=function(){return v!==null?v:S},this.getBinding=function(){return x},this.getFrame=function(){return T},this.getSession=function(){return s},this.setSession=async function(rt){if(s=rt,s!==null){if(O=e.getRenderTarget(),s.addEventListener("select",Oe),s.addEventListener("selectstart",Oe),s.addEventListener("selectend",Oe),s.addEventListener("squeeze",Oe),s.addEventListener("squeezestart",Oe),s.addEventListener("squeezeend",Oe),s.addEventListener("end",Be),s.addEventListener("inputsourceschange",He),w.xrCompatible!==!0&&await t.makeXRCompatible(),$=e.getPixelRatio(),e.getSize(Y),typeof XRWebGLBinding<"u"&&(x=new XRWebGLBinding(s,t)),x!==null&&"createProjectionLayer"in XRWebGLBinding.prototype){let At=null,In=null,gn=null;w.depth&&(gn=w.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,At=w.stencil?Ao:wo,In=w.stencil?Mo:rs);const kn={colorFormat:t.RGBA8,depthFormat:gn,scaleFactor:r};v=x.createProjectionLayer(kn),s.updateRenderState({layers:[v]}),e.setPixelRatio(1),e.setSize(v.textureWidth,v.textureHeight,!1),F=new Yo(v.textureWidth,v.textureHeight,{format:es,type:Ts,depthTexture:new Ro(v.textureWidth,v.textureHeight,In,void 0,void 0,void 0,void 0,void 0,void 0,At),stencilBuffer:w.stencil,colorSpace:e.outputColorSpace,samples:w.antialias?4:0,resolveDepthBuffer:v.ignoreDepthValues===!1,resolveStencilBuffer:v.ignoreDepthValues===!1})}else{const At={antialias:w.antialias,alpha:!0,depth:w.depth,stencil:w.stencil,framebufferScaleFactor:r};S=new XRWebGLLayer(s,t,At),s.updateRenderState({baseLayer:S}),e.setPixelRatio(1),e.setSize(S.framebufferWidth,S.framebufferHeight,!1),F=new Yo(S.framebufferWidth,S.framebufferHeight,{format:es,type:Ts,colorSpace:e.outputColorSpace,stencilBuffer:w.stencil,resolveDepthBuffer:S.ignoreDepthValues===!1,resolveStencilBuffer:S.ignoreDepthValues===!1})}F.isXRRenderTarget=!0,this.setFoveation(d),f=null,l=await s.requestReferenceSpace(u),bi.setContext(s),bi.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(s!==null)return s.environmentBlendMode},this.getDepthTexture=function(){return E.getDepthTexture()};function He(rt){for(let Xt=0;Xt<rt.removed.length;Xt++){const At=rt.removed[Xt],In=k.indexOf(At);In>=0&&(k[In]=null,B[In].disconnect(At))}for(let Xt=0;Xt<rt.added.length;Xt++){const At=rt.added[Xt];let In=k.indexOf(At);if(In===-1){for(let kn=0;kn<B.length;kn++)if(kn>=k.length){k.push(At),In=kn;break}else if(k[kn]===null){k[kn]=At,In=kn;break}if(In===-1)break}const gn=B[In];gn&&gn.connect(At)}}const ct=new re,Ve=new re;function Ct(rt,Xt,At){ct.setFromMatrixPosition(Xt.matrixWorld),Ve.setFromMatrixPosition(At.matrixWorld);const In=ct.distanceTo(Ve),gn=Xt.projectionMatrix.elements,kn=At.projectionMatrix.elements,Ki=gn[14]/(gn[10]-1),Ue=gn[14]/(gn[10]+1),ee=(gn[9]+1)/gn[5],ve=(gn[9]-1)/gn[5],de=(gn[8]-1)/gn[0],we=(kn[8]+1)/kn[0],Ie=Ki*de,lt=Ki*we,Xe=In/(-de+we),qe=Xe*-de;if(Xt.matrixWorld.decompose(rt.position,rt.quaternion,rt.scale),rt.translateX(qe),rt.translateZ(Xe),rt.matrixWorld.compose(rt.position,rt.quaternion,rt.scale),rt.matrixWorldInverse.copy(rt.matrixWorld).invert(),gn[10]===-1)rt.projectionMatrix.copy(Xt.projectionMatrix),rt.projectionMatrixInverse.copy(Xt.projectionMatrixInverse);else{const Ft=Ki+Xe,Bt=Ue+Xe,se=Ie-qe,X=lt+(In-qe),Se=ee*Ue/Bt*Ft,Me=ve*Ue/Bt*Ft;rt.projectionMatrix.makePerspective(se,X,Se,Me,Ft,Bt),rt.projectionMatrixInverse.copy(rt.projectionMatrix).invert()}}function Gt(rt,Xt){Xt===null?rt.matrixWorld.copy(rt.matrix):rt.matrixWorld.multiplyMatrices(Xt.matrixWorld,rt.matrix),rt.matrixWorldInverse.copy(rt.matrixWorld).invert()}this.updateCamera=function(rt){if(s===null)return;let Xt=rt.near,At=rt.far;E.texture!==null&&(E.depthNear>0&&(Xt=E.depthNear),E.depthFar>0&&(At=E.depthFar)),oe.near=z.near=Q.near=Xt,oe.far=z.far=Q.far=At,(Ce!==oe.near||Ne!==oe.far)&&(s.updateRenderState({depthNear:oe.near,depthFar:oe.far}),Ce=oe.near,Ne=oe.far),oe.layers.mask=rt.layers.mask|6,Q.layers.mask=oe.layers.mask&3,z.layers.mask=oe.layers.mask&5;const In=rt.parent,gn=oe.cameras;Gt(oe,In);for(let kn=0;kn<gn.length;kn++)Gt(gn[kn],In);gn.length===2?Ct(oe,Q,z):oe.projectionMatrix.copy(Q.projectionMatrix),pn(rt,oe,In)};function pn(rt,Xt,At){At===null?rt.matrix.copy(Xt.matrixWorld):(rt.matrix.copy(At.matrixWorld),rt.matrix.invert(),rt.matrix.multiply(Xt.matrixWorld)),rt.matrix.decompose(rt.position,rt.quaternion,rt.scale),rt.updateMatrixWorld(!0),rt.projectionMatrix.copy(Xt.projectionMatrix),rt.projectionMatrixInverse.copy(Xt.projectionMatrixInverse),rt.isPerspectiveCamera&&(rt.fov=jh*2*Math.atan(1/rt.projectionMatrix.elements[5]),rt.zoom=1)}this.getCamera=function(){return oe},this.getFoveation=function(){if(!(v===null&&S===null))return d},this.setFoveation=function(rt){d=rt,v!==null&&(v.fixedFoveation=rt),S!==null&&S.fixedFoveation!==void 0&&(S.fixedFoveation=rt)},this.hasDepthSensing=function(){return E.texture!==null},this.getDepthSensingMesh=function(){return E.getMesh(oe)},this.getCameraTexture=function(rt){return A[rt]};let qn=null;function yi(rt,Xt){if(g=Xt.getViewerPose(f||l),T=Xt,g!==null){const At=g.views;S!==null&&(e.setRenderTargetFramebuffer(F,S.framebuffer),e.setRenderTarget(F));let In=!1;At.length!==oe.cameras.length&&(oe.cameras.length=0,In=!0);for(let Ue=0;Ue<At.length;Ue++){const ee=At[Ue];let ve=null;if(S!==null)ve=S.getViewport(ee);else{const we=x.getViewSubImage(v,ee);ve=we.viewport,Ue===0&&(e.setRenderTargetTextures(F,we.colorTexture,we.depthStencilTexture),e.setRenderTarget(F))}let de=q[Ue];de===void 0&&(de=new Gs,de.layers.enable(Ue),de.viewport=new Un,q[Ue]=de),de.matrix.fromArray(ee.transform.matrix),de.matrix.decompose(de.position,de.quaternion,de.scale),de.projectionMatrix.fromArray(ee.projectionMatrix),de.projectionMatrixInverse.copy(de.projectionMatrix).invert(),de.viewport.set(ve.x,ve.y,ve.width,ve.height),Ue===0&&(oe.matrix.copy(de.matrix),oe.matrix.decompose(oe.position,oe.quaternion,oe.scale)),In===!0&&oe.cameras.push(de)}const gn=s.enabledFeatures;if(gn&&gn.includes("depth-sensing")&&s.depthUsage=="gpu-optimized"&&x){const Ue=x.getDepthInformation(At[0]);Ue&&Ue.isValid&&Ue.texture&&E.init(Ue,s.renderState)}if(gn&&gn.includes("camera-access")&&(e.state.unbindTexture(),x))for(let Ue=0;Ue<At.length;Ue++){const ee=At[Ue].camera;if(ee){let ve=A[ee];ve||(ve=new eD,A[ee]=ve);const de=x.getCameraImage(ee);ve.sourceTexture=de}}}for(let At=0;At<B.length;At++){const In=k[At],gn=B[At];In!==null&&gn!==void 0&&gn.update(In,Xt,f||l)}qn&&qn(rt,Xt),Xt.detectedPlanes&&i.dispatchEvent({type:"planesdetected",data:Xt}),T=null}const bi=new ZL;bi.setAnimationLoop(yi),this.setAnimationLoop=function(rt){qn=rt},this.dispose=function(){}}}const sh=new co,WY=new xn;function $Y(a,e){function t(A,w){A.matrixAutoUpdate===!0&&A.updateMatrix(),w.value.copy(A.matrix)}function i(A,w){w.color.getRGB(A.fogColor.value,uL(a)),w.isFog?(A.fogNear.value=w.near,A.fogFar.value=w.far):w.isFogExp2&&(A.fogDensity.value=w.density)}function s(A,w,O,F,B){w.isMeshBasicMaterial||w.isMeshLambertMaterial?r(A,w):w.isMeshToonMaterial?(r(A,w),x(A,w)):w.isMeshPhongMaterial?(r(A,w),g(A,w)):w.isMeshStandardMaterial?(r(A,w),v(A,w),w.isMeshPhysicalMaterial&&S(A,w,B)):w.isMeshMatcapMaterial?(r(A,w),T(A,w)):w.isMeshDepthMaterial?r(A,w):w.isMeshDistanceMaterial?(r(A,w),E(A,w)):w.isMeshNormalMaterial?r(A,w):w.isLineBasicMaterial?(l(A,w),w.isLineDashedMaterial&&u(A,w)):w.isPointsMaterial?d(A,w,O,F):w.isSpriteMaterial?f(A,w):w.isShadowMaterial?(A.color.value.copy(w.color),A.opacity.value=w.opacity):w.isShaderMaterial&&(w.uniformsNeedUpdate=!1)}function r(A,w){A.opacity.value=w.opacity,w.color&&A.diffuse.value.copy(w.color),w.emissive&&A.emissive.value.copy(w.emissive).multiplyScalar(w.emissiveIntensity),w.map&&(A.map.value=w.map,t(w.map,A.mapTransform)),w.alphaMap&&(A.alphaMap.value=w.alphaMap,t(w.alphaMap,A.alphaMapTransform)),w.bumpMap&&(A.bumpMap.value=w.bumpMap,t(w.bumpMap,A.bumpMapTransform),A.bumpScale.value=w.bumpScale,w.side===ns&&(A.bumpScale.value*=-1)),w.normalMap&&(A.normalMap.value=w.normalMap,t(w.normalMap,A.normalMapTransform),A.normalScale.value.copy(w.normalScale),w.side===ns&&A.normalScale.value.negate()),w.displacementMap&&(A.displacementMap.value=w.displacementMap,t(w.displacementMap,A.displacementMapTransform),A.displacementScale.value=w.displacementScale,A.displacementBias.value=w.displacementBias),w.emissiveMap&&(A.emissiveMap.value=w.emissiveMap,t(w.emissiveMap,A.emissiveMapTransform)),w.specularMap&&(A.specularMap.value=w.specularMap,t(w.specularMap,A.specularMapTransform)),w.alphaTest>0&&(A.alphaTest.value=w.alphaTest);const O=e.get(w),F=O.envMap,B=O.envMapRotation;F&&(A.envMap.value=F,sh.copy(B),sh.x*=-1,sh.y*=-1,sh.z*=-1,F.isCubeTexture&&F.isRenderTargetTexture===!1&&(sh.y*=-1,sh.z*=-1),A.envMapRotation.value.setFromMatrix4(WY.makeRotationFromEuler(sh)),A.flipEnvMap.value=F.isCubeTexture&&F.isRenderTargetTexture===!1?-1:1,A.reflectivity.value=w.reflectivity,A.ior.value=w.ior,A.refractionRatio.value=w.refractionRatio),w.lightMap&&(A.lightMap.value=w.lightMap,A.lightMapIntensity.value=w.lightMapIntensity,t(w.lightMap,A.lightMapTransform)),w.aoMap&&(A.aoMap.value=w.aoMap,A.aoMapIntensity.value=w.aoMapIntensity,t(w.aoMap,A.aoMapTransform))}function l(A,w){A.diffuse.value.copy(w.color),A.opacity.value=w.opacity,w.map&&(A.map.value=w.map,t(w.map,A.mapTransform))}function u(A,w){A.dashSize.value=w.dashSize,A.totalSize.value=w.dashSize+w.gapSize,A.scale.value=w.scale}function d(A,w,O,F){A.diffuse.value.copy(w.color),A.opacity.value=w.opacity,A.size.value=w.size*O,A.scale.value=F*.5,w.map&&(A.map.value=w.map,t(w.map,A.uvTransform)),w.alphaMap&&(A.alphaMap.value=w.alphaMap,t(w.alphaMap,A.alphaMapTransform)),w.alphaTest>0&&(A.alphaTest.value=w.alphaTest)}function f(A,w){A.diffuse.value.copy(w.color),A.opacity.value=w.opacity,A.rotation.value=w.rotation,w.map&&(A.map.value=w.map,t(w.map,A.mapTransform)),w.alphaMap&&(A.alphaMap.value=w.alphaMap,t(w.alphaMap,A.alphaMapTransform)),w.alphaTest>0&&(A.alphaTest.value=w.alphaTest)}function g(A,w){A.specular.value.copy(w.specular),A.shininess.value=Math.max(w.shininess,1e-4)}function x(A,w){w.gradientMap&&(A.gradientMap.value=w.gradientMap)}function v(A,w){A.metalness.value=w.metalness,w.metalnessMap&&(A.metalnessMap.value=w.metalnessMap,t(w.metalnessMap,A.metalnessMapTransform)),A.roughness.value=w.roughness,w.roughnessMap&&(A.roughnessMap.value=w.roughnessMap,t(w.roughnessMap,A.roughnessMapTransform)),w.envMap&&(A.envMapIntensity.value=w.envMapIntensity)}function S(A,w,O){A.ior.value=w.ior,w.sheen>0&&(A.sheenColor.value.copy(w.sheenColor).multiplyScalar(w.sheen),A.sheenRoughness.value=w.sheenRoughness,w.sheenColorMap&&(A.sheenColorMap.value=w.sheenColorMap,t(w.sheenColorMap,A.sheenColorMapTransform)),w.sheenRoughnessMap&&(A.sheenRoughnessMap.value=w.sheenRoughnessMap,t(w.sheenRoughnessMap,A.sheenRoughnessMapTransform))),w.clearcoat>0&&(A.clearcoat.value=w.clearcoat,A.clearcoatRoughness.value=w.clearcoatRoughness,w.clearcoatMap&&(A.clearcoatMap.value=w.clearcoatMap,t(w.clearcoatMap,A.clearcoatMapTransform)),w.clearcoatRoughnessMap&&(A.clearcoatRoughnessMap.value=w.clearcoatRoughnessMap,t(w.clearcoatRoughnessMap,A.clearcoatRoughnessMapTransform)),w.clearcoatNormalMap&&(A.clearcoatNormalMap.value=w.clearcoatNormalMap,t(w.clearcoatNormalMap,A.clearcoatNormalMapTransform),A.clearcoatNormalScale.value.copy(w.clearcoatNormalScale),w.side===ns&&A.clearcoatNormalScale.value.negate())),w.dispersion>0&&(A.dispersion.value=w.dispersion),w.iridescence>0&&(A.iridescence.value=w.iridescence,A.iridescenceIOR.value=w.iridescenceIOR,A.iridescenceThicknessMinimum.value=w.iridescenceThicknessRange[0],A.iridescenceThicknessMaximum.value=w.iridescenceThicknessRange[1],w.iridescenceMap&&(A.iridescenceMap.value=w.iridescenceMap,t(w.iridescenceMap,A.iridescenceMapTransform)),w.iridescenceThicknessMap&&(A.iridescenceThicknessMap.value=w.iridescenceThicknessMap,t(w.iridescenceThicknessMap,A.iridescenceThicknessMapTransform))),w.transmission>0&&(A.transmission.value=w.transmission,A.transmissionSamplerMap.value=O.texture,A.transmissionSamplerSize.value.set(O.width,O.height),w.transmissionMap&&(A.transmissionMap.value=w.transmissionMap,t(w.transmissionMap,A.transmissionMapTransform)),A.thickness.value=w.thickness,w.thicknessMap&&(A.thicknessMap.value=w.thicknessMap,t(w.thicknessMap,A.thicknessMapTransform)),A.attenuationDistance.value=w.attenuationDistance,A.attenuationColor.value.copy(w.attenuationColor)),w.anisotropy>0&&(A.anisotropyVector.value.set(w.anisotropy*Math.cos(w.anisotropyRotation),w.anisotropy*Math.sin(w.anisotropyRotation)),w.anisotropyMap&&(A.anisotropyMap.value=w.anisotropyMap,t(w.anisotropyMap,A.anisotropyMapTransform))),A.specularIntensity.value=w.specularIntensity,A.specularColor.value.copy(w.specularColor),w.specularColorMap&&(A.specularColorMap.value=w.specularColorMap,t(w.specularColorMap,A.specularColorMapTransform)),w.specularIntensityMap&&(A.specularIntensityMap.value=w.specularIntensityMap,t(w.specularIntensityMap,A.specularIntensityMapTransform))}function T(A,w){w.matcap&&(A.matcap.value=w.matcap)}function E(A,w){const O=e.get(w).light;A.referencePosition.value.setFromMatrixPosition(O.matrixWorld),A.nearDistance.value=O.shadow.camera.near,A.farDistance.value=O.shadow.camera.far}return{refreshFogUniforms:i,refreshMaterialUniforms:s}}function XY(a,e,t,i){let s={},r={},l=[];const u=a.getParameter(a.MAX_UNIFORM_BUFFER_BINDINGS);function d(O,F){const B=F.program;i.uniformBlockBinding(O,B)}function f(O,F){let B=s[O.id];B===void 0&&(T(O),B=g(O),s[O.id]=B,O.addEventListener("dispose",A));const k=F.program;i.updateUBOMapping(O,k);const Y=e.render.frame;r[O.id]!==Y&&(v(O),r[O.id]=Y)}function g(O){const F=x();O.__bindingPointIndex=F;const B=a.createBuffer(),k=O.__size,Y=O.usage;return a.bindBuffer(a.UNIFORM_BUFFER,B),a.bufferData(a.UNIFORM_BUFFER,k,Y),a.bindBuffer(a.UNIFORM_BUFFER,null),a.bindBufferBase(a.UNIFORM_BUFFER,F,B),B}function x(){for(let O=0;O<u;O++)if(l.indexOf(O)===-1)return l.push(O),O;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function v(O){const F=s[O.id],B=O.uniforms,k=O.__cache;a.bindBuffer(a.UNIFORM_BUFFER,F);for(let Y=0,$=B.length;Y<$;Y++){const Q=Array.isArray(B[Y])?B[Y]:[B[Y]];for(let z=0,q=Q.length;z<q;z++){const oe=Q[z];if(S(oe,Y,z,k)===!0){const Ce=oe.__offset,Ne=Array.isArray(oe.value)?oe.value:[oe.value];let Oe=0;for(let Be=0;Be<Ne.length;Be++){const He=Ne[Be],ct=E(He);typeof He=="number"||typeof He=="boolean"?(oe.__data[0]=He,a.bufferSubData(a.UNIFORM_BUFFER,Ce+Oe,oe.__data)):He.isMatrix3?(oe.__data[0]=He.elements[0],oe.__data[1]=He.elements[1],oe.__data[2]=He.elements[2],oe.__data[3]=0,oe.__data[4]=He.elements[3],oe.__data[5]=He.elements[4],oe.__data[6]=He.elements[5],oe.__data[7]=0,oe.__data[8]=He.elements[6],oe.__data[9]=He.elements[7],oe.__data[10]=He.elements[8],oe.__data[11]=0):(He.toArray(oe.__data,Oe),Oe+=ct.storage/Float32Array.BYTES_PER_ELEMENT)}a.bufferSubData(a.UNIFORM_BUFFER,Ce,oe.__data)}}}a.bindBuffer(a.UNIFORM_BUFFER,null)}function S(O,F,B,k){const Y=O.value,$=F+"_"+B;if(k[$]===void 0)return typeof Y=="number"||typeof Y=="boolean"?k[$]=Y:k[$]=Y.clone(),!0;{const Q=k[$];if(typeof Y=="number"||typeof Y=="boolean"){if(Q!==Y)return k[$]=Y,!0}else if(Q.equals(Y)===!1)return Q.copy(Y),!0}return!1}function T(O){const F=O.uniforms;let B=0;const k=16;for(let $=0,Q=F.length;$<Q;$++){const z=Array.isArray(F[$])?F[$]:[F[$]];for(let q=0,oe=z.length;q<oe;q++){const Ce=z[q],Ne=Array.isArray(Ce.value)?Ce.value:[Ce.value];for(let Oe=0,Be=Ne.length;Oe<Be;Oe++){const He=Ne[Oe],ct=E(He),Ve=B%k,Ct=Ve%ct.boundary,Gt=Ve+Ct;B+=Ct,Gt!==0&&k-Gt<ct.storage&&(B+=k-Gt),Ce.__data=new Float32Array(ct.storage/Float32Array.BYTES_PER_ELEMENT),Ce.__offset=B,B+=ct.storage}}}const Y=B%k;return Y>0&&(B+=k-Y),O.__size=B,O.__cache={},this}function E(O){const F={boundary:0,storage:0};return typeof O=="number"||typeof O=="boolean"?(F.boundary=4,F.storage=4):O.isVector2?(F.boundary=8,F.storage=8):O.isVector3||O.isColor?(F.boundary=16,F.storage=12):O.isVector4?(F.boundary=16,F.storage=16):O.isMatrix3?(F.boundary=48,F.storage=48):O.isMatrix4?(F.boundary=64,F.storage=64):O.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",O),F}function A(O){const F=O.target;F.removeEventListener("dispose",A);const B=l.indexOf(F.__bindingPointIndex);l.splice(B,1),a.deleteBuffer(s[F.id]),delete s[F.id],delete r[F.id]}function w(){for(const O in s)a.deleteBuffer(s[O]);l=[],s={},r={}}return{bind:d,update:f,dispose:w}}class qY{constructor(e={}){const{canvas:t=tw(),context:i=null,depth:s=!0,stencil:r=!1,alpha:l=!1,antialias:u=!1,premultipliedAlpha:d=!0,preserveDrawingBuffer:f=!1,powerPreference:g="default",failIfMajorPerformanceCaveat:x=!1,reversedDepthBuffer:v=!1}=e;this.isWebGLRenderer=!0;let S;if(i!==null){if(typeof WebGLRenderingContext<"u"&&i instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");S=i.getContextAttributes().alpha}else S=l;const T=new Uint32Array(4),E=new Int32Array(4);let A=null,w=null;const O=[],F=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=Nr,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const B=this;let k=!1;this._outputColorSpace=zr;let Y=0,$=0,Q=null,z=-1,q=null;const oe=new Un,Ce=new Un;let Ne=null;const Oe=new Jt(0);let Be=0,He=t.width,ct=t.height,Ve=1,Ct=null,Gt=null;const pn=new Un(0,0,He,ct),qn=new Un(0,0,He,ct);let yi=!1;const bi=new od;let rt=!1,Xt=!1;const At=new xn,In=new re,gn=new Un,kn={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let Ki=!1;function Ue(){return Q===null?Ve:1}let ee=i;function ve(ne,Ee){return t.getContext(ne,Ee)}try{const ne={alpha:!0,depth:s,stencil:r,antialias:u,premultipliedAlpha:d,preserveDrawingBuffer:f,powerPreference:g,failIfMajorPerformanceCaveat:x};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${fp}`),t.addEventListener("webglcontextlost",Ht,!1),t.addEventListener("webglcontextrestored",Qt,!1),t.addEventListener("webglcontextcreationerror",wt,!1),ee===null){const Ee="webgl2";if(ee=ve(Ee,ne),ee===null)throw ve(Ee)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(ne){throw console.error("THREE.WebGLRenderer: "+ne.message),ne}let de,we,Ie,lt,Xe,qe,Ft,Bt,se,X,Se,Me,Ge,De,Et,et,kt,It,Ye,mt,ft,Lt,yt,bn;function ge(){de=new i9(ee),de.init(),Lt=new VY(ee,de),we=new Kq(ee,de,e,Lt),Ie=new BY(ee,de),we.reversedDepthBuffer&&v&&Ie.buffers.depth.setReversed(!0),lt=new o9(ee),Xe=new MY,qe=new OY(ee,de,Ie,Xe,we,Lt,lt),Ft=new jq(B),Bt=new n9(B),se=new d6(ee),yt=new Yq(ee,se),X=new s9(ee,se,lt,yt),Se=new l9(ee,X,se,lt),Ye=new a9(ee,we,qe),et=new Jq(Xe),Me=new TY(B,Ft,Bt,de,we,yt,et),Ge=new $Y(B,Xe),De=new AY,Et=new IY(de),It=new qq(B,Ft,Bt,Ie,Se,S,d),kt=new UY(B,Se,we),bn=new XY(ee,lt,we,Ie),mt=new Zq(ee,de,lt),ft=new r9(ee,de,lt),lt.programs=Me.programs,B.capabilities=we,B.extensions=de,B.properties=Xe,B.renderLists=De,B.shadowMap=kt,B.state=Ie,B.info=lt}ge();const bt=new HY(B,ee);this.xr=bt,this.getContext=function(){return ee},this.getContextAttributes=function(){return ee.getContextAttributes()},this.forceContextLoss=function(){const ne=de.get("WEBGL_lose_context");ne&&ne.loseContext()},this.forceContextRestore=function(){const ne=de.get("WEBGL_lose_context");ne&&ne.restoreContext()},this.getPixelRatio=function(){return Ve},this.setPixelRatio=function(ne){ne!==void 0&&(Ve=ne,this.setSize(He,ct,!1))},this.getSize=function(ne){return ne.set(He,ct)},this.setSize=function(ne,Ee,ze=!0){if(bt.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}He=ne,ct=Ee,t.width=Math.floor(ne*Ve),t.height=Math.floor(Ee*Ve),ze===!0&&(t.style.width=ne+"px",t.style.height=Ee+"px"),this.setViewport(0,0,ne,Ee)},this.getDrawingBufferSize=function(ne){return ne.set(He*Ve,ct*Ve).floor()},this.setDrawingBufferSize=function(ne,Ee,ze){He=ne,ct=Ee,Ve=ze,t.width=Math.floor(ne*ze),t.height=Math.floor(Ee*ze),this.setViewport(0,0,ne,Ee)},this.getCurrentViewport=function(ne){return ne.copy(oe)},this.getViewport=function(ne){return ne.copy(pn)},this.setViewport=function(ne,Ee,ze,ke){ne.isVector4?pn.set(ne.x,ne.y,ne.z,ne.w):pn.set(ne,Ee,ze,ke),Ie.viewport(oe.copy(pn).multiplyScalar(Ve).round())},this.getScissor=function(ne){return ne.copy(qn)},this.setScissor=function(ne,Ee,ze,ke){ne.isVector4?qn.set(ne.x,ne.y,ne.z,ne.w):qn.set(ne,Ee,ze,ke),Ie.scissor(Ce.copy(qn).multiplyScalar(Ve).round())},this.getScissorTest=function(){return yi},this.setScissorTest=function(ne){Ie.setScissorTest(yi=ne)},this.setOpaqueSort=function(ne){Ct=ne},this.setTransparentSort=function(ne){Gt=ne},this.getClearColor=function(ne){return ne.copy(It.getClearColor())},this.setClearColor=function(){It.setClearColor(...arguments)},this.getClearAlpha=function(){return It.getClearAlpha()},this.setClearAlpha=function(){It.setClearAlpha(...arguments)},this.clear=function(ne=!0,Ee=!0,ze=!0){let ke=0;if(ne){let Re=!1;if(Q!==null){const Nt=Q.texture.format;Re=Nt===sd||Nt===id||Nt===eu}if(Re){const Nt=Q.texture.type,en=Nt===Ts||Nt===rs||Nt===ua||Nt===Mo||Nt===Cg||Nt===Ng,_n=It.getClearColor(),fn=It.getClearAlpha(),Gn=_n.r,$n=_n.g,Fn=_n.b;en?(T[0]=Gn,T[1]=$n,T[2]=Fn,T[3]=fn,ee.clearBufferuiv(ee.COLOR,0,T)):(E[0]=Gn,E[1]=$n,E[2]=Fn,E[3]=fn,ee.clearBufferiv(ee.COLOR,0,E))}else ke|=ee.COLOR_BUFFER_BIT}Ee&&(ke|=ee.DEPTH_BUFFER_BIT),ze&&(ke|=ee.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),ee.clear(ke)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",Ht,!1),t.removeEventListener("webglcontextrestored",Qt,!1),t.removeEventListener("webglcontextcreationerror",wt,!1),It.dispose(),De.dispose(),Et.dispose(),Xe.dispose(),Ft.dispose(),Bt.dispose(),Se.dispose(),yt.dispose(),bn.dispose(),Me.dispose(),bt.dispose(),bt.removeEventListener("sessionstart",vs),bt.removeEventListener("sessionend",Sl),Qo.stop()};function Ht(ne){ne.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),k=!0}function Qt(){console.log("THREE.WebGLRenderer: Context Restored."),k=!1;const ne=lt.autoReset,Ee=kt.enabled,ze=kt.autoUpdate,ke=kt.needsUpdate,Re=kt.type;ge(),lt.autoReset=ne,kt.enabled=Ee,kt.autoUpdate=ze,kt.needsUpdate=ke,kt.type=Re}function wt(ne){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",ne.statusMessage)}function ut(ne){const Ee=ne.target;Ee.removeEventListener("dispose",ut),ln(Ee)}function ln(ne){Yn(ne),Xe.remove(ne)}function Yn(ne){const Ee=Xe.get(ne).programs;Ee!==void 0&&(Ee.forEach(function(ze){Me.releaseProgram(ze)}),ne.isShaderMaterial&&Me.releaseShaderCache(ne))}this.renderBufferDirect=function(ne,Ee,ze,ke,Re,Nt){Ee===null&&(Ee=kn);const en=Re.isMesh&&Re.matrixWorld.determinant()<0,_n=dd(ne,Ee,ze,ke,Re);Ie.setMaterial(ke,en);let fn=ze.index,Gn=1;if(ke.wireframe===!0){if(fn=X.getWireframeAttribute(ze),fn===void 0)return;Gn=2}const $n=ze.drawRange,Fn=ze.attributes.position;let gi=$n.start*Gn,Ui=($n.start+$n.count)*Gn;Nt!==null&&(gi=Math.max(gi,Nt.start*Gn),Ui=Math.min(Ui,(Nt.start+Nt.count)*Gn)),fn!==null?(gi=Math.max(gi,0),Ui=Math.min(Ui,fn.count)):Fn!=null&&(gi=Math.max(gi,0),Ui=Math.min(Ui,Fn.count));const fs=Ui-gi;if(fs<0||fs===1/0)return;yt.setup(Re,ke,_n,ze,fn);let Ji,ki=mt;if(fn!==null&&(Ji=se.get(fn),ki=ft,ki.setIndex(Ji)),Re.isMesh)ke.wireframe===!0?(Ie.setLineWidth(ke.wireframeLinewidth*Ue()),ki.setMode(ee.LINES)):ki.setMode(ee.TRIANGLES);else if(Re.isLine){let Vn=ke.linewidth;Vn===void 0&&(Vn=1),Ie.setLineWidth(Vn*Ue()),Re.isLineSegments?ki.setMode(ee.LINES):Re.isLineLoop?ki.setMode(ee.LINE_LOOP):ki.setMode(ee.LINE_STRIP)}else Re.isPoints?ki.setMode(ee.POINTS):Re.isSprite&&ki.setMode(ee.TRIANGLES);if(Re.isBatchedMesh)if(Re._multiDrawInstances!==null)Eo("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),ki.renderMultiDrawInstances(Re._multiDrawStarts,Re._multiDrawCounts,Re._multiDrawCount,Re._multiDrawInstances);else if(de.get("WEBGL_multi_draw"))ki.renderMultiDraw(Re._multiDrawStarts,Re._multiDrawCounts,Re._multiDrawCount);else{const Vn=Re._multiDrawStarts,as=Re._multiDrawCounts,wi=Re._multiDrawCount,ur=fn?se.get(fn).bytesPerElement:1,Ta=Xe.get(ke).currentProgram.getUniforms();for(let hr=0;hr<wi;hr++)Ta.setValue(ee,"_gl_DrawID",hr),ki.render(Vn[hr]/ur,as[hr])}else if(Re.isInstancedMesh)ki.renderInstances(gi,fs,Re.count);else if(ze.isInstancedBufferGeometry){const Vn=ze._maxInstanceCount!==void 0?ze._maxInstanceCount:1/0,as=Math.min(ze.instanceCount,Vn);ki.renderInstances(gi,fs,as)}else ki.render(gi,fs)};function Pi(ne,Ee,ze){ne.transparent===!0&&ne.side===_r&&ne.forceSinglePass===!1?(ne.side=ns,ne.needsUpdate=!0,Xs(ne,Ee,ze),ne.side=ao,ne.needsUpdate=!0,Xs(ne,Ee,ze),ne.side=_r):Xs(ne,Ee,ze)}this.compile=function(ne,Ee,ze=null){ze===null&&(ze=ne),w=Et.get(ze),w.init(Ee),F.push(w),ze.traverseVisible(function(Re){Re.isLight&&Re.layers.test(Ee.layers)&&(w.pushLight(Re),Re.castShadow&&w.pushShadow(Re))}),ne!==ze&&ne.traverseVisible(function(Re){Re.isLight&&Re.layers.test(Ee.layers)&&(w.pushLight(Re),Re.castShadow&&w.pushShadow(Re))}),w.setupLights();const ke=new Set;return ne.traverse(function(Re){if(!(Re.isMesh||Re.isPoints||Re.isLine||Re.isSprite))return;const Nt=Re.material;if(Nt)if(Array.isArray(Nt))for(let en=0;en<Nt.length;en++){const _n=Nt[en];Pi(_n,ze,Re),ke.add(_n)}else Pi(Nt,ze,Re),ke.add(Nt)}),w=F.pop(),ke},this.compileAsync=function(ne,Ee,ze=null){const ke=this.compile(ne,Ee,ze);return new Promise(Re=>{function Nt(){if(ke.forEach(function(en){Xe.get(en).currentProgram.isReady()&&ke.delete(en)}),ke.size===0){Re(ne);return}setTimeout(Nt,10)}de.get("KHR_parallel_shader_compile")!==null?Nt():setTimeout(Nt,10)})};let Ii=null;function nr(ne){Ii&&Ii(ne)}function vs(){Qo.stop()}function Sl(){Qo.start()}const Qo=new ZL;Qo.setAnimationLoop(nr),typeof self<"u"&&Qo.setContext(self),this.setAnimationLoop=function(ne){Ii=ne,bt.setAnimationLoop(ne),ne===null?Qo.stop():Qo.start()},bt.addEventListener("sessionstart",vs),bt.addEventListener("sessionend",Sl),this.render=function(ne,Ee){if(Ee!==void 0&&Ee.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(k===!0)return;if(ne.matrixWorldAutoUpdate===!0&&ne.updateMatrixWorld(),Ee.parent===null&&Ee.matrixWorldAutoUpdate===!0&&Ee.updateMatrixWorld(),bt.enabled===!0&&bt.isPresenting===!0&&(bt.cameraAutoUpdate===!0&&bt.updateCamera(Ee),Ee=bt.getCamera()),ne.isScene===!0&&ne.onBeforeRender(B,ne,Ee,Q),w=Et.get(ne,F.length),w.init(Ee),F.push(w),At.multiplyMatrices(Ee.projectionMatrix,Ee.matrixWorldInverse),bi.setFromProjectionMatrix(At,xr,Ee.reversedDepth),Xt=this.localClippingEnabled,rt=et.init(this.clippingPlanes,Xt),A=De.get(ne,O.length),A.init(),O.push(A),bt.enabled===!0&&bt.isPresenting===!0){const Nt=B.xr.getDepthSensingMesh();Nt!==null&&hc(Nt,Ee,-1/0,B.sortObjects)}hc(ne,Ee,0,B.sortObjects),A.finish(),B.sortObjects===!0&&A.sort(Ct,Gt),Ki=bt.enabled===!1||bt.isPresenting===!1||bt.hasDepthSensing()===!1,Ki&&It.addToRenderList(A,ne),this.info.render.frame++,rt===!0&&et.beginShadows();const ze=w.state.shadowsArray;kt.render(ze,ne,Ee),rt===!0&&et.endShadows(),this.info.autoReset===!0&&this.info.reset();const ke=A.opaque,Re=A.transmissive;if(w.setupLights(),Ee.isArrayCamera){const Nt=Ee.cameras;if(Re.length>0)for(let en=0,_n=Nt.length;en<_n;en++){const fn=Nt[en];ud(ke,Re,ne,fn)}Ki&&It.render(ne);for(let en=0,_n=Nt.length;en<_n;en++){const fn=Nt[en];bl(A,ne,fn,fn.viewport)}}else Re.length>0&&ud(ke,Re,ne,Ee),Ki&&It.render(ne),bl(A,ne,Ee);Q!==null&&$===0&&(qe.updateMultisampleRenderTarget(Q),qe.updateRenderTargetMipmap(Q)),ne.isScene===!0&&ne.onAfterRender(B,ne,Ee),yt.resetDefaultState(),z=-1,q=null,F.pop(),F.length>0?(w=F[F.length-1],rt===!0&&et.setGlobalState(B.clippingPlanes,w.state.camera)):w=null,O.pop(),O.length>0?A=O[O.length-1]:A=null};function hc(ne,Ee,ze,ke){if(ne.visible===!1)return;if(ne.layers.test(Ee.layers)){if(ne.isGroup)ze=ne.renderOrder;else if(ne.isLOD)ne.autoUpdate===!0&&ne.update(Ee);else if(ne.isLight)w.pushLight(ne),ne.castShadow&&w.pushShadow(ne);else if(ne.isSprite){if(!ne.frustumCulled||bi.intersectsSprite(ne)){ke&&gn.setFromMatrixPosition(ne.matrixWorld).applyMatrix4(At);const en=Se.update(ne),_n=ne.material;_n.visible&&A.push(ne,en,_n,ze,gn.z,null)}}else if((ne.isMesh||ne.isLine||ne.isPoints)&&(!ne.frustumCulled||bi.intersectsObject(ne))){const en=Se.update(ne),_n=ne.material;if(ke&&(ne.boundingSphere!==void 0?(ne.boundingSphere===null&&ne.computeBoundingSphere(),gn.copy(ne.boundingSphere.center)):(en.boundingSphere===null&&en.computeBoundingSphere(),gn.copy(en.boundingSphere.center)),gn.applyMatrix4(ne.matrixWorld).applyMatrix4(At)),Array.isArray(_n)){const fn=en.groups;for(let Gn=0,$n=fn.length;Gn<$n;Gn++){const Fn=fn[Gn],gi=_n[Fn.materialIndex];gi&&gi.visible&&A.push(ne,en,gi,ze,gn.z,Fn)}}else _n.visible&&A.push(ne,en,_n,ze,gn.z,null)}}const Nt=ne.children;for(let en=0,_n=Nt.length;en<_n;en++)hc(Nt[en],Ee,ze,ke)}function bl(ne,Ee,ze,ke){const Re=ne.opaque,Nt=ne.transmissive,en=ne.transparent;w.setupLightsView(ze),rt===!0&&et.setGlobalState(B.clippingPlanes,ze),ke&&Ie.viewport(oe.copy(ke)),Re.length>0&&dc(Re,Ee,ze),Nt.length>0&&dc(Nt,Ee,ze),en.length>0&&dc(en,Ee,ze),Ie.buffers.depth.setTest(!0),Ie.buffers.depth.setMask(!0),Ie.buffers.color.setMask(!0),Ie.setPolygonOffset(!1)}function ud(ne,Ee,ze,ke){if((ze.isScene===!0?ze.overrideMaterial:null)!==null)return;w.state.transmissionRenderTarget[ke.id]===void 0&&(w.state.transmissionRenderTarget[ke.id]=new Yo(1,1,{generateMipmaps:!0,type:de.has("EXT_color_buffer_half_float")||de.has("EXT_color_buffer_float")?Qs:Ts,minFilter:Cr,samples:4,stencilBuffer:r,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:zn.workingColorSpace}));const Nt=w.state.transmissionRenderTarget[ke.id],en=ke.viewport||oe;Nt.setSize(en.z*B.transmissionResolutionScale,en.w*B.transmissionResolutionScale);const _n=B.getRenderTarget(),fn=B.getActiveCubeFace(),Gn=B.getActiveMipmapLevel();B.setRenderTarget(Nt),B.getClearColor(Oe),Be=B.getClearAlpha(),Be<1&&B.setClearColor(16777215,.5),B.clear(),Ki&&It.render(ze);const $n=B.toneMapping;B.toneMapping=Nr;const Fn=ke.viewport;if(ke.viewport!==void 0&&(ke.viewport=void 0),w.setupLightsView(ke),rt===!0&&et.setGlobalState(B.clippingPlanes,ke),dc(ne,ze,ke),qe.updateMultisampleRenderTarget(Nt),qe.updateRenderTargetMipmap(Nt),de.has("WEBGL_multisampled_render_to_texture")===!1){let gi=!1;for(let Ui=0,fs=Ee.length;Ui<fs;Ui++){const Ji=Ee[Ui],ki=Ji.object,Vn=Ji.geometry,as=Ji.material,wi=Ji.group;if(as.side===_r&&ki.layers.test(ke.layers)){const ur=as.side;as.side=ns,as.needsUpdate=!0,hd(ki,ze,ke,Vn,as,wi),as.side=ur,as.needsUpdate=!0,gi=!0}}gi===!0&&(qe.updateMultisampleRenderTarget(Nt),qe.updateRenderTargetMipmap(Nt))}B.setRenderTarget(_n,fn,Gn),B.setClearColor(Oe,Be),Fn!==void 0&&(ke.viewport=Fn),B.toneMapping=$n}function dc(ne,Ee,ze){const ke=Ee.isScene===!0?Ee.overrideMaterial:null;for(let Re=0,Nt=ne.length;Re<Nt;Re++){const en=ne[Re],_n=en.object,fn=en.geometry,Gn=en.group;let $n=en.material;$n.allowOverride===!0&&ke!==null&&($n=ke),_n.layers.test(ze.layers)&&hd(_n,Ee,ze,fn,$n,Gn)}}function hd(ne,Ee,ze,ke,Re,Nt){ne.onBeforeRender(B,Ee,ze,ke,Re,Nt),ne.modelViewMatrix.multiplyMatrices(ze.matrixWorldInverse,ne.matrixWorld),ne.normalMatrix.getNormalMatrix(ne.modelViewMatrix),Re.onBeforeRender(B,Ee,ze,ke,ne,Nt),Re.transparent===!0&&Re.side===_r&&Re.forceSinglePass===!1?(Re.side=ns,Re.needsUpdate=!0,B.renderBufferDirect(ze,Ee,ke,Re,ne,Nt),Re.side=ao,Re.needsUpdate=!0,B.renderBufferDirect(ze,Ee,ke,Re,ne,Nt),Re.side=_r):B.renderBufferDirect(ze,Ee,ke,Re,ne,Nt),ne.onAfterRender(B,Ee,ze,ke,Re,Nt)}function Xs(ne,Ee,ze){Ee.isScene!==!0&&(Ee=kn);const ke=Xe.get(ne),Re=w.state.lights,Nt=w.state.shadowsArray,en=Re.state.version,_n=Me.getParameters(ne,Re.state,Nt,Ee,ze),fn=Me.getProgramCacheKey(_n);let Gn=ke.programs;ke.environment=ne.isMeshStandardMaterial?Ee.environment:null,ke.fog=Ee.fog,ke.envMap=(ne.isMeshStandardMaterial?Bt:Ft).get(ne.envMap||ke.environment),ke.envMapRotation=ke.environment!==null&&ne.envMap===null?Ee.environmentRotation:ne.envMapRotation,Gn===void 0&&(ne.addEventListener("dispose",ut),Gn=new Map,ke.programs=Gn);let $n=Gn.get(fn);if($n!==void 0){if(ke.currentProgram===$n&&ke.lightsStateVersion===en)return Ml(ne,_n),$n}else _n.uniforms=Me.getUniforms(ne),ne.onBeforeCompile(_n,B),$n=Me.acquireProgram(_n,fn),Gn.set(fn,$n),ke.uniforms=_n.uniforms;const Fn=ke.uniforms;return(!ne.isShaderMaterial&&!ne.isRawShaderMaterial||ne.clipping===!0)&&(Fn.clippingPlanes=et.uniform),Ml(ne,_n),ke.needsLights=Ap(ne),ke.lightsStateVersion=en,ke.needsLights&&(Fn.ambientLightColor.value=Re.state.ambient,Fn.lightProbe.value=Re.state.probe,Fn.directionalLights.value=Re.state.directional,Fn.directionalLightShadows.value=Re.state.directionalShadow,Fn.spotLights.value=Re.state.spot,Fn.spotLightShadows.value=Re.state.spotShadow,Fn.rectAreaLights.value=Re.state.rectArea,Fn.ltc_1.value=Re.state.rectAreaLTC1,Fn.ltc_2.value=Re.state.rectAreaLTC2,Fn.pointLights.value=Re.state.point,Fn.pointLightShadows.value=Re.state.pointShadow,Fn.hemisphereLights.value=Re.state.hemi,Fn.directionalShadowMap.value=Re.state.directionalShadowMap,Fn.directionalShadowMatrix.value=Re.state.directionalShadowMatrix,Fn.spotShadowMap.value=Re.state.spotShadowMap,Fn.spotLightMatrix.value=Re.state.spotLightMatrix,Fn.spotLightMap.value=Re.state.spotLightMap,Fn.pointShadowMap.value=Re.state.pointShadowMap,Fn.pointShadowMatrix.value=Re.state.pointShadowMatrix),ke.currentProgram=$n,ke.uniformsList=null,$n}function Tl(ne){if(ne.uniformsList===null){const Ee=ne.currentProgram.getUniforms();ne.uniformsList=$y.seqWithValue(Ee.seq,ne.uniforms)}return ne.uniformsList}function Ml(ne,Ee){const ze=Xe.get(ne);ze.outputColorSpace=Ee.outputColorSpace,ze.batching=Ee.batching,ze.batchingColor=Ee.batchingColor,ze.instancing=Ee.instancing,ze.instancingColor=Ee.instancingColor,ze.instancingMorph=Ee.instancingMorph,ze.skinning=Ee.skinning,ze.morphTargets=Ee.morphTargets,ze.morphNormals=Ee.morphNormals,ze.morphColors=Ee.morphColors,ze.morphTargetsCount=Ee.morphTargetsCount,ze.numClippingPlanes=Ee.numClippingPlanes,ze.numIntersection=Ee.numClipIntersection,ze.vertexAlphas=Ee.vertexAlphas,ze.vertexTangents=Ee.vertexTangents,ze.toneMapping=Ee.toneMapping}function dd(ne,Ee,ze,ke,Re){Ee.isScene!==!0&&(Ee=kn),qe.resetTextureUnits();const Nt=Ee.fog,en=ke.isMeshStandardMaterial?Ee.environment:null,_n=Q===null?B.outputColorSpace:Q.isXRRenderTarget===!0?Q.texture.colorSpace:sc,fn=(ke.isMeshStandardMaterial?Bt:Ft).get(ke.envMap||en),Gn=ke.vertexColors===!0&&!!ze.attributes.color&&ze.attributes.color.itemSize===4,$n=!!ze.attributes.tangent&&(!!ke.normalMap||ke.anisotropy>0),Fn=!!ze.morphAttributes.position,gi=!!ze.morphAttributes.normal,Ui=!!ze.morphAttributes.color;let fs=Nr;ke.toneMapped&&(Q===null||Q.isXRRenderTarget===!0)&&(fs=B.toneMapping);const Ji=ze.morphAttributes.position||ze.morphAttributes.normal||ze.morphAttributes.color,ki=Ji!==void 0?Ji.length:0,Vn=Xe.get(ke),as=w.state.lights;if(rt===!0&&(Xt===!0||ne!==q)){const qs=ne===q&&ke.id===z;et.setState(ke,ne,qs)}let wi=!1;ke.version===Vn.__version?(Vn.needsLights&&Vn.lightsStateVersion!==as.state.version||Vn.outputColorSpace!==_n||Re.isBatchedMesh&&Vn.batching===!1||!Re.isBatchedMesh&&Vn.batching===!0||Re.isBatchedMesh&&Vn.batchingColor===!0&&Re.colorTexture===null||Re.isBatchedMesh&&Vn.batchingColor===!1&&Re.colorTexture!==null||Re.isInstancedMesh&&Vn.instancing===!1||!Re.isInstancedMesh&&Vn.instancing===!0||Re.isSkinnedMesh&&Vn.skinning===!1||!Re.isSkinnedMesh&&Vn.skinning===!0||Re.isInstancedMesh&&Vn.instancingColor===!0&&Re.instanceColor===null||Re.isInstancedMesh&&Vn.instancingColor===!1&&Re.instanceColor!==null||Re.isInstancedMesh&&Vn.instancingMorph===!0&&Re.morphTexture===null||Re.isInstancedMesh&&Vn.instancingMorph===!1&&Re.morphTexture!==null||Vn.envMap!==fn||ke.fog===!0&&Vn.fog!==Nt||Vn.numClippingPlanes!==void 0&&(Vn.numClippingPlanes!==et.numPlanes||Vn.numIntersection!==et.numIntersection)||Vn.vertexAlphas!==Gn||Vn.vertexTangents!==$n||Vn.morphTargets!==Fn||Vn.morphNormals!==gi||Vn.morphColors!==Ui||Vn.toneMapping!==fs||Vn.morphTargetsCount!==ki)&&(wi=!0):(wi=!0,Vn.__version=ke.version);let ur=Vn.currentProgram;wi===!0&&(ur=Xs(ke,Ee,Re));let Ta=!1,hr=!1,qa=!1;const ls=ur.getUniforms(),dr=Vn.uniforms;if(Ie.useProgram(ur.program)&&(Ta=!0,hr=!0,qa=!0),ke.id!==z&&(z=ke.id,hr=!0),Ta||q!==ne){Ie.buffers.depth.getReversed()&&ne.reversedDepth!==!0&&(ne._reversedDepth=!0,ne.updateProjectionMatrix()),ls.setValue(ee,"projectionMatrix",ne.projectionMatrix),ls.setValue(ee,"viewMatrix",ne.matrixWorldInverse);const fr=ls.map.cameraPosition;fr!==void 0&&fr.setValue(ee,In.setFromMatrixPosition(ne.matrixWorld)),we.logarithmicDepthBuffer&&ls.setValue(ee,"logDepthBufFC",2/(Math.log(ne.far+1)/Math.LN2)),(ke.isMeshPhongMaterial||ke.isMeshToonMaterial||ke.isMeshLambertMaterial||ke.isMeshBasicMaterial||ke.isMeshStandardMaterial||ke.isShaderMaterial)&&ls.setValue(ee,"isOrthographic",ne.isOrthographicCamera===!0),q!==ne&&(q=ne,hr=!0,qa=!0)}if(Re.isSkinnedMesh){ls.setOptional(ee,Re,"bindMatrix"),ls.setOptional(ee,Re,"bindMatrixInverse");const qs=Re.skeleton;qs&&(qs.boneTexture===null&&qs.computeBoneTexture(),ls.setValue(ee,"boneTexture",qs.boneTexture,qe))}Re.isBatchedMesh&&(ls.setOptional(ee,Re,"batchingTexture"),ls.setValue(ee,"batchingTexture",Re._matricesTexture,qe),ls.setOptional(ee,Re,"batchingIdTexture"),ls.setValue(ee,"batchingIdTexture",Re._indirectTexture,qe),ls.setOptional(ee,Re,"batchingColorTexture"),Re._colorsTexture!==null&&ls.setValue(ee,"batchingColorTexture",Re._colorsTexture,qe));const Tr=ze.morphAttributes;if((Tr.position!==void 0||Tr.normal!==void 0||Tr.color!==void 0)&&Ye.update(Re,ze,ur),(hr||Vn.receiveShadow!==Re.receiveShadow)&&(Vn.receiveShadow=Re.receiveShadow,ls.setValue(ee,"receiveShadow",Re.receiveShadow)),ke.isMeshGouraudMaterial&&ke.envMap!==null&&(dr.envMap.value=fn,dr.flipEnvMap.value=fn.isCubeTexture&&fn.isRenderTargetTexture===!1?-1:1),ke.isMeshStandardMaterial&&ke.envMap===null&&Ee.environment!==null&&(dr.envMapIntensity.value=Ee.environmentIntensity),hr&&(ls.setValue(ee,"toneMappingExposure",B.toneMappingExposure),Vn.needsLights&&pu(dr,qa),Nt&&ke.fog===!0&&Ge.refreshFogUniforms(dr,Nt),Ge.refreshMaterialUniforms(dr,ke,Ve,ct,w.state.transmissionRenderTarget[ne.id]),$y.upload(ee,Tl(Vn),dr,qe)),ke.isShaderMaterial&&ke.uniformsNeedUpdate===!0&&($y.upload(ee,Tl(Vn),dr,qe),ke.uniformsNeedUpdate=!1),ke.isSpriteMaterial&&ls.setValue(ee,"center",Re.center),ls.setValue(ee,"modelViewMatrix",Re.modelViewMatrix),ls.setValue(ee,"normalMatrix",Re.normalMatrix),ls.setValue(ee,"modelMatrix",Re.matrixWorld),ke.isShaderMaterial||ke.isRawShaderMaterial){const qs=ke.uniformsGroups;for(let fr=0,fc=qs.length;fr<fc;fr++){const ea=qs[fr];bn.update(ea,ur),bn.bind(ea,ur)}}return ur}function pu(ne,Ee){ne.ambientLightColor.needsUpdate=Ee,ne.lightProbe.needsUpdate=Ee,ne.directionalLights.needsUpdate=Ee,ne.directionalLightShadows.needsUpdate=Ee,ne.pointLights.needsUpdate=Ee,ne.pointLightShadows.needsUpdate=Ee,ne.spotLights.needsUpdate=Ee,ne.spotLightShadows.needsUpdate=Ee,ne.rectAreaLights.needsUpdate=Ee,ne.hemisphereLights.needsUpdate=Ee}function Ap(ne){return ne.isMeshLambertMaterial||ne.isMeshToonMaterial||ne.isMeshPhongMaterial||ne.isMeshStandardMaterial||ne.isShadowMaterial||ne.isShaderMaterial&&ne.lights===!0}this.getActiveCubeFace=function(){return Y},this.getActiveMipmapLevel=function(){return $},this.getRenderTarget=function(){return Q},this.setRenderTargetTextures=function(ne,Ee,ze){const ke=Xe.get(ne);ke.__autoAllocateDepthBuffer=ne.resolveDepthBuffer===!1,ke.__autoAllocateDepthBuffer===!1&&(ke.__useRenderToTexture=!1),Xe.get(ne.texture).__webglTexture=Ee,Xe.get(ne.depthTexture).__webglTexture=ke.__autoAllocateDepthBuffer?void 0:ze,ke.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(ne,Ee){const ze=Xe.get(ne);ze.__webglFramebuffer=Ee,ze.__useDefaultFramebuffer=Ee===void 0};const fd=ee.createFramebuffer();this.setRenderTarget=function(ne,Ee=0,ze=0){Q=ne,Y=Ee,$=ze;let ke=!0,Re=null,Nt=!1,en=!1;if(ne){const fn=Xe.get(ne);if(fn.__useDefaultFramebuffer!==void 0)Ie.bindFramebuffer(ee.FRAMEBUFFER,null),ke=!1;else if(fn.__webglFramebuffer===void 0)qe.setupRenderTarget(ne);else if(fn.__hasExternalTextures)qe.rebindTextures(ne,Xe.get(ne.texture).__webglTexture,Xe.get(ne.depthTexture).__webglTexture);else if(ne.depthBuffer){const Fn=ne.depthTexture;if(fn.__boundDepthTexture!==Fn){if(Fn!==null&&Xe.has(Fn)&&(ne.width!==Fn.image.width||ne.height!==Fn.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");qe.setupDepthRenderbuffer(ne)}}const Gn=ne.texture;(Gn.isData3DTexture||Gn.isDataArrayTexture||Gn.isCompressedArrayTexture)&&(en=!0);const $n=Xe.get(ne).__webglFramebuffer;ne.isWebGLCubeRenderTarget?(Array.isArray($n[Ee])?Re=$n[Ee][ze]:Re=$n[Ee],Nt=!0):ne.samples>0&&qe.useMultisampledRTT(ne)===!1?Re=Xe.get(ne).__webglMultisampledFramebuffer:Array.isArray($n)?Re=$n[ze]:Re=$n,oe.copy(ne.viewport),Ce.copy(ne.scissor),Ne=ne.scissorTest}else oe.copy(pn).multiplyScalar(Ve).floor(),Ce.copy(qn).multiplyScalar(Ve).floor(),Ne=yi;if(ze!==0&&(Re=fd),Ie.bindFramebuffer(ee.FRAMEBUFFER,Re)&&ke&&Ie.drawBuffers(ne,Re),Ie.viewport(oe),Ie.scissor(Ce),Ie.setScissorTest(Ne),Nt){const fn=Xe.get(ne.texture);ee.framebufferTexture2D(ee.FRAMEBUFFER,ee.COLOR_ATTACHMENT0,ee.TEXTURE_CUBE_MAP_POSITIVE_X+Ee,fn.__webglTexture,ze)}else if(en){const fn=Ee;for(let Gn=0;Gn<ne.textures.length;Gn++){const $n=Xe.get(ne.textures[Gn]);ee.framebufferTextureLayer(ee.FRAMEBUFFER,ee.COLOR_ATTACHMENT0+Gn,$n.__webglTexture,ze,fn)}}else if(ne!==null&&ze!==0){const fn=Xe.get(ne.texture);ee.framebufferTexture2D(ee.FRAMEBUFFER,ee.COLOR_ATTACHMENT0,ee.TEXTURE_2D,fn.__webglTexture,ze)}z=-1},this.readRenderTargetPixels=function(ne,Ee,ze,ke,Re,Nt,en,_n=0){if(!(ne&&ne.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let fn=Xe.get(ne).__webglFramebuffer;if(ne.isWebGLCubeRenderTarget&&en!==void 0&&(fn=fn[en]),fn){Ie.bindFramebuffer(ee.FRAMEBUFFER,fn);try{const Gn=ne.textures[_n],$n=Gn.format,Fn=Gn.type;if(!we.textureFormatReadable($n)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!we.textureTypeReadable(Fn)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}Ee>=0&&Ee<=ne.width-ke&&ze>=0&&ze<=ne.height-Re&&(ne.textures.length>1&&ee.readBuffer(ee.COLOR_ATTACHMENT0+_n),ee.readPixels(Ee,ze,ke,Re,Lt.convert($n),Lt.convert(Fn),Nt))}finally{const Gn=Q!==null?Xe.get(Q).__webglFramebuffer:null;Ie.bindFramebuffer(ee.FRAMEBUFFER,Gn)}}},this.readRenderTargetPixelsAsync=async function(ne,Ee,ze,ke,Re,Nt,en,_n=0){if(!(ne&&ne.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let fn=Xe.get(ne).__webglFramebuffer;if(ne.isWebGLCubeRenderTarget&&en!==void 0&&(fn=fn[en]),fn)if(Ee>=0&&Ee<=ne.width-ke&&ze>=0&&ze<=ne.height-Re){Ie.bindFramebuffer(ee.FRAMEBUFFER,fn);const Gn=ne.textures[_n],$n=Gn.format,Fn=Gn.type;if(!we.textureFormatReadable($n))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!we.textureTypeReadable(Fn))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const gi=ee.createBuffer();ee.bindBuffer(ee.PIXEL_PACK_BUFFER,gi),ee.bufferData(ee.PIXEL_PACK_BUFFER,Nt.byteLength,ee.STREAM_READ),ne.textures.length>1&&ee.readBuffer(ee.COLOR_ATTACHMENT0+_n),ee.readPixels(Ee,ze,ke,Re,Lt.convert($n),Lt.convert(Fn),0);const Ui=Q!==null?Xe.get(Q).__webglFramebuffer:null;Ie.bindFramebuffer(ee.FRAMEBUFFER,Ui);const fs=ee.fenceSync(ee.SYNC_GPU_COMMANDS_COMPLETE,0);return ee.flush(),await I5(ee,fs,4),ee.bindBuffer(ee.PIXEL_PACK_BUFFER,gi),ee.getBufferSubData(ee.PIXEL_PACK_BUFFER,0,Nt),ee.deleteBuffer(gi),ee.deleteSync(fs),Nt}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")},this.copyFramebufferToTexture=function(ne,Ee=null,ze=0){const ke=Math.pow(2,-ze),Re=Math.floor(ne.image.width*ke),Nt=Math.floor(ne.image.height*ke),en=Ee!==null?Ee.x:0,_n=Ee!==null?Ee.y:0;qe.setTexture2D(ne,0),ee.copyTexSubImage2D(ee.TEXTURE_2D,ze,0,0,en,_n,Re,Nt),Ie.unbindTexture()};const j0=ee.createFramebuffer(),pd=ee.createFramebuffer();this.copyTextureToTexture=function(ne,Ee,ze=null,ke=null,Re=0,Nt=null){Nt===null&&(Re!==0?(Eo("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),Nt=Re,Re=0):Nt=0);let en,_n,fn,Gn,$n,Fn,gi,Ui,fs;const Ji=ne.isCompressedTexture?ne.mipmaps[Nt]:ne.image;if(ze!==null)en=ze.max.x-ze.min.x,_n=ze.max.y-ze.min.y,fn=ze.isBox3?ze.max.z-ze.min.z:1,Gn=ze.min.x,$n=ze.min.y,Fn=ze.isBox3?ze.min.z:0;else{const Tr=Math.pow(2,-Re);en=Math.floor(Ji.width*Tr),_n=Math.floor(Ji.height*Tr),ne.isDataArrayTexture?fn=Ji.depth:ne.isData3DTexture?fn=Math.floor(Ji.depth*Tr):fn=1,Gn=0,$n=0,Fn=0}ke!==null?(gi=ke.x,Ui=ke.y,fs=ke.z):(gi=0,Ui=0,fs=0);const ki=Lt.convert(Ee.format),Vn=Lt.convert(Ee.type);let as;Ee.isData3DTexture?(qe.setTexture3D(Ee,0),as=ee.TEXTURE_3D):Ee.isDataArrayTexture||Ee.isCompressedArrayTexture?(qe.setTexture2DArray(Ee,0),as=ee.TEXTURE_2D_ARRAY):(qe.setTexture2D(Ee,0),as=ee.TEXTURE_2D),ee.pixelStorei(ee.UNPACK_FLIP_Y_WEBGL,Ee.flipY),ee.pixelStorei(ee.UNPACK_PREMULTIPLY_ALPHA_WEBGL,Ee.premultiplyAlpha),ee.pixelStorei(ee.UNPACK_ALIGNMENT,Ee.unpackAlignment);const wi=ee.getParameter(ee.UNPACK_ROW_LENGTH),ur=ee.getParameter(ee.UNPACK_IMAGE_HEIGHT),Ta=ee.getParameter(ee.UNPACK_SKIP_PIXELS),hr=ee.getParameter(ee.UNPACK_SKIP_ROWS),qa=ee.getParameter(ee.UNPACK_SKIP_IMAGES);ee.pixelStorei(ee.UNPACK_ROW_LENGTH,Ji.width),ee.pixelStorei(ee.UNPACK_IMAGE_HEIGHT,Ji.height),ee.pixelStorei(ee.UNPACK_SKIP_PIXELS,Gn),ee.pixelStorei(ee.UNPACK_SKIP_ROWS,$n),ee.pixelStorei(ee.UNPACK_SKIP_IMAGES,Fn);const ls=ne.isDataArrayTexture||ne.isData3DTexture,dr=Ee.isDataArrayTexture||Ee.isData3DTexture;if(ne.isDepthTexture){const Tr=Xe.get(ne),qs=Xe.get(Ee),fr=Xe.get(Tr.__renderTarget),fc=Xe.get(qs.__renderTarget);Ie.bindFramebuffer(ee.READ_FRAMEBUFFER,fr.__webglFramebuffer),Ie.bindFramebuffer(ee.DRAW_FRAMEBUFFER,fc.__webglFramebuffer);for(let ea=0;ea<fn;ea++)ls&&(ee.framebufferTextureLayer(ee.READ_FRAMEBUFFER,ee.COLOR_ATTACHMENT0,Xe.get(ne).__webglTexture,Re,Fn+ea),ee.framebufferTextureLayer(ee.DRAW_FRAMEBUFFER,ee.COLOR_ATTACHMENT0,Xe.get(Ee).__webglTexture,Nt,fs+ea)),ee.blitFramebuffer(Gn,$n,en,_n,gi,Ui,en,_n,ee.DEPTH_BUFFER_BIT,ee.NEAREST);Ie.bindFramebuffer(ee.READ_FRAMEBUFFER,null),Ie.bindFramebuffer(ee.DRAW_FRAMEBUFFER,null)}else if(Re!==0||ne.isRenderTargetTexture||Xe.has(ne)){const Tr=Xe.get(ne),qs=Xe.get(Ee);Ie.bindFramebuffer(ee.READ_FRAMEBUFFER,j0),Ie.bindFramebuffer(ee.DRAW_FRAMEBUFFER,pd);for(let fr=0;fr<fn;fr++)ls?ee.framebufferTextureLayer(ee.READ_FRAMEBUFFER,ee.COLOR_ATTACHMENT0,Tr.__webglTexture,Re,Fn+fr):ee.framebufferTexture2D(ee.READ_FRAMEBUFFER,ee.COLOR_ATTACHMENT0,ee.TEXTURE_2D,Tr.__webglTexture,Re),dr?ee.framebufferTextureLayer(ee.DRAW_FRAMEBUFFER,ee.COLOR_ATTACHMENT0,qs.__webglTexture,Nt,fs+fr):ee.framebufferTexture2D(ee.DRAW_FRAMEBUFFER,ee.COLOR_ATTACHMENT0,ee.TEXTURE_2D,qs.__webglTexture,Nt),Re!==0?ee.blitFramebuffer(Gn,$n,en,_n,gi,Ui,en,_n,ee.COLOR_BUFFER_BIT,ee.NEAREST):dr?ee.copyTexSubImage3D(as,Nt,gi,Ui,fs+fr,Gn,$n,en,_n):ee.copyTexSubImage2D(as,Nt,gi,Ui,Gn,$n,en,_n);Ie.bindFramebuffer(ee.READ_FRAMEBUFFER,null),Ie.bindFramebuffer(ee.DRAW_FRAMEBUFFER,null)}else dr?ne.isDataTexture||ne.isData3DTexture?ee.texSubImage3D(as,Nt,gi,Ui,fs,en,_n,fn,ki,Vn,Ji.data):Ee.isCompressedArrayTexture?ee.compressedTexSubImage3D(as,Nt,gi,Ui,fs,en,_n,fn,ki,Ji.data):ee.texSubImage3D(as,Nt,gi,Ui,fs,en,_n,fn,ki,Vn,Ji):ne.isDataTexture?ee.texSubImage2D(ee.TEXTURE_2D,Nt,gi,Ui,en,_n,ki,Vn,Ji.data):ne.isCompressedTexture?ee.compressedTexSubImage2D(ee.TEXTURE_2D,Nt,gi,Ui,Ji.width,Ji.height,ki,Ji.data):ee.texSubImage2D(ee.TEXTURE_2D,Nt,gi,Ui,en,_n,ki,Vn,Ji);ee.pixelStorei(ee.UNPACK_ROW_LENGTH,wi),ee.pixelStorei(ee.UNPACK_IMAGE_HEIGHT,ur),ee.pixelStorei(ee.UNPACK_SKIP_PIXELS,Ta),ee.pixelStorei(ee.UNPACK_SKIP_ROWS,hr),ee.pixelStorei(ee.UNPACK_SKIP_IMAGES,qa),Nt===0&&Ee.generateMipmaps&&ee.generateMipmap(as),Ie.unbindTexture()},this.copyTextureToTexture3D=function(ne,Ee,ze=null,ke=null,Re=0){return Eo('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(ne,Ee,ze,ke,Re)},this.initRenderTarget=function(ne){Xe.get(ne).__webglFramebuffer===void 0&&qe.setupRenderTarget(ne)},this.initTexture=function(ne){ne.isCubeTexture?qe.setTextureCube(ne,0):ne.isData3DTexture?qe.setTexture3D(ne,0):ne.isDataArrayTexture||ne.isCompressedArrayTexture?qe.setTexture2DArray(ne,0):qe.setTexture2D(ne,0),Ie.unbindTexture()},this.resetState=function(){Y=0,$=0,Q=null,Ie.reset(),yt.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return xr}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=zn._getDrawingBufferColorSpace(e),t.unpackColorSpace=zn._getUnpackColorSpace()}}class tD{constructor(e,t,i){this.id=0,this.name=e,this.fg=t,this.bg=i,this.gradient=null,this.PR=Math.round(window.devicePixelRatio||1),this.WIDTH=90*this.PR,this.HEIGHT=48*this.PR,this.TEXT_X=3*this.PR,this.TEXT_Y=2*this.PR,this.GRAPH_X=3*this.PR,this.GRAPH_Y=15*this.PR,this.GRAPH_WIDTH=84*this.PR,this.GRAPH_HEIGHT=30*this.PR,this.canvas=document.createElement("canvas"),this.canvas.width=this.WIDTH,this.canvas.height=this.HEIGHT,this.canvas.style.width="90px",this.canvas.style.height="48px",this.canvas.style.position="absolute",this.canvas.style.cssText="width:90px;height:48px;background-color: transparent !important;",this.context=this.canvas.getContext("2d"),this.initializeCanvas()}createGradient(){if(!this.context)throw new Error("No context");const e=this.context.createLinearGradient(0,this.GRAPH_Y,0,this.GRAPH_Y+this.GRAPH_HEIGHT);let t;const i=this.fg;switch(this.fg.toLowerCase()){case"#0ff":t="#006666";break;case"#0f0":t="#006600";break;case"#ff0":t="#666600";break;case"#e1e1e1":t="#666666";break;default:t=this.bg;break}return e.addColorStop(0,t),e.addColorStop(1,i),e}initializeCanvas(){this.context&&(this.context.imageSmoothingEnabled=!1,this.context.font="bold "+9*this.PR+"px Helvetica,Arial,sans-serif",this.context.textBaseline="top",this.gradient=this.createGradient(),this.context.fillStyle=this.bg,this.context.fillRect(0,0,this.WIDTH,this.HEIGHT),this.context.fillStyle=this.fg,this.context.fillText(this.name,this.TEXT_X,this.TEXT_Y),this.context.fillStyle=this.bg,this.context.globalAlpha=.9,this.context.fillRect(this.GRAPH_X,this.GRAPH_Y,this.GRAPH_WIDTH,this.GRAPH_HEIGHT))}update(e,t,i=0){if(!this.context||!this.gradient)return;const s=Math.min(1/0,e),r=Math.max(t,e);this.context.globalAlpha=1,this.context.fillStyle=this.bg,this.context.fillRect(0,0,this.WIDTH,this.GRAPH_Y),this.context.fillStyle=this.fg,this.context.fillText(`${e.toFixed(i)} ${this.name} (${s.toFixed(i)}-${parseFloat(r.toFixed(i))})`,this.TEXT_X,this.TEXT_Y)}updateGraph(e,t){if(!this.context||!this.gradient)return;e===0&&t===0&&(t=1),t=Math.max(t,e,.1),e=Math.max(e,0);const i=Math.round(this.GRAPH_X),s=Math.round(this.GRAPH_Y),r=Math.round(this.GRAPH_WIDTH),l=Math.round(this.GRAPH_HEIGHT),u=Math.round(this.PR);this.context.drawImage(this.canvas,i+u,s,r-u,l,i,s,r-u,l),this.context.fillStyle=this.bg,this.context.fillRect(i+r-u,s,u,l);const d=Math.min(l,Math.round(e/t*l));d>0&&(this.context.globalAlpha=.9,this.context.fillStyle=this.gradient,this.context.fillRect(i+r-u,s+(l-d),u,d)),this.context.globalAlpha=1}}class YY extends tD{constructor(e,t,i){super(e,t,i),this.vsyncValue=0,this.SMALL_HEIGHT=9*this.PR,this.HEIGHT=this.SMALL_HEIGHT,this.WIDTH=35*this.PR,this.TEXT_Y=0*this.PR,this.canvas.height=this.HEIGHT,this.canvas.width=this.WIDTH,this.canvas.style.height="9px",this.canvas.style.width="35px",this.canvas.style.cssText=`
            width: 35px;
            height: 9px;
            position: absolute;
            top: 0;
            left: 0;
            background-color: transparent !important;
            pointer-events: none;
        `,this.initializeCanvas()}initializeCanvas(){this.context&&(this.context.imageSmoothingEnabled=!1,this.context.font="bold "+9*this.PR+"px Helvetica,Arial,sans-serif",this.context.textBaseline="top",this.context.globalAlpha=1)}update(e,t,i=0){this.context&&(this.vsyncValue=e,this.context.clearRect(0,0,this.WIDTH,this.HEIGHT),this.context.globalAlpha=1,this.context.fillStyle=this.bg,this.context.fillText(`${e.toFixed(0)}Hz`,this.TEXT_X,this.TEXT_Y))}updateGraph(e,t){}setOffset(e,t){this.canvas.style.transform=`translate(${e}px, ${t}px)`}}const nD=class Ef{constructor({trackGPU:e=!1,trackCPT:t=!1,trackHz:i=!1,logsPerSecond:s=4,graphsPerSecond:r=30,samplesLog:l=40,samplesGraph:u=10,precision:d=2,minimal:f=!1,horizontal:g=!0,mode:x=0}={}){this.gl=null,this.ext=null,this.activeQuery=null,this.gpuQueries=[],this.threeRendererPatched=!1,this.frameTimes=[],this.renderCount=0,this.totalCpuDuration=0,this.totalGpuDuration=0,this.totalGpuDurationCompute=0,this.gpuPanel=null,this.gpuPanelCompute=null,this.vsyncPanel=null,this.averageFps={logs:[],graph:[]},this.averageCpu={logs:[],graph:[]},this.averageGpu={logs:[],graph:[]},this.averageGpuCompute={logs:[],graph:[]},this.updateCounter=0,this.lastMin={},this.lastMax={},this.lastValue={},this.VSYNC_RATES=[{refreshRate:60,frameTime:16.67},{refreshRate:75,frameTime:13.33},{refreshRate:90,frameTime:11.11},{refreshRate:120,frameTime:8.33},{refreshRate:144,frameTime:6.94},{refreshRate:165,frameTime:6.06},{refreshRate:240,frameTime:4.17}],this.detectedVSync=null,this.frameTimeHistory=[],this.HISTORY_SIZE=120,this.VSYNC_THRESHOLD=.05,this.lastFrameTime=0,this.handleClick=S=>{S.preventDefault(),this.showPanel(++this.mode%this.dom.children.length)},this.handleResize=()=>{this.resizePanel(this.fpsPanel),this.resizePanel(this.msPanel),this.gpuPanel&&this.resizePanel(this.gpuPanel),this.gpuPanelCompute&&this.resizePanel(this.gpuPanelCompute)},this.mode=x,this.horizontal=g,this.minimal=f,this.trackGPU=e,this.trackCPT=t,this.trackHz=i,this.samplesLog=l,this.samplesGraph=u,this.precision=d,this.logsPerSecond=s,this.graphsPerSecond=r;const v=performance.now();this.prevGraphTime=v,this.dom=document.createElement("div"),this.initializeDOM(),this.beginTime=performance.now(),this.prevTextTime=this.beginTime,this.prevCpuTime=this.beginTime,this._panelId=0,this.fpsPanel=this.addPanel(new Ef.Panel("FPS","#0ff","#002")),this.msPanel=this.addPanel(new Ef.Panel("CPU","#0f0","#020")),this.trackHz===!0&&(this.vsyncPanel=new YY("","#f0f","#202"),this.dom.appendChild(this.vsyncPanel.canvas),this.vsyncPanel.setOffset(56,35)),this.setupEventListeners()}initializeDOM(){this.dom.style.cssText=`
      position: fixed;
      top: 0;
      left: 0;
      opacity: 0.9;
      z-index: 10000;
      ${this.minimal?"cursor: pointer;":""}
    `}setupEventListeners(){this.minimal?(this.dom.addEventListener("click",this.handleClick),this.showPanel(this.mode)):window.addEventListener("resize",this.handleResize)}async init(e){if(!e){console.error('Stats: The "canvas" parameter is undefined.');return}if(!this.handleThreeRenderer(e)&&!await this.handleWebGPURenderer(e))if(this.initializeWebGL(e)){this.trackGPU&&this.initializeGPUTracking();return}else console.error("Stats-gl: Failed to initialize WebGL context")}handleThreeRenderer(e){return e.isWebGLRenderer&&!this.threeRendererPatched?(this.patchThreeRenderer(e),this.gl=e.getContext(),this.trackGPU&&this.initializeGPUTracking(),!0):!1}async handleWebGPURenderer(e){return e.isWebGPURenderer?((this.trackGPU||this.trackCPT)&&(e.backend.trackTimestamp=!0,await e.hasFeatureAsync("timestamp-query")&&this.initializeWebGPUPanels()),this.info=e.info,this.patchThreeWebGPU(e),!0):!1}initializeWebGPUPanels(){this.trackGPU&&(this.gpuPanel=this.addPanel(new Ef.Panel("GPU","#ff0","#220"))),this.trackCPT&&(this.gpuPanelCompute=this.addPanel(new Ef.Panel("CPT","#e1e1e1","#212121")))}initializeWebGL(e){if(e instanceof WebGL2RenderingContext)this.gl=e;else if(e instanceof HTMLCanvasElement||e instanceof OffscreenCanvas){if(this.gl=e.getContext("webgl2"),!this.gl)return console.error("Stats: Unable to obtain WebGL2 context."),!1}else return console.error("Stats: Invalid input type. Expected WebGL2RenderingContext, HTMLCanvasElement, or OffscreenCanvas."),!1;return!0}initializeGPUTracking(){this.gl&&(this.ext=this.gl.getExtension("EXT_disjoint_timer_query_webgl2"),this.ext&&(this.gpuPanel=this.addPanel(new Ef.Panel("GPU","#ff0","#220"))))}begin(){this.beginProfiling("cpu-started"),!(!this.gl||!this.ext)&&(this.activeQuery&&this.gl.endQuery(this.ext.TIME_ELAPSED_EXT),this.activeQuery=this.gl.createQuery(),this.activeQuery&&this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT,this.activeQuery))}end(){this.renderCount++,this.gl&&this.ext&&this.activeQuery&&(this.gl.endQuery(this.ext.TIME_ELAPSED_EXT),this.gpuQueries.push({query:this.activeQuery}),this.activeQuery=null),this.endProfiling("cpu-started","cpu-finished","cpu-duration")}update(){this.endProfiling("cpu-started","cpu-finished","cpu-duration"),this.info?this.processWebGPUTimestamps():this.processGpuQueries(),this.updateAverages(),this.resetCounters()}processWebGPUTimestamps(){this.totalGpuDuration=this.info.render.timestamp,this.totalGpuDurationCompute=this.info.compute.timestamp}resetCounters(){this.renderCount=0,this.totalCpuDuration=0,this.beginTime=this.endInternal()}resizePanel(e){e.canvas.style.position="absolute",this.minimal?e.canvas.style.display="none":(e.canvas.style.display="block",this.horizontal?(e.canvas.style.top="0px",e.canvas.style.left=e.id*e.WIDTH/e.PR+"px"):(e.canvas.style.left="0px",e.canvas.style.top=e.id*e.HEIGHT/e.PR+"px"))}addPanel(e){return e.canvas&&(this.dom.appendChild(e.canvas),e.id=this._panelId,this.resizePanel(e),this._panelId++),e}showPanel(e){for(let t=0;t<this.dom.children.length;t++){const i=this.dom.children[t];i.style.display=t===e?"block":"none"}this.mode=e}processGpuQueries(){!this.gl||!this.ext||(this.totalGpuDuration=0,this.gpuQueries.forEach((e,t)=>{if(this.gl){const i=this.gl.getQueryParameter(e.query,this.gl.QUERY_RESULT_AVAILABLE),s=this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);if(i&&!s){const l=this.gl.getQueryParameter(e.query,this.gl.QUERY_RESULT)*1e-6;this.totalGpuDuration+=l,this.gl.deleteQuery(e.query),this.gpuQueries.splice(t,1)}}}))}detectVSync(e){if(this.lastFrameTime===0){this.lastFrameTime=e;return}const t=e-this.lastFrameTime;if(this.lastFrameTime=e,this.frameTimeHistory.push(t),this.frameTimeHistory.length>this.HISTORY_SIZE&&this.frameTimeHistory.shift(),this.frameTimeHistory.length<60)return;const i=this.frameTimeHistory.reduce((d,f)=>d+f)/this.frameTimeHistory.length,s=this.frameTimeHistory.reduce((d,f)=>d+Math.pow(f-i,2),0)/this.frameTimeHistory.length;if(Math.sqrt(s)>2){this.detectedVSync=null;return}let l=null,u=1/0;for(const d of this.VSYNC_RATES){const f=Math.abs(i-d.frameTime);f<u&&(u=f,l=d)}l&&u/l.frameTime<=this.VSYNC_THRESHOLD?this.detectedVSync=l:this.detectedVSync=null}endInternal(){var e;const t=performance.now();for(this.frameTimes.push(t);this.frameTimes.length>0&&this.frameTimes[0]<=t-1e3;)this.frameTimes.shift();const i=Math.round(this.frameTimes.length);this.addToAverage(i,this.averageFps);const s=t>=this.prevTextTime+1e3/this.logsPerSecond,r=t>=this.prevGraphTime+1e3/this.graphsPerSecond;if(this.updatePanelComponents(this.fpsPanel,this.averageFps,0,s,r),this.updatePanelComponents(this.msPanel,this.averageCpu,this.precision,s,r),this.gpuPanel&&this.updatePanelComponents(this.gpuPanel,this.averageGpu,this.precision,s,r),this.trackCPT&&this.gpuPanelCompute&&this.updatePanelComponents(this.gpuPanelCompute,this.averageGpuCompute,this.precision,s,r),s&&(this.prevTextTime=t),r&&(this.prevGraphTime=t),this.vsyncPanel!==null){this.detectVSync(t);const l=((e=this.detectedVSync)==null?void 0:e.refreshRate)||0;s&&l>0&&this.vsyncPanel.update(l,l)}return t}updatePanelComponents(e,t,i,s,r){if(!e||t.logs.length===0)return;e.name in this.lastMin||(this.lastMin[e.name]=1/0,this.lastMax[e.name]=0,this.lastValue[e.name]=0);const l=t.logs[t.logs.length-1];this.lastMax[e.name]=Math.max(...t.logs),this.lastMin[e.name]=Math.min(this.lastMin[e.name],l),this.lastValue[e.name]=this.lastValue[e.name]*.7+l*.3;const u=Math.max(Math.max(...t.logs),...t.graph.slice(-this.samplesGraph));this.updateCounter++,s&&e.update(this.lastValue[e.name],this.lastMax[e.name],i),r&&e.updateGraph(l,u)}beginProfiling(e){if(window.performance)try{window.performance.clearMarks(e),window.performance.mark(e)}catch(t){console.debug("Stats: Performance marking failed:",t)}}endProfiling(e,t,i){if(!(!window.performance||!t||!e))try{window.performance.getEntriesByName(e,"mark").length===0&&this.beginProfiling(e),window.performance.clearMarks(t),window.performance.mark(t),window.performance.clearMeasures(i);const r=performance.measure(i,e,t);this.totalCpuDuration+=r.duration,window.performance.clearMarks(e),window.performance.clearMarks(t),window.performance.clearMeasures(i)}catch(s){console.debug("Stats: Performance measurement failed:",s)}}updatePanel(e,t,i=2){if(!e||t.logs.length===0)return;const s=performance.now();e.name in this.lastMin||(this.lastMin[e.name]=1/0,this.lastMax[e.name]=0,this.lastValue[e.name]=0);const r=t.logs[t.logs.length-1],l=Math.max(...t.logs.slice(-30));this.lastMin[e.name]=Math.min(this.lastMin[e.name],r),this.lastMax[e.name]=Math.max(this.lastMax[e.name],r),this.lastValue[e.name]=this.lastValue[e.name]*.7+r*.3;const u=Math.max(l,...t.graph.slice(-this.samplesGraph));this.updateCounter++,this.updateCounter%(this.logsPerSecond*2)===0&&(this.lastMax[e.name]=l,this.lastMin[e.name]=r),e.update&&(s>=this.prevCpuTime+1e3/this.logsPerSecond&&e.update(this.lastValue[e.name],r,this.lastMax[e.name],u,i),s>=this.prevGraphTime+1e3/this.graphsPerSecond&&(e.updateGraph(r,u),this.prevGraphTime=s))}updateAverages(){this.addToAverage(this.totalCpuDuration,this.averageCpu),this.addToAverage(this.totalGpuDuration,this.averageGpu),this.info&&this.totalGpuDurationCompute!==void 0&&this.addToAverage(this.totalGpuDurationCompute,this.averageGpuCompute)}addToAverage(e,t){t.logs.push(e),t.logs.length>this.samplesLog&&(t.logs=t.logs.slice(-this.samplesLog)),t.graph.push(e),t.graph.length>this.samplesGraph&&(t.graph=t.graph.slice(-this.samplesGraph))}get domElement(){return this.dom}patchThreeWebGPU(e){const t=e.info.reset,i=this;e.info.reset=function(){i.beginProfiling("cpu-started"),t.call(this)}}patchThreeRenderer(e){const t=e.render,i=this;e.render=function(s,r){i.begin(),t.call(this,s,r),i.end()},this.threeRendererPatched=!0}};nD.Panel=tD;let ZY=nD;function KY(){return new er({uniforms:{prevTexture:{value:null},mouse:{value:null},resolution:{value:null}},vertexShader:` 
            //standard vertex shader for the plane, realistically we dont need this but I didnt create a camera for no reason 
            varying vec2 vUv;
            void main() { 
                vUv = uv;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `,fragmentShader:`
            precision highp float;
            varying vec2 vUv; //interpolated coordinates coming from the vertex shader between 0 and 1, one u is 1/width and one v is 1/height per pixel, and as far as I understand, when you access UV in a fragment it gives the interpolated value in the center of that fragment. 
            uniform sampler2D prevTexture;
            uniform vec2 mouse;   
            uniform vec2 resolution;
                
            void main() { 
                // This is the shader that paints and accumates the color to the texture, used it when I was looking at the tutorial but now its just overriden by the canvas texture, 
                // I am keeping it here because right now it shows a 10px circle where the mouse is which is fun. 
        
                vec4 color = texture2D(prevTexture, vUv).rgba;
            
                vec2 uvPx = gl_FragCoord.xy; //gives the pixel coordinate of the framgent, well kinda, it gives the center of the fragment
                vec2 mousePx = mouse;
        
        
                float dist = length(uvPx - mousePx);
        
                float brushRadius = 10.0; //brush radius in pixels
                if(dist < brushRadius) {
                    color = vec4(vUv.x, vUv.y, 1.0, 1.0);
                }
        
                gl_FragColor = color;
            }
        `})}function JY(){return new er({uniforms:{inputTexture:{value:null},resolution:{value:null}},vertexShader:` 
            varying vec2 vUv;
            void main() { 
                vUv = uv;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `,fragmentShader:`
            precision highp float;
            varying vec2 vUv;
            uniform sampler2D inputTexture;
            uniform vec2 resolution;

            void main() {
                //this is the shader that converts the input texture to a seed texture
                //to calculate the nearest seed in the jfa phase, we need to know the location of the seed in the input texture
                //so we are storing the coordinates in a texture, this creates a nice looking gradient

                //if((gl_FragCoord.xy )  == vUv * resolution) {
                //   gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
                //   return;
                //}
                
                vec4 color = texture2D(inputTexture, vUv);
                if(color.a != 0.) { // There is a seed here
                    gl_FragColor = vec4(vUv.x, vUv.y, gl_FragCoord.x, gl_FragCoord.y); // vUv.x and vUv.y are the uv coordinates of where this pixel is in, 0.5 is just added to give a nice color scheme
                } else {
                    gl_FragColor = vec4(0.0); //if the color is black, it means there is no seed here thus this will be one of the pixels that shoot rays
                }
            }
        `})}function jY(){return new er({uniforms:{inputTexture:{value:null},offset:{value:null},resolution:{value:null}},vertexShader:`  
            varying vec2 vUv;
            void main() { 
                vUv = uv;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `,fragmentShader:`
            precision highp float;
            varying vec2 vUv;
            uniform sampler2D inputTexture;
            uniform float offset;
            uniform vec2 resolution;

            void main() {
                vec4 nearestSeed = vec4(0.0); 
                float nearestDist = 9999999.9; // Distance to the nearest seed, make sure its larger then the biggest pixel distance^2

                //prove why the algo works

                for(float y = -1.; y <= 1.; y += 1.){ 
                    for(float x = -1.; x <= 1.; x += 1.){

                        vec2 samplePx = gl_FragCoord.xy + vec2(x, y) * offset; 
                        vec2 sampleUV = samplePx / resolution;

                        if(sampleUV.x < 0.0 || sampleUV.x > 1.0 || sampleUV.y < 0.0 || sampleUV.y > 1.0) { continue; }

                        vec4 sampleValue = texture2D(inputTexture, sampleUV);

                        if(sampleValue.a != 0.0) {

                       
                        vec2 diff_px = sampleValue.zw - gl_FragCoord.xy;
                        float dist_raw = dot(diff_px, diff_px);
                        float dist_sq = dist_raw;
                          

                        //WHAT THE FUCK IS HAPPENING
                        //IF THEY ARE THE SAME VALUE THEN WHYYYYYYYYYYYYYYYYYYYYYYY JFA

                        if (abs(dist_raw - nearestDist) == 0.0) { //this shit fixes something, not sure what but yes
                            float seedBias = fract(sin(dot(sampleValue.zw, vec2(12.9898, 78.233))) * 43758.5453);
                            dist_sq -= seedBias * 1e-1; 
                        }

                            if(dist_sq  < nearestDist){
                                nearestDist = dist_sq;
                                nearestSeed = sampleValue; 
                            }
                        }
                    }
                }

                gl_FragColor = nearestSeed;
            }
        `})}function QY(){return new er({uniforms:{inputTexture:{value:null},resolution:{value:null}},vertexShader:` 
            varying vec2 vUv;
            void main() { 
                vUv = uv;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `,fragmentShader:`
            varying vec2 vUv;
            uniform sampler2D inputTexture;
            uniform vec2 resolution;

            void main() { 
                vec2 nearestSeed = texture(inputTexture, vUv).xy; 

                vec2 diff = nearestSeed - vUv;
                vec2 diff_px = vec2(diff.x * resolution.x, diff.y * resolution.y);
                
                gl_FragColor = vec4(length(diff_px), 0., 0., 1.);
            }
        `})}function e7(){return new er({uniforms:{iTexture:{value:null},distanceTexture:{value:null},blueNoise:{value:null},rayCount:{value:null},resolution:{value:null},frame:{value:null},radianceModifier:{value:null},showProgram:{value:null}},vertexShader:` 
            varying vec2 vUv;
            void main() { 
                vUv = uv;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `,fragmentShader:`
            precision highp float;
            varying vec2 vUv;
            uniform sampler2D iTexture;
            uniform sampler2D distanceTexture;
            uniform sampler2D blueNoise;
            uniform int rayCount;
            uniform vec2 resolution;
            uniform float frame;
            uniform float radianceModifier;
            uniform bool showProgram;
            const float PI = 3.14159265;
            const float TAU = 2.0 * PI;

            bool outOfBounds(vec2 uv) {
                return uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0;
            }

            float rand(vec2 co) {
                return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
            }

            float blueNoiseSample(vec2 coord) { //blue noise with frame based offset to it looks more blended
                vec2 blueNoiseResolution = vec2(128.0);
                vec2 offset = vec2(mod(frame, blueNoiseResolution.x), 
                                   mod(frame * 37.0, blueNoiseResolution.y)); //apparently we use 37 because its prime numbers create pesudo random patterns
                vec2 noiseUV = mod(coord + offset, blueNoiseResolution) / blueNoiseResolution;
                return texture2D(blueNoise, noiseUV).r;
            }

            //https://www.shadertoy.com/view/4tXGWN - ign noise no idea how it works, but it does reduce noise, not the best sol
            float ign(vec2 p) {
                const vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);
                return fract(magic.z * fract(dot(p, magic.xy)));
            }

            vec4 raymarch(){
                vec4 light = texture(iTexture, vUv);
                if(light.a != 0.0) { //if we are at a seed location, we dont need to raymarch 
                   if(showProgram == true) return vec4(vec3(0.0), 1.0);
                   return vec4(light.rgb, 1.0);
                   //return light / 1.5; //lighter color so doesnt mix up with the lighting
                }

                float oneOverRayCount = 1.0 / float(rayCount); 
                float tauOverRayCount = TAU * oneOverRayCount;

                float noise = blueNoiseSample(gl_FragCoord.xy);

                //float noise = ign(gl_FragCoord.xy);

                //float noise = rand(vUv);

                vec4 radiance = vec4(0.0); //total light that will be accumulated
                //calcualte and shoot rayCount rays that are equidstant from each other, expensive

                for(int i = 0; i < rayCount; i++) {
                  float angle = tauOverRayCount * (float(i) + noise); //if we dont add noise all rays will be in the same direction which will introduce patterns
                  vec2 rayDirection = vec2(cos(angle), -sin(angle)); //unit circle, NOW FIXED!!!!!!


                  vec2 sampleUv = vUv; //start at the current uv coordinate
                  vec4 radDelta = vec4(0.0);
                  
                  for (int step = 1; step < 10; step++) { // one funny observation is that pixels that are close to the seed will need more steps to accumulate radiance, this is because since the dist is so small, the rays looking at the other direction (the direction not immediately looking at the seed) will need more steps to reach something else 
                    float dist = texture(distanceTexture, sampleUv).r;
                    
                    sampleUv += (rayDirection * dist) / resolution;
                    

                    //sampleUv += rayDirection * dist; //move the pixel in the direction of the ray, dist is the distance to the nearest seed so we now we can at least move that much
                    //also sampleUV wont travel from center to center, nearestfilter will get the color of the closest pixel, but sampleUV might be somewhere else in the pixel, not a big deal tho, at most we will need more stpes 
            

                    if (outOfBounds(sampleUv)) break; // end if we know we arent getting anywhere
                    
                    if (dist == 0.0) { 
                      // at this point we now we hit a seed, so get its color and add it to the radiance
                      vec4 sampleColor = texture(iTexture, sampleUv);
                      radDelta += sampleColor;
                      break;
                    }
                  }

                  radiance += radDelta;
                }
                
                return vec4((radiance * oneOverRayCount * radianceModifier).rgb, 0.0); //finally we return the color of the pixel by averaging the light 
            }

            void main() {
                gl_FragColor = raymarch();
            }
        `})}function t7(){return new er({uniforms:{source:{value:null}},vertexShader:` 
            varying vec2 vUv;
            void main() { 
                vUv = uv;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `,fragmentShader:` // this is a simple upscaler shader, because I don't know how to make a low res texture appear full screen
            precision highp float;
            varying vec2 vUv;
            uniform sampler2D source;
            void main() {
                gl_FragColor = texture2D(source, vUv);
            }
        `})}function n7(){return new er({uniforms:{sourceTex:{value:null},resolution:{value:null},sourceAspect:{value:null},sourceScale:{value:null},centerX:{value:null}},vertexShader:` 
            varying vec2 vUv;
            void main() { 
                vUv = uv;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `,fragmentShader:`
            precision highp float;
            varying vec2 vUv;
            uniform sampler2D sourceTex;
            uniform vec2 resolution;
            uniform float sourceAspect;
            uniform float sourceScale;
            uniform float centerX; 

            void main() {
                float basePx = sourceScale * min(resolution.x, resolution.y);
                float wPx = basePx;
                float hPx = basePx;
                if (sourceAspect >= 1.0) {
                  hPx = basePx / sourceAspect;
                } else {
                  wPx = basePx * sourceAspect;
                }
                vec2 sizeUv = vec2(wPx / resolution.x, hPx / resolution.y);
                vec2 minUv = vec2(centerX, 0.5) - 0.5 * sizeUv;
                vec2 maxUv = minUv + sizeUv;
                bool inside = vUv.x >= minUv.x && vUv.x <= maxUv.x && vUv.y >= minUv.y && vUv.y <= maxUv.y;
                if (inside) {
                  vec2 localUv = (vUv - minUv) / sizeUv;
                  gl_FragColor = texture2D(sourceTex, localUv);
                } else {
                  gl_FragColor = vec4(0.0);
                }
            }
        `})}function i7(){return new er({uniforms:{inputTexture:{value:null},resolution:{value:null},sigmaSpatial:{value:null},sigmaRange:{value:null},radius:{value:null}},vertexShader:`
      varying vec2 vUv;
      void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,fragmentShader:`
      precision highp float;
      varying vec2 vUv;

      uniform sampler2D inputTexture;
      uniform vec2 resolution;
      uniform float sigmaSpatial;
      uniform float sigmaRange;
      uniform int radius;

      // Bilateral weight = exp( - ( |p-q|^2 / 2σ_s^2 + |I(p)-I(q)|^2 / 2σ_r^2 ) )

      float weight(vec2 spatialOffset, vec3 neighbor, vec3 center) {
        float spatialDist2 = dot(spatialOffset, spatialOffset);
        float rangeDist2   = dot(neighbor - center, neighbor - center);
        float w = exp(-(spatialDist2 / (2.0 * sigmaSpatial * sigmaSpatial)
                      + rangeDist2   / (2.0 * sigmaRange  * sigmaRange)));
        return w;
      }

      void main() {
        vec4 center = texture2D(inputTexture, vUv);

        if(center.a != 0.0) {
          gl_FragColor = center;
          return;
        }

        float sumW = 0.0;
        vec3 sumC = vec3(0.0);

        for (int j = -radius; j <= radius; ++j) {
          for (int i = -radius; i <= radius; ++i) {

            vec2 offset = vec2(float(i), float(j));
            vec2 uv = vUv + offset / resolution;
            vec3 neighbor = texture2D(inputTexture, uv).rgb;

            float w = weight(offset, neighbor, center.rgb);
            sumW += w;
            sumC += neighbor * w;
          }
        }

        vec3 filtered = sumC / sumW;
        gl_FragColor = vec4(filtered, 1.0);
      }
    `})}class s7{constructor(e){this.bus=e,this.videoInput=document.getElementById("video-upload"),this.audioInput=document.getElementById("audio-upload"),this.modeToggle=document.getElementById("mode-toggle"),this.playPause=document.getElementById("play-pause"),this.volume=document.getElementById("video-volume"),this.scale=document.getElementById("video-scale"),this.showProgram=document.getElementById("show-program"),this.showJFA=document.getElementById("show-jfa"),this.radianceModifier=document.getElementById("radiance-modifier"),this.videoInput.addEventListener("change",t=>this.handleVideo(t)),this.audioInput.addEventListener("change",t=>this.handleAudio(t)),this.playPause.addEventListener("click",()=>{this.modeToggle.checked?this.bus.emit("video:toggle"):this.bus.emit("audio:toggle")}),this.modeToggle.addEventListener("change",()=>{this.bus.emit("mode:changed",this.modeToggle.checked);const t=document.getElementById("radiance-modifier");this.modeToggle.checked?t.value=2:t.value=1,this.bus.emit("settings:radiance",t.value)}),this.volume.addEventListener("input",()=>this.bus.emit("media:volume",this.volume.value)),this.scale.addEventListener("input",()=>this.bus.emit("video:scale",this.scale.value)),this.radianceModifier.addEventListener("input",()=>{this.bus.emit("settings:radiance",this.radianceModifier.value)}),this.showProgram.addEventListener("change",()=>{this.bus.emit("settings:showProgram",this.showProgram.checked)}),this.showJFA.addEventListener("change",()=>{this.bus.emit("settings:showJFA",this.showJFA.checked)})}handleVideo(e){const t=e.target.files[0],i=document.createElement("video"),s=URL.createObjectURL(t);i.src=s,i.onloadeddata=()=>{console.log("Video loaded"),this.bus.emit("video:loaded",i),this.bus.emit("media:volume",this.volume.value),this.bus.emit("video:scale",1);const r=document.getElementById("video-scale");r.max=Math.max(i.videoWidth,i.videoHeight)/Math.min(i.videoWidth,i.videoHeight),r.value=1}}handleAudio(e){const t=e.target.files[0],i=new Audio,s=URL.createObjectURL(t),r=t.name.split("-")[0],l=t.name.split("-")[1].replace(/\.[^.]+$/,"");console.log(r,l),i.src=s,i.onloadeddata=()=>{console.log("Audio loaded"),this.bus.emit("audio:loaded",i,r,l),this.bus.emit("media:volume",this.volume.value)}}}class r7{constructor(){this.isReady=!1}loadLRC(e){this.timedLyrics=[];const t=e.split(`
`),i=/\[(\d{2}):(\d{2}\.\d{2})\]\s*(.*)/;for(const s of t){const r=s.match(i);if(r){const l=parseInt(r[1]),u=parseFloat(r[2]);let d=r[3].trim();const f=(l*60+u)*1e3;d===""&&(d="(Music)"),this.timedLyrics.push({time:f,lyric:d})}}this.currentIndex=-1,console.log(this.timedLyrics),this.isReady=!0}update(e){if(this.timedLyrics.length===0)return"No lyrics found?";const t=this.timedLyrics.findLastIndex(i=>e>=i.time);return t>=0&&t<this.timedLyrics.length?(this.currentIndex=t,this.timedLyrics[t].lyric):"(Music)"}async getLRCLIB(e,t){this.isReady=!1;const i=new URLSearchParams({track_name:e,artist_name:t}),s=await fetch(`https://lrclib.net/api/search?${i.toString()}`);if(!s.ok){console.error(`Error ${s.status}: ${s.statusText}`);return}const r=await s.json();if(r.length===0){console.log("No lyrics found.");return}console.log(r[0].syncedLyrics),this.loadLRC(r[0].syncedLyrics)}}function iD(a){if(Object.prototype.hasOwnProperty.call(a,"__esModule"))return a;var e=a.default;if(typeof e=="function"){var t=function i(){var s=!1;try{s=this instanceof i}catch{}return s?Reflect.construct(e,arguments,this.constructor):e.apply(this,arguments)};t.prototype=e.prototype}else t={};return Object.defineProperty(t,"__esModule",{value:!0}),Object.keys(a).forEach(function(i){var s=Object.getOwnPropertyDescriptor(a,i);Object.defineProperty(t,i,s.get?s:{enumerable:!0,get:function(){return a[i]}})}),t}var km={exports:{}},H={};/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */var mP;function o7(){if(mP)return H;mP=1;const a="179",e={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},t={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},i=0,s=1,r=2,l=3,u=0,d=1,f=2,g=3,x=0,v=1,S=2,T=0,E=1,A=2,w=3,O=4,F=5,B=100,k=101,Y=102,$=103,Q=104,z=200,q=201,oe=202,Ce=203,Ne=204,Oe=205,Be=206,He=207,ct=208,Ve=209,Ct=210,Gt=211,pn=212,qn=213,yi=214,bi=0,rt=1,Xt=2,At=3,In=4,gn=5,kn=6,Ki=7,Ue=0,ee=1,ve=2,de=0,we=1,Ie=2,lt=3,Xe=4,qe=5,Ft=6,Bt=7,se="attached",X="detached",Se=300,Me=301,Ge=302,De=303,Et=304,et=306,kt=1e3,It=1001,Ye=1002,mt=1003,ft=1004,Lt=1004,yt=1005,bn=1005,ge=1006,bt=1007,Ht=1007,Qt=1008,wt=1008,ut=1009,ln=1010,Yn=1011,Pi=1012,Ii=1013,nr=1014,vs=1015,Sl=1016,Qo=1017,hc=1018,bl=1020,ud=35902,dc=1021,hd=1022,Xs=1023,Tl=1026,Ml=1027,dd=1028,pu=1029,Ap=1030,fd=1031,j0=1032,pd=1033,ne=33776,Ee=33777,ze=33778,ke=33779,Re=35840,Nt=35841,en=35842,_n=35843,fn=36196,Gn=37492,$n=37496,Fn=37808,gi=37809,Ui=37810,fs=37811,Ji=37812,ki=37813,Vn=37814,as=37815,wi=37816,ur=37817,Ta=37818,hr=37819,qa=37820,ls=37821,dr=36492,Tr=36494,qs=36495,fr=36283,fc=36284,ea=36285,r_=36286,NE=2200,PE=2201,IE=2202,Ep=2300,o_=2301,a_=2302,mu=2400,gu=2401,Rp=2402,l_=2500,Q0=2501,aO=0,lO=1,cO=2,LE=3200,DE=3201,uO=3202,hO=3203,pc=0,UE=1,wl="",uo="srgb",_u="srgb-linear",Cp="linear",ss="srgb",dO=0,xu=7680,fO=7681,pO=7682,mO=7683,gO=34055,_O=34056,xO=5386,yO=512,vO=513,SO=514,bO=515,TO=516,MO=517,wO=518,eS=519,FE=512,BE=513,OE=514,tS=515,VE=516,zE=517,kE=518,GE=519,Np=35044,AO=35048,EO=35040,RO=35045,CO=35049,NO=35041,PO=35046,IO=35050,LO=35042,DO="100",nS="300 es",Po=2e3,md=2001,UO={COMPUTE:"compute",RENDER:"render"},FO={PERSPECTIVE:"perspective",LINEAR:"linear",FLAT:"flat"},BO={NORMAL:"normal",CENTROID:"centroid",SAMPLE:"sample",FIRST:"first",EITHER:"either"};class Ya{addEventListener(n,o){this._listeners===void 0&&(this._listeners={});const c=this._listeners;c[n]===void 0&&(c[n]=[]),c[n].indexOf(o)===-1&&c[n].push(o)}hasEventListener(n,o){const c=this._listeners;return c===void 0?!1:c[n]!==void 0&&c[n].indexOf(o)!==-1}removeEventListener(n,o){const c=this._listeners;if(c===void 0)return;const h=c[n];if(h!==void 0){const p=h.indexOf(o);p!==-1&&h.splice(p,1)}}dispatchEvent(n){const o=this._listeners;if(o===void 0)return;const c=o[n.type];if(c!==void 0){n.target=this;const h=c.slice(0);for(let p=0,_=h.length;p<_;p++)h[p].call(this,n);n.target=null}}}const Ir=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let HE=1234567;const yu=Math.PI/180,gd=180/Math.PI;function Io(){const m=Math.random()*4294967295|0,n=Math.random()*4294967295|0,o=Math.random()*4294967295|0,c=Math.random()*4294967295|0;return(Ir[m&255]+Ir[m>>8&255]+Ir[m>>16&255]+Ir[m>>24&255]+"-"+Ir[n&255]+Ir[n>>8&255]+"-"+Ir[n>>16&15|64]+Ir[n>>24&255]+"-"+Ir[o&63|128]+Ir[o>>8&255]+"-"+Ir[o>>16&255]+Ir[o>>24&255]+Ir[c&255]+Ir[c>>8&255]+Ir[c>>16&255]+Ir[c>>24&255]).toLowerCase()}function Kn(m,n,o){return Math.max(n,Math.min(o,m))}function iS(m,n){return(m%n+n)%n}function OO(m,n,o,c,h){return c+(m-n)*(h-c)/(o-n)}function VO(m,n,o){return m!==n?(o-m)/(n-m):0}function Pp(m,n,o){return(1-o)*m+o*n}function zO(m,n,o,c){return Pp(m,n,1-Math.exp(-o*c))}function kO(m,n=1){return n-Math.abs(iS(m,n*2)-n)}function GO(m,n,o){return m<=n?0:m>=o?1:(m=(m-n)/(o-n),m*m*(3-2*m))}function HO(m,n,o){return m<=n?0:m>=o?1:(m=(m-n)/(o-n),m*m*m*(m*(m*6-15)+10))}function WO(m,n){return m+Math.floor(Math.random()*(n-m+1))}function $O(m,n){return m+Math.random()*(n-m)}function XO(m){return m*(.5-Math.random())}function qO(m){m!==void 0&&(HE=m);let n=HE+=1831565813;return n=Math.imul(n^n>>>15,n|1),n^=n+Math.imul(n^n>>>7,n|61),((n^n>>>14)>>>0)/4294967296}function YO(m){return m*yu}function ZO(m){return m*gd}function KO(m){return(m&m-1)===0&&m!==0}function JO(m){return Math.pow(2,Math.ceil(Math.log(m)/Math.LN2))}function jO(m){return Math.pow(2,Math.floor(Math.log(m)/Math.LN2))}function QO(m,n,o,c,h){const p=Math.cos,_=Math.sin,y=p(o/2),b=_(o/2),M=p((n+c)/2),R=_((n+c)/2),C=p((n-c)/2),N=_((n-c)/2),P=p((c-n)/2),L=_((c-n)/2);switch(h){case"XYX":m.set(y*R,b*C,b*N,y*M);break;case"YZY":m.set(b*N,y*R,b*C,y*M);break;case"ZXZ":m.set(b*C,b*N,y*R,y*M);break;case"XZX":m.set(y*R,b*L,b*P,y*M);break;case"YXY":m.set(b*P,y*R,b*L,y*M);break;case"ZYZ":m.set(b*L,b*P,y*R,y*M);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+h)}}function qr(m,n){switch(n.constructor){case Float32Array:return m;case Uint32Array:return m/4294967295;case Uint16Array:return m/65535;case Uint8Array:return m/255;case Int32Array:return Math.max(m/2147483647,-1);case Int16Array:return Math.max(m/32767,-1);case Int8Array:return Math.max(m/127,-1);default:throw new Error("Invalid component type.")}}function fi(m,n){switch(n.constructor){case Float32Array:return m;case Uint32Array:return Math.round(m*4294967295);case Uint16Array:return Math.round(m*65535);case Uint8Array:return Math.round(m*255);case Int32Array:return Math.round(m*2147483647);case Int16Array:return Math.round(m*32767);case Int8Array:return Math.round(m*127);default:throw new Error("Invalid component type.")}}const eV={DEG2RAD:yu,RAD2DEG:gd,generateUUID:Io,clamp:Kn,euclideanModulo:iS,mapLinear:OO,inverseLerp:VO,lerp:Pp,damp:zO,pingpong:kO,smoothstep:GO,smootherstep:HO,randInt:WO,randFloat:$O,randFloatSpread:XO,seededRandom:qO,degToRad:YO,radToDeg:ZO,isPowerOfTwo:KO,ceilPowerOfTwo:JO,floorPowerOfTwo:jO,setQuaternionFromProperEuler:QO,normalize:fi,denormalize:qr};class vt{constructor(n=0,o=0){vt.prototype.isVector2=!0,this.x=n,this.y=o}get width(){return this.x}set width(n){this.x=n}get height(){return this.y}set height(n){this.y=n}set(n,o){return this.x=n,this.y=o,this}setScalar(n){return this.x=n,this.y=n,this}setX(n){return this.x=n,this}setY(n){return this.y=n,this}setComponent(n,o){switch(n){case 0:this.x=o;break;case 1:this.y=o;break;default:throw new Error("index is out of range: "+n)}return this}getComponent(n){switch(n){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+n)}}clone(){return new this.constructor(this.x,this.y)}copy(n){return this.x=n.x,this.y=n.y,this}add(n){return this.x+=n.x,this.y+=n.y,this}addScalar(n){return this.x+=n,this.y+=n,this}addVectors(n,o){return this.x=n.x+o.x,this.y=n.y+o.y,this}addScaledVector(n,o){return this.x+=n.x*o,this.y+=n.y*o,this}sub(n){return this.x-=n.x,this.y-=n.y,this}subScalar(n){return this.x-=n,this.y-=n,this}subVectors(n,o){return this.x=n.x-o.x,this.y=n.y-o.y,this}multiply(n){return this.x*=n.x,this.y*=n.y,this}multiplyScalar(n){return this.x*=n,this.y*=n,this}divide(n){return this.x/=n.x,this.y/=n.y,this}divideScalar(n){return this.multiplyScalar(1/n)}applyMatrix3(n){const o=this.x,c=this.y,h=n.elements;return this.x=h[0]*o+h[3]*c+h[6],this.y=h[1]*o+h[4]*c+h[7],this}min(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this}max(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this}clamp(n,o){return this.x=Kn(this.x,n.x,o.x),this.y=Kn(this.y,n.y,o.y),this}clampScalar(n,o){return this.x=Kn(this.x,n,o),this.y=Kn(this.y,n,o),this}clampLength(n,o){const c=this.length();return this.divideScalar(c||1).multiplyScalar(Kn(c,n,o))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(n){return this.x*n.x+this.y*n.y}cross(n){return this.x*n.y-this.y*n.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(n){const o=Math.sqrt(this.lengthSq()*n.lengthSq());if(o===0)return Math.PI/2;const c=this.dot(n)/o;return Math.acos(Kn(c,-1,1))}distanceTo(n){return Math.sqrt(this.distanceToSquared(n))}distanceToSquared(n){const o=this.x-n.x,c=this.y-n.y;return o*o+c*c}manhattanDistanceTo(n){return Math.abs(this.x-n.x)+Math.abs(this.y-n.y)}setLength(n){return this.normalize().multiplyScalar(n)}lerp(n,o){return this.x+=(n.x-this.x)*o,this.y+=(n.y-this.y)*o,this}lerpVectors(n,o,c){return this.x=n.x+(o.x-n.x)*c,this.y=n.y+(o.y-n.y)*c,this}equals(n){return n.x===this.x&&n.y===this.y}fromArray(n,o=0){return this.x=n[o],this.y=n[o+1],this}toArray(n=[],o=0){return n[o]=this.x,n[o+1]=this.y,n}fromBufferAttribute(n,o){return this.x=n.getX(o),this.y=n.getY(o),this}rotateAround(n,o){const c=Math.cos(o),h=Math.sin(o),p=this.x-n.x,_=this.y-n.y;return this.x=p*c-_*h+n.x,this.y=p*h+_*c+n.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class ho{constructor(n=0,o=0,c=0,h=1){this.isQuaternion=!0,this._x=n,this._y=o,this._z=c,this._w=h}static slerpFlat(n,o,c,h,p,_,y){let b=c[h+0],M=c[h+1],R=c[h+2],C=c[h+3];const N=p[_+0],P=p[_+1],L=p[_+2],V=p[_+3];if(y===0){n[o+0]=b,n[o+1]=M,n[o+2]=R,n[o+3]=C;return}if(y===1){n[o+0]=N,n[o+1]=P,n[o+2]=L,n[o+3]=V;return}if(C!==V||b!==N||M!==P||R!==L){let U=1-y;const I=b*N+M*P+R*L+C*V,Z=I>=0?1:-1,W=1-I*I;if(W>Number.EPSILON){const ae=Math.sqrt(W),le=Math.atan2(ae,I*Z);U=Math.sin(U*le)/ae,y=Math.sin(y*le)/ae}const G=y*Z;if(b=b*U+N*G,M=M*U+P*G,R=R*U+L*G,C=C*U+V*G,U===1-y){const ae=1/Math.sqrt(b*b+M*M+R*R+C*C);b*=ae,M*=ae,R*=ae,C*=ae}}n[o]=b,n[o+1]=M,n[o+2]=R,n[o+3]=C}static multiplyQuaternionsFlat(n,o,c,h,p,_){const y=c[h],b=c[h+1],M=c[h+2],R=c[h+3],C=p[_],N=p[_+1],P=p[_+2],L=p[_+3];return n[o]=y*L+R*C+b*P-M*N,n[o+1]=b*L+R*N+M*C-y*P,n[o+2]=M*L+R*P+y*N-b*C,n[o+3]=R*L-y*C-b*N-M*P,n}get x(){return this._x}set x(n){this._x=n,this._onChangeCallback()}get y(){return this._y}set y(n){this._y=n,this._onChangeCallback()}get z(){return this._z}set z(n){this._z=n,this._onChangeCallback()}get w(){return this._w}set w(n){this._w=n,this._onChangeCallback()}set(n,o,c,h){return this._x=n,this._y=o,this._z=c,this._w=h,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(n){return this._x=n.x,this._y=n.y,this._z=n.z,this._w=n.w,this._onChangeCallback(),this}setFromEuler(n,o=!0){const c=n._x,h=n._y,p=n._z,_=n._order,y=Math.cos,b=Math.sin,M=y(c/2),R=y(h/2),C=y(p/2),N=b(c/2),P=b(h/2),L=b(p/2);switch(_){case"XYZ":this._x=N*R*C+M*P*L,this._y=M*P*C-N*R*L,this._z=M*R*L+N*P*C,this._w=M*R*C-N*P*L;break;case"YXZ":this._x=N*R*C+M*P*L,this._y=M*P*C-N*R*L,this._z=M*R*L-N*P*C,this._w=M*R*C+N*P*L;break;case"ZXY":this._x=N*R*C-M*P*L,this._y=M*P*C+N*R*L,this._z=M*R*L+N*P*C,this._w=M*R*C-N*P*L;break;case"ZYX":this._x=N*R*C-M*P*L,this._y=M*P*C+N*R*L,this._z=M*R*L-N*P*C,this._w=M*R*C+N*P*L;break;case"YZX":this._x=N*R*C+M*P*L,this._y=M*P*C+N*R*L,this._z=M*R*L-N*P*C,this._w=M*R*C-N*P*L;break;case"XZY":this._x=N*R*C-M*P*L,this._y=M*P*C-N*R*L,this._z=M*R*L+N*P*C,this._w=M*R*C+N*P*L;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+_)}return o===!0&&this._onChangeCallback(),this}setFromAxisAngle(n,o){const c=o/2,h=Math.sin(c);return this._x=n.x*h,this._y=n.y*h,this._z=n.z*h,this._w=Math.cos(c),this._onChangeCallback(),this}setFromRotationMatrix(n){const o=n.elements,c=o[0],h=o[4],p=o[8],_=o[1],y=o[5],b=o[9],M=o[2],R=o[6],C=o[10],N=c+y+C;if(N>0){const P=.5/Math.sqrt(N+1);this._w=.25/P,this._x=(R-b)*P,this._y=(p-M)*P,this._z=(_-h)*P}else if(c>y&&c>C){const P=2*Math.sqrt(1+c-y-C);this._w=(R-b)/P,this._x=.25*P,this._y=(h+_)/P,this._z=(p+M)/P}else if(y>C){const P=2*Math.sqrt(1+y-c-C);this._w=(p-M)/P,this._x=(h+_)/P,this._y=.25*P,this._z=(b+R)/P}else{const P=2*Math.sqrt(1+C-c-y);this._w=(_-h)/P,this._x=(p+M)/P,this._y=(b+R)/P,this._z=.25*P}return this._onChangeCallback(),this}setFromUnitVectors(n,o){let c=n.dot(o)+1;return c<1e-8?(c=0,Math.abs(n.x)>Math.abs(n.z)?(this._x=-n.y,this._y=n.x,this._z=0,this._w=c):(this._x=0,this._y=-n.z,this._z=n.y,this._w=c)):(this._x=n.y*o.z-n.z*o.y,this._y=n.z*o.x-n.x*o.z,this._z=n.x*o.y-n.y*o.x,this._w=c),this.normalize()}angleTo(n){return 2*Math.acos(Math.abs(Kn(this.dot(n),-1,1)))}rotateTowards(n,o){const c=this.angleTo(n);if(c===0)return this;const h=Math.min(1,o/c);return this.slerp(n,h),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(n){return this._x*n._x+this._y*n._y+this._z*n._z+this._w*n._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let n=this.length();return n===0?(this._x=0,this._y=0,this._z=0,this._w=1):(n=1/n,this._x=this._x*n,this._y=this._y*n,this._z=this._z*n,this._w=this._w*n),this._onChangeCallback(),this}multiply(n){return this.multiplyQuaternions(this,n)}premultiply(n){return this.multiplyQuaternions(n,this)}multiplyQuaternions(n,o){const c=n._x,h=n._y,p=n._z,_=n._w,y=o._x,b=o._y,M=o._z,R=o._w;return this._x=c*R+_*y+h*M-p*b,this._y=h*R+_*b+p*y-c*M,this._z=p*R+_*M+c*b-h*y,this._w=_*R-c*y-h*b-p*M,this._onChangeCallback(),this}slerp(n,o){if(o===0)return this;if(o===1)return this.copy(n);const c=this._x,h=this._y,p=this._z,_=this._w;let y=_*n._w+c*n._x+h*n._y+p*n._z;if(y<0?(this._w=-n._w,this._x=-n._x,this._y=-n._y,this._z=-n._z,y=-y):this.copy(n),y>=1)return this._w=_,this._x=c,this._y=h,this._z=p,this;const b=1-y*y;if(b<=Number.EPSILON){const P=1-o;return this._w=P*_+o*this._w,this._x=P*c+o*this._x,this._y=P*h+o*this._y,this._z=P*p+o*this._z,this.normalize(),this}const M=Math.sqrt(b),R=Math.atan2(M,y),C=Math.sin((1-o)*R)/M,N=Math.sin(o*R)/M;return this._w=_*C+this._w*N,this._x=c*C+this._x*N,this._y=h*C+this._y*N,this._z=p*C+this._z*N,this._onChangeCallback(),this}slerpQuaternions(n,o,c){return this.copy(n).slerp(o,c)}random(){const n=2*Math.PI*Math.random(),o=2*Math.PI*Math.random(),c=Math.random(),h=Math.sqrt(1-c),p=Math.sqrt(c);return this.set(h*Math.sin(n),h*Math.cos(n),p*Math.sin(o),p*Math.cos(o))}equals(n){return n._x===this._x&&n._y===this._y&&n._z===this._z&&n._w===this._w}fromArray(n,o=0){return this._x=n[o],this._y=n[o+1],this._z=n[o+2],this._w=n[o+3],this._onChangeCallback(),this}toArray(n=[],o=0){return n[o]=this._x,n[o+1]=this._y,n[o+2]=this._z,n[o+3]=this._w,n}fromBufferAttribute(n,o){return this._x=n.getX(o),this._y=n.getY(o),this._z=n.getZ(o),this._w=n.getW(o),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(n){return this._onChangeCallback=n,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class ce{constructor(n=0,o=0,c=0){ce.prototype.isVector3=!0,this.x=n,this.y=o,this.z=c}set(n,o,c){return c===void 0&&(c=this.z),this.x=n,this.y=o,this.z=c,this}setScalar(n){return this.x=n,this.y=n,this.z=n,this}setX(n){return this.x=n,this}setY(n){return this.y=n,this}setZ(n){return this.z=n,this}setComponent(n,o){switch(n){case 0:this.x=o;break;case 1:this.y=o;break;case 2:this.z=o;break;default:throw new Error("index is out of range: "+n)}return this}getComponent(n){switch(n){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+n)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(n){return this.x=n.x,this.y=n.y,this.z=n.z,this}add(n){return this.x+=n.x,this.y+=n.y,this.z+=n.z,this}addScalar(n){return this.x+=n,this.y+=n,this.z+=n,this}addVectors(n,o){return this.x=n.x+o.x,this.y=n.y+o.y,this.z=n.z+o.z,this}addScaledVector(n,o){return this.x+=n.x*o,this.y+=n.y*o,this.z+=n.z*o,this}sub(n){return this.x-=n.x,this.y-=n.y,this.z-=n.z,this}subScalar(n){return this.x-=n,this.y-=n,this.z-=n,this}subVectors(n,o){return this.x=n.x-o.x,this.y=n.y-o.y,this.z=n.z-o.z,this}multiply(n){return this.x*=n.x,this.y*=n.y,this.z*=n.z,this}multiplyScalar(n){return this.x*=n,this.y*=n,this.z*=n,this}multiplyVectors(n,o){return this.x=n.x*o.x,this.y=n.y*o.y,this.z=n.z*o.z,this}applyEuler(n){return this.applyQuaternion(WE.setFromEuler(n))}applyAxisAngle(n,o){return this.applyQuaternion(WE.setFromAxisAngle(n,o))}applyMatrix3(n){const o=this.x,c=this.y,h=this.z,p=n.elements;return this.x=p[0]*o+p[3]*c+p[6]*h,this.y=p[1]*o+p[4]*c+p[7]*h,this.z=p[2]*o+p[5]*c+p[8]*h,this}applyNormalMatrix(n){return this.applyMatrix3(n).normalize()}applyMatrix4(n){const o=this.x,c=this.y,h=this.z,p=n.elements,_=1/(p[3]*o+p[7]*c+p[11]*h+p[15]);return this.x=(p[0]*o+p[4]*c+p[8]*h+p[12])*_,this.y=(p[1]*o+p[5]*c+p[9]*h+p[13])*_,this.z=(p[2]*o+p[6]*c+p[10]*h+p[14])*_,this}applyQuaternion(n){const o=this.x,c=this.y,h=this.z,p=n.x,_=n.y,y=n.z,b=n.w,M=2*(_*h-y*c),R=2*(y*o-p*h),C=2*(p*c-_*o);return this.x=o+b*M+_*C-y*R,this.y=c+b*R+y*M-p*C,this.z=h+b*C+p*R-_*M,this}project(n){return this.applyMatrix4(n.matrixWorldInverse).applyMatrix4(n.projectionMatrix)}unproject(n){return this.applyMatrix4(n.projectionMatrixInverse).applyMatrix4(n.matrixWorld)}transformDirection(n){const o=this.x,c=this.y,h=this.z,p=n.elements;return this.x=p[0]*o+p[4]*c+p[8]*h,this.y=p[1]*o+p[5]*c+p[9]*h,this.z=p[2]*o+p[6]*c+p[10]*h,this.normalize()}divide(n){return this.x/=n.x,this.y/=n.y,this.z/=n.z,this}divideScalar(n){return this.multiplyScalar(1/n)}min(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this.z=Math.min(this.z,n.z),this}max(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this.z=Math.max(this.z,n.z),this}clamp(n,o){return this.x=Kn(this.x,n.x,o.x),this.y=Kn(this.y,n.y,o.y),this.z=Kn(this.z,n.z,o.z),this}clampScalar(n,o){return this.x=Kn(this.x,n,o),this.y=Kn(this.y,n,o),this.z=Kn(this.z,n,o),this}clampLength(n,o){const c=this.length();return this.divideScalar(c||1).multiplyScalar(Kn(c,n,o))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(n){return this.x*n.x+this.y*n.y+this.z*n.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(n){return this.normalize().multiplyScalar(n)}lerp(n,o){return this.x+=(n.x-this.x)*o,this.y+=(n.y-this.y)*o,this.z+=(n.z-this.z)*o,this}lerpVectors(n,o,c){return this.x=n.x+(o.x-n.x)*c,this.y=n.y+(o.y-n.y)*c,this.z=n.z+(o.z-n.z)*c,this}cross(n){return this.crossVectors(this,n)}crossVectors(n,o){const c=n.x,h=n.y,p=n.z,_=o.x,y=o.y,b=o.z;return this.x=h*b-p*y,this.y=p*_-c*b,this.z=c*y-h*_,this}projectOnVector(n){const o=n.lengthSq();if(o===0)return this.set(0,0,0);const c=n.dot(this)/o;return this.copy(n).multiplyScalar(c)}projectOnPlane(n){return sS.copy(this).projectOnVector(n),this.sub(sS)}reflect(n){return this.sub(sS.copy(n).multiplyScalar(2*this.dot(n)))}angleTo(n){const o=Math.sqrt(this.lengthSq()*n.lengthSq());if(o===0)return Math.PI/2;const c=this.dot(n)/o;return Math.acos(Kn(c,-1,1))}distanceTo(n){return Math.sqrt(this.distanceToSquared(n))}distanceToSquared(n){const o=this.x-n.x,c=this.y-n.y,h=this.z-n.z;return o*o+c*c+h*h}manhattanDistanceTo(n){return Math.abs(this.x-n.x)+Math.abs(this.y-n.y)+Math.abs(this.z-n.z)}setFromSpherical(n){return this.setFromSphericalCoords(n.radius,n.phi,n.theta)}setFromSphericalCoords(n,o,c){const h=Math.sin(o)*n;return this.x=h*Math.sin(c),this.y=Math.cos(o)*n,this.z=h*Math.cos(c),this}setFromCylindrical(n){return this.setFromCylindricalCoords(n.radius,n.theta,n.y)}setFromCylindricalCoords(n,o,c){return this.x=n*Math.sin(o),this.y=c,this.z=n*Math.cos(o),this}setFromMatrixPosition(n){const o=n.elements;return this.x=o[12],this.y=o[13],this.z=o[14],this}setFromMatrixScale(n){const o=this.setFromMatrixColumn(n,0).length(),c=this.setFromMatrixColumn(n,1).length(),h=this.setFromMatrixColumn(n,2).length();return this.x=o,this.y=c,this.z=h,this}setFromMatrixColumn(n,o){return this.fromArray(n.elements,o*4)}setFromMatrix3Column(n,o){return this.fromArray(n.elements,o*3)}setFromEuler(n){return this.x=n._x,this.y=n._y,this.z=n._z,this}setFromColor(n){return this.x=n.r,this.y=n.g,this.z=n.b,this}equals(n){return n.x===this.x&&n.y===this.y&&n.z===this.z}fromArray(n,o=0){return this.x=n[o],this.y=n[o+1],this.z=n[o+2],this}toArray(n=[],o=0){return n[o]=this.x,n[o+1]=this.y,n[o+2]=this.z,n}fromBufferAttribute(n,o){return this.x=n.getX(o),this.y=n.getY(o),this.z=n.getZ(o),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const n=Math.random()*Math.PI*2,o=Math.random()*2-1,c=Math.sqrt(1-o*o);return this.x=c*Math.cos(n),this.y=o,this.z=c*Math.sin(n),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const sS=new ce,WE=new ho;class ci{constructor(n,o,c,h,p,_,y,b,M){ci.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],n!==void 0&&this.set(n,o,c,h,p,_,y,b,M)}set(n,o,c,h,p,_,y,b,M){const R=this.elements;return R[0]=n,R[1]=h,R[2]=y,R[3]=o,R[4]=p,R[5]=b,R[6]=c,R[7]=_,R[8]=M,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(n){const o=this.elements,c=n.elements;return o[0]=c[0],o[1]=c[1],o[2]=c[2],o[3]=c[3],o[4]=c[4],o[5]=c[5],o[6]=c[6],o[7]=c[7],o[8]=c[8],this}extractBasis(n,o,c){return n.setFromMatrix3Column(this,0),o.setFromMatrix3Column(this,1),c.setFromMatrix3Column(this,2),this}setFromMatrix4(n){const o=n.elements;return this.set(o[0],o[4],o[8],o[1],o[5],o[9],o[2],o[6],o[10]),this}multiply(n){return this.multiplyMatrices(this,n)}premultiply(n){return this.multiplyMatrices(n,this)}multiplyMatrices(n,o){const c=n.elements,h=o.elements,p=this.elements,_=c[0],y=c[3],b=c[6],M=c[1],R=c[4],C=c[7],N=c[2],P=c[5],L=c[8],V=h[0],U=h[3],I=h[6],Z=h[1],W=h[4],G=h[7],ae=h[2],le=h[5],he=h[8];return p[0]=_*V+y*Z+b*ae,p[3]=_*U+y*W+b*le,p[6]=_*I+y*G+b*he,p[1]=M*V+R*Z+C*ae,p[4]=M*U+R*W+C*le,p[7]=M*I+R*G+C*he,p[2]=N*V+P*Z+L*ae,p[5]=N*U+P*W+L*le,p[8]=N*I+P*G+L*he,this}multiplyScalar(n){const o=this.elements;return o[0]*=n,o[3]*=n,o[6]*=n,o[1]*=n,o[4]*=n,o[7]*=n,o[2]*=n,o[5]*=n,o[8]*=n,this}determinant(){const n=this.elements,o=n[0],c=n[1],h=n[2],p=n[3],_=n[4],y=n[5],b=n[6],M=n[7],R=n[8];return o*_*R-o*y*M-c*p*R+c*y*b+h*p*M-h*_*b}invert(){const n=this.elements,o=n[0],c=n[1],h=n[2],p=n[3],_=n[4],y=n[5],b=n[6],M=n[7],R=n[8],C=R*_-y*M,N=y*b-R*p,P=M*p-_*b,L=o*C+c*N+h*P;if(L===0)return this.set(0,0,0,0,0,0,0,0,0);const V=1/L;return n[0]=C*V,n[1]=(h*M-R*c)*V,n[2]=(y*c-h*_)*V,n[3]=N*V,n[4]=(R*o-h*b)*V,n[5]=(h*p-y*o)*V,n[6]=P*V,n[7]=(c*b-M*o)*V,n[8]=(_*o-c*p)*V,this}transpose(){let n;const o=this.elements;return n=o[1],o[1]=o[3],o[3]=n,n=o[2],o[2]=o[6],o[6]=n,n=o[5],o[5]=o[7],o[7]=n,this}getNormalMatrix(n){return this.setFromMatrix4(n).invert().transpose()}transposeIntoArray(n){const o=this.elements;return n[0]=o[0],n[1]=o[3],n[2]=o[6],n[3]=o[1],n[4]=o[4],n[5]=o[7],n[6]=o[2],n[7]=o[5],n[8]=o[8],this}setUvTransform(n,o,c,h,p,_,y){const b=Math.cos(p),M=Math.sin(p);return this.set(c*b,c*M,-c*(b*_+M*y)+_+n,-h*M,h*b,-h*(-M*_+b*y)+y+o,0,0,1),this}scale(n,o){return this.premultiply(rS.makeScale(n,o)),this}rotate(n){return this.premultiply(rS.makeRotation(-n)),this}translate(n,o){return this.premultiply(rS.makeTranslation(n,o)),this}makeTranslation(n,o){return n.isVector2?this.set(1,0,n.x,0,1,n.y,0,0,1):this.set(1,0,n,0,1,o,0,0,1),this}makeRotation(n){const o=Math.cos(n),c=Math.sin(n);return this.set(o,-c,0,c,o,0,0,0,1),this}makeScale(n,o){return this.set(n,0,0,0,o,0,0,0,1),this}equals(n){const o=this.elements,c=n.elements;for(let h=0;h<9;h++)if(o[h]!==c[h])return!1;return!0}fromArray(n,o=0){for(let c=0;c<9;c++)this.elements[c]=n[c+o];return this}toArray(n=[],o=0){const c=this.elements;return n[o]=c[0],n[o+1]=c[1],n[o+2]=c[2],n[o+3]=c[3],n[o+4]=c[4],n[o+5]=c[5],n[o+6]=c[6],n[o+7]=c[7],n[o+8]=c[8],n}clone(){return new this.constructor().fromArray(this.elements)}}const rS=new ci;function $E(m){for(let n=m.length-1;n>=0;--n)if(m[n]>=65535)return!0;return!1}const tV={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function _d(m,n){return new tV[m](n)}function Ip(m){return document.createElementNS("http://www.w3.org/1999/xhtml",m)}function XE(){const m=Ip("canvas");return m.style.display="block",m}const qE={};function xd(m){m in qE||(qE[m]=!0,console.warn(m))}function nV(m,n,o){return new Promise(function(c,h){function p(){switch(m.clientWaitSync(n,m.SYNC_FLUSH_COMMANDS_BIT,0)){case m.WAIT_FAILED:h();break;case m.TIMEOUT_EXPIRED:setTimeout(p,o);break;default:c()}}setTimeout(p,o)})}const YE=new ci().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),ZE=new ci().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function iV(){const m={enabled:!0,workingColorSpace:_u,spaces:{},convert:function(h,p,_){return this.enabled===!1||p===_||!p||!_||(this.spaces[p].transfer===ss&&(h.r=Al(h.r),h.g=Al(h.g),h.b=Al(h.b)),this.spaces[p].primaries!==this.spaces[_].primaries&&(h.applyMatrix3(this.spaces[p].toXYZ),h.applyMatrix3(this.spaces[_].fromXYZ)),this.spaces[_].transfer===ss&&(h.r=yd(h.r),h.g=yd(h.g),h.b=yd(h.b))),h},workingToColorSpace:function(h,p){return this.convert(h,this.workingColorSpace,p)},colorSpaceToWorking:function(h,p){return this.convert(h,p,this.workingColorSpace)},getPrimaries:function(h){return this.spaces[h].primaries},getTransfer:function(h){return h===wl?Cp:this.spaces[h].transfer},getLuminanceCoefficients:function(h,p=this.workingColorSpace){return h.fromArray(this.spaces[p].luminanceCoefficients)},define:function(h){Object.assign(this.spaces,h)},_getMatrix:function(h,p,_){return h.copy(this.spaces[p].toXYZ).multiply(this.spaces[_].fromXYZ)},_getDrawingBufferColorSpace:function(h){return this.spaces[h].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(h=this.workingColorSpace){return this.spaces[h].workingColorSpaceConfig.unpackColorSpace},fromWorkingColorSpace:function(h,p){return xd("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."),m.workingToColorSpace(h,p)},toWorkingColorSpace:function(h,p){return xd("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."),m.colorSpaceToWorking(h,p)}},n=[.64,.33,.3,.6,.15,.06],o=[.2126,.7152,.0722],c=[.3127,.329];return m.define({[_u]:{primaries:n,whitePoint:c,transfer:Cp,toXYZ:YE,fromXYZ:ZE,luminanceCoefficients:o,workingColorSpaceConfig:{unpackColorSpace:uo},outputColorSpaceConfig:{drawingBufferColorSpace:uo}},[uo]:{primaries:n,whitePoint:c,transfer:ss,toXYZ:YE,fromXYZ:ZE,luminanceCoefficients:o,outputColorSpaceConfig:{drawingBufferColorSpace:uo}}}),m}const Li=iV();function Al(m){return m<.04045?m*.0773993808:Math.pow(m*.9478672986+.0521327014,2.4)}function yd(m){return m<.0031308?m*12.92:1.055*Math.pow(m,.41666)-.055}let vd;class KE{static getDataURL(n,o="image/png"){if(/^data:/i.test(n.src)||typeof HTMLCanvasElement>"u")return n.src;let c;if(n instanceof HTMLCanvasElement)c=n;else{vd===void 0&&(vd=Ip("canvas")),vd.width=n.width,vd.height=n.height;const h=vd.getContext("2d");n instanceof ImageData?h.putImageData(n,0,0):h.drawImage(n,0,0,n.width,n.height),c=vd}return c.toDataURL(o)}static sRGBToLinear(n){if(typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&n instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&n instanceof ImageBitmap){const o=Ip("canvas");o.width=n.width,o.height=n.height;const c=o.getContext("2d");c.drawImage(n,0,0,n.width,n.height);const h=c.getImageData(0,0,n.width,n.height),p=h.data;for(let _=0;_<p.length;_++)p[_]=Al(p[_]/255)*255;return c.putImageData(h,0,0),o}else if(n.data){const o=n.data.slice(0);for(let c=0;c<o.length;c++)o instanceof Uint8Array||o instanceof Uint8ClampedArray?o[c]=Math.floor(Al(o[c]/255)*255):o[c]=Al(o[c]);return{data:o,width:n.width,height:n.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),n}}let sV=0;class mc{constructor(n=null){this.isSource=!0,Object.defineProperty(this,"id",{value:sV++}),this.uuid=Io(),this.data=n,this.dataReady=!0,this.version=0}getSize(n){const o=this.data;return o instanceof HTMLVideoElement?n.set(o.videoWidth,o.videoHeight,0):o instanceof VideoFrame?n.set(o.displayHeight,o.displayWidth,0):o!==null?n.set(o.width,o.height,o.depth||0):n.set(0,0,0),n}set needsUpdate(n){n===!0&&this.version++}toJSON(n){const o=n===void 0||typeof n=="string";if(!o&&n.images[this.uuid]!==void 0)return n.images[this.uuid];const c={uuid:this.uuid,url:""},h=this.data;if(h!==null){let p;if(Array.isArray(h)){p=[];for(let _=0,y=h.length;_<y;_++)h[_].isDataTexture?p.push(oS(h[_].image)):p.push(oS(h[_]))}else p=oS(h);c.url=p}return o||(n.images[this.uuid]=c),c}}function oS(m){return typeof HTMLImageElement<"u"&&m instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&m instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&m instanceof ImageBitmap?KE.getDataURL(m):m.data?{data:Array.from(m.data),width:m.width,height:m.height,type:m.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let rV=0;const aS=new ce;class Ps extends Ya{constructor(n=Ps.DEFAULT_IMAGE,o=Ps.DEFAULT_MAPPING,c=It,h=It,p=ge,_=Qt,y=Xs,b=ut,M=Ps.DEFAULT_ANISOTROPY,R=wl){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:rV++}),this.uuid=Io(),this.name="",this.source=new mc(n),this.mipmaps=[],this.mapping=o,this.channel=0,this.wrapS=c,this.wrapT=h,this.magFilter=p,this.minFilter=_,this.anisotropy=M,this.format=y,this.internalFormat=null,this.type=b,this.offset=new vt(0,0),this.repeat=new vt(1,1),this.center=new vt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ci,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=R,this.userData={},this.updateRanges=[],this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isArrayTexture=!!(n&&n.depth&&n.depth>1),this.pmremVersion=0}get width(){return this.source.getSize(aS).x}get height(){return this.source.getSize(aS).y}get depth(){return this.source.getSize(aS).z}get image(){return this.source.data}set image(n=null){this.source.data=n}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}addUpdateRange(n,o){this.updateRanges.push({start:n,count:o})}clearUpdateRanges(){this.updateRanges.length=0}clone(){return new this.constructor().copy(this)}copy(n){return this.name=n.name,this.source=n.source,this.mipmaps=n.mipmaps.slice(0),this.mapping=n.mapping,this.channel=n.channel,this.wrapS=n.wrapS,this.wrapT=n.wrapT,this.magFilter=n.magFilter,this.minFilter=n.minFilter,this.anisotropy=n.anisotropy,this.format=n.format,this.internalFormat=n.internalFormat,this.type=n.type,this.offset.copy(n.offset),this.repeat.copy(n.repeat),this.center.copy(n.center),this.rotation=n.rotation,this.matrixAutoUpdate=n.matrixAutoUpdate,this.matrix.copy(n.matrix),this.generateMipmaps=n.generateMipmaps,this.premultiplyAlpha=n.premultiplyAlpha,this.flipY=n.flipY,this.unpackAlignment=n.unpackAlignment,this.colorSpace=n.colorSpace,this.renderTarget=n.renderTarget,this.isRenderTargetTexture=n.isRenderTargetTexture,this.isArrayTexture=n.isArrayTexture,this.userData=JSON.parse(JSON.stringify(n.userData)),this.needsUpdate=!0,this}setValues(n){for(const o in n){const c=n[o];if(c===void 0){console.warn(`THREE.Texture.setValues(): parameter '${o}' has value of undefined.`);continue}const h=this[o];if(h===void 0){console.warn(`THREE.Texture.setValues(): property '${o}' does not exist.`);continue}h&&c&&h.isVector2&&c.isVector2||h&&c&&h.isVector3&&c.isVector3||h&&c&&h.isMatrix3&&c.isMatrix3?h.copy(c):this[o]=c}}toJSON(n){const o=n===void 0||typeof n=="string";if(!o&&n.textures[this.uuid]!==void 0)return n.textures[this.uuid];const c={metadata:{version:4.7,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(n).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(c.userData=this.userData),o||(n.textures[this.uuid]=c),c}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(n){if(this.mapping!==Se)return n;if(n.applyMatrix3(this.matrix),n.x<0||n.x>1)switch(this.wrapS){case kt:n.x=n.x-Math.floor(n.x);break;case It:n.x=n.x<0?0:1;break;case Ye:Math.abs(Math.floor(n.x)%2)===1?n.x=Math.ceil(n.x)-n.x:n.x=n.x-Math.floor(n.x);break}if(n.y<0||n.y>1)switch(this.wrapT){case kt:n.y=n.y-Math.floor(n.y);break;case It:n.y=n.y<0?0:1;break;case Ye:Math.abs(Math.floor(n.y)%2)===1?n.y=Math.ceil(n.y)-n.y:n.y=n.y-Math.floor(n.y);break}return this.flipY&&(n.y=1-n.y),n}set needsUpdate(n){n===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(n){n===!0&&this.pmremVersion++}}Ps.DEFAULT_IMAGE=null,Ps.DEFAULT_MAPPING=Se,Ps.DEFAULT_ANISOTROPY=1;class Fi{constructor(n=0,o=0,c=0,h=1){Fi.prototype.isVector4=!0,this.x=n,this.y=o,this.z=c,this.w=h}get width(){return this.z}set width(n){this.z=n}get height(){return this.w}set height(n){this.w=n}set(n,o,c,h){return this.x=n,this.y=o,this.z=c,this.w=h,this}setScalar(n){return this.x=n,this.y=n,this.z=n,this.w=n,this}setX(n){return this.x=n,this}setY(n){return this.y=n,this}setZ(n){return this.z=n,this}setW(n){return this.w=n,this}setComponent(n,o){switch(n){case 0:this.x=o;break;case 1:this.y=o;break;case 2:this.z=o;break;case 3:this.w=o;break;default:throw new Error("index is out of range: "+n)}return this}getComponent(n){switch(n){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+n)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(n){return this.x=n.x,this.y=n.y,this.z=n.z,this.w=n.w!==void 0?n.w:1,this}add(n){return this.x+=n.x,this.y+=n.y,this.z+=n.z,this.w+=n.w,this}addScalar(n){return this.x+=n,this.y+=n,this.z+=n,this.w+=n,this}addVectors(n,o){return this.x=n.x+o.x,this.y=n.y+o.y,this.z=n.z+o.z,this.w=n.w+o.w,this}addScaledVector(n,o){return this.x+=n.x*o,this.y+=n.y*o,this.z+=n.z*o,this.w+=n.w*o,this}sub(n){return this.x-=n.x,this.y-=n.y,this.z-=n.z,this.w-=n.w,this}subScalar(n){return this.x-=n,this.y-=n,this.z-=n,this.w-=n,this}subVectors(n,o){return this.x=n.x-o.x,this.y=n.y-o.y,this.z=n.z-o.z,this.w=n.w-o.w,this}multiply(n){return this.x*=n.x,this.y*=n.y,this.z*=n.z,this.w*=n.w,this}multiplyScalar(n){return this.x*=n,this.y*=n,this.z*=n,this.w*=n,this}applyMatrix4(n){const o=this.x,c=this.y,h=this.z,p=this.w,_=n.elements;return this.x=_[0]*o+_[4]*c+_[8]*h+_[12]*p,this.y=_[1]*o+_[5]*c+_[9]*h+_[13]*p,this.z=_[2]*o+_[6]*c+_[10]*h+_[14]*p,this.w=_[3]*o+_[7]*c+_[11]*h+_[15]*p,this}divide(n){return this.x/=n.x,this.y/=n.y,this.z/=n.z,this.w/=n.w,this}divideScalar(n){return this.multiplyScalar(1/n)}setAxisAngleFromQuaternion(n){this.w=2*Math.acos(n.w);const o=Math.sqrt(1-n.w*n.w);return o<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=n.x/o,this.y=n.y/o,this.z=n.z/o),this}setAxisAngleFromRotationMatrix(n){let o,c,h,p;const b=n.elements,M=b[0],R=b[4],C=b[8],N=b[1],P=b[5],L=b[9],V=b[2],U=b[6],I=b[10];if(Math.abs(R-N)<.01&&Math.abs(C-V)<.01&&Math.abs(L-U)<.01){if(Math.abs(R+N)<.1&&Math.abs(C+V)<.1&&Math.abs(L+U)<.1&&Math.abs(M+P+I-3)<.1)return this.set(1,0,0,0),this;o=Math.PI;const W=(M+1)/2,G=(P+1)/2,ae=(I+1)/2,le=(R+N)/4,he=(C+V)/4,me=(L+U)/4;return W>G&&W>ae?W<.01?(c=0,h=.707106781,p=.707106781):(c=Math.sqrt(W),h=le/c,p=he/c):G>ae?G<.01?(c=.707106781,h=0,p=.707106781):(h=Math.sqrt(G),c=le/h,p=me/h):ae<.01?(c=.707106781,h=.707106781,p=0):(p=Math.sqrt(ae),c=he/p,h=me/p),this.set(c,h,p,o),this}let Z=Math.sqrt((U-L)*(U-L)+(C-V)*(C-V)+(N-R)*(N-R));return Math.abs(Z)<.001&&(Z=1),this.x=(U-L)/Z,this.y=(C-V)/Z,this.z=(N-R)/Z,this.w=Math.acos((M+P+I-1)/2),this}setFromMatrixPosition(n){const o=n.elements;return this.x=o[12],this.y=o[13],this.z=o[14],this.w=o[15],this}min(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this.z=Math.min(this.z,n.z),this.w=Math.min(this.w,n.w),this}max(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this.z=Math.max(this.z,n.z),this.w=Math.max(this.w,n.w),this}clamp(n,o){return this.x=Kn(this.x,n.x,o.x),this.y=Kn(this.y,n.y,o.y),this.z=Kn(this.z,n.z,o.z),this.w=Kn(this.w,n.w,o.w),this}clampScalar(n,o){return this.x=Kn(this.x,n,o),this.y=Kn(this.y,n,o),this.z=Kn(this.z,n,o),this.w=Kn(this.w,n,o),this}clampLength(n,o){const c=this.length();return this.divideScalar(c||1).multiplyScalar(Kn(c,n,o))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(n){return this.x*n.x+this.y*n.y+this.z*n.z+this.w*n.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(n){return this.normalize().multiplyScalar(n)}lerp(n,o){return this.x+=(n.x-this.x)*o,this.y+=(n.y-this.y)*o,this.z+=(n.z-this.z)*o,this.w+=(n.w-this.w)*o,this}lerpVectors(n,o,c){return this.x=n.x+(o.x-n.x)*c,this.y=n.y+(o.y-n.y)*c,this.z=n.z+(o.z-n.z)*c,this.w=n.w+(o.w-n.w)*c,this}equals(n){return n.x===this.x&&n.y===this.y&&n.z===this.z&&n.w===this.w}fromArray(n,o=0){return this.x=n[o],this.y=n[o+1],this.z=n[o+2],this.w=n[o+3],this}toArray(n=[],o=0){return n[o]=this.x,n[o+1]=this.y,n[o+2]=this.z,n[o+3]=this.w,n}fromBufferAttribute(n,o){return this.x=n.getX(o),this.y=n.getY(o),this.z=n.getZ(o),this.w=n.getW(o),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class lS extends Ya{constructor(n=1,o=1,c={}){super(),c=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:ge,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1,depth:1,multiview:!1},c),this.isRenderTarget=!0,this.width=n,this.height=o,this.depth=c.depth,this.scissor=new Fi(0,0,n,o),this.scissorTest=!1,this.viewport=new Fi(0,0,n,o);const h={width:n,height:o,depth:c.depth},p=new Ps(h);this.textures=[];const _=c.count;for(let y=0;y<_;y++)this.textures[y]=p.clone(),this.textures[y].isRenderTargetTexture=!0,this.textures[y].renderTarget=this;this._setTextureOptions(c),this.depthBuffer=c.depthBuffer,this.stencilBuffer=c.stencilBuffer,this.resolveDepthBuffer=c.resolveDepthBuffer,this.resolveStencilBuffer=c.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=c.depthTexture,this.samples=c.samples,this.multiview=c.multiview}_setTextureOptions(n={}){const o={minFilter:ge,generateMipmaps:!1,flipY:!1,internalFormat:null};n.mapping!==void 0&&(o.mapping=n.mapping),n.wrapS!==void 0&&(o.wrapS=n.wrapS),n.wrapT!==void 0&&(o.wrapT=n.wrapT),n.wrapR!==void 0&&(o.wrapR=n.wrapR),n.magFilter!==void 0&&(o.magFilter=n.magFilter),n.minFilter!==void 0&&(o.minFilter=n.minFilter),n.format!==void 0&&(o.format=n.format),n.type!==void 0&&(o.type=n.type),n.anisotropy!==void 0&&(o.anisotropy=n.anisotropy),n.colorSpace!==void 0&&(o.colorSpace=n.colorSpace),n.flipY!==void 0&&(o.flipY=n.flipY),n.generateMipmaps!==void 0&&(o.generateMipmaps=n.generateMipmaps),n.internalFormat!==void 0&&(o.internalFormat=n.internalFormat);for(let c=0;c<this.textures.length;c++)this.textures[c].setValues(o)}get texture(){return this.textures[0]}set texture(n){this.textures[0]=n}set depthTexture(n){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),n!==null&&(n.renderTarget=this),this._depthTexture=n}get depthTexture(){return this._depthTexture}setSize(n,o,c=1){if(this.width!==n||this.height!==o||this.depth!==c){this.width=n,this.height=o,this.depth=c;for(let h=0,p=this.textures.length;h<p;h++)this.textures[h].image.width=n,this.textures[h].image.height=o,this.textures[h].image.depth=c,this.textures[h].isArrayTexture=this.textures[h].image.depth>1;this.dispose()}this.viewport.set(0,0,n,o),this.scissor.set(0,0,n,o)}clone(){return new this.constructor().copy(this)}copy(n){this.width=n.width,this.height=n.height,this.depth=n.depth,this.scissor.copy(n.scissor),this.scissorTest=n.scissorTest,this.viewport.copy(n.viewport),this.textures.length=0;for(let o=0,c=n.textures.length;o<c;o++){this.textures[o]=n.textures[o].clone(),this.textures[o].isRenderTargetTexture=!0,this.textures[o].renderTarget=this;const h=Object.assign({},n.textures[o].image);this.textures[o].source=new mc(h)}return this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,n.depthTexture!==null&&(this.depthTexture=n.depthTexture.clone()),this.samples=n.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Za extends lS{constructor(n=1,o=1,c={}){super(n,o,c),this.isWebGLRenderTarget=!0}}class c_ extends Ps{constructor(n=null,o=1,c=1,h=1){super(null),this.isDataArrayTexture=!0,this.image={data:n,width:o,height:c,depth:h},this.magFilter=mt,this.minFilter=mt,this.wrapR=It,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(n){this.layerUpdates.add(n)}clearLayerUpdates(){this.layerUpdates.clear()}}class oV extends Za{constructor(n=1,o=1,c=1,h={}){super(n,o,h),this.isWebGLArrayRenderTarget=!0,this.depth=c,this.texture=new c_(null,n,o,c),this._setTextureOptions(h),this.texture.isRenderTargetTexture=!0}}class u_ extends Ps{constructor(n=null,o=1,c=1,h=1){super(null),this.isData3DTexture=!0,this.image={data:n,width:o,height:c,depth:h},this.magFilter=mt,this.minFilter=mt,this.wrapR=It,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class aV extends Za{constructor(n=1,o=1,c=1,h={}){super(n,o,h),this.isWebGL3DRenderTarget=!0,this.depth=c,this.texture=new u_(null,n,o,c),this._setTextureOptions(h),this.texture.isRenderTargetTexture=!0}}class Lr{constructor(n=new ce(1/0,1/0,1/0),o=new ce(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=n,this.max=o}set(n,o){return this.min.copy(n),this.max.copy(o),this}setFromArray(n){this.makeEmpty();for(let o=0,c=n.length;o<c;o+=3)this.expandByPoint(Ma.fromArray(n,o));return this}setFromBufferAttribute(n){this.makeEmpty();for(let o=0,c=n.count;o<c;o++)this.expandByPoint(Ma.fromBufferAttribute(n,o));return this}setFromPoints(n){this.makeEmpty();for(let o=0,c=n.length;o<c;o++)this.expandByPoint(n[o]);return this}setFromCenterAndSize(n,o){const c=Ma.copy(o).multiplyScalar(.5);return this.min.copy(n).sub(c),this.max.copy(n).add(c),this}setFromObject(n,o=!1){return this.makeEmpty(),this.expandByObject(n,o)}clone(){return new this.constructor().copy(this)}copy(n){return this.min.copy(n.min),this.max.copy(n.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(n){return this.isEmpty()?n.set(0,0,0):n.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(n){return this.isEmpty()?n.set(0,0,0):n.subVectors(this.max,this.min)}expandByPoint(n){return this.min.min(n),this.max.max(n),this}expandByVector(n){return this.min.sub(n),this.max.add(n),this}expandByScalar(n){return this.min.addScalar(-n),this.max.addScalar(n),this}expandByObject(n,o=!1){n.updateWorldMatrix(!1,!1);const c=n.geometry;if(c!==void 0){const p=c.getAttribute("position");if(o===!0&&p!==void 0&&n.isInstancedMesh!==!0)for(let _=0,y=p.count;_<y;_++)n.isMesh===!0?n.getVertexPosition(_,Ma):Ma.fromBufferAttribute(p,_),Ma.applyMatrix4(n.matrixWorld),this.expandByPoint(Ma);else n.boundingBox!==void 0?(n.boundingBox===null&&n.computeBoundingBox(),h_.copy(n.boundingBox)):(c.boundingBox===null&&c.computeBoundingBox(),h_.copy(c.boundingBox)),h_.applyMatrix4(n.matrixWorld),this.union(h_)}const h=n.children;for(let p=0,_=h.length;p<_;p++)this.expandByObject(h[p],o);return this}containsPoint(n){return n.x>=this.min.x&&n.x<=this.max.x&&n.y>=this.min.y&&n.y<=this.max.y&&n.z>=this.min.z&&n.z<=this.max.z}containsBox(n){return this.min.x<=n.min.x&&n.max.x<=this.max.x&&this.min.y<=n.min.y&&n.max.y<=this.max.y&&this.min.z<=n.min.z&&n.max.z<=this.max.z}getParameter(n,o){return o.set((n.x-this.min.x)/(this.max.x-this.min.x),(n.y-this.min.y)/(this.max.y-this.min.y),(n.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(n){return n.max.x>=this.min.x&&n.min.x<=this.max.x&&n.max.y>=this.min.y&&n.min.y<=this.max.y&&n.max.z>=this.min.z&&n.min.z<=this.max.z}intersectsSphere(n){return this.clampPoint(n.center,Ma),Ma.distanceToSquared(n.center)<=n.radius*n.radius}intersectsPlane(n){let o,c;return n.normal.x>0?(o=n.normal.x*this.min.x,c=n.normal.x*this.max.x):(o=n.normal.x*this.max.x,c=n.normal.x*this.min.x),n.normal.y>0?(o+=n.normal.y*this.min.y,c+=n.normal.y*this.max.y):(o+=n.normal.y*this.max.y,c+=n.normal.y*this.min.y),n.normal.z>0?(o+=n.normal.z*this.min.z,c+=n.normal.z*this.max.z):(o+=n.normal.z*this.max.z,c+=n.normal.z*this.min.z),o<=-n.constant&&c>=-n.constant}intersectsTriangle(n){if(this.isEmpty())return!1;this.getCenter(Lp),d_.subVectors(this.max,Lp),Sd.subVectors(n.a,Lp),bd.subVectors(n.b,Lp),Td.subVectors(n.c,Lp),gc.subVectors(bd,Sd),_c.subVectors(Td,bd),vu.subVectors(Sd,Td);let o=[0,-gc.z,gc.y,0,-_c.z,_c.y,0,-vu.z,vu.y,gc.z,0,-gc.x,_c.z,0,-_c.x,vu.z,0,-vu.x,-gc.y,gc.x,0,-_c.y,_c.x,0,-vu.y,vu.x,0];return!cS(o,Sd,bd,Td,d_)||(o=[1,0,0,0,1,0,0,0,1],!cS(o,Sd,bd,Td,d_))?!1:(f_.crossVectors(gc,_c),o=[f_.x,f_.y,f_.z],cS(o,Sd,bd,Td,d_))}clampPoint(n,o){return o.copy(n).clamp(this.min,this.max)}distanceToPoint(n){return this.clampPoint(n,Ma).distanceTo(n)}getBoundingSphere(n){return this.isEmpty()?n.makeEmpty():(this.getCenter(n.center),n.radius=this.getSize(Ma).length()*.5),n}intersect(n){return this.min.max(n.min),this.max.min(n.max),this.isEmpty()&&this.makeEmpty(),this}union(n){return this.min.min(n.min),this.max.max(n.max),this}applyMatrix4(n){return this.isEmpty()?this:(El[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(n),El[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(n),El[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(n),El[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(n),El[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(n),El[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(n),El[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(n),El[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(n),this.setFromPoints(El),this)}translate(n){return this.min.add(n),this.max.add(n),this}equals(n){return n.min.equals(this.min)&&n.max.equals(this.max)}toJSON(){return{min:this.min.toArray(),max:this.max.toArray()}}fromJSON(n){return this.min.fromArray(n.min),this.max.fromArray(n.max),this}}const El=[new ce,new ce,new ce,new ce,new ce,new ce,new ce,new ce],Ma=new ce,h_=new Lr,Sd=new ce,bd=new ce,Td=new ce,gc=new ce,_c=new ce,vu=new ce,Lp=new ce,d_=new ce,f_=new ce,Su=new ce;function cS(m,n,o,c,h){for(let p=0,_=m.length-3;p<=_;p+=3){Su.fromArray(m,p);const y=h.x*Math.abs(Su.x)+h.y*Math.abs(Su.y)+h.z*Math.abs(Su.z),b=n.dot(Su),M=o.dot(Su),R=c.dot(Su);if(Math.max(-Math.max(b,M,R),Math.min(b,M,R))>y)return!1}return!0}const lV=new Lr,Dp=new ce,uS=new ce;class Mr{constructor(n=new ce,o=-1){this.isSphere=!0,this.center=n,this.radius=o}set(n,o){return this.center.copy(n),this.radius=o,this}setFromPoints(n,o){const c=this.center;o!==void 0?c.copy(o):lV.setFromPoints(n).getCenter(c);let h=0;for(let p=0,_=n.length;p<_;p++)h=Math.max(h,c.distanceToSquared(n[p]));return this.radius=Math.sqrt(h),this}copy(n){return this.center.copy(n.center),this.radius=n.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(n){return n.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(n){return n.distanceTo(this.center)-this.radius}intersectsSphere(n){const o=this.radius+n.radius;return n.center.distanceToSquared(this.center)<=o*o}intersectsBox(n){return n.intersectsSphere(this)}intersectsPlane(n){return Math.abs(n.distanceToPoint(this.center))<=this.radius}clampPoint(n,o){const c=this.center.distanceToSquared(n);return o.copy(n),c>this.radius*this.radius&&(o.sub(this.center).normalize(),o.multiplyScalar(this.radius).add(this.center)),o}getBoundingBox(n){return this.isEmpty()?(n.makeEmpty(),n):(n.set(this.center,this.center),n.expandByScalar(this.radius),n)}applyMatrix4(n){return this.center.applyMatrix4(n),this.radius=this.radius*n.getMaxScaleOnAxis(),this}translate(n){return this.center.add(n),this}expandByPoint(n){if(this.isEmpty())return this.center.copy(n),this.radius=0,this;Dp.subVectors(n,this.center);const o=Dp.lengthSq();if(o>this.radius*this.radius){const c=Math.sqrt(o),h=(c-this.radius)*.5;this.center.addScaledVector(Dp,h/c),this.radius+=h}return this}union(n){return n.isEmpty()?this:this.isEmpty()?(this.copy(n),this):(this.center.equals(n.center)===!0?this.radius=Math.max(this.radius,n.radius):(uS.subVectors(n.center,this.center).setLength(n.radius),this.expandByPoint(Dp.copy(n.center).add(uS)),this.expandByPoint(Dp.copy(n.center).sub(uS))),this)}equals(n){return n.center.equals(this.center)&&n.radius===this.radius}clone(){return new this.constructor().copy(this)}toJSON(){return{radius:this.radius,center:this.center.toArray()}}fromJSON(n){return this.radius=n.radius,this.center.fromArray(n.center),this}}const Rl=new ce,hS=new ce,p_=new ce,xc=new ce,dS=new ce,m_=new ce,fS=new ce;class Md{constructor(n=new ce,o=new ce(0,0,-1)){this.origin=n,this.direction=o}set(n,o){return this.origin.copy(n),this.direction.copy(o),this}copy(n){return this.origin.copy(n.origin),this.direction.copy(n.direction),this}at(n,o){return o.copy(this.origin).addScaledVector(this.direction,n)}lookAt(n){return this.direction.copy(n).sub(this.origin).normalize(),this}recast(n){return this.origin.copy(this.at(n,Rl)),this}closestPointToPoint(n,o){o.subVectors(n,this.origin);const c=o.dot(this.direction);return c<0?o.copy(this.origin):o.copy(this.origin).addScaledVector(this.direction,c)}distanceToPoint(n){return Math.sqrt(this.distanceSqToPoint(n))}distanceSqToPoint(n){const o=Rl.subVectors(n,this.origin).dot(this.direction);return o<0?this.origin.distanceToSquared(n):(Rl.copy(this.origin).addScaledVector(this.direction,o),Rl.distanceToSquared(n))}distanceSqToSegment(n,o,c,h){hS.copy(n).add(o).multiplyScalar(.5),p_.copy(o).sub(n).normalize(),xc.copy(this.origin).sub(hS);const p=n.distanceTo(o)*.5,_=-this.direction.dot(p_),y=xc.dot(this.direction),b=-xc.dot(p_),M=xc.lengthSq(),R=Math.abs(1-_*_);let C,N,P,L;if(R>0)if(C=_*b-y,N=_*y-b,L=p*R,C>=0)if(N>=-L)if(N<=L){const V=1/R;C*=V,N*=V,P=C*(C+_*N+2*y)+N*(_*C+N+2*b)+M}else N=p,C=Math.max(0,-(_*N+y)),P=-C*C+N*(N+2*b)+M;else N=-p,C=Math.max(0,-(_*N+y)),P=-C*C+N*(N+2*b)+M;else N<=-L?(C=Math.max(0,-(-_*p+y)),N=C>0?-p:Math.min(Math.max(-p,-b),p),P=-C*C+N*(N+2*b)+M):N<=L?(C=0,N=Math.min(Math.max(-p,-b),p),P=N*(N+2*b)+M):(C=Math.max(0,-(_*p+y)),N=C>0?p:Math.min(Math.max(-p,-b),p),P=-C*C+N*(N+2*b)+M);else N=_>0?-p:p,C=Math.max(0,-(_*N+y)),P=-C*C+N*(N+2*b)+M;return c&&c.copy(this.origin).addScaledVector(this.direction,C),h&&h.copy(hS).addScaledVector(p_,N),P}intersectSphere(n,o){Rl.subVectors(n.center,this.origin);const c=Rl.dot(this.direction),h=Rl.dot(Rl)-c*c,p=n.radius*n.radius;if(h>p)return null;const _=Math.sqrt(p-h),y=c-_,b=c+_;return b<0?null:y<0?this.at(b,o):this.at(y,o)}intersectsSphere(n){return n.radius<0?!1:this.distanceSqToPoint(n.center)<=n.radius*n.radius}distanceToPlane(n){const o=n.normal.dot(this.direction);if(o===0)return n.distanceToPoint(this.origin)===0?0:null;const c=-(this.origin.dot(n.normal)+n.constant)/o;return c>=0?c:null}intersectPlane(n,o){const c=this.distanceToPlane(n);return c===null?null:this.at(c,o)}intersectsPlane(n){const o=n.distanceToPoint(this.origin);return o===0||n.normal.dot(this.direction)*o<0}intersectBox(n,o){let c,h,p,_,y,b;const M=1/this.direction.x,R=1/this.direction.y,C=1/this.direction.z,N=this.origin;return M>=0?(c=(n.min.x-N.x)*M,h=(n.max.x-N.x)*M):(c=(n.max.x-N.x)*M,h=(n.min.x-N.x)*M),R>=0?(p=(n.min.y-N.y)*R,_=(n.max.y-N.y)*R):(p=(n.max.y-N.y)*R,_=(n.min.y-N.y)*R),c>_||p>h||((p>c||isNaN(c))&&(c=p),(_<h||isNaN(h))&&(h=_),C>=0?(y=(n.min.z-N.z)*C,b=(n.max.z-N.z)*C):(y=(n.max.z-N.z)*C,b=(n.min.z-N.z)*C),c>b||y>h)||((y>c||c!==c)&&(c=y),(b<h||h!==h)&&(h=b),h<0)?null:this.at(c>=0?c:h,o)}intersectsBox(n){return this.intersectBox(n,Rl)!==null}intersectTriangle(n,o,c,h,p){dS.subVectors(o,n),m_.subVectors(c,n),fS.crossVectors(dS,m_);let _=this.direction.dot(fS),y;if(_>0){if(h)return null;y=1}else if(_<0)y=-1,_=-_;else return null;xc.subVectors(this.origin,n);const b=y*this.direction.dot(m_.crossVectors(xc,m_));if(b<0)return null;const M=y*this.direction.dot(dS.cross(xc));if(M<0||b+M>_)return null;const R=-y*xc.dot(fS);return R<0?null:this.at(R/_,p)}applyMatrix4(n){return this.origin.applyMatrix4(n),this.direction.transformDirection(n),this}equals(n){return n.origin.equals(this.origin)&&n.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Qn{constructor(n,o,c,h,p,_,y,b,M,R,C,N,P,L,V,U){Qn.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],n!==void 0&&this.set(n,o,c,h,p,_,y,b,M,R,C,N,P,L,V,U)}set(n,o,c,h,p,_,y,b,M,R,C,N,P,L,V,U){const I=this.elements;return I[0]=n,I[4]=o,I[8]=c,I[12]=h,I[1]=p,I[5]=_,I[9]=y,I[13]=b,I[2]=M,I[6]=R,I[10]=C,I[14]=N,I[3]=P,I[7]=L,I[11]=V,I[15]=U,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Qn().fromArray(this.elements)}copy(n){const o=this.elements,c=n.elements;return o[0]=c[0],o[1]=c[1],o[2]=c[2],o[3]=c[3],o[4]=c[4],o[5]=c[5],o[6]=c[6],o[7]=c[7],o[8]=c[8],o[9]=c[9],o[10]=c[10],o[11]=c[11],o[12]=c[12],o[13]=c[13],o[14]=c[14],o[15]=c[15],this}copyPosition(n){const o=this.elements,c=n.elements;return o[12]=c[12],o[13]=c[13],o[14]=c[14],this}setFromMatrix3(n){const o=n.elements;return this.set(o[0],o[3],o[6],0,o[1],o[4],o[7],0,o[2],o[5],o[8],0,0,0,0,1),this}extractBasis(n,o,c){return n.setFromMatrixColumn(this,0),o.setFromMatrixColumn(this,1),c.setFromMatrixColumn(this,2),this}makeBasis(n,o,c){return this.set(n.x,o.x,c.x,0,n.y,o.y,c.y,0,n.z,o.z,c.z,0,0,0,0,1),this}extractRotation(n){const o=this.elements,c=n.elements,h=1/wd.setFromMatrixColumn(n,0).length(),p=1/wd.setFromMatrixColumn(n,1).length(),_=1/wd.setFromMatrixColumn(n,2).length();return o[0]=c[0]*h,o[1]=c[1]*h,o[2]=c[2]*h,o[3]=0,o[4]=c[4]*p,o[5]=c[5]*p,o[6]=c[6]*p,o[7]=0,o[8]=c[8]*_,o[9]=c[9]*_,o[10]=c[10]*_,o[11]=0,o[12]=0,o[13]=0,o[14]=0,o[15]=1,this}makeRotationFromEuler(n){const o=this.elements,c=n.x,h=n.y,p=n.z,_=Math.cos(c),y=Math.sin(c),b=Math.cos(h),M=Math.sin(h),R=Math.cos(p),C=Math.sin(p);if(n.order==="XYZ"){const N=_*R,P=_*C,L=y*R,V=y*C;o[0]=b*R,o[4]=-b*C,o[8]=M,o[1]=P+L*M,o[5]=N-V*M,o[9]=-y*b,o[2]=V-N*M,o[6]=L+P*M,o[10]=_*b}else if(n.order==="YXZ"){const N=b*R,P=b*C,L=M*R,V=M*C;o[0]=N+V*y,o[4]=L*y-P,o[8]=_*M,o[1]=_*C,o[5]=_*R,o[9]=-y,o[2]=P*y-L,o[6]=V+N*y,o[10]=_*b}else if(n.order==="ZXY"){const N=b*R,P=b*C,L=M*R,V=M*C;o[0]=N-V*y,o[4]=-_*C,o[8]=L+P*y,o[1]=P+L*y,o[5]=_*R,o[9]=V-N*y,o[2]=-_*M,o[6]=y,o[10]=_*b}else if(n.order==="ZYX"){const N=_*R,P=_*C,L=y*R,V=y*C;o[0]=b*R,o[4]=L*M-P,o[8]=N*M+V,o[1]=b*C,o[5]=V*M+N,o[9]=P*M-L,o[2]=-M,o[6]=y*b,o[10]=_*b}else if(n.order==="YZX"){const N=_*b,P=_*M,L=y*b,V=y*M;o[0]=b*R,o[4]=V-N*C,o[8]=L*C+P,o[1]=C,o[5]=_*R,o[9]=-y*R,o[2]=-M*R,o[6]=P*C+L,o[10]=N-V*C}else if(n.order==="XZY"){const N=_*b,P=_*M,L=y*b,V=y*M;o[0]=b*R,o[4]=-C,o[8]=M*R,o[1]=N*C+V,o[5]=_*R,o[9]=P*C-L,o[2]=L*C-P,o[6]=y*R,o[10]=V*C+N}return o[3]=0,o[7]=0,o[11]=0,o[12]=0,o[13]=0,o[14]=0,o[15]=1,this}makeRotationFromQuaternion(n){return this.compose(cV,n,uV)}lookAt(n,o,c){const h=this.elements;return Lo.subVectors(n,o),Lo.lengthSq()===0&&(Lo.z=1),Lo.normalize(),yc.crossVectors(c,Lo),yc.lengthSq()===0&&(Math.abs(c.z)===1?Lo.x+=1e-4:Lo.z+=1e-4,Lo.normalize(),yc.crossVectors(c,Lo)),yc.normalize(),g_.crossVectors(Lo,yc),h[0]=yc.x,h[4]=g_.x,h[8]=Lo.x,h[1]=yc.y,h[5]=g_.y,h[9]=Lo.y,h[2]=yc.z,h[6]=g_.z,h[10]=Lo.z,this}multiply(n){return this.multiplyMatrices(this,n)}premultiply(n){return this.multiplyMatrices(n,this)}multiplyMatrices(n,o){const c=n.elements,h=o.elements,p=this.elements,_=c[0],y=c[4],b=c[8],M=c[12],R=c[1],C=c[5],N=c[9],P=c[13],L=c[2],V=c[6],U=c[10],I=c[14],Z=c[3],W=c[7],G=c[11],ae=c[15],le=h[0],he=h[4],me=h[8],j=h[12],J=h[1],fe=h[5],We=h[9],Ke=h[13],ot=h[2],pt=h[6],ht=h[10],St=h[14],st=h[3],jt=h[7],hn=h[11],An=h[15];return p[0]=_*le+y*J+b*ot+M*st,p[4]=_*he+y*fe+b*pt+M*jt,p[8]=_*me+y*We+b*ht+M*hn,p[12]=_*j+y*Ke+b*St+M*An,p[1]=R*le+C*J+N*ot+P*st,p[5]=R*he+C*fe+N*pt+P*jt,p[9]=R*me+C*We+N*ht+P*hn,p[13]=R*j+C*Ke+N*St+P*An,p[2]=L*le+V*J+U*ot+I*st,p[6]=L*he+V*fe+U*pt+I*jt,p[10]=L*me+V*We+U*ht+I*hn,p[14]=L*j+V*Ke+U*St+I*An,p[3]=Z*le+W*J+G*ot+ae*st,p[7]=Z*he+W*fe+G*pt+ae*jt,p[11]=Z*me+W*We+G*ht+ae*hn,p[15]=Z*j+W*Ke+G*St+ae*An,this}multiplyScalar(n){const o=this.elements;return o[0]*=n,o[4]*=n,o[8]*=n,o[12]*=n,o[1]*=n,o[5]*=n,o[9]*=n,o[13]*=n,o[2]*=n,o[6]*=n,o[10]*=n,o[14]*=n,o[3]*=n,o[7]*=n,o[11]*=n,o[15]*=n,this}determinant(){const n=this.elements,o=n[0],c=n[4],h=n[8],p=n[12],_=n[1],y=n[5],b=n[9],M=n[13],R=n[2],C=n[6],N=n[10],P=n[14],L=n[3],V=n[7],U=n[11],I=n[15];return L*(+p*b*C-h*M*C-p*y*N+c*M*N+h*y*P-c*b*P)+V*(+o*b*P-o*M*N+p*_*N-h*_*P+h*M*R-p*b*R)+U*(+o*M*C-o*y*P-p*_*C+c*_*P+p*y*R-c*M*R)+I*(-h*y*R-o*b*C+o*y*N+h*_*C-c*_*N+c*b*R)}transpose(){const n=this.elements;let o;return o=n[1],n[1]=n[4],n[4]=o,o=n[2],n[2]=n[8],n[8]=o,o=n[6],n[6]=n[9],n[9]=o,o=n[3],n[3]=n[12],n[12]=o,o=n[7],n[7]=n[13],n[13]=o,o=n[11],n[11]=n[14],n[14]=o,this}setPosition(n,o,c){const h=this.elements;return n.isVector3?(h[12]=n.x,h[13]=n.y,h[14]=n.z):(h[12]=n,h[13]=o,h[14]=c),this}invert(){const n=this.elements,o=n[0],c=n[1],h=n[2],p=n[3],_=n[4],y=n[5],b=n[6],M=n[7],R=n[8],C=n[9],N=n[10],P=n[11],L=n[12],V=n[13],U=n[14],I=n[15],Z=C*U*M-V*N*M+V*b*P-y*U*P-C*b*I+y*N*I,W=L*N*M-R*U*M-L*b*P+_*U*P+R*b*I-_*N*I,G=R*V*M-L*C*M+L*y*P-_*V*P-R*y*I+_*C*I,ae=L*C*b-R*V*b-L*y*N+_*V*N+R*y*U-_*C*U,le=o*Z+c*W+h*G+p*ae;if(le===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const he=1/le;return n[0]=Z*he,n[1]=(V*N*p-C*U*p-V*h*P+c*U*P+C*h*I-c*N*I)*he,n[2]=(y*U*p-V*b*p+V*h*M-c*U*M-y*h*I+c*b*I)*he,n[3]=(C*b*p-y*N*p-C*h*M+c*N*M+y*h*P-c*b*P)*he,n[4]=W*he,n[5]=(R*U*p-L*N*p+L*h*P-o*U*P-R*h*I+o*N*I)*he,n[6]=(L*b*p-_*U*p-L*h*M+o*U*M+_*h*I-o*b*I)*he,n[7]=(_*N*p-R*b*p+R*h*M-o*N*M-_*h*P+o*b*P)*he,n[8]=G*he,n[9]=(L*C*p-R*V*p-L*c*P+o*V*P+R*c*I-o*C*I)*he,n[10]=(_*V*p-L*y*p+L*c*M-o*V*M-_*c*I+o*y*I)*he,n[11]=(R*y*p-_*C*p-R*c*M+o*C*M+_*c*P-o*y*P)*he,n[12]=ae*he,n[13]=(R*V*h-L*C*h+L*c*N-o*V*N-R*c*U+o*C*U)*he,n[14]=(L*y*h-_*V*h-L*c*b+o*V*b+_*c*U-o*y*U)*he,n[15]=(_*C*h-R*y*h+R*c*b-o*C*b-_*c*N+o*y*N)*he,this}scale(n){const o=this.elements,c=n.x,h=n.y,p=n.z;return o[0]*=c,o[4]*=h,o[8]*=p,o[1]*=c,o[5]*=h,o[9]*=p,o[2]*=c,o[6]*=h,o[10]*=p,o[3]*=c,o[7]*=h,o[11]*=p,this}getMaxScaleOnAxis(){const n=this.elements,o=n[0]*n[0]+n[1]*n[1]+n[2]*n[2],c=n[4]*n[4]+n[5]*n[5]+n[6]*n[6],h=n[8]*n[8]+n[9]*n[9]+n[10]*n[10];return Math.sqrt(Math.max(o,c,h))}makeTranslation(n,o,c){return n.isVector3?this.set(1,0,0,n.x,0,1,0,n.y,0,0,1,n.z,0,0,0,1):this.set(1,0,0,n,0,1,0,o,0,0,1,c,0,0,0,1),this}makeRotationX(n){const o=Math.cos(n),c=Math.sin(n);return this.set(1,0,0,0,0,o,-c,0,0,c,o,0,0,0,0,1),this}makeRotationY(n){const o=Math.cos(n),c=Math.sin(n);return this.set(o,0,c,0,0,1,0,0,-c,0,o,0,0,0,0,1),this}makeRotationZ(n){const o=Math.cos(n),c=Math.sin(n);return this.set(o,-c,0,0,c,o,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(n,o){const c=Math.cos(o),h=Math.sin(o),p=1-c,_=n.x,y=n.y,b=n.z,M=p*_,R=p*y;return this.set(M*_+c,M*y-h*b,M*b+h*y,0,M*y+h*b,R*y+c,R*b-h*_,0,M*b-h*y,R*b+h*_,p*b*b+c,0,0,0,0,1),this}makeScale(n,o,c){return this.set(n,0,0,0,0,o,0,0,0,0,c,0,0,0,0,1),this}makeShear(n,o,c,h,p,_){return this.set(1,c,p,0,n,1,_,0,o,h,1,0,0,0,0,1),this}compose(n,o,c){const h=this.elements,p=o._x,_=o._y,y=o._z,b=o._w,M=p+p,R=_+_,C=y+y,N=p*M,P=p*R,L=p*C,V=_*R,U=_*C,I=y*C,Z=b*M,W=b*R,G=b*C,ae=c.x,le=c.y,he=c.z;return h[0]=(1-(V+I))*ae,h[1]=(P+G)*ae,h[2]=(L-W)*ae,h[3]=0,h[4]=(P-G)*le,h[5]=(1-(N+I))*le,h[6]=(U+Z)*le,h[7]=0,h[8]=(L+W)*he,h[9]=(U-Z)*he,h[10]=(1-(N+V))*he,h[11]=0,h[12]=n.x,h[13]=n.y,h[14]=n.z,h[15]=1,this}decompose(n,o,c){const h=this.elements;let p=wd.set(h[0],h[1],h[2]).length();const _=wd.set(h[4],h[5],h[6]).length(),y=wd.set(h[8],h[9],h[10]).length();this.determinant()<0&&(p=-p),n.x=h[12],n.y=h[13],n.z=h[14],wa.copy(this);const M=1/p,R=1/_,C=1/y;return wa.elements[0]*=M,wa.elements[1]*=M,wa.elements[2]*=M,wa.elements[4]*=R,wa.elements[5]*=R,wa.elements[6]*=R,wa.elements[8]*=C,wa.elements[9]*=C,wa.elements[10]*=C,o.setFromRotationMatrix(wa),c.x=p,c.y=_,c.z=y,this}makePerspective(n,o,c,h,p,_,y=Po,b=!1){const M=this.elements,R=2*p/(o-n),C=2*p/(c-h),N=(o+n)/(o-n),P=(c+h)/(c-h);let L,V;if(b)L=p/(_-p),V=_*p/(_-p);else if(y===Po)L=-(_+p)/(_-p),V=-2*_*p/(_-p);else if(y===md)L=-_/(_-p),V=-_*p/(_-p);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+y);return M[0]=R,M[4]=0,M[8]=N,M[12]=0,M[1]=0,M[5]=C,M[9]=P,M[13]=0,M[2]=0,M[6]=0,M[10]=L,M[14]=V,M[3]=0,M[7]=0,M[11]=-1,M[15]=0,this}makeOrthographic(n,o,c,h,p,_,y=Po,b=!1){const M=this.elements,R=2/(o-n),C=2/(c-h),N=-(o+n)/(o-n),P=-(c+h)/(c-h);let L,V;if(b)L=1/(_-p),V=_/(_-p);else if(y===Po)L=-2/(_-p),V=-(_+p)/(_-p);else if(y===md)L=-1/(_-p),V=-p/(_-p);else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+y);return M[0]=R,M[4]=0,M[8]=0,M[12]=N,M[1]=0,M[5]=C,M[9]=0,M[13]=P,M[2]=0,M[6]=0,M[10]=L,M[14]=V,M[3]=0,M[7]=0,M[11]=0,M[15]=1,this}equals(n){const o=this.elements,c=n.elements;for(let h=0;h<16;h++)if(o[h]!==c[h])return!1;return!0}fromArray(n,o=0){for(let c=0;c<16;c++)this.elements[c]=n[c+o];return this}toArray(n=[],o=0){const c=this.elements;return n[o]=c[0],n[o+1]=c[1],n[o+2]=c[2],n[o+3]=c[3],n[o+4]=c[4],n[o+5]=c[5],n[o+6]=c[6],n[o+7]=c[7],n[o+8]=c[8],n[o+9]=c[9],n[o+10]=c[10],n[o+11]=c[11],n[o+12]=c[12],n[o+13]=c[13],n[o+14]=c[14],n[o+15]=c[15],n}}const wd=new ce,wa=new Qn,cV=new ce(0,0,0),uV=new ce(1,1,1),yc=new ce,g_=new ce,Lo=new ce,JE=new Qn,jE=new ho;class Do{constructor(n=0,o=0,c=0,h=Do.DEFAULT_ORDER){this.isEuler=!0,this._x=n,this._y=o,this._z=c,this._order=h}get x(){return this._x}set x(n){this._x=n,this._onChangeCallback()}get y(){return this._y}set y(n){this._y=n,this._onChangeCallback()}get z(){return this._z}set z(n){this._z=n,this._onChangeCallback()}get order(){return this._order}set order(n){this._order=n,this._onChangeCallback()}set(n,o,c,h=this._order){return this._x=n,this._y=o,this._z=c,this._order=h,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(n){return this._x=n._x,this._y=n._y,this._z=n._z,this._order=n._order,this._onChangeCallback(),this}setFromRotationMatrix(n,o=this._order,c=!0){const h=n.elements,p=h[0],_=h[4],y=h[8],b=h[1],M=h[5],R=h[9],C=h[2],N=h[6],P=h[10];switch(o){case"XYZ":this._y=Math.asin(Kn(y,-1,1)),Math.abs(y)<.9999999?(this._x=Math.atan2(-R,P),this._z=Math.atan2(-_,p)):(this._x=Math.atan2(N,M),this._z=0);break;case"YXZ":this._x=Math.asin(-Kn(R,-1,1)),Math.abs(R)<.9999999?(this._y=Math.atan2(y,P),this._z=Math.atan2(b,M)):(this._y=Math.atan2(-C,p),this._z=0);break;case"ZXY":this._x=Math.asin(Kn(N,-1,1)),Math.abs(N)<.9999999?(this._y=Math.atan2(-C,P),this._z=Math.atan2(-_,M)):(this._y=0,this._z=Math.atan2(b,p));break;case"ZYX":this._y=Math.asin(-Kn(C,-1,1)),Math.abs(C)<.9999999?(this._x=Math.atan2(N,P),this._z=Math.atan2(b,p)):(this._x=0,this._z=Math.atan2(-_,M));break;case"YZX":this._z=Math.asin(Kn(b,-1,1)),Math.abs(b)<.9999999?(this._x=Math.atan2(-R,M),this._y=Math.atan2(-C,p)):(this._x=0,this._y=Math.atan2(y,P));break;case"XZY":this._z=Math.asin(-Kn(_,-1,1)),Math.abs(_)<.9999999?(this._x=Math.atan2(N,M),this._y=Math.atan2(y,p)):(this._x=Math.atan2(-R,P),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+o)}return this._order=o,c===!0&&this._onChangeCallback(),this}setFromQuaternion(n,o,c){return JE.makeRotationFromQuaternion(n),this.setFromRotationMatrix(JE,o,c)}setFromVector3(n,o=this._order){return this.set(n.x,n.y,n.z,o)}reorder(n){return jE.setFromEuler(this),this.setFromQuaternion(jE,n)}equals(n){return n._x===this._x&&n._y===this._y&&n._z===this._z&&n._order===this._order}fromArray(n){return this._x=n[0],this._y=n[1],this._z=n[2],n[3]!==void 0&&(this._order=n[3]),this._onChangeCallback(),this}toArray(n=[],o=0){return n[o]=this._x,n[o+1]=this._y,n[o+2]=this._z,n[o+3]=this._order,n}_onChange(n){return this._onChangeCallback=n,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Do.DEFAULT_ORDER="XYZ";class __{constructor(){this.mask=1}set(n){this.mask=(1<<n|0)>>>0}enable(n){this.mask|=1<<n|0}enableAll(){this.mask=-1}toggle(n){this.mask^=1<<n|0}disable(n){this.mask&=~(1<<n|0)}disableAll(){this.mask=0}test(n){return(this.mask&n.mask)!==0}isEnabled(n){return(this.mask&(1<<n|0))!==0}}let hV=0;const QE=new ce,Ad=new ho,Cl=new Qn,x_=new ce,Up=new ce,dV=new ce,fV=new ho,e1=new ce(1,0,0),t1=new ce(0,1,0),n1=new ce(0,0,1),i1={type:"added"},pV={type:"removed"},Ed={type:"childadded",child:null},pS={type:"childremoved",child:null};class Bi extends Ya{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:hV++}),this.uuid=Io(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Bi.DEFAULT_UP.clone();const n=new ce,o=new Do,c=new ho,h=new ce(1,1,1);function p(){c.setFromEuler(o,!1)}function _(){o.setFromQuaternion(c,void 0,!1)}o._onChange(p),c._onChange(_),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:n},rotation:{configurable:!0,enumerable:!0,value:o},quaternion:{configurable:!0,enumerable:!0,value:c},scale:{configurable:!0,enumerable:!0,value:h},modelViewMatrix:{value:new Qn},normalMatrix:{value:new ci}}),this.matrix=new Qn,this.matrixWorld=new Qn,this.matrixAutoUpdate=Bi.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Bi.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new __,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=void 0,this.customDistanceMaterial=void 0,this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(n){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(n),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(n){return this.quaternion.premultiply(n),this}setRotationFromAxisAngle(n,o){this.quaternion.setFromAxisAngle(n,o)}setRotationFromEuler(n){this.quaternion.setFromEuler(n,!0)}setRotationFromMatrix(n){this.quaternion.setFromRotationMatrix(n)}setRotationFromQuaternion(n){this.quaternion.copy(n)}rotateOnAxis(n,o){return Ad.setFromAxisAngle(n,o),this.quaternion.multiply(Ad),this}rotateOnWorldAxis(n,o){return Ad.setFromAxisAngle(n,o),this.quaternion.premultiply(Ad),this}rotateX(n){return this.rotateOnAxis(e1,n)}rotateY(n){return this.rotateOnAxis(t1,n)}rotateZ(n){return this.rotateOnAxis(n1,n)}translateOnAxis(n,o){return QE.copy(n).applyQuaternion(this.quaternion),this.position.add(QE.multiplyScalar(o)),this}translateX(n){return this.translateOnAxis(e1,n)}translateY(n){return this.translateOnAxis(t1,n)}translateZ(n){return this.translateOnAxis(n1,n)}localToWorld(n){return this.updateWorldMatrix(!0,!1),n.applyMatrix4(this.matrixWorld)}worldToLocal(n){return this.updateWorldMatrix(!0,!1),n.applyMatrix4(Cl.copy(this.matrixWorld).invert())}lookAt(n,o,c){n.isVector3?x_.copy(n):x_.set(n,o,c);const h=this.parent;this.updateWorldMatrix(!0,!1),Up.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Cl.lookAt(Up,x_,this.up):Cl.lookAt(x_,Up,this.up),this.quaternion.setFromRotationMatrix(Cl),h&&(Cl.extractRotation(h.matrixWorld),Ad.setFromRotationMatrix(Cl),this.quaternion.premultiply(Ad.invert()))}add(n){if(arguments.length>1){for(let o=0;o<arguments.length;o++)this.add(arguments[o]);return this}return n===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",n),this):(n&&n.isObject3D?(n.removeFromParent(),n.parent=this,this.children.push(n),n.dispatchEvent(i1),Ed.child=n,this.dispatchEvent(Ed),Ed.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",n),this)}remove(n){if(arguments.length>1){for(let c=0;c<arguments.length;c++)this.remove(arguments[c]);return this}const o=this.children.indexOf(n);return o!==-1&&(n.parent=null,this.children.splice(o,1),n.dispatchEvent(pV),pS.child=n,this.dispatchEvent(pS),pS.child=null),this}removeFromParent(){const n=this.parent;return n!==null&&n.remove(this),this}clear(){return this.remove(...this.children)}attach(n){return this.updateWorldMatrix(!0,!1),Cl.copy(this.matrixWorld).invert(),n.parent!==null&&(n.parent.updateWorldMatrix(!0,!1),Cl.multiply(n.parent.matrixWorld)),n.applyMatrix4(Cl),n.removeFromParent(),n.parent=this,this.children.push(n),n.updateWorldMatrix(!1,!0),n.dispatchEvent(i1),Ed.child=n,this.dispatchEvent(Ed),Ed.child=null,this}getObjectById(n){return this.getObjectByProperty("id",n)}getObjectByName(n){return this.getObjectByProperty("name",n)}getObjectByProperty(n,o){if(this[n]===o)return this;for(let c=0,h=this.children.length;c<h;c++){const _=this.children[c].getObjectByProperty(n,o);if(_!==void 0)return _}}getObjectsByProperty(n,o,c=[]){this[n]===o&&c.push(this);const h=this.children;for(let p=0,_=h.length;p<_;p++)h[p].getObjectsByProperty(n,o,c);return c}getWorldPosition(n){return this.updateWorldMatrix(!0,!1),n.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(n){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Up,n,dV),n}getWorldScale(n){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Up,fV,n),n}getWorldDirection(n){this.updateWorldMatrix(!0,!1);const o=this.matrixWorld.elements;return n.set(o[8],o[9],o[10]).normalize()}raycast(){}traverse(n){n(this);const o=this.children;for(let c=0,h=o.length;c<h;c++)o[c].traverse(n)}traverseVisible(n){if(this.visible===!1)return;n(this);const o=this.children;for(let c=0,h=o.length;c<h;c++)o[c].traverseVisible(n)}traverseAncestors(n){const o=this.parent;o!==null&&(n(o),o.traverseAncestors(n))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(n){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||n)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,n=!0);const o=this.children;for(let c=0,h=o.length;c<h;c++)o[c].updateMatrixWorld(n)}updateWorldMatrix(n,o){const c=this.parent;if(n===!0&&c!==null&&c.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),o===!0){const h=this.children;for(let p=0,_=h.length;p<_;p++)h[p].updateWorldMatrix(!1,!0)}}toJSON(n){const o=n===void 0||typeof n=="string",c={};o&&(n={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},c.metadata={version:4.7,type:"Object",generator:"Object3D.toJSON"});const h={};h.uuid=this.uuid,h.type=this.type,this.name!==""&&(h.name=this.name),this.castShadow===!0&&(h.castShadow=!0),this.receiveShadow===!0&&(h.receiveShadow=!0),this.visible===!1&&(h.visible=!1),this.frustumCulled===!1&&(h.frustumCulled=!1),this.renderOrder!==0&&(h.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(h.userData=this.userData),h.layers=this.layers.mask,h.matrix=this.matrix.toArray(),h.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(h.matrixAutoUpdate=!1),this.isInstancedMesh&&(h.type="InstancedMesh",h.count=this.count,h.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(h.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(h.type="BatchedMesh",h.perObjectFrustumCulled=this.perObjectFrustumCulled,h.sortObjects=this.sortObjects,h.drawRanges=this._drawRanges,h.reservedRanges=this._reservedRanges,h.geometryInfo=this._geometryInfo.map(y=>({...y,boundingBox:y.boundingBox?y.boundingBox.toJSON():void 0,boundingSphere:y.boundingSphere?y.boundingSphere.toJSON():void 0})),h.instanceInfo=this._instanceInfo.map(y=>({...y})),h.availableInstanceIds=this._availableInstanceIds.slice(),h.availableGeometryIds=this._availableGeometryIds.slice(),h.nextIndexStart=this._nextIndexStart,h.nextVertexStart=this._nextVertexStart,h.geometryCount=this._geometryCount,h.maxInstanceCount=this._maxInstanceCount,h.maxVertexCount=this._maxVertexCount,h.maxIndexCount=this._maxIndexCount,h.geometryInitialized=this._geometryInitialized,h.matricesTexture=this._matricesTexture.toJSON(n),h.indirectTexture=this._indirectTexture.toJSON(n),this._colorsTexture!==null&&(h.colorsTexture=this._colorsTexture.toJSON(n)),this.boundingSphere!==null&&(h.boundingSphere=this.boundingSphere.toJSON()),this.boundingBox!==null&&(h.boundingBox=this.boundingBox.toJSON()));function p(y,b){return y[b.uuid]===void 0&&(y[b.uuid]=b.toJSON(n)),b.uuid}if(this.isScene)this.background&&(this.background.isColor?h.background=this.background.toJSON():this.background.isTexture&&(h.background=this.background.toJSON(n).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(h.environment=this.environment.toJSON(n).uuid);else if(this.isMesh||this.isLine||this.isPoints){h.geometry=p(n.geometries,this.geometry);const y=this.geometry.parameters;if(y!==void 0&&y.shapes!==void 0){const b=y.shapes;if(Array.isArray(b))for(let M=0,R=b.length;M<R;M++){const C=b[M];p(n.shapes,C)}else p(n.shapes,b)}}if(this.isSkinnedMesh&&(h.bindMode=this.bindMode,h.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(p(n.skeletons,this.skeleton),h.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const y=[];for(let b=0,M=this.material.length;b<M;b++)y.push(p(n.materials,this.material[b]));h.material=y}else h.material=p(n.materials,this.material);if(this.children.length>0){h.children=[];for(let y=0;y<this.children.length;y++)h.children.push(this.children[y].toJSON(n).object)}if(this.animations.length>0){h.animations=[];for(let y=0;y<this.animations.length;y++){const b=this.animations[y];h.animations.push(p(n.animations,b))}}if(o){const y=_(n.geometries),b=_(n.materials),M=_(n.textures),R=_(n.images),C=_(n.shapes),N=_(n.skeletons),P=_(n.animations),L=_(n.nodes);y.length>0&&(c.geometries=y),b.length>0&&(c.materials=b),M.length>0&&(c.textures=M),R.length>0&&(c.images=R),C.length>0&&(c.shapes=C),N.length>0&&(c.skeletons=N),P.length>0&&(c.animations=P),L.length>0&&(c.nodes=L)}return c.object=h,c;function _(y){const b=[];for(const M in y){const R=y[M];delete R.metadata,b.push(R)}return b}}clone(n){return new this.constructor().copy(this,n)}copy(n,o=!0){if(this.name=n.name,this.up.copy(n.up),this.position.copy(n.position),this.rotation.order=n.rotation.order,this.quaternion.copy(n.quaternion),this.scale.copy(n.scale),this.matrix.copy(n.matrix),this.matrixWorld.copy(n.matrixWorld),this.matrixAutoUpdate=n.matrixAutoUpdate,this.matrixWorldAutoUpdate=n.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=n.matrixWorldNeedsUpdate,this.layers.mask=n.layers.mask,this.visible=n.visible,this.castShadow=n.castShadow,this.receiveShadow=n.receiveShadow,this.frustumCulled=n.frustumCulled,this.renderOrder=n.renderOrder,this.animations=n.animations.slice(),this.userData=JSON.parse(JSON.stringify(n.userData)),o===!0)for(let c=0;c<n.children.length;c++){const h=n.children[c];this.add(h.clone())}return this}}Bi.DEFAULT_UP=new ce(0,1,0),Bi.DEFAULT_MATRIX_AUTO_UPDATE=!0,Bi.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Aa=new ce,Nl=new ce,mS=new ce,Pl=new ce,Rd=new ce,Cd=new ce,s1=new ce,gS=new ce,_S=new ce,xS=new ce,yS=new Fi,vS=new Fi,SS=new Fi;class fo{constructor(n=new ce,o=new ce,c=new ce){this.a=n,this.b=o,this.c=c}static getNormal(n,o,c,h){h.subVectors(c,o),Aa.subVectors(n,o),h.cross(Aa);const p=h.lengthSq();return p>0?h.multiplyScalar(1/Math.sqrt(p)):h.set(0,0,0)}static getBarycoord(n,o,c,h,p){Aa.subVectors(h,o),Nl.subVectors(c,o),mS.subVectors(n,o);const _=Aa.dot(Aa),y=Aa.dot(Nl),b=Aa.dot(mS),M=Nl.dot(Nl),R=Nl.dot(mS),C=_*M-y*y;if(C===0)return p.set(0,0,0),null;const N=1/C,P=(M*b-y*R)*N,L=(_*R-y*b)*N;return p.set(1-P-L,L,P)}static containsPoint(n,o,c,h){return this.getBarycoord(n,o,c,h,Pl)===null?!1:Pl.x>=0&&Pl.y>=0&&Pl.x+Pl.y<=1}static getInterpolation(n,o,c,h,p,_,y,b){return this.getBarycoord(n,o,c,h,Pl)===null?(b.x=0,b.y=0,"z"in b&&(b.z=0),"w"in b&&(b.w=0),null):(b.setScalar(0),b.addScaledVector(p,Pl.x),b.addScaledVector(_,Pl.y),b.addScaledVector(y,Pl.z),b)}static getInterpolatedAttribute(n,o,c,h,p,_){return yS.setScalar(0),vS.setScalar(0),SS.setScalar(0),yS.fromBufferAttribute(n,o),vS.fromBufferAttribute(n,c),SS.fromBufferAttribute(n,h),_.setScalar(0),_.addScaledVector(yS,p.x),_.addScaledVector(vS,p.y),_.addScaledVector(SS,p.z),_}static isFrontFacing(n,o,c,h){return Aa.subVectors(c,o),Nl.subVectors(n,o),Aa.cross(Nl).dot(h)<0}set(n,o,c){return this.a.copy(n),this.b.copy(o),this.c.copy(c),this}setFromPointsAndIndices(n,o,c,h){return this.a.copy(n[o]),this.b.copy(n[c]),this.c.copy(n[h]),this}setFromAttributeAndIndices(n,o,c,h){return this.a.fromBufferAttribute(n,o),this.b.fromBufferAttribute(n,c),this.c.fromBufferAttribute(n,h),this}clone(){return new this.constructor().copy(this)}copy(n){return this.a.copy(n.a),this.b.copy(n.b),this.c.copy(n.c),this}getArea(){return Aa.subVectors(this.c,this.b),Nl.subVectors(this.a,this.b),Aa.cross(Nl).length()*.5}getMidpoint(n){return n.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(n){return fo.getNormal(this.a,this.b,this.c,n)}getPlane(n){return n.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(n,o){return fo.getBarycoord(n,this.a,this.b,this.c,o)}getInterpolation(n,o,c,h,p){return fo.getInterpolation(n,this.a,this.b,this.c,o,c,h,p)}containsPoint(n){return fo.containsPoint(n,this.a,this.b,this.c)}isFrontFacing(n){return fo.isFrontFacing(this.a,this.b,this.c,n)}intersectsBox(n){return n.intersectsTriangle(this)}closestPointToPoint(n,o){const c=this.a,h=this.b,p=this.c;let _,y;Rd.subVectors(h,c),Cd.subVectors(p,c),gS.subVectors(n,c);const b=Rd.dot(gS),M=Cd.dot(gS);if(b<=0&&M<=0)return o.copy(c);_S.subVectors(n,h);const R=Rd.dot(_S),C=Cd.dot(_S);if(R>=0&&C<=R)return o.copy(h);const N=b*C-R*M;if(N<=0&&b>=0&&R<=0)return _=b/(b-R),o.copy(c).addScaledVector(Rd,_);xS.subVectors(n,p);const P=Rd.dot(xS),L=Cd.dot(xS);if(L>=0&&P<=L)return o.copy(p);const V=P*M-b*L;if(V<=0&&M>=0&&L<=0)return y=M/(M-L),o.copy(c).addScaledVector(Cd,y);const U=R*L-P*C;if(U<=0&&C-R>=0&&P-L>=0)return s1.subVectors(p,h),y=(C-R)/(C-R+(P-L)),o.copy(h).addScaledVector(s1,y);const I=1/(U+V+N);return _=V*I,y=N*I,o.copy(c).addScaledVector(Rd,_).addScaledVector(Cd,y)}equals(n){return n.a.equals(this.a)&&n.b.equals(this.b)&&n.c.equals(this.c)}}const r1={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},vc={h:0,s:0,l:0},y_={h:0,s:0,l:0};function bS(m,n,o){return o<0&&(o+=1),o>1&&(o-=1),o<1/6?m+(n-m)*6*o:o<1/2?n:o<2/3?m+(n-m)*6*(2/3-o):m}class mn{constructor(n,o,c){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(n,o,c)}set(n,o,c){if(o===void 0&&c===void 0){const h=n;h&&h.isColor?this.copy(h):typeof h=="number"?this.setHex(h):typeof h=="string"&&this.setStyle(h)}else this.setRGB(n,o,c);return this}setScalar(n){return this.r=n,this.g=n,this.b=n,this}setHex(n,o=uo){return n=Math.floor(n),this.r=(n>>16&255)/255,this.g=(n>>8&255)/255,this.b=(n&255)/255,Li.colorSpaceToWorking(this,o),this}setRGB(n,o,c,h=Li.workingColorSpace){return this.r=n,this.g=o,this.b=c,Li.colorSpaceToWorking(this,h),this}setHSL(n,o,c,h=Li.workingColorSpace){if(n=iS(n,1),o=Kn(o,0,1),c=Kn(c,0,1),o===0)this.r=this.g=this.b=c;else{const p=c<=.5?c*(1+o):c+o-c*o,_=2*c-p;this.r=bS(_,p,n+1/3),this.g=bS(_,p,n),this.b=bS(_,p,n-1/3)}return Li.colorSpaceToWorking(this,h),this}setStyle(n,o=uo){function c(p){p!==void 0&&parseFloat(p)<1&&console.warn("THREE.Color: Alpha component of "+n+" will be ignored.")}let h;if(h=/^(\w+)\(([^\)]*)\)/.exec(n)){let p;const _=h[1],y=h[2];switch(_){case"rgb":case"rgba":if(p=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(y))return c(p[4]),this.setRGB(Math.min(255,parseInt(p[1],10))/255,Math.min(255,parseInt(p[2],10))/255,Math.min(255,parseInt(p[3],10))/255,o);if(p=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(y))return c(p[4]),this.setRGB(Math.min(100,parseInt(p[1],10))/100,Math.min(100,parseInt(p[2],10))/100,Math.min(100,parseInt(p[3],10))/100,o);break;case"hsl":case"hsla":if(p=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(y))return c(p[4]),this.setHSL(parseFloat(p[1])/360,parseFloat(p[2])/100,parseFloat(p[3])/100,o);break;default:console.warn("THREE.Color: Unknown color model "+n)}}else if(h=/^\#([A-Fa-f\d]+)$/.exec(n)){const p=h[1],_=p.length;if(_===3)return this.setRGB(parseInt(p.charAt(0),16)/15,parseInt(p.charAt(1),16)/15,parseInt(p.charAt(2),16)/15,o);if(_===6)return this.setHex(parseInt(p,16),o);console.warn("THREE.Color: Invalid hex color "+n)}else if(n&&n.length>0)return this.setColorName(n,o);return this}setColorName(n,o=uo){const c=r1[n.toLowerCase()];return c!==void 0?this.setHex(c,o):console.warn("THREE.Color: Unknown color "+n),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(n){return this.r=n.r,this.g=n.g,this.b=n.b,this}copySRGBToLinear(n){return this.r=Al(n.r),this.g=Al(n.g),this.b=Al(n.b),this}copyLinearToSRGB(n){return this.r=yd(n.r),this.g=yd(n.g),this.b=yd(n.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(n=uo){return Li.workingToColorSpace(Dr.copy(this),n),Math.round(Kn(Dr.r*255,0,255))*65536+Math.round(Kn(Dr.g*255,0,255))*256+Math.round(Kn(Dr.b*255,0,255))}getHexString(n=uo){return("000000"+this.getHex(n).toString(16)).slice(-6)}getHSL(n,o=Li.workingColorSpace){Li.workingToColorSpace(Dr.copy(this),o);const c=Dr.r,h=Dr.g,p=Dr.b,_=Math.max(c,h,p),y=Math.min(c,h,p);let b,M;const R=(y+_)/2;if(y===_)b=0,M=0;else{const C=_-y;switch(M=R<=.5?C/(_+y):C/(2-_-y),_){case c:b=(h-p)/C+(h<p?6:0);break;case h:b=(p-c)/C+2;break;case p:b=(c-h)/C+4;break}b/=6}return n.h=b,n.s=M,n.l=R,n}getRGB(n,o=Li.workingColorSpace){return Li.workingToColorSpace(Dr.copy(this),o),n.r=Dr.r,n.g=Dr.g,n.b=Dr.b,n}getStyle(n=uo){Li.workingToColorSpace(Dr.copy(this),n);const o=Dr.r,c=Dr.g,h=Dr.b;return n!==uo?`color(${n} ${o.toFixed(3)} ${c.toFixed(3)} ${h.toFixed(3)})`:`rgb(${Math.round(o*255)},${Math.round(c*255)},${Math.round(h*255)})`}offsetHSL(n,o,c){return this.getHSL(vc),this.setHSL(vc.h+n,vc.s+o,vc.l+c)}add(n){return this.r+=n.r,this.g+=n.g,this.b+=n.b,this}addColors(n,o){return this.r=n.r+o.r,this.g=n.g+o.g,this.b=n.b+o.b,this}addScalar(n){return this.r+=n,this.g+=n,this.b+=n,this}sub(n){return this.r=Math.max(0,this.r-n.r),this.g=Math.max(0,this.g-n.g),this.b=Math.max(0,this.b-n.b),this}multiply(n){return this.r*=n.r,this.g*=n.g,this.b*=n.b,this}multiplyScalar(n){return this.r*=n,this.g*=n,this.b*=n,this}lerp(n,o){return this.r+=(n.r-this.r)*o,this.g+=(n.g-this.g)*o,this.b+=(n.b-this.b)*o,this}lerpColors(n,o,c){return this.r=n.r+(o.r-n.r)*c,this.g=n.g+(o.g-n.g)*c,this.b=n.b+(o.b-n.b)*c,this}lerpHSL(n,o){this.getHSL(vc),n.getHSL(y_);const c=Pp(vc.h,y_.h,o),h=Pp(vc.s,y_.s,o),p=Pp(vc.l,y_.l,o);return this.setHSL(c,h,p),this}setFromVector3(n){return this.r=n.x,this.g=n.y,this.b=n.z,this}applyMatrix3(n){const o=this.r,c=this.g,h=this.b,p=n.elements;return this.r=p[0]*o+p[3]*c+p[6]*h,this.g=p[1]*o+p[4]*c+p[7]*h,this.b=p[2]*o+p[5]*c+p[8]*h,this}equals(n){return n.r===this.r&&n.g===this.g&&n.b===this.b}fromArray(n,o=0){return this.r=n[o],this.g=n[o+1],this.b=n[o+2],this}toArray(n=[],o=0){return n[o]=this.r,n[o+1]=this.g,n[o+2]=this.b,n}fromBufferAttribute(n,o){return this.r=n.getX(o),this.g=n.getY(o),this.b=n.getZ(o),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Dr=new mn;mn.NAMES=r1;let mV=0;class Ur extends Ya{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:mV++}),this.uuid=Io(),this.name="",this.type="Material",this.blending=E,this.side=x,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Ne,this.blendDst=Oe,this.blendEquation=B,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new mn(0,0,0),this.blendAlpha=0,this.depthFunc=At,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=eS,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=xu,this.stencilZFail=xu,this.stencilZPass=xu,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(n){this._alphaTest>0!=n>0&&this.version++,this._alphaTest=n}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(n){if(n!==void 0)for(const o in n){const c=n[o];if(c===void 0){console.warn(`THREE.Material: parameter '${o}' has value of undefined.`);continue}const h=this[o];if(h===void 0){console.warn(`THREE.Material: '${o}' is not a property of THREE.${this.type}.`);continue}h&&h.isColor?h.set(c):h&&h.isVector3&&c&&c.isVector3?h.copy(c):this[o]=c}}toJSON(n){const o=n===void 0||typeof n=="string";o&&(n={textures:{},images:{}});const c={metadata:{version:4.7,type:"Material",generator:"Material.toJSON"}};c.uuid=this.uuid,c.type=this.type,this.name!==""&&(c.name=this.name),this.color&&this.color.isColor&&(c.color=this.color.getHex()),this.roughness!==void 0&&(c.roughness=this.roughness),this.metalness!==void 0&&(c.metalness=this.metalness),this.sheen!==void 0&&(c.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(c.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(c.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(c.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(c.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(c.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(c.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(c.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(c.shininess=this.shininess),this.clearcoat!==void 0&&(c.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(c.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(c.clearcoatMap=this.clearcoatMap.toJSON(n).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(c.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(n).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(c.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(n).uuid,c.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(c.dispersion=this.dispersion),this.iridescence!==void 0&&(c.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(c.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(c.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(c.iridescenceMap=this.iridescenceMap.toJSON(n).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(c.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(n).uuid),this.anisotropy!==void 0&&(c.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(c.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(c.anisotropyMap=this.anisotropyMap.toJSON(n).uuid),this.map&&this.map.isTexture&&(c.map=this.map.toJSON(n).uuid),this.matcap&&this.matcap.isTexture&&(c.matcap=this.matcap.toJSON(n).uuid),this.alphaMap&&this.alphaMap.isTexture&&(c.alphaMap=this.alphaMap.toJSON(n).uuid),this.lightMap&&this.lightMap.isTexture&&(c.lightMap=this.lightMap.toJSON(n).uuid,c.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(c.aoMap=this.aoMap.toJSON(n).uuid,c.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(c.bumpMap=this.bumpMap.toJSON(n).uuid,c.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(c.normalMap=this.normalMap.toJSON(n).uuid,c.normalMapType=this.normalMapType,c.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(c.displacementMap=this.displacementMap.toJSON(n).uuid,c.displacementScale=this.displacementScale,c.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(c.roughnessMap=this.roughnessMap.toJSON(n).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(c.metalnessMap=this.metalnessMap.toJSON(n).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(c.emissiveMap=this.emissiveMap.toJSON(n).uuid),this.specularMap&&this.specularMap.isTexture&&(c.specularMap=this.specularMap.toJSON(n).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(c.specularIntensityMap=this.specularIntensityMap.toJSON(n).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(c.specularColorMap=this.specularColorMap.toJSON(n).uuid),this.envMap&&this.envMap.isTexture&&(c.envMap=this.envMap.toJSON(n).uuid,this.combine!==void 0&&(c.combine=this.combine)),this.envMapRotation!==void 0&&(c.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(c.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(c.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(c.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(c.gradientMap=this.gradientMap.toJSON(n).uuid),this.transmission!==void 0&&(c.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(c.transmissionMap=this.transmissionMap.toJSON(n).uuid),this.thickness!==void 0&&(c.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(c.thicknessMap=this.thicknessMap.toJSON(n).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(c.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(c.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(c.size=this.size),this.shadowSide!==null&&(c.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(c.sizeAttenuation=this.sizeAttenuation),this.blending!==E&&(c.blending=this.blending),this.side!==x&&(c.side=this.side),this.vertexColors===!0&&(c.vertexColors=!0),this.opacity<1&&(c.opacity=this.opacity),this.transparent===!0&&(c.transparent=!0),this.blendSrc!==Ne&&(c.blendSrc=this.blendSrc),this.blendDst!==Oe&&(c.blendDst=this.blendDst),this.blendEquation!==B&&(c.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(c.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(c.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(c.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(c.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(c.blendAlpha=this.blendAlpha),this.depthFunc!==At&&(c.depthFunc=this.depthFunc),this.depthTest===!1&&(c.depthTest=this.depthTest),this.depthWrite===!1&&(c.depthWrite=this.depthWrite),this.colorWrite===!1&&(c.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(c.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==eS&&(c.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(c.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(c.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==xu&&(c.stencilFail=this.stencilFail),this.stencilZFail!==xu&&(c.stencilZFail=this.stencilZFail),this.stencilZPass!==xu&&(c.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(c.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(c.rotation=this.rotation),this.polygonOffset===!0&&(c.polygonOffset=!0),this.polygonOffsetFactor!==0&&(c.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(c.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(c.linewidth=this.linewidth),this.dashSize!==void 0&&(c.dashSize=this.dashSize),this.gapSize!==void 0&&(c.gapSize=this.gapSize),this.scale!==void 0&&(c.scale=this.scale),this.dithering===!0&&(c.dithering=!0),this.alphaTest>0&&(c.alphaTest=this.alphaTest),this.alphaHash===!0&&(c.alphaHash=!0),this.alphaToCoverage===!0&&(c.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(c.premultipliedAlpha=!0),this.forceSinglePass===!0&&(c.forceSinglePass=!0),this.wireframe===!0&&(c.wireframe=!0),this.wireframeLinewidth>1&&(c.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(c.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(c.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(c.flatShading=!0),this.visible===!1&&(c.visible=!1),this.toneMapped===!1&&(c.toneMapped=!1),this.fog===!1&&(c.fog=!1),Object.keys(this.userData).length>0&&(c.userData=this.userData);function h(p){const _=[];for(const y in p){const b=p[y];delete b.metadata,_.push(b)}return _}if(o){const p=h(n.textures),_=h(n.images);p.length>0&&(c.textures=p),_.length>0&&(c.images=_)}return c}clone(){return new this.constructor().copy(this)}copy(n){this.name=n.name,this.blending=n.blending,this.side=n.side,this.vertexColors=n.vertexColors,this.opacity=n.opacity,this.transparent=n.transparent,this.blendSrc=n.blendSrc,this.blendDst=n.blendDst,this.blendEquation=n.blendEquation,this.blendSrcAlpha=n.blendSrcAlpha,this.blendDstAlpha=n.blendDstAlpha,this.blendEquationAlpha=n.blendEquationAlpha,this.blendColor.copy(n.blendColor),this.blendAlpha=n.blendAlpha,this.depthFunc=n.depthFunc,this.depthTest=n.depthTest,this.depthWrite=n.depthWrite,this.stencilWriteMask=n.stencilWriteMask,this.stencilFunc=n.stencilFunc,this.stencilRef=n.stencilRef,this.stencilFuncMask=n.stencilFuncMask,this.stencilFail=n.stencilFail,this.stencilZFail=n.stencilZFail,this.stencilZPass=n.stencilZPass,this.stencilWrite=n.stencilWrite;const o=n.clippingPlanes;let c=null;if(o!==null){const h=o.length;c=new Array(h);for(let p=0;p!==h;++p)c[p]=o[p].clone()}return this.clippingPlanes=c,this.clipIntersection=n.clipIntersection,this.clipShadows=n.clipShadows,this.shadowSide=n.shadowSide,this.colorWrite=n.colorWrite,this.precision=n.precision,this.polygonOffset=n.polygonOffset,this.polygonOffsetFactor=n.polygonOffsetFactor,this.polygonOffsetUnits=n.polygonOffsetUnits,this.dithering=n.dithering,this.alphaTest=n.alphaTest,this.alphaHash=n.alphaHash,this.alphaToCoverage=n.alphaToCoverage,this.premultipliedAlpha=n.premultipliedAlpha,this.forceSinglePass=n.forceSinglePass,this.visible=n.visible,this.toneMapped=n.toneMapped,this.userData=JSON.parse(JSON.stringify(n.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(n){n===!0&&this.version++}}class Sc extends Ur{constructor(n){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new mn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Do,this.combine=Ue,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.envMapRotation.copy(n.envMapRotation),this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.fog=n.fog,this}}const Il=gV();function gV(){const m=new ArrayBuffer(4),n=new Float32Array(m),o=new Uint32Array(m),c=new Uint32Array(512),h=new Uint32Array(512);for(let b=0;b<256;++b){const M=b-127;M<-27?(c[b]=0,c[b|256]=32768,h[b]=24,h[b|256]=24):M<-14?(c[b]=1024>>-M-14,c[b|256]=1024>>-M-14|32768,h[b]=-M-1,h[b|256]=-M-1):M<=15?(c[b]=M+15<<10,c[b|256]=M+15<<10|32768,h[b]=13,h[b|256]=13):M<128?(c[b]=31744,c[b|256]=64512,h[b]=24,h[b|256]=24):(c[b]=31744,c[b|256]=64512,h[b]=13,h[b|256]=13)}const p=new Uint32Array(2048),_=new Uint32Array(64),y=new Uint32Array(64);for(let b=1;b<1024;++b){let M=b<<13,R=0;for(;(M&8388608)===0;)M<<=1,R-=8388608;M&=-8388609,R+=947912704,p[b]=M|R}for(let b=1024;b<2048;++b)p[b]=939524096+(b-1024<<13);for(let b=1;b<31;++b)_[b]=b<<23;_[31]=1199570944,_[32]=2147483648;for(let b=33;b<63;++b)_[b]=2147483648+(b-32<<23);_[63]=3347054592;for(let b=1;b<64;++b)b!==32&&(y[b]=1024);return{floatView:n,uint32View:o,baseTable:c,shiftTable:h,mantissaTable:p,exponentTable:_,offsetTable:y}}function po(m){Math.abs(m)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),m=Kn(m,-65504,65504),Il.floatView[0]=m;const n=Il.uint32View[0],o=n>>23&511;return Il.baseTable[o]+((n&8388607)>>Il.shiftTable[o])}function Fp(m){const n=m>>10;return Il.uint32View[0]=Il.mantissaTable[Il.offsetTable[n]+(m&1023)]+Il.exponentTable[n],Il.floatView[0]}class _V{static toHalfFloat(n){return po(n)}static fromHalfFloat(n){return Fp(n)}}const Ys=new ce,v_=new vt;let xV=0;class cs{constructor(n,o,c=!1){if(Array.isArray(n))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:xV++}),this.name="",this.array=n,this.itemSize=o,this.count=n!==void 0?n.length/o:0,this.normalized=c,this.usage=Np,this.updateRanges=[],this.gpuType=vs,this.version=0}onUploadCallback(){}set needsUpdate(n){n===!0&&this.version++}setUsage(n){return this.usage=n,this}addUpdateRange(n,o){this.updateRanges.push({start:n,count:o})}clearUpdateRanges(){this.updateRanges.length=0}copy(n){return this.name=n.name,this.array=new n.array.constructor(n.array),this.itemSize=n.itemSize,this.count=n.count,this.normalized=n.normalized,this.usage=n.usage,this.gpuType=n.gpuType,this}copyAt(n,o,c){n*=this.itemSize,c*=o.itemSize;for(let h=0,p=this.itemSize;h<p;h++)this.array[n+h]=o.array[c+h];return this}copyArray(n){return this.array.set(n),this}applyMatrix3(n){if(this.itemSize===2)for(let o=0,c=this.count;o<c;o++)v_.fromBufferAttribute(this,o),v_.applyMatrix3(n),this.setXY(o,v_.x,v_.y);else if(this.itemSize===3)for(let o=0,c=this.count;o<c;o++)Ys.fromBufferAttribute(this,o),Ys.applyMatrix3(n),this.setXYZ(o,Ys.x,Ys.y,Ys.z);return this}applyMatrix4(n){for(let o=0,c=this.count;o<c;o++)Ys.fromBufferAttribute(this,o),Ys.applyMatrix4(n),this.setXYZ(o,Ys.x,Ys.y,Ys.z);return this}applyNormalMatrix(n){for(let o=0,c=this.count;o<c;o++)Ys.fromBufferAttribute(this,o),Ys.applyNormalMatrix(n),this.setXYZ(o,Ys.x,Ys.y,Ys.z);return this}transformDirection(n){for(let o=0,c=this.count;o<c;o++)Ys.fromBufferAttribute(this,o),Ys.transformDirection(n),this.setXYZ(o,Ys.x,Ys.y,Ys.z);return this}set(n,o=0){return this.array.set(n,o),this}getComponent(n,o){let c=this.array[n*this.itemSize+o];return this.normalized&&(c=qr(c,this.array)),c}setComponent(n,o,c){return this.normalized&&(c=fi(c,this.array)),this.array[n*this.itemSize+o]=c,this}getX(n){let o=this.array[n*this.itemSize];return this.normalized&&(o=qr(o,this.array)),o}setX(n,o){return this.normalized&&(o=fi(o,this.array)),this.array[n*this.itemSize]=o,this}getY(n){let o=this.array[n*this.itemSize+1];return this.normalized&&(o=qr(o,this.array)),o}setY(n,o){return this.normalized&&(o=fi(o,this.array)),this.array[n*this.itemSize+1]=o,this}getZ(n){let o=this.array[n*this.itemSize+2];return this.normalized&&(o=qr(o,this.array)),o}setZ(n,o){return this.normalized&&(o=fi(o,this.array)),this.array[n*this.itemSize+2]=o,this}getW(n){let o=this.array[n*this.itemSize+3];return this.normalized&&(o=qr(o,this.array)),o}setW(n,o){return this.normalized&&(o=fi(o,this.array)),this.array[n*this.itemSize+3]=o,this}setXY(n,o,c){return n*=this.itemSize,this.normalized&&(o=fi(o,this.array),c=fi(c,this.array)),this.array[n+0]=o,this.array[n+1]=c,this}setXYZ(n,o,c,h){return n*=this.itemSize,this.normalized&&(o=fi(o,this.array),c=fi(c,this.array),h=fi(h,this.array)),this.array[n+0]=o,this.array[n+1]=c,this.array[n+2]=h,this}setXYZW(n,o,c,h,p){return n*=this.itemSize,this.normalized&&(o=fi(o,this.array),c=fi(c,this.array),h=fi(h,this.array),p=fi(p,this.array)),this.array[n+0]=o,this.array[n+1]=c,this.array[n+2]=h,this.array[n+3]=p,this}onUpload(n){return this.onUploadCallback=n,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const n={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(n.name=this.name),this.usage!==Np&&(n.usage=this.usage),n}}class yV extends cs{constructor(n,o,c){super(new Int8Array(n),o,c)}}class vV extends cs{constructor(n,o,c){super(new Uint8Array(n),o,c)}}class SV extends cs{constructor(n,o,c){super(new Uint8ClampedArray(n),o,c)}}class bV extends cs{constructor(n,o,c){super(new Int16Array(n),o,c)}}class TS extends cs{constructor(n,o,c){super(new Uint16Array(n),o,c)}}class TV extends cs{constructor(n,o,c){super(new Int32Array(n),o,c)}}class MS extends cs{constructor(n,o,c){super(new Uint32Array(n),o,c)}}class MV extends cs{constructor(n,o,c){super(new Uint16Array(n),o,c),this.isFloat16BufferAttribute=!0}getX(n){let o=Fp(this.array[n*this.itemSize]);return this.normalized&&(o=qr(o,this.array)),o}setX(n,o){return this.normalized&&(o=fi(o,this.array)),this.array[n*this.itemSize]=po(o),this}getY(n){let o=Fp(this.array[n*this.itemSize+1]);return this.normalized&&(o=qr(o,this.array)),o}setY(n,o){return this.normalized&&(o=fi(o,this.array)),this.array[n*this.itemSize+1]=po(o),this}getZ(n){let o=Fp(this.array[n*this.itemSize+2]);return this.normalized&&(o=qr(o,this.array)),o}setZ(n,o){return this.normalized&&(o=fi(o,this.array)),this.array[n*this.itemSize+2]=po(o),this}getW(n){let o=Fp(this.array[n*this.itemSize+3]);return this.normalized&&(o=qr(o,this.array)),o}setW(n,o){return this.normalized&&(o=fi(o,this.array)),this.array[n*this.itemSize+3]=po(o),this}setXY(n,o,c){return n*=this.itemSize,this.normalized&&(o=fi(o,this.array),c=fi(c,this.array)),this.array[n+0]=po(o),this.array[n+1]=po(c),this}setXYZ(n,o,c,h){return n*=this.itemSize,this.normalized&&(o=fi(o,this.array),c=fi(c,this.array),h=fi(h,this.array)),this.array[n+0]=po(o),this.array[n+1]=po(c),this.array[n+2]=po(h),this}setXYZW(n,o,c,h,p){return n*=this.itemSize,this.normalized&&(o=fi(o,this.array),c=fi(c,this.array),h=fi(h,this.array),p=fi(p,this.array)),this.array[n+0]=po(o),this.array[n+1]=po(c),this.array[n+2]=po(h),this.array[n+3]=po(p),this}}class Tn extends cs{constructor(n,o,c){super(new Float32Array(n),o,c)}}let wV=0;const ta=new Qn,wS=new Bi,Nd=new ce,Uo=new Lr,Bp=new Lr,pr=new ce;class pi extends Ya{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:wV++}),this.uuid=Io(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(n){return Array.isArray(n)?this.index=new($E(n)?MS:TS)(n,1):this.index=n,this}setIndirect(n){return this.indirect=n,this}getIndirect(){return this.indirect}getAttribute(n){return this.attributes[n]}setAttribute(n,o){return this.attributes[n]=o,this}deleteAttribute(n){return delete this.attributes[n],this}hasAttribute(n){return this.attributes[n]!==void 0}addGroup(n,o,c=0){this.groups.push({start:n,count:o,materialIndex:c})}clearGroups(){this.groups=[]}setDrawRange(n,o){this.drawRange.start=n,this.drawRange.count=o}applyMatrix4(n){const o=this.attributes.position;o!==void 0&&(o.applyMatrix4(n),o.needsUpdate=!0);const c=this.attributes.normal;if(c!==void 0){const p=new ci().getNormalMatrix(n);c.applyNormalMatrix(p),c.needsUpdate=!0}const h=this.attributes.tangent;return h!==void 0&&(h.transformDirection(n),h.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(n){return ta.makeRotationFromQuaternion(n),this.applyMatrix4(ta),this}rotateX(n){return ta.makeRotationX(n),this.applyMatrix4(ta),this}rotateY(n){return ta.makeRotationY(n),this.applyMatrix4(ta),this}rotateZ(n){return ta.makeRotationZ(n),this.applyMatrix4(ta),this}translate(n,o,c){return ta.makeTranslation(n,o,c),this.applyMatrix4(ta),this}scale(n,o,c){return ta.makeScale(n,o,c),this.applyMatrix4(ta),this}lookAt(n){return wS.lookAt(n),wS.updateMatrix(),this.applyMatrix4(wS.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Nd).negate(),this.translate(Nd.x,Nd.y,Nd.z),this}setFromPoints(n){const o=this.getAttribute("position");if(o===void 0){const c=[];for(let h=0,p=n.length;h<p;h++){const _=n[h];c.push(_.x,_.y,_.z||0)}this.setAttribute("position",new Tn(c,3))}else{const c=Math.min(n.length,o.count);for(let h=0;h<c;h++){const p=n[h];o.setXYZ(h,p.x,p.y,p.z||0)}n.length>o.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),o.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Lr);const n=this.attributes.position,o=this.morphAttributes.position;if(n&&n.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new ce(-1/0,-1/0,-1/0),new ce(1/0,1/0,1/0));return}if(n!==void 0){if(this.boundingBox.setFromBufferAttribute(n),o)for(let c=0,h=o.length;c<h;c++){const p=o[c];Uo.setFromBufferAttribute(p),this.morphTargetsRelative?(pr.addVectors(this.boundingBox.min,Uo.min),this.boundingBox.expandByPoint(pr),pr.addVectors(this.boundingBox.max,Uo.max),this.boundingBox.expandByPoint(pr)):(this.boundingBox.expandByPoint(Uo.min),this.boundingBox.expandByPoint(Uo.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Mr);const n=this.attributes.position,o=this.morphAttributes.position;if(n&&n.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new ce,1/0);return}if(n){const c=this.boundingSphere.center;if(Uo.setFromBufferAttribute(n),o)for(let p=0,_=o.length;p<_;p++){const y=o[p];Bp.setFromBufferAttribute(y),this.morphTargetsRelative?(pr.addVectors(Uo.min,Bp.min),Uo.expandByPoint(pr),pr.addVectors(Uo.max,Bp.max),Uo.expandByPoint(pr)):(Uo.expandByPoint(Bp.min),Uo.expandByPoint(Bp.max))}Uo.getCenter(c);let h=0;for(let p=0,_=n.count;p<_;p++)pr.fromBufferAttribute(n,p),h=Math.max(h,c.distanceToSquared(pr));if(o)for(let p=0,_=o.length;p<_;p++){const y=o[p],b=this.morphTargetsRelative;for(let M=0,R=y.count;M<R;M++)pr.fromBufferAttribute(y,M),b&&(Nd.fromBufferAttribute(n,M),pr.add(Nd)),h=Math.max(h,c.distanceToSquared(pr))}this.boundingSphere.radius=Math.sqrt(h),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const n=this.index,o=this.attributes;if(n===null||o.position===void 0||o.normal===void 0||o.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const c=o.position,h=o.normal,p=o.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new cs(new Float32Array(4*c.count),4));const _=this.getAttribute("tangent"),y=[],b=[];for(let me=0;me<c.count;me++)y[me]=new ce,b[me]=new ce;const M=new ce,R=new ce,C=new ce,N=new vt,P=new vt,L=new vt,V=new ce,U=new ce;function I(me,j,J){M.fromBufferAttribute(c,me),R.fromBufferAttribute(c,j),C.fromBufferAttribute(c,J),N.fromBufferAttribute(p,me),P.fromBufferAttribute(p,j),L.fromBufferAttribute(p,J),R.sub(M),C.sub(M),P.sub(N),L.sub(N);const fe=1/(P.x*L.y-L.x*P.y);isFinite(fe)&&(V.copy(R).multiplyScalar(L.y).addScaledVector(C,-P.y).multiplyScalar(fe),U.copy(C).multiplyScalar(P.x).addScaledVector(R,-L.x).multiplyScalar(fe),y[me].add(V),y[j].add(V),y[J].add(V),b[me].add(U),b[j].add(U),b[J].add(U))}let Z=this.groups;Z.length===0&&(Z=[{start:0,count:n.count}]);for(let me=0,j=Z.length;me<j;++me){const J=Z[me],fe=J.start,We=J.count;for(let Ke=fe,ot=fe+We;Ke<ot;Ke+=3)I(n.getX(Ke+0),n.getX(Ke+1),n.getX(Ke+2))}const W=new ce,G=new ce,ae=new ce,le=new ce;function he(me){ae.fromBufferAttribute(h,me),le.copy(ae);const j=y[me];W.copy(j),W.sub(ae.multiplyScalar(ae.dot(j))).normalize(),G.crossVectors(le,j);const fe=G.dot(b[me])<0?-1:1;_.setXYZW(me,W.x,W.y,W.z,fe)}for(let me=0,j=Z.length;me<j;++me){const J=Z[me],fe=J.start,We=J.count;for(let Ke=fe,ot=fe+We;Ke<ot;Ke+=3)he(n.getX(Ke+0)),he(n.getX(Ke+1)),he(n.getX(Ke+2))}}computeVertexNormals(){const n=this.index,o=this.getAttribute("position");if(o!==void 0){let c=this.getAttribute("normal");if(c===void 0)c=new cs(new Float32Array(o.count*3),3),this.setAttribute("normal",c);else for(let N=0,P=c.count;N<P;N++)c.setXYZ(N,0,0,0);const h=new ce,p=new ce,_=new ce,y=new ce,b=new ce,M=new ce,R=new ce,C=new ce;if(n)for(let N=0,P=n.count;N<P;N+=3){const L=n.getX(N+0),V=n.getX(N+1),U=n.getX(N+2);h.fromBufferAttribute(o,L),p.fromBufferAttribute(o,V),_.fromBufferAttribute(o,U),R.subVectors(_,p),C.subVectors(h,p),R.cross(C),y.fromBufferAttribute(c,L),b.fromBufferAttribute(c,V),M.fromBufferAttribute(c,U),y.add(R),b.add(R),M.add(R),c.setXYZ(L,y.x,y.y,y.z),c.setXYZ(V,b.x,b.y,b.z),c.setXYZ(U,M.x,M.y,M.z)}else for(let N=0,P=o.count;N<P;N+=3)h.fromBufferAttribute(o,N+0),p.fromBufferAttribute(o,N+1),_.fromBufferAttribute(o,N+2),R.subVectors(_,p),C.subVectors(h,p),R.cross(C),c.setXYZ(N+0,R.x,R.y,R.z),c.setXYZ(N+1,R.x,R.y,R.z),c.setXYZ(N+2,R.x,R.y,R.z);this.normalizeNormals(),c.needsUpdate=!0}}normalizeNormals(){const n=this.attributes.normal;for(let o=0,c=n.count;o<c;o++)pr.fromBufferAttribute(n,o),pr.normalize(),n.setXYZ(o,pr.x,pr.y,pr.z)}toNonIndexed(){function n(y,b){const M=y.array,R=y.itemSize,C=y.normalized,N=new M.constructor(b.length*R);let P=0,L=0;for(let V=0,U=b.length;V<U;V++){y.isInterleavedBufferAttribute?P=b[V]*y.data.stride+y.offset:P=b[V]*R;for(let I=0;I<R;I++)N[L++]=M[P++]}return new cs(N,R,C)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const o=new pi,c=this.index.array,h=this.attributes;for(const y in h){const b=h[y],M=n(b,c);o.setAttribute(y,M)}const p=this.morphAttributes;for(const y in p){const b=[],M=p[y];for(let R=0,C=M.length;R<C;R++){const N=M[R],P=n(N,c);b.push(P)}o.morphAttributes[y]=b}o.morphTargetsRelative=this.morphTargetsRelative;const _=this.groups;for(let y=0,b=_.length;y<b;y++){const M=_[y];o.addGroup(M.start,M.count,M.materialIndex)}return o}toJSON(){const n={metadata:{version:4.7,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),Object.keys(this.userData).length>0&&(n.userData=this.userData),this.parameters!==void 0){const b=this.parameters;for(const M in b)b[M]!==void 0&&(n[M]=b[M]);return n}n.data={attributes:{}};const o=this.index;o!==null&&(n.data.index={type:o.array.constructor.name,array:Array.prototype.slice.call(o.array)});const c=this.attributes;for(const b in c){const M=c[b];n.data.attributes[b]=M.toJSON(n.data)}const h={};let p=!1;for(const b in this.morphAttributes){const M=this.morphAttributes[b],R=[];for(let C=0,N=M.length;C<N;C++){const P=M[C];R.push(P.toJSON(n.data))}R.length>0&&(h[b]=R,p=!0)}p&&(n.data.morphAttributes=h,n.data.morphTargetsRelative=this.morphTargetsRelative);const _=this.groups;_.length>0&&(n.data.groups=JSON.parse(JSON.stringify(_)));const y=this.boundingSphere;return y!==null&&(n.data.boundingSphere=y.toJSON()),n}clone(){return new this.constructor().copy(this)}copy(n){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const o={};this.name=n.name;const c=n.index;c!==null&&this.setIndex(c.clone());const h=n.attributes;for(const M in h){const R=h[M];this.setAttribute(M,R.clone(o))}const p=n.morphAttributes;for(const M in p){const R=[],C=p[M];for(let N=0,P=C.length;N<P;N++)R.push(C[N].clone(o));this.morphAttributes[M]=R}this.morphTargetsRelative=n.morphTargetsRelative;const _=n.groups;for(let M=0,R=_.length;M<R;M++){const C=_[M];this.addGroup(C.start,C.count,C.materialIndex)}const y=n.boundingBox;y!==null&&(this.boundingBox=y.clone());const b=n.boundingSphere;return b!==null&&(this.boundingSphere=b.clone()),this.drawRange.start=n.drawRange.start,this.drawRange.count=n.drawRange.count,this.userData=n.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const o1=new Qn,bu=new Md,S_=new Mr,a1=new ce,b_=new ce,T_=new ce,M_=new ce,AS=new ce,w_=new ce,l1=new ce,A_=new ce;class Zs extends Bi{constructor(n=new pi,o=new Sc){super(),this.isMesh=!0,this.type="Mesh",this.geometry=n,this.material=o,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.count=1,this.updateMorphTargets()}copy(n,o){return super.copy(n,o),n.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=n.morphTargetInfluences.slice()),n.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},n.morphTargetDictionary)),this.material=Array.isArray(n.material)?n.material.slice():n.material,this.geometry=n.geometry,this}updateMorphTargets(){const o=this.geometry.morphAttributes,c=Object.keys(o);if(c.length>0){const h=o[c[0]];if(h!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let p=0,_=h.length;p<_;p++){const y=h[p].name||String(p);this.morphTargetInfluences.push(0),this.morphTargetDictionary[y]=p}}}}getVertexPosition(n,o){const c=this.geometry,h=c.attributes.position,p=c.morphAttributes.position,_=c.morphTargetsRelative;o.fromBufferAttribute(h,n);const y=this.morphTargetInfluences;if(p&&y){w_.set(0,0,0);for(let b=0,M=p.length;b<M;b++){const R=y[b],C=p[b];R!==0&&(AS.fromBufferAttribute(C,n),_?w_.addScaledVector(AS,R):w_.addScaledVector(AS.sub(o),R))}o.add(w_)}return o}raycast(n,o){const c=this.geometry,h=this.material,p=this.matrixWorld;h!==void 0&&(c.boundingSphere===null&&c.computeBoundingSphere(),S_.copy(c.boundingSphere),S_.applyMatrix4(p),bu.copy(n.ray).recast(n.near),!(S_.containsPoint(bu.origin)===!1&&(bu.intersectSphere(S_,a1)===null||bu.origin.distanceToSquared(a1)>(n.far-n.near)**2))&&(o1.copy(p).invert(),bu.copy(n.ray).applyMatrix4(o1),!(c.boundingBox!==null&&bu.intersectsBox(c.boundingBox)===!1)&&this._computeIntersections(n,o,bu)))}_computeIntersections(n,o,c){let h;const p=this.geometry,_=this.material,y=p.index,b=p.attributes.position,M=p.attributes.uv,R=p.attributes.uv1,C=p.attributes.normal,N=p.groups,P=p.drawRange;if(y!==null)if(Array.isArray(_))for(let L=0,V=N.length;L<V;L++){const U=N[L],I=_[U.materialIndex],Z=Math.max(U.start,P.start),W=Math.min(y.count,Math.min(U.start+U.count,P.start+P.count));for(let G=Z,ae=W;G<ae;G+=3){const le=y.getX(G),he=y.getX(G+1),me=y.getX(G+2);h=E_(this,I,n,c,M,R,C,le,he,me),h&&(h.faceIndex=Math.floor(G/3),h.face.materialIndex=U.materialIndex,o.push(h))}}else{const L=Math.max(0,P.start),V=Math.min(y.count,P.start+P.count);for(let U=L,I=V;U<I;U+=3){const Z=y.getX(U),W=y.getX(U+1),G=y.getX(U+2);h=E_(this,_,n,c,M,R,C,Z,W,G),h&&(h.faceIndex=Math.floor(U/3),o.push(h))}}else if(b!==void 0)if(Array.isArray(_))for(let L=0,V=N.length;L<V;L++){const U=N[L],I=_[U.materialIndex],Z=Math.max(U.start,P.start),W=Math.min(b.count,Math.min(U.start+U.count,P.start+P.count));for(let G=Z,ae=W;G<ae;G+=3){const le=G,he=G+1,me=G+2;h=E_(this,I,n,c,M,R,C,le,he,me),h&&(h.faceIndex=Math.floor(G/3),h.face.materialIndex=U.materialIndex,o.push(h))}}else{const L=Math.max(0,P.start),V=Math.min(b.count,P.start+P.count);for(let U=L,I=V;U<I;U+=3){const Z=U,W=U+1,G=U+2;h=E_(this,_,n,c,M,R,C,Z,W,G),h&&(h.faceIndex=Math.floor(U/3),o.push(h))}}}}function AV(m,n,o,c,h,p,_,y){let b;if(n.side===v?b=c.intersectTriangle(_,p,h,!0,y):b=c.intersectTriangle(h,p,_,n.side===x,y),b===null)return null;A_.copy(y),A_.applyMatrix4(m.matrixWorld);const M=o.ray.origin.distanceTo(A_);return M<o.near||M>o.far?null:{distance:M,point:A_.clone(),object:m}}function E_(m,n,o,c,h,p,_,y,b,M){m.getVertexPosition(y,b_),m.getVertexPosition(b,T_),m.getVertexPosition(M,M_);const R=AV(m,n,o,c,b_,T_,M_,l1);if(R){const C=new ce;fo.getBarycoord(l1,b_,T_,M_,C),h&&(R.uv=fo.getInterpolatedAttribute(h,y,b,M,C,new vt)),p&&(R.uv1=fo.getInterpolatedAttribute(p,y,b,M,C,new vt)),_&&(R.normal=fo.getInterpolatedAttribute(_,y,b,M,C,new ce),R.normal.dot(c.direction)>0&&R.normal.multiplyScalar(-1));const N={a:y,b,c:M,normal:new ce,materialIndex:0};fo.getNormal(b_,T_,M_,N.normal),R.face=N,R.barycoord=C}return R}class Tu extends pi{constructor(n=1,o=1,c=1,h=1,p=1,_=1){super(),this.type="BoxGeometry",this.parameters={width:n,height:o,depth:c,widthSegments:h,heightSegments:p,depthSegments:_};const y=this;h=Math.floor(h),p=Math.floor(p),_=Math.floor(_);const b=[],M=[],R=[],C=[];let N=0,P=0;L("z","y","x",-1,-1,c,o,n,_,p,0),L("z","y","x",1,-1,c,o,-n,_,p,1),L("x","z","y",1,1,n,c,o,h,_,2),L("x","z","y",1,-1,n,c,-o,h,_,3),L("x","y","z",1,-1,n,o,c,h,p,4),L("x","y","z",-1,-1,n,o,-c,h,p,5),this.setIndex(b),this.setAttribute("position",new Tn(M,3)),this.setAttribute("normal",new Tn(R,3)),this.setAttribute("uv",new Tn(C,2));function L(V,U,I,Z,W,G,ae,le,he,me,j){const J=G/he,fe=ae/me,We=G/2,Ke=ae/2,ot=le/2,pt=he+1,ht=me+1;let St=0,st=0;const jt=new ce;for(let hn=0;hn<ht;hn++){const An=hn*fe-Ke;for(let ai=0;ai<pt;ai++){const Gi=ai*J-We;jt[V]=Gi*Z,jt[U]=An*W,jt[I]=ot,M.push(jt.x,jt.y,jt.z),jt[V]=0,jt[U]=0,jt[I]=le>0?1:-1,R.push(jt.x,jt.y,jt.z),C.push(ai/he),C.push(1-hn/me),St+=1}}for(let hn=0;hn<me;hn++)for(let An=0;An<he;An++){const ai=N+An+pt*hn,Gi=N+An+pt*(hn+1),Hi=N+(An+1)+pt*(hn+1),dt=N+(An+1)+pt*hn;b.push(ai,Gi,dt),b.push(Gi,Hi,dt),st+=6}y.addGroup(P,st,j),P+=st,N+=St}}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new Tu(n.width,n.height,n.depth,n.widthSegments,n.heightSegments,n.depthSegments)}}function Pd(m){const n={};for(const o in m){n[o]={};for(const c in m[o]){const h=m[o][c];h&&(h.isColor||h.isMatrix3||h.isMatrix4||h.isVector2||h.isVector3||h.isVector4||h.isTexture||h.isQuaternion)?h.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),n[o][c]=null):n[o][c]=h.clone():Array.isArray(h)?n[o][c]=h.slice():n[o][c]=h}}return n}function Yr(m){const n={};for(let o=0;o<m.length;o++){const c=Pd(m[o]);for(const h in c)n[h]=c[h]}return n}function EV(m){const n=[];for(let o=0;o<m.length;o++)n.push(m[o].clone());return n}function c1(m){const n=m.getRenderTarget();return n===null?m.outputColorSpace:n.isXRRenderTarget===!0?n.texture.colorSpace:Li.workingColorSpace}const u1={clone:Pd,merge:Yr};var RV=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,CV=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Ea extends Ur{constructor(n){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=RV,this.fragmentShader=CV,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,n!==void 0&&this.setValues(n)}copy(n){return super.copy(n),this.fragmentShader=n.fragmentShader,this.vertexShader=n.vertexShader,this.uniforms=Pd(n.uniforms),this.uniformsGroups=EV(n.uniformsGroups),this.defines=Object.assign({},n.defines),this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.fog=n.fog,this.lights=n.lights,this.clipping=n.clipping,this.extensions=Object.assign({},n.extensions),this.glslVersion=n.glslVersion,this}toJSON(n){const o=super.toJSON(n);o.glslVersion=this.glslVersion,o.uniforms={};for(const h in this.uniforms){const _=this.uniforms[h].value;_&&_.isTexture?o.uniforms[h]={type:"t",value:_.toJSON(n).uuid}:_&&_.isColor?o.uniforms[h]={type:"c",value:_.getHex()}:_&&_.isVector2?o.uniforms[h]={type:"v2",value:_.toArray()}:_&&_.isVector3?o.uniforms[h]={type:"v3",value:_.toArray()}:_&&_.isVector4?o.uniforms[h]={type:"v4",value:_.toArray()}:_&&_.isMatrix3?o.uniforms[h]={type:"m3",value:_.toArray()}:_&&_.isMatrix4?o.uniforms[h]={type:"m4",value:_.toArray()}:o.uniforms[h]={value:_}}Object.keys(this.defines).length>0&&(o.defines=this.defines),o.vertexShader=this.vertexShader,o.fragmentShader=this.fragmentShader,o.lights=this.lights,o.clipping=this.clipping;const c={};for(const h in this.extensions)this.extensions[h]===!0&&(c[h]=!0);return Object.keys(c).length>0&&(o.extensions=c),o}}class R_ extends Bi{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Qn,this.projectionMatrix=new Qn,this.projectionMatrixInverse=new Qn,this.coordinateSystem=Po,this._reversedDepth=!1}get reversedDepth(){return this._reversedDepth}copy(n,o){return super.copy(n,o),this.matrixWorldInverse.copy(n.matrixWorldInverse),this.projectionMatrix.copy(n.projectionMatrix),this.projectionMatrixInverse.copy(n.projectionMatrixInverse),this.coordinateSystem=n.coordinateSystem,this}getWorldDirection(n){return super.getWorldDirection(n).negate()}updateMatrixWorld(n){super.updateMatrixWorld(n),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(n,o){super.updateWorldMatrix(n,o),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const bc=new ce,h1=new vt,d1=new vt;class wr extends R_{constructor(n=50,o=1,c=.1,h=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=n,this.zoom=1,this.near=c,this.far=h,this.focus=10,this.aspect=o,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(n,o){return super.copy(n,o),this.fov=n.fov,this.zoom=n.zoom,this.near=n.near,this.far=n.far,this.focus=n.focus,this.aspect=n.aspect,this.view=n.view===null?null:Object.assign({},n.view),this.filmGauge=n.filmGauge,this.filmOffset=n.filmOffset,this}setFocalLength(n){const o=.5*this.getFilmHeight()/n;this.fov=gd*2*Math.atan(o),this.updateProjectionMatrix()}getFocalLength(){const n=Math.tan(yu*.5*this.fov);return .5*this.getFilmHeight()/n}getEffectiveFOV(){return gd*2*Math.atan(Math.tan(yu*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(n,o,c){bc.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),o.set(bc.x,bc.y).multiplyScalar(-n/bc.z),bc.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),c.set(bc.x,bc.y).multiplyScalar(-n/bc.z)}getViewSize(n,o){return this.getViewBounds(n,h1,d1),o.subVectors(d1,h1)}setViewOffset(n,o,c,h,p,_){this.aspect=n/o,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=n,this.view.fullHeight=o,this.view.offsetX=c,this.view.offsetY=h,this.view.width=p,this.view.height=_,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const n=this.near;let o=n*Math.tan(yu*.5*this.fov)/this.zoom,c=2*o,h=this.aspect*c,p=-.5*h;const _=this.view;if(this.view!==null&&this.view.enabled){const b=_.fullWidth,M=_.fullHeight;p+=_.offsetX*h/b,o-=_.offsetY*c/M,h*=_.width/b,c*=_.height/M}const y=this.filmOffset;y!==0&&(p+=n*y/this.getFilmWidth()),this.projectionMatrix.makePerspective(p,p+h,o,o-c,n,this.far,this.coordinateSystem,this.reversedDepth),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(n){const o=super.toJSON(n);return o.object.fov=this.fov,o.object.zoom=this.zoom,o.object.near=this.near,o.object.far=this.far,o.object.focus=this.focus,o.object.aspect=this.aspect,this.view!==null&&(o.object.view=Object.assign({},this.view)),o.object.filmGauge=this.filmGauge,o.object.filmOffset=this.filmOffset,o}}const Id=-90,Ld=1;class f1 extends Bi{constructor(n,o,c){super(),this.type="CubeCamera",this.renderTarget=c,this.coordinateSystem=null,this.activeMipmapLevel=0;const h=new wr(Id,Ld,n,o);h.layers=this.layers,this.add(h);const p=new wr(Id,Ld,n,o);p.layers=this.layers,this.add(p);const _=new wr(Id,Ld,n,o);_.layers=this.layers,this.add(_);const y=new wr(Id,Ld,n,o);y.layers=this.layers,this.add(y);const b=new wr(Id,Ld,n,o);b.layers=this.layers,this.add(b);const M=new wr(Id,Ld,n,o);M.layers=this.layers,this.add(M)}updateCoordinateSystem(){const n=this.coordinateSystem,o=this.children.concat(),[c,h,p,_,y,b]=o;for(const M of o)this.remove(M);if(n===Po)c.up.set(0,1,0),c.lookAt(1,0,0),h.up.set(0,1,0),h.lookAt(-1,0,0),p.up.set(0,0,-1),p.lookAt(0,1,0),_.up.set(0,0,1),_.lookAt(0,-1,0),y.up.set(0,1,0),y.lookAt(0,0,1),b.up.set(0,1,0),b.lookAt(0,0,-1);else if(n===md)c.up.set(0,-1,0),c.lookAt(-1,0,0),h.up.set(0,-1,0),h.lookAt(1,0,0),p.up.set(0,0,1),p.lookAt(0,1,0),_.up.set(0,0,-1),_.lookAt(0,-1,0),y.up.set(0,-1,0),y.lookAt(0,0,1),b.up.set(0,-1,0),b.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+n);for(const M of o)this.add(M),M.updateMatrixWorld()}update(n,o){this.parent===null&&this.updateMatrixWorld();const{renderTarget:c,activeMipmapLevel:h}=this;this.coordinateSystem!==n.coordinateSystem&&(this.coordinateSystem=n.coordinateSystem,this.updateCoordinateSystem());const[p,_,y,b,M,R]=this.children,C=n.getRenderTarget(),N=n.getActiveCubeFace(),P=n.getActiveMipmapLevel(),L=n.xr.enabled;n.xr.enabled=!1;const V=c.texture.generateMipmaps;c.texture.generateMipmaps=!1,n.setRenderTarget(c,0,h),n.render(o,p),n.setRenderTarget(c,1,h),n.render(o,_),n.setRenderTarget(c,2,h),n.render(o,y),n.setRenderTarget(c,3,h),n.render(o,b),n.setRenderTarget(c,4,h),n.render(o,M),c.texture.generateMipmaps=V,n.setRenderTarget(c,5,h),n.render(o,R),n.setRenderTarget(C,N,P),n.xr.enabled=L,c.texture.needsPMREMUpdate=!0}}class Op extends Ps{constructor(n=[],o=Me,c,h,p,_,y,b,M,R){super(n,o,c,h,p,_,y,b,M,R),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(n){this.image=n}}class p1 extends Za{constructor(n=1,o={}){super(n,n,o),this.isWebGLCubeRenderTarget=!0;const c={width:n,height:n,depth:1},h=[c,c,c,c,c,c];this.texture=new Op(h),this._setTextureOptions(o),this.texture.isRenderTargetTexture=!0}fromEquirectangularTexture(n,o){this.texture.type=o.type,this.texture.colorSpace=o.colorSpace,this.texture.generateMipmaps=o.generateMipmaps,this.texture.minFilter=o.minFilter,this.texture.magFilter=o.magFilter;const c={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},h=new Tu(5,5,5),p=new Ea({name:"CubemapFromEquirect",uniforms:Pd(c.uniforms),vertexShader:c.vertexShader,fragmentShader:c.fragmentShader,side:v,blending:T});p.uniforms.tEquirect.value=o;const _=new Zs(h,p),y=o.minFilter;return o.minFilter===Qt&&(o.minFilter=ge),new f1(1,10,this).update(n,_),o.minFilter=y,_.geometry.dispose(),_.material.dispose(),this}clear(n,o=!0,c=!0,h=!0){const p=n.getRenderTarget();for(let _=0;_<6;_++)n.setRenderTarget(this,_),n.clear(o,c,h);n.setRenderTarget(p)}}class Dd extends Bi{constructor(){super(),this.isGroup=!0,this.type="Group"}}const NV={type:"move"};class C_{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Dd,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Dd,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new ce,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new ce),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Dd,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new ce,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new ce),this._grip}dispatchEvent(n){return this._targetRay!==null&&this._targetRay.dispatchEvent(n),this._grip!==null&&this._grip.dispatchEvent(n),this._hand!==null&&this._hand.dispatchEvent(n),this}connect(n){if(n&&n.hand){const o=this._hand;if(o)for(const c of n.hand.values())this._getHandJoint(o,c)}return this.dispatchEvent({type:"connected",data:n}),this}disconnect(n){return this.dispatchEvent({type:"disconnected",data:n}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(n,o,c){let h=null,p=null,_=null;const y=this._targetRay,b=this._grip,M=this._hand;if(n&&o.session.visibilityState!=="visible-blurred"){if(M&&n.hand){_=!0;for(const V of n.hand.values()){const U=o.getJointPose(V,c),I=this._getHandJoint(M,V);U!==null&&(I.matrix.fromArray(U.transform.matrix),I.matrix.decompose(I.position,I.rotation,I.scale),I.matrixWorldNeedsUpdate=!0,I.jointRadius=U.radius),I.visible=U!==null}const R=M.joints["index-finger-tip"],C=M.joints["thumb-tip"],N=R.position.distanceTo(C.position),P=.02,L=.005;M.inputState.pinching&&N>P+L?(M.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:n.handedness,target:this})):!M.inputState.pinching&&N<=P-L&&(M.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:n.handedness,target:this}))}else b!==null&&n.gripSpace&&(p=o.getPose(n.gripSpace,c),p!==null&&(b.matrix.fromArray(p.transform.matrix),b.matrix.decompose(b.position,b.rotation,b.scale),b.matrixWorldNeedsUpdate=!0,p.linearVelocity?(b.hasLinearVelocity=!0,b.linearVelocity.copy(p.linearVelocity)):b.hasLinearVelocity=!1,p.angularVelocity?(b.hasAngularVelocity=!0,b.angularVelocity.copy(p.angularVelocity)):b.hasAngularVelocity=!1));y!==null&&(h=o.getPose(n.targetRaySpace,c),h===null&&p!==null&&(h=p),h!==null&&(y.matrix.fromArray(h.transform.matrix),y.matrix.decompose(y.position,y.rotation,y.scale),y.matrixWorldNeedsUpdate=!0,h.linearVelocity?(y.hasLinearVelocity=!0,y.linearVelocity.copy(h.linearVelocity)):y.hasLinearVelocity=!1,h.angularVelocity?(y.hasAngularVelocity=!0,y.angularVelocity.copy(h.angularVelocity)):y.hasAngularVelocity=!1,this.dispatchEvent(NV)))}return y!==null&&(y.visible=h!==null),b!==null&&(b.visible=p!==null),M!==null&&(M.visible=_!==null),this}_getHandJoint(n,o){if(n.joints[o.jointName]===void 0){const c=new Dd;c.matrixAutoUpdate=!1,c.visible=!1,n.joints[o.jointName]=c,n.add(c)}return n.joints[o.jointName]}}class N_{constructor(n,o=25e-5){this.isFogExp2=!0,this.name="",this.color=new mn(n),this.density=o}clone(){return new N_(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class P_{constructor(n,o=1,c=1e3){this.isFog=!0,this.name="",this.color=new mn(n),this.near=o,this.far=c}clone(){return new P_(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class m1 extends Bi{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Do,this.environmentIntensity=1,this.environmentRotation=new Do,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(n,o){return super.copy(n,o),n.background!==null&&(this.background=n.background.clone()),n.environment!==null&&(this.environment=n.environment.clone()),n.fog!==null&&(this.fog=n.fog.clone()),this.backgroundBlurriness=n.backgroundBlurriness,this.backgroundIntensity=n.backgroundIntensity,this.backgroundRotation.copy(n.backgroundRotation),this.environmentIntensity=n.environmentIntensity,this.environmentRotation.copy(n.environmentRotation),n.overrideMaterial!==null&&(this.overrideMaterial=n.overrideMaterial.clone()),this.matrixAutoUpdate=n.matrixAutoUpdate,this}toJSON(n){const o=super.toJSON(n);return this.fog!==null&&(o.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(o.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(o.object.backgroundIntensity=this.backgroundIntensity),o.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(o.object.environmentIntensity=this.environmentIntensity),o.object.environmentRotation=this.environmentRotation.toArray(),o}}class I_{constructor(n,o){this.isInterleavedBuffer=!0,this.array=n,this.stride=o,this.count=n!==void 0?n.length/o:0,this.usage=Np,this.updateRanges=[],this.version=0,this.uuid=Io()}onUploadCallback(){}set needsUpdate(n){n===!0&&this.version++}setUsage(n){return this.usage=n,this}addUpdateRange(n,o){this.updateRanges.push({start:n,count:o})}clearUpdateRanges(){this.updateRanges.length=0}copy(n){return this.array=new n.array.constructor(n.array),this.count=n.count,this.stride=n.stride,this.usage=n.usage,this}copyAt(n,o,c){n*=this.stride,c*=o.stride;for(let h=0,p=this.stride;h<p;h++)this.array[n+h]=o.array[c+h];return this}set(n,o=0){return this.array.set(n,o),this}clone(n){n.arrayBuffers===void 0&&(n.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Io()),n.arrayBuffers[this.array.buffer._uuid]===void 0&&(n.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const o=new this.array.constructor(n.arrayBuffers[this.array.buffer._uuid]),c=new this.constructor(o,this.stride);return c.setUsage(this.usage),c}onUpload(n){return this.onUploadCallback=n,this}toJSON(n){return n.arrayBuffers===void 0&&(n.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Io()),n.arrayBuffers[this.array.buffer._uuid]===void 0&&(n.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Zr=new ce;class Mu{constructor(n,o,c,h=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=n,this.itemSize=o,this.offset=c,this.normalized=h}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(n){this.data.needsUpdate=n}applyMatrix4(n){for(let o=0,c=this.data.count;o<c;o++)Zr.fromBufferAttribute(this,o),Zr.applyMatrix4(n),this.setXYZ(o,Zr.x,Zr.y,Zr.z);return this}applyNormalMatrix(n){for(let o=0,c=this.count;o<c;o++)Zr.fromBufferAttribute(this,o),Zr.applyNormalMatrix(n),this.setXYZ(o,Zr.x,Zr.y,Zr.z);return this}transformDirection(n){for(let o=0,c=this.count;o<c;o++)Zr.fromBufferAttribute(this,o),Zr.transformDirection(n),this.setXYZ(o,Zr.x,Zr.y,Zr.z);return this}getComponent(n,o){let c=this.array[n*this.data.stride+this.offset+o];return this.normalized&&(c=qr(c,this.array)),c}setComponent(n,o,c){return this.normalized&&(c=fi(c,this.array)),this.data.array[n*this.data.stride+this.offset+o]=c,this}setX(n,o){return this.normalized&&(o=fi(o,this.array)),this.data.array[n*this.data.stride+this.offset]=o,this}setY(n,o){return this.normalized&&(o=fi(o,this.array)),this.data.array[n*this.data.stride+this.offset+1]=o,this}setZ(n,o){return this.normalized&&(o=fi(o,this.array)),this.data.array[n*this.data.stride+this.offset+2]=o,this}setW(n,o){return this.normalized&&(o=fi(o,this.array)),this.data.array[n*this.data.stride+this.offset+3]=o,this}getX(n){let o=this.data.array[n*this.data.stride+this.offset];return this.normalized&&(o=qr(o,this.array)),o}getY(n){let o=this.data.array[n*this.data.stride+this.offset+1];return this.normalized&&(o=qr(o,this.array)),o}getZ(n){let o=this.data.array[n*this.data.stride+this.offset+2];return this.normalized&&(o=qr(o,this.array)),o}getW(n){let o=this.data.array[n*this.data.stride+this.offset+3];return this.normalized&&(o=qr(o,this.array)),o}setXY(n,o,c){return n=n*this.data.stride+this.offset,this.normalized&&(o=fi(o,this.array),c=fi(c,this.array)),this.data.array[n+0]=o,this.data.array[n+1]=c,this}setXYZ(n,o,c,h){return n=n*this.data.stride+this.offset,this.normalized&&(o=fi(o,this.array),c=fi(c,this.array),h=fi(h,this.array)),this.data.array[n+0]=o,this.data.array[n+1]=c,this.data.array[n+2]=h,this}setXYZW(n,o,c,h,p){return n=n*this.data.stride+this.offset,this.normalized&&(o=fi(o,this.array),c=fi(c,this.array),h=fi(h,this.array),p=fi(p,this.array)),this.data.array[n+0]=o,this.data.array[n+1]=c,this.data.array[n+2]=h,this.data.array[n+3]=p,this}clone(n){if(n===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const o=[];for(let c=0;c<this.count;c++){const h=c*this.data.stride+this.offset;for(let p=0;p<this.itemSize;p++)o.push(this.data.array[h+p])}return new cs(new this.array.constructor(o),this.itemSize,this.normalized)}else return n.interleavedBuffers===void 0&&(n.interleavedBuffers={}),n.interleavedBuffers[this.data.uuid]===void 0&&(n.interleavedBuffers[this.data.uuid]=this.data.clone(n)),new Mu(n.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(n){if(n===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const o=[];for(let c=0;c<this.count;c++){const h=c*this.data.stride+this.offset;for(let p=0;p<this.itemSize;p++)o.push(this.data.array[h+p])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:o,normalized:this.normalized}}else return n.interleavedBuffers===void 0&&(n.interleavedBuffers={}),n.interleavedBuffers[this.data.uuid]===void 0&&(n.interleavedBuffers[this.data.uuid]=this.data.toJSON(n)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class ES extends Ur{constructor(n){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new mn(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.alphaMap=n.alphaMap,this.rotation=n.rotation,this.sizeAttenuation=n.sizeAttenuation,this.fog=n.fog,this}}let Ud;const Vp=new ce,Fd=new ce,Bd=new ce,Od=new vt,zp=new vt,g1=new Qn,L_=new ce,kp=new ce,D_=new ce,_1=new vt,RS=new vt,x1=new vt;class y1 extends Bi{constructor(n=new ES){if(super(),this.isSprite=!0,this.type="Sprite",Ud===void 0){Ud=new pi;const o=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),c=new I_(o,5);Ud.setIndex([0,1,2,0,2,3]),Ud.setAttribute("position",new Mu(c,3,0,!1)),Ud.setAttribute("uv",new Mu(c,2,3,!1))}this.geometry=Ud,this.material=n,this.center=new vt(.5,.5),this.count=1}raycast(n,o){n.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Fd.setFromMatrixScale(this.matrixWorld),g1.copy(n.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(n.camera.matrixWorldInverse,this.matrixWorld),Bd.setFromMatrixPosition(this.modelViewMatrix),n.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&Fd.multiplyScalar(-Bd.z);const c=this.material.rotation;let h,p;c!==0&&(p=Math.cos(c),h=Math.sin(c));const _=this.center;U_(L_.set(-.5,-.5,0),Bd,_,Fd,h,p),U_(kp.set(.5,-.5,0),Bd,_,Fd,h,p),U_(D_.set(.5,.5,0),Bd,_,Fd,h,p),_1.set(0,0),RS.set(1,0),x1.set(1,1);let y=n.ray.intersectTriangle(L_,kp,D_,!1,Vp);if(y===null&&(U_(kp.set(-.5,.5,0),Bd,_,Fd,h,p),RS.set(0,1),y=n.ray.intersectTriangle(L_,D_,kp,!1,Vp),y===null))return;const b=n.ray.origin.distanceTo(Vp);b<n.near||b>n.far||o.push({distance:b,point:Vp.clone(),uv:fo.getInterpolation(Vp,L_,kp,D_,_1,RS,x1,new vt),face:null,object:this})}copy(n,o){return super.copy(n,o),n.center!==void 0&&this.center.copy(n.center),this.material=n.material,this}}function U_(m,n,o,c,h,p){Od.subVectors(m,o).addScalar(.5).multiply(c),h!==void 0?(zp.x=p*Od.x-h*Od.y,zp.y=h*Od.x+p*Od.y):zp.copy(Od),m.copy(n),m.x+=zp.x,m.y+=zp.y,m.applyMatrix4(g1)}const F_=new ce,v1=new ce;class S1 extends Bi{constructor(){super(),this.isLOD=!0,this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}copy(n){super.copy(n,!1);const o=n.levels;for(let c=0,h=o.length;c<h;c++){const p=o[c];this.addLevel(p.object.clone(),p.distance,p.hysteresis)}return this.autoUpdate=n.autoUpdate,this}addLevel(n,o=0,c=0){o=Math.abs(o);const h=this.levels;let p;for(p=0;p<h.length&&!(o<h[p].distance);p++);return h.splice(p,0,{distance:o,hysteresis:c,object:n}),this.add(n),this}removeLevel(n){const o=this.levels;for(let c=0;c<o.length;c++)if(o[c].distance===n){const h=o.splice(c,1);return this.remove(h[0].object),!0}return!1}getCurrentLevel(){return this._currentLevel}getObjectForDistance(n){const o=this.levels;if(o.length>0){let c,h;for(c=1,h=o.length;c<h;c++){let p=o[c].distance;if(o[c].object.visible&&(p-=p*o[c].hysteresis),n<p)break}return o[c-1].object}return null}raycast(n,o){if(this.levels.length>0){F_.setFromMatrixPosition(this.matrixWorld);const h=n.ray.origin.distanceTo(F_);this.getObjectForDistance(h).raycast(n,o)}}update(n){const o=this.levels;if(o.length>1){F_.setFromMatrixPosition(n.matrixWorld),v1.setFromMatrixPosition(this.matrixWorld);const c=F_.distanceTo(v1)/n.zoom;o[0].object.visible=!0;let h,p;for(h=1,p=o.length;h<p;h++){let _=o[h].distance;if(o[h].object.visible&&(_-=_*o[h].hysteresis),c>=_)o[h-1].object.visible=!1,o[h].object.visible=!0;else break}for(this._currentLevel=h-1;h<p;h++)o[h].object.visible=!1}}toJSON(n){const o=super.toJSON(n);this.autoUpdate===!1&&(o.object.autoUpdate=!1),o.object.levels=[];const c=this.levels;for(let h=0,p=c.length;h<p;h++){const _=c[h];o.object.levels.push({object:_.object.uuid,distance:_.distance,hysteresis:_.hysteresis})}return o}}const b1=new ce,T1=new Fi,M1=new Fi,PV=new ce,w1=new Qn,B_=new ce,CS=new Mr,A1=new Qn,NS=new Md;class E1 extends Zs{constructor(n,o){super(n,o),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=se,this.bindMatrix=new Qn,this.bindMatrixInverse=new Qn,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const n=this.geometry;this.boundingBox===null&&(this.boundingBox=new Lr),this.boundingBox.makeEmpty();const o=n.getAttribute("position");for(let c=0;c<o.count;c++)this.getVertexPosition(c,B_),this.boundingBox.expandByPoint(B_)}computeBoundingSphere(){const n=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new Mr),this.boundingSphere.makeEmpty();const o=n.getAttribute("position");for(let c=0;c<o.count;c++)this.getVertexPosition(c,B_),this.boundingSphere.expandByPoint(B_)}copy(n,o){return super.copy(n,o),this.bindMode=n.bindMode,this.bindMatrix.copy(n.bindMatrix),this.bindMatrixInverse.copy(n.bindMatrixInverse),this.skeleton=n.skeleton,n.boundingBox!==null&&(this.boundingBox=n.boundingBox.clone()),n.boundingSphere!==null&&(this.boundingSphere=n.boundingSphere.clone()),this}raycast(n,o){const c=this.material,h=this.matrixWorld;c!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),CS.copy(this.boundingSphere),CS.applyMatrix4(h),n.ray.intersectsSphere(CS)!==!1&&(A1.copy(h).invert(),NS.copy(n.ray).applyMatrix4(A1),!(this.boundingBox!==null&&NS.intersectsBox(this.boundingBox)===!1)&&this._computeIntersections(n,o,NS)))}getVertexPosition(n,o){return super.getVertexPosition(n,o),this.applyBoneTransform(n,o),o}bind(n,o){this.skeleton=n,o===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),o=this.matrixWorld),this.bindMatrix.copy(o),this.bindMatrixInverse.copy(o).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const n=new Fi,o=this.geometry.attributes.skinWeight;for(let c=0,h=o.count;c<h;c++){n.fromBufferAttribute(o,c);const p=1/n.manhattanLength();p!==1/0?n.multiplyScalar(p):n.set(1,0,0,0),o.setXYZW(c,n.x,n.y,n.z,n.w)}}updateMatrixWorld(n){super.updateMatrixWorld(n),this.bindMode===se?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===X?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(n,o){const c=this.skeleton,h=this.geometry;T1.fromBufferAttribute(h.attributes.skinIndex,n),M1.fromBufferAttribute(h.attributes.skinWeight,n),b1.copy(o).applyMatrix4(this.bindMatrix),o.set(0,0,0);for(let p=0;p<4;p++){const _=M1.getComponent(p);if(_!==0){const y=T1.getComponent(p);w1.multiplyMatrices(c.bones[y].matrixWorld,c.boneInverses[y]),o.addScaledVector(PV.copy(b1).applyMatrix4(w1),_)}}return o.applyMatrix4(this.bindMatrixInverse)}}class PS extends Bi{constructor(){super(),this.isBone=!0,this.type="Bone"}}class Ka extends Ps{constructor(n=null,o=1,c=1,h,p,_,y,b,M=mt,R=mt,C,N){super(null,_,y,b,M,R,h,p,C,N),this.isDataTexture=!0,this.image={data:n,width:o,height:c},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const R1=new Qn,IV=new Qn;class O_{constructor(n=[],o=[]){this.uuid=Io(),this.bones=n.slice(0),this.boneInverses=o,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const n=this.bones,o=this.boneInverses;if(this.boneMatrices=new Float32Array(n.length*16),o.length===0)this.calculateInverses();else if(n.length!==o.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let c=0,h=this.bones.length;c<h;c++)this.boneInverses.push(new Qn)}}calculateInverses(){this.boneInverses.length=0;for(let n=0,o=this.bones.length;n<o;n++){const c=new Qn;this.bones[n]&&c.copy(this.bones[n].matrixWorld).invert(),this.boneInverses.push(c)}}pose(){for(let n=0,o=this.bones.length;n<o;n++){const c=this.bones[n];c&&c.matrixWorld.copy(this.boneInverses[n]).invert()}for(let n=0,o=this.bones.length;n<o;n++){const c=this.bones[n];c&&(c.parent&&c.parent.isBone?(c.matrix.copy(c.parent.matrixWorld).invert(),c.matrix.multiply(c.matrixWorld)):c.matrix.copy(c.matrixWorld),c.matrix.decompose(c.position,c.quaternion,c.scale))}}update(){const n=this.bones,o=this.boneInverses,c=this.boneMatrices,h=this.boneTexture;for(let p=0,_=n.length;p<_;p++){const y=n[p]?n[p].matrixWorld:IV;R1.multiplyMatrices(y,o[p]),R1.toArray(c,p*16)}h!==null&&(h.needsUpdate=!0)}clone(){return new O_(this.bones,this.boneInverses)}computeBoneTexture(){let n=Math.sqrt(this.bones.length*4);n=Math.ceil(n/4)*4,n=Math.max(n,4);const o=new Float32Array(n*n*4);o.set(this.boneMatrices);const c=new Ka(o,n,n,Xs,vs);return c.needsUpdate=!0,this.boneMatrices=o,this.boneTexture=c,this}getBoneByName(n){for(let o=0,c=this.bones.length;o<c;o++){const h=this.bones[o];if(h.name===n)return h}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(n,o){this.uuid=n.uuid;for(let c=0,h=n.bones.length;c<h;c++){const p=n.bones[c];let _=o[p];_===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",p),_=new PS),this.bones.push(_),this.boneInverses.push(new Qn().fromArray(n.boneInverses[c]))}return this.init(),this}toJSON(){const n={metadata:{version:4.7,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};n.uuid=this.uuid;const o=this.bones,c=this.boneInverses;for(let h=0,p=o.length;h<p;h++){const _=o[h];n.bones.push(_.uuid);const y=c[h];n.boneInverses.push(y.toArray())}return n}}class Vd extends cs{constructor(n,o,c,h=1){super(n,o,c),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=h}copy(n){return super.copy(n),this.meshPerAttribute=n.meshPerAttribute,this}toJSON(){const n=super.toJSON();return n.meshPerAttribute=this.meshPerAttribute,n.isInstancedBufferAttribute=!0,n}}const zd=new Qn,C1=new Qn,V_=[],N1=new Lr,LV=new Qn,Gp=new Zs,Hp=new Mr;class P1 extends Zs{constructor(n,o,c){super(n,o),this.isInstancedMesh=!0,this.instanceMatrix=new Vd(new Float32Array(c*16),16),this.instanceColor=null,this.morphTexture=null,this.count=c,this.boundingBox=null,this.boundingSphere=null;for(let h=0;h<c;h++)this.setMatrixAt(h,LV)}computeBoundingBox(){const n=this.geometry,o=this.count;this.boundingBox===null&&(this.boundingBox=new Lr),n.boundingBox===null&&n.computeBoundingBox(),this.boundingBox.makeEmpty();for(let c=0;c<o;c++)this.getMatrixAt(c,zd),N1.copy(n.boundingBox).applyMatrix4(zd),this.boundingBox.union(N1)}computeBoundingSphere(){const n=this.geometry,o=this.count;this.boundingSphere===null&&(this.boundingSphere=new Mr),n.boundingSphere===null&&n.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let c=0;c<o;c++)this.getMatrixAt(c,zd),Hp.copy(n.boundingSphere).applyMatrix4(zd),this.boundingSphere.union(Hp)}copy(n,o){return super.copy(n,o),this.instanceMatrix.copy(n.instanceMatrix),n.morphTexture!==null&&(this.morphTexture=n.morphTexture.clone()),n.instanceColor!==null&&(this.instanceColor=n.instanceColor.clone()),this.count=n.count,n.boundingBox!==null&&(this.boundingBox=n.boundingBox.clone()),n.boundingSphere!==null&&(this.boundingSphere=n.boundingSphere.clone()),this}getColorAt(n,o){o.fromArray(this.instanceColor.array,n*3)}getMatrixAt(n,o){o.fromArray(this.instanceMatrix.array,n*16)}getMorphAt(n,o){const c=o.morphTargetInfluences,h=this.morphTexture.source.data.data,p=c.length+1,_=n*p+1;for(let y=0;y<c.length;y++)c[y]=h[_+y]}raycast(n,o){const c=this.matrixWorld,h=this.count;if(Gp.geometry=this.geometry,Gp.material=this.material,Gp.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Hp.copy(this.boundingSphere),Hp.applyMatrix4(c),n.ray.intersectsSphere(Hp)!==!1))for(let p=0;p<h;p++){this.getMatrixAt(p,zd),C1.multiplyMatrices(c,zd),Gp.matrixWorld=C1,Gp.raycast(n,V_);for(let _=0,y=V_.length;_<y;_++){const b=V_[_];b.instanceId=p,b.object=this,o.push(b)}V_.length=0}}setColorAt(n,o){this.instanceColor===null&&(this.instanceColor=new Vd(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),o.toArray(this.instanceColor.array,n*3)}setMatrixAt(n,o){o.toArray(this.instanceMatrix.array,n*16)}setMorphAt(n,o){const c=o.morphTargetInfluences,h=c.length+1;this.morphTexture===null&&(this.morphTexture=new Ka(new Float32Array(h*this.count),h,this.count,dd,vs));const p=this.morphTexture.source.data.data;let _=0;for(let M=0;M<c.length;M++)_+=c[M];const y=this.geometry.morphTargetsRelative?1:1-_,b=h*n;p[b]=y,p.set(c,b+1)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null)}}const IS=new ce,DV=new ce,UV=new ci;class Tc{constructor(n=new ce(1,0,0),o=0){this.isPlane=!0,this.normal=n,this.constant=o}set(n,o){return this.normal.copy(n),this.constant=o,this}setComponents(n,o,c,h){return this.normal.set(n,o,c),this.constant=h,this}setFromNormalAndCoplanarPoint(n,o){return this.normal.copy(n),this.constant=-o.dot(this.normal),this}setFromCoplanarPoints(n,o,c){const h=IS.subVectors(c,o).cross(DV.subVectors(n,o)).normalize();return this.setFromNormalAndCoplanarPoint(h,n),this}copy(n){return this.normal.copy(n.normal),this.constant=n.constant,this}normalize(){const n=1/this.normal.length();return this.normal.multiplyScalar(n),this.constant*=n,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(n){return this.normal.dot(n)+this.constant}distanceToSphere(n){return this.distanceToPoint(n.center)-n.radius}projectPoint(n,o){return o.copy(n).addScaledVector(this.normal,-this.distanceToPoint(n))}intersectLine(n,o){const c=n.delta(IS),h=this.normal.dot(c);if(h===0)return this.distanceToPoint(n.start)===0?o.copy(n.start):null;const p=-(n.start.dot(this.normal)+this.constant)/h;return p<0||p>1?null:o.copy(n.start).addScaledVector(c,p)}intersectsLine(n){const o=this.distanceToPoint(n.start),c=this.distanceToPoint(n.end);return o<0&&c>0||c<0&&o>0}intersectsBox(n){return n.intersectsPlane(this)}intersectsSphere(n){return n.intersectsPlane(this)}coplanarPoint(n){return n.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(n,o){const c=o||UV.getNormalMatrix(n),h=this.coplanarPoint(IS).applyMatrix4(n),p=this.normal.applyMatrix3(c).normalize();return this.constant=-h.dot(p),this}translate(n){return this.constant-=n.dot(this.normal),this}equals(n){return n.normal.equals(this.normal)&&n.constant===this.constant}clone(){return new this.constructor().copy(this)}}const wu=new Mr,FV=new vt(.5,.5),z_=new ce;class kd{constructor(n=new Tc,o=new Tc,c=new Tc,h=new Tc,p=new Tc,_=new Tc){this.planes=[n,o,c,h,p,_]}set(n,o,c,h,p,_){const y=this.planes;return y[0].copy(n),y[1].copy(o),y[2].copy(c),y[3].copy(h),y[4].copy(p),y[5].copy(_),this}copy(n){const o=this.planes;for(let c=0;c<6;c++)o[c].copy(n.planes[c]);return this}setFromProjectionMatrix(n,o=Po,c=!1){const h=this.planes,p=n.elements,_=p[0],y=p[1],b=p[2],M=p[3],R=p[4],C=p[5],N=p[6],P=p[7],L=p[8],V=p[9],U=p[10],I=p[11],Z=p[12],W=p[13],G=p[14],ae=p[15];if(h[0].setComponents(M-_,P-R,I-L,ae-Z).normalize(),h[1].setComponents(M+_,P+R,I+L,ae+Z).normalize(),h[2].setComponents(M+y,P+C,I+V,ae+W).normalize(),h[3].setComponents(M-y,P-C,I-V,ae-W).normalize(),c)h[4].setComponents(b,N,U,G).normalize(),h[5].setComponents(M-b,P-N,I-U,ae-G).normalize();else if(h[4].setComponents(M-b,P-N,I-U,ae-G).normalize(),o===Po)h[5].setComponents(M+b,P+N,I+U,ae+G).normalize();else if(o===md)h[5].setComponents(b,N,U,G).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+o);return this}intersectsObject(n){if(n.boundingSphere!==void 0)n.boundingSphere===null&&n.computeBoundingSphere(),wu.copy(n.boundingSphere).applyMatrix4(n.matrixWorld);else{const o=n.geometry;o.boundingSphere===null&&o.computeBoundingSphere(),wu.copy(o.boundingSphere).applyMatrix4(n.matrixWorld)}return this.intersectsSphere(wu)}intersectsSprite(n){wu.center.set(0,0,0);const o=FV.distanceTo(n.center);return wu.radius=.7071067811865476+o,wu.applyMatrix4(n.matrixWorld),this.intersectsSphere(wu)}intersectsSphere(n){const o=this.planes,c=n.center,h=-n.radius;for(let p=0;p<6;p++)if(o[p].distanceToPoint(c)<h)return!1;return!0}intersectsBox(n){const o=this.planes;for(let c=0;c<6;c++){const h=o[c];if(z_.x=h.normal.x>0?n.max.x:n.min.x,z_.y=h.normal.y>0?n.max.y:n.min.y,z_.z=h.normal.z>0?n.max.z:n.min.z,h.distanceToPoint(z_)<0)return!1}return!0}containsPoint(n){const o=this.planes;for(let c=0;c<6;c++)if(o[c].distanceToPoint(n)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}const Ja=new Qn,ja=new kd;class k_{constructor(){this.coordinateSystem=Po}intersectsObject(n,o){if(!o.isArrayCamera||o.cameras.length===0)return!1;for(let c=0;c<o.cameras.length;c++){const h=o.cameras[c];if(Ja.multiplyMatrices(h.projectionMatrix,h.matrixWorldInverse),ja.setFromProjectionMatrix(Ja,h.coordinateSystem,h.reversedDepth),ja.intersectsObject(n))return!0}return!1}intersectsSprite(n,o){if(!o||!o.cameras||o.cameras.length===0)return!1;for(let c=0;c<o.cameras.length;c++){const h=o.cameras[c];if(Ja.multiplyMatrices(h.projectionMatrix,h.matrixWorldInverse),ja.setFromProjectionMatrix(Ja,h.coordinateSystem,h.reversedDepth),ja.intersectsSprite(n))return!0}return!1}intersectsSphere(n,o){if(!o||!o.cameras||o.cameras.length===0)return!1;for(let c=0;c<o.cameras.length;c++){const h=o.cameras[c];if(Ja.multiplyMatrices(h.projectionMatrix,h.matrixWorldInverse),ja.setFromProjectionMatrix(Ja,h.coordinateSystem,h.reversedDepth),ja.intersectsSphere(n))return!0}return!1}intersectsBox(n,o){if(!o||!o.cameras||o.cameras.length===0)return!1;for(let c=0;c<o.cameras.length;c++){const h=o.cameras[c];if(Ja.multiplyMatrices(h.projectionMatrix,h.matrixWorldInverse),ja.setFromProjectionMatrix(Ja,h.coordinateSystem,h.reversedDepth),ja.intersectsBox(n))return!0}return!1}containsPoint(n,o){if(!o||!o.cameras||o.cameras.length===0)return!1;for(let c=0;c<o.cameras.length;c++){const h=o.cameras[c];if(Ja.multiplyMatrices(h.projectionMatrix,h.matrixWorldInverse),ja.setFromProjectionMatrix(Ja,h.coordinateSystem,h.reversedDepth),ja.containsPoint(n))return!0}return!1}clone(){return new k_}}function LS(m,n){return m-n}function BV(m,n){return m.z-n.z}function OV(m,n){return n.z-m.z}class VV{constructor(){this.index=0,this.pool=[],this.list=[]}push(n,o,c,h){const p=this.pool,_=this.list;this.index>=p.length&&p.push({start:-1,count:-1,z:-1,index:-1});const y=p[this.index];_.push(y),this.index++,y.start=n,y.count=o,y.z=c,y.index=h}reset(){this.list.length=0,this.index=0}}const mo=new Qn,zV=new mn(1,1,1),I1=new kd,kV=new k_,G_=new Lr,Au=new Mr,Wp=new ce,L1=new ce,GV=new ce,DS=new VV,Fr=new Zs,H_=[];function HV(m,n,o=0){const c=n.itemSize;if(m.isInterleavedBufferAttribute||m.array.constructor!==n.array.constructor){const h=m.count;for(let p=0;p<h;p++)for(let _=0;_<c;_++)n.setComponent(p+o,_,m.getComponent(p,_))}else n.array.set(m.array,o*c);n.needsUpdate=!0}function Eu(m,n){if(m.constructor!==n.constructor){const o=Math.min(m.length,n.length);for(let c=0;c<o;c++)n[c]=m[c]}else{const o=Math.min(m.length,n.length);n.set(new m.constructor(m.buffer,0,o))}}class D1 extends Zs{constructor(n,o,c=o*2,h){super(new pi,h),this.isBatchedMesh=!0,this.perObjectFrustumCulled=!0,this.sortObjects=!0,this.boundingBox=null,this.boundingSphere=null,this.customSort=null,this._instanceInfo=[],this._geometryInfo=[],this._availableInstanceIds=[],this._availableGeometryIds=[],this._nextIndexStart=0,this._nextVertexStart=0,this._geometryCount=0,this._visibilityChanged=!0,this._geometryInitialized=!1,this._maxInstanceCount=n,this._maxVertexCount=o,this._maxIndexCount=c,this._multiDrawCounts=new Int32Array(n),this._multiDrawStarts=new Int32Array(n),this._multiDrawCount=0,this._multiDrawInstances=null,this._matricesTexture=null,this._indirectTexture=null,this._colorsTexture=null,this._initMatricesTexture(),this._initIndirectTexture()}get maxInstanceCount(){return this._maxInstanceCount}get instanceCount(){return this._instanceInfo.length-this._availableInstanceIds.length}get unusedVertexCount(){return this._maxVertexCount-this._nextVertexStart}get unusedIndexCount(){return this._maxIndexCount-this._nextIndexStart}_initMatricesTexture(){let n=Math.sqrt(this._maxInstanceCount*4);n=Math.ceil(n/4)*4,n=Math.max(n,4);const o=new Float32Array(n*n*4),c=new Ka(o,n,n,Xs,vs);this._matricesTexture=c}_initIndirectTexture(){let n=Math.sqrt(this._maxInstanceCount);n=Math.ceil(n);const o=new Uint32Array(n*n),c=new Ka(o,n,n,pu,nr);this._indirectTexture=c}_initColorsTexture(){let n=Math.sqrt(this._maxInstanceCount);n=Math.ceil(n);const o=new Float32Array(n*n*4).fill(1),c=new Ka(o,n,n,Xs,vs);c.colorSpace=Li.workingColorSpace,this._colorsTexture=c}_initializeGeometry(n){const o=this.geometry,c=this._maxVertexCount,h=this._maxIndexCount;if(this._geometryInitialized===!1){for(const p in n.attributes){const _=n.getAttribute(p),{array:y,itemSize:b,normalized:M}=_,R=new y.constructor(c*b),C=new cs(R,b,M);o.setAttribute(p,C)}if(n.getIndex()!==null){const p=c>65535?new Uint32Array(h):new Uint16Array(h);o.setIndex(new cs(p,1))}this._geometryInitialized=!0}}_validateGeometry(n){const o=this.geometry;if(!!n.getIndex()!=!!o.getIndex())throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".');for(const c in o.attributes){if(!n.hasAttribute(c))throw new Error(`THREE.BatchedMesh: Added geometry missing "${c}". All geometries must have consistent attributes.`);const h=n.getAttribute(c),p=o.getAttribute(c);if(h.itemSize!==p.itemSize||h.normalized!==p.normalized)throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}validateInstanceId(n){const o=this._instanceInfo;if(n<0||n>=o.length||o[n].active===!1)throw new Error(`THREE.BatchedMesh: Invalid instanceId ${n}. Instance is either out of range or has been deleted.`)}validateGeometryId(n){const o=this._geometryInfo;if(n<0||n>=o.length||o[n].active===!1)throw new Error(`THREE.BatchedMesh: Invalid geometryId ${n}. Geometry is either out of range or has been deleted.`)}setCustomSort(n){return this.customSort=n,this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Lr);const n=this.boundingBox,o=this._instanceInfo;n.makeEmpty();for(let c=0,h=o.length;c<h;c++){if(o[c].active===!1)continue;const p=o[c].geometryIndex;this.getMatrixAt(c,mo),this.getBoundingBoxAt(p,G_).applyMatrix4(mo),n.union(G_)}}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Mr);const n=this.boundingSphere,o=this._instanceInfo;n.makeEmpty();for(let c=0,h=o.length;c<h;c++){if(o[c].active===!1)continue;const p=o[c].geometryIndex;this.getMatrixAt(c,mo),this.getBoundingSphereAt(p,Au).applyMatrix4(mo),n.union(Au)}}addInstance(n){if(this._instanceInfo.length>=this.maxInstanceCount&&this._availableInstanceIds.length===0)throw new Error("THREE.BatchedMesh: Maximum item count reached.");const c={visible:!0,active:!0,geometryIndex:n};let h=null;this._availableInstanceIds.length>0?(this._availableInstanceIds.sort(LS),h=this._availableInstanceIds.shift(),this._instanceInfo[h]=c):(h=this._instanceInfo.length,this._instanceInfo.push(c));const p=this._matricesTexture;mo.identity().toArray(p.image.data,h*16),p.needsUpdate=!0;const _=this._colorsTexture;return _&&(zV.toArray(_.image.data,h*4),_.needsUpdate=!0),this._visibilityChanged=!0,h}addGeometry(n,o=-1,c=-1){this._initializeGeometry(n),this._validateGeometry(n);const h={vertexStart:-1,vertexCount:-1,reservedVertexCount:-1,indexStart:-1,indexCount:-1,reservedIndexCount:-1,start:-1,count:-1,boundingBox:null,boundingSphere:null,active:!0},p=this._geometryInfo;h.vertexStart=this._nextVertexStart,h.reservedVertexCount=o===-1?n.getAttribute("position").count:o;const _=n.getIndex();if(_!==null&&(h.indexStart=this._nextIndexStart,h.reservedIndexCount=c===-1?_.count:c),h.indexStart!==-1&&h.indexStart+h.reservedIndexCount>this._maxIndexCount||h.vertexStart+h.reservedVertexCount>this._maxVertexCount)throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.");let b;return this._availableGeometryIds.length>0?(this._availableGeometryIds.sort(LS),b=this._availableGeometryIds.shift(),p[b]=h):(b=this._geometryCount,this._geometryCount++,p.push(h)),this.setGeometryAt(b,n),this._nextIndexStart=h.indexStart+h.reservedIndexCount,this._nextVertexStart=h.vertexStart+h.reservedVertexCount,b}setGeometryAt(n,o){if(n>=this._geometryCount)throw new Error("THREE.BatchedMesh: Maximum geometry count reached.");this._validateGeometry(o);const c=this.geometry,h=c.getIndex()!==null,p=c.getIndex(),_=o.getIndex(),y=this._geometryInfo[n];if(h&&_.count>y.reservedIndexCount||o.attributes.position.count>y.reservedVertexCount)throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.");const b=y.vertexStart,M=y.reservedVertexCount;y.vertexCount=o.getAttribute("position").count;for(const R in c.attributes){const C=o.getAttribute(R),N=c.getAttribute(R);HV(C,N,b);const P=C.itemSize;for(let L=C.count,V=M;L<V;L++){const U=b+L;for(let I=0;I<P;I++)N.setComponent(U,I,0)}N.needsUpdate=!0,N.addUpdateRange(b*P,M*P)}if(h){const R=y.indexStart,C=y.reservedIndexCount;y.indexCount=o.getIndex().count;for(let N=0;N<_.count;N++)p.setX(R+N,b+_.getX(N));for(let N=_.count,P=C;N<P;N++)p.setX(R+N,b);p.needsUpdate=!0,p.addUpdateRange(R,y.reservedIndexCount)}return y.start=h?y.indexStart:y.vertexStart,y.count=h?y.indexCount:y.vertexCount,y.boundingBox=null,o.boundingBox!==null&&(y.boundingBox=o.boundingBox.clone()),y.boundingSphere=null,o.boundingSphere!==null&&(y.boundingSphere=o.boundingSphere.clone()),this._visibilityChanged=!0,n}deleteGeometry(n){const o=this._geometryInfo;if(n>=o.length||o[n].active===!1)return this;const c=this._instanceInfo;for(let h=0,p=c.length;h<p;h++)c[h].active&&c[h].geometryIndex===n&&this.deleteInstance(h);return o[n].active=!1,this._availableGeometryIds.push(n),this._visibilityChanged=!0,this}deleteInstance(n){return this.validateInstanceId(n),this._instanceInfo[n].active=!1,this._availableInstanceIds.push(n),this._visibilityChanged=!0,this}optimize(){let n=0,o=0;const c=this._geometryInfo,h=c.map((_,y)=>y).sort((_,y)=>c[_].vertexStart-c[y].vertexStart),p=this.geometry;for(let _=0,y=c.length;_<y;_++){const b=h[_],M=c[b];if(M.active!==!1){if(p.index!==null){if(M.indexStart!==o){const{indexStart:R,vertexStart:C,reservedIndexCount:N}=M,P=p.index,L=P.array,V=n-C;for(let U=R;U<R+N;U++)L[U]=L[U]+V;P.array.copyWithin(o,R,R+N),P.addUpdateRange(o,N),M.indexStart=o}o+=M.reservedIndexCount}if(M.vertexStart!==n){const{vertexStart:R,reservedVertexCount:C}=M,N=p.attributes;for(const P in N){const L=N[P],{array:V,itemSize:U}=L;V.copyWithin(n*U,R*U,(R+C)*U),L.addUpdateRange(n*U,C*U)}M.vertexStart=n}n+=M.reservedVertexCount,M.start=p.index?M.indexStart:M.vertexStart,this._nextIndexStart=p.index?M.indexStart+M.reservedIndexCount:0,this._nextVertexStart=M.vertexStart+M.reservedVertexCount}}return this}getBoundingBoxAt(n,o){if(n>=this._geometryCount)return null;const c=this.geometry,h=this._geometryInfo[n];if(h.boundingBox===null){const p=new Lr,_=c.index,y=c.attributes.position;for(let b=h.start,M=h.start+h.count;b<M;b++){let R=b;_&&(R=_.getX(R)),p.expandByPoint(Wp.fromBufferAttribute(y,R))}h.boundingBox=p}return o.copy(h.boundingBox),o}getBoundingSphereAt(n,o){if(n>=this._geometryCount)return null;const c=this.geometry,h=this._geometryInfo[n];if(h.boundingSphere===null){const p=new Mr;this.getBoundingBoxAt(n,G_),G_.getCenter(p.center);const _=c.index,y=c.attributes.position;let b=0;for(let M=h.start,R=h.start+h.count;M<R;M++){let C=M;_&&(C=_.getX(C)),Wp.fromBufferAttribute(y,C),b=Math.max(b,p.center.distanceToSquared(Wp))}p.radius=Math.sqrt(b),h.boundingSphere=p}return o.copy(h.boundingSphere),o}setMatrixAt(n,o){this.validateInstanceId(n);const c=this._matricesTexture,h=this._matricesTexture.image.data;return o.toArray(h,n*16),c.needsUpdate=!0,this}getMatrixAt(n,o){return this.validateInstanceId(n),o.fromArray(this._matricesTexture.image.data,n*16)}setColorAt(n,o){return this.validateInstanceId(n),this._colorsTexture===null&&this._initColorsTexture(),o.toArray(this._colorsTexture.image.data,n*4),this._colorsTexture.needsUpdate=!0,this}getColorAt(n,o){return this.validateInstanceId(n),o.fromArray(this._colorsTexture.image.data,n*4)}setVisibleAt(n,o){return this.validateInstanceId(n),this._instanceInfo[n].visible===o?this:(this._instanceInfo[n].visible=o,this._visibilityChanged=!0,this)}getVisibleAt(n){return this.validateInstanceId(n),this._instanceInfo[n].visible}setGeometryIdAt(n,o){return this.validateInstanceId(n),this.validateGeometryId(o),this._instanceInfo[n].geometryIndex=o,this}getGeometryIdAt(n){return this.validateInstanceId(n),this._instanceInfo[n].geometryIndex}getGeometryRangeAt(n,o={}){this.validateGeometryId(n);const c=this._geometryInfo[n];return o.vertexStart=c.vertexStart,o.vertexCount=c.vertexCount,o.reservedVertexCount=c.reservedVertexCount,o.indexStart=c.indexStart,o.indexCount=c.indexCount,o.reservedIndexCount=c.reservedIndexCount,o.start=c.start,o.count=c.count,o}setInstanceCount(n){const o=this._availableInstanceIds,c=this._instanceInfo;for(o.sort(LS);o[o.length-1]===c.length-1;)c.pop(),o.pop();if(n<c.length)throw new Error(`BatchedMesh: Instance ids outside the range ${n} are being used. Cannot shrink instance count.`);const h=new Int32Array(n),p=new Int32Array(n);Eu(this._multiDrawCounts,h),Eu(this._multiDrawStarts,p),this._multiDrawCounts=h,this._multiDrawStarts=p,this._maxInstanceCount=n;const _=this._indirectTexture,y=this._matricesTexture,b=this._colorsTexture;_.dispose(),this._initIndirectTexture(),Eu(_.image.data,this._indirectTexture.image.data),y.dispose(),this._initMatricesTexture(),Eu(y.image.data,this._matricesTexture.image.data),b&&(b.dispose(),this._initColorsTexture(),Eu(b.image.data,this._colorsTexture.image.data))}setGeometrySize(n,o){const c=[...this._geometryInfo].filter(y=>y.active);if(Math.max(...c.map(y=>y.vertexStart+y.reservedVertexCount))>n)throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${o}. Cannot shrink further.`);if(this.geometry.index&&Math.max(...c.map(b=>b.indexStart+b.reservedIndexCount))>o)throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${o}. Cannot shrink further.`);const p=this.geometry;p.dispose(),this._maxVertexCount=n,this._maxIndexCount=o,this._geometryInitialized&&(this._geometryInitialized=!1,this.geometry=new pi,this._initializeGeometry(p));const _=this.geometry;p.index&&Eu(p.index.array,_.index.array);for(const y in p.attributes)Eu(p.attributes[y].array,_.attributes[y].array)}raycast(n,o){const c=this._instanceInfo,h=this._geometryInfo,p=this.matrixWorld,_=this.geometry;Fr.material=this.material,Fr.geometry.index=_.index,Fr.geometry.attributes=_.attributes,Fr.geometry.boundingBox===null&&(Fr.geometry.boundingBox=new Lr),Fr.geometry.boundingSphere===null&&(Fr.geometry.boundingSphere=new Mr);for(let y=0,b=c.length;y<b;y++){if(!c[y].visible||!c[y].active)continue;const M=c[y].geometryIndex,R=h[M];Fr.geometry.setDrawRange(R.start,R.count),this.getMatrixAt(y,Fr.matrixWorld).premultiply(p),this.getBoundingBoxAt(M,Fr.geometry.boundingBox),this.getBoundingSphereAt(M,Fr.geometry.boundingSphere),Fr.raycast(n,H_);for(let C=0,N=H_.length;C<N;C++){const P=H_[C];P.object=this,P.batchId=y,o.push(P)}H_.length=0}Fr.material=null,Fr.geometry.index=null,Fr.geometry.attributes={},Fr.geometry.setDrawRange(0,1/0)}copy(n){return super.copy(n),this.geometry=n.geometry.clone(),this.perObjectFrustumCulled=n.perObjectFrustumCulled,this.sortObjects=n.sortObjects,this.boundingBox=n.boundingBox!==null?n.boundingBox.clone():null,this.boundingSphere=n.boundingSphere!==null?n.boundingSphere.clone():null,this._geometryInfo=n._geometryInfo.map(o=>({...o,boundingBox:o.boundingBox!==null?o.boundingBox.clone():null,boundingSphere:o.boundingSphere!==null?o.boundingSphere.clone():null})),this._instanceInfo=n._instanceInfo.map(o=>({...o})),this._availableInstanceIds=n._availableInstanceIds.slice(),this._availableGeometryIds=n._availableGeometryIds.slice(),this._nextIndexStart=n._nextIndexStart,this._nextVertexStart=n._nextVertexStart,this._geometryCount=n._geometryCount,this._maxInstanceCount=n._maxInstanceCount,this._maxVertexCount=n._maxVertexCount,this._maxIndexCount=n._maxIndexCount,this._geometryInitialized=n._geometryInitialized,this._multiDrawCounts=n._multiDrawCounts.slice(),this._multiDrawStarts=n._multiDrawStarts.slice(),this._indirectTexture=n._indirectTexture.clone(),this._indirectTexture.image.data=this._indirectTexture.image.data.slice(),this._matricesTexture=n._matricesTexture.clone(),this._matricesTexture.image.data=this._matricesTexture.image.data.slice(),this._colorsTexture!==null&&(this._colorsTexture=n._colorsTexture.clone(),this._colorsTexture.image.data=this._colorsTexture.image.data.slice()),this}dispose(){this.geometry.dispose(),this._matricesTexture.dispose(),this._matricesTexture=null,this._indirectTexture.dispose(),this._indirectTexture=null,this._colorsTexture!==null&&(this._colorsTexture.dispose(),this._colorsTexture=null)}onBeforeRender(n,o,c,h,p){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects)return;const _=h.getIndex(),y=_===null?1:_.array.BYTES_PER_ELEMENT,b=this._instanceInfo,M=this._multiDrawStarts,R=this._multiDrawCounts,C=this._geometryInfo,N=this.perObjectFrustumCulled,P=this._indirectTexture,L=P.image.data,V=c.isArrayCamera?kV:I1;N&&!c.isArrayCamera&&(mo.multiplyMatrices(c.projectionMatrix,c.matrixWorldInverse).multiply(this.matrixWorld),I1.setFromProjectionMatrix(mo,c.coordinateSystem,c.reversedDepth));let U=0;if(this.sortObjects){mo.copy(this.matrixWorld).invert(),Wp.setFromMatrixPosition(c.matrixWorld).applyMatrix4(mo),L1.set(0,0,-1).transformDirection(c.matrixWorld).transformDirection(mo);for(let W=0,G=b.length;W<G;W++)if(b[W].visible&&b[W].active){const ae=b[W].geometryIndex;this.getMatrixAt(W,mo),this.getBoundingSphereAt(ae,Au).applyMatrix4(mo);let le=!1;if(N&&(le=!V.intersectsSphere(Au,c)),!le){const he=C[ae],me=GV.subVectors(Au.center,Wp).dot(L1);DS.push(he.start,he.count,me,W)}}const I=DS.list,Z=this.customSort;Z===null?I.sort(p.transparent?OV:BV):Z.call(this,I,c);for(let W=0,G=I.length;W<G;W++){const ae=I[W];M[U]=ae.start*y,R[U]=ae.count,L[U]=ae.index,U++}DS.reset()}else for(let I=0,Z=b.length;I<Z;I++)if(b[I].visible&&b[I].active){const W=b[I].geometryIndex;let G=!1;if(N&&(this.getMatrixAt(I,mo),this.getBoundingSphereAt(W,Au).applyMatrix4(mo),G=!V.intersectsSphere(Au,c)),!G){const ae=C[W];M[U]=ae.start*y,R[U]=ae.count,L[U]=I,U++}}P.needsUpdate=!0,this._multiDrawCount=U,this._visibilityChanged=!1}onBeforeShadow(n,o,c,h,p,_){this.onBeforeRender(n,null,h,p,_)}}class Kr extends Ur{constructor(n){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new mn(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.linewidth=n.linewidth,this.linecap=n.linecap,this.linejoin=n.linejoin,this.fog=n.fog,this}}const W_=new ce,$_=new ce,U1=new Qn,$p=new Md,X_=new Mr,US=new ce,F1=new ce;class Mc extends Bi{constructor(n=new pi,o=new Kr){super(),this.isLine=!0,this.type="Line",this.geometry=n,this.material=o,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(n,o){return super.copy(n,o),this.material=Array.isArray(n.material)?n.material.slice():n.material,this.geometry=n.geometry,this}computeLineDistances(){const n=this.geometry;if(n.index===null){const o=n.attributes.position,c=[0];for(let h=1,p=o.count;h<p;h++)W_.fromBufferAttribute(o,h-1),$_.fromBufferAttribute(o,h),c[h]=c[h-1],c[h]+=W_.distanceTo($_);n.setAttribute("lineDistance",new Tn(c,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(n,o){const c=this.geometry,h=this.matrixWorld,p=n.params.Line.threshold,_=c.drawRange;if(c.boundingSphere===null&&c.computeBoundingSphere(),X_.copy(c.boundingSphere),X_.applyMatrix4(h),X_.radius+=p,n.ray.intersectsSphere(X_)===!1)return;U1.copy(h).invert(),$p.copy(n.ray).applyMatrix4(U1);const y=p/((this.scale.x+this.scale.y+this.scale.z)/3),b=y*y,M=this.isLineSegments?2:1,R=c.index,N=c.attributes.position;if(R!==null){const P=Math.max(0,_.start),L=Math.min(R.count,_.start+_.count);for(let V=P,U=L-1;V<U;V+=M){const I=R.getX(V),Z=R.getX(V+1),W=q_(this,n,$p,b,I,Z,V);W&&o.push(W)}if(this.isLineLoop){const V=R.getX(L-1),U=R.getX(P),I=q_(this,n,$p,b,V,U,L-1);I&&o.push(I)}}else{const P=Math.max(0,_.start),L=Math.min(N.count,_.start+_.count);for(let V=P,U=L-1;V<U;V+=M){const I=q_(this,n,$p,b,V,V+1,V);I&&o.push(I)}if(this.isLineLoop){const V=q_(this,n,$p,b,L-1,P,L-1);V&&o.push(V)}}}updateMorphTargets(){const o=this.geometry.morphAttributes,c=Object.keys(o);if(c.length>0){const h=o[c[0]];if(h!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let p=0,_=h.length;p<_;p++){const y=h[p].name||String(p);this.morphTargetInfluences.push(0),this.morphTargetDictionary[y]=p}}}}}function q_(m,n,o,c,h,p,_){const y=m.geometry.attributes.position;if(W_.fromBufferAttribute(y,h),$_.fromBufferAttribute(y,p),o.distanceSqToSegment(W_,$_,US,F1)>c)return;US.applyMatrix4(m.matrixWorld);const M=n.ray.origin.distanceTo(US);if(!(M<n.near||M>n.far))return{distance:M,point:F1.clone().applyMatrix4(m.matrixWorld),index:_,face:null,faceIndex:null,barycoord:null,object:m}}const B1=new ce,O1=new ce;class Qa extends Mc{constructor(n,o){super(n,o),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const n=this.geometry;if(n.index===null){const o=n.attributes.position,c=[];for(let h=0,p=o.count;h<p;h+=2)B1.fromBufferAttribute(o,h),O1.fromBufferAttribute(o,h+1),c[h]=h===0?0:c[h-1],c[h+1]=c[h]+B1.distanceTo(O1);n.setAttribute("lineDistance",new Tn(c,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class V1 extends Mc{constructor(n,o){super(n,o),this.isLineLoop=!0,this.type="LineLoop"}}class FS extends Ur{constructor(n){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new mn(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.alphaMap=n.alphaMap,this.size=n.size,this.sizeAttenuation=n.sizeAttenuation,this.fog=n.fog,this}}const z1=new Qn,BS=new Md,Y_=new Mr,Z_=new ce;class k1 extends Bi{constructor(n=new pi,o=new FS){super(),this.isPoints=!0,this.type="Points",this.geometry=n,this.material=o,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(n,o){return super.copy(n,o),this.material=Array.isArray(n.material)?n.material.slice():n.material,this.geometry=n.geometry,this}raycast(n,o){const c=this.geometry,h=this.matrixWorld,p=n.params.Points.threshold,_=c.drawRange;if(c.boundingSphere===null&&c.computeBoundingSphere(),Y_.copy(c.boundingSphere),Y_.applyMatrix4(h),Y_.radius+=p,n.ray.intersectsSphere(Y_)===!1)return;z1.copy(h).invert(),BS.copy(n.ray).applyMatrix4(z1);const y=p/((this.scale.x+this.scale.y+this.scale.z)/3),b=y*y,M=c.index,C=c.attributes.position;if(M!==null){const N=Math.max(0,_.start),P=Math.min(M.count,_.start+_.count);for(let L=N,V=P;L<V;L++){const U=M.getX(L);Z_.fromBufferAttribute(C,U),G1(Z_,U,b,h,n,o,this)}}else{const N=Math.max(0,_.start),P=Math.min(C.count,_.start+_.count);for(let L=N,V=P;L<V;L++)Z_.fromBufferAttribute(C,L),G1(Z_,L,b,h,n,o,this)}}updateMorphTargets(){const o=this.geometry.morphAttributes,c=Object.keys(o);if(c.length>0){const h=o[c[0]];if(h!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let p=0,_=h.length;p<_;p++){const y=h[p].name||String(p);this.morphTargetInfluences.push(0),this.morphTargetDictionary[y]=p}}}}}function G1(m,n,o,c,h,p,_){const y=BS.distanceSqToPoint(m);if(y<o){const b=new ce;BS.closestPointToPoint(m,b),b.applyMatrix4(c);const M=h.ray.origin.distanceTo(b);if(M<h.near||M>h.far)return;p.push({distance:M,distanceToRay:Math.sqrt(y),point:b,index:n,face:null,faceIndex:null,barycoord:null,object:_})}}class H1 extends Ps{constructor(n,o,c,h,p=ge,_=ge,y,b,M){super(n,o,c,h,p,_,y,b,M),this.isVideoTexture=!0,this.generateMipmaps=!1,this._requestVideoFrameCallbackId=0;const R=this;function C(){R.needsUpdate=!0,R._requestVideoFrameCallbackId=n.requestVideoFrameCallback(C)}"requestVideoFrameCallback"in n&&(this._requestVideoFrameCallbackId=n.requestVideoFrameCallback(C))}clone(){return new this.constructor(this.image).copy(this)}update(){const n=this.image;"requestVideoFrameCallback"in n===!1&&n.readyState>=n.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}dispose(){this._requestVideoFrameCallbackId!==0&&this.source.data.cancelVideoFrameCallback(this._requestVideoFrameCallbackId),super.dispose()}}class WV extends H1{constructor(n,o,c,h,p,_,y,b){super({},n,o,c,h,p,_,y,b),this.isVideoFrameTexture=!0}update(){}clone(){return new this.constructor().copy(this)}setFrame(n){this.image=n,this.needsUpdate=!0}}class $V extends Ps{constructor(n,o){super({width:n,height:o}),this.isFramebufferTexture=!0,this.magFilter=mt,this.minFilter=mt,this.generateMipmaps=!1,this.needsUpdate=!0}}class K_ extends Ps{constructor(n,o,c,h,p,_,y,b,M,R,C,N){super(null,_,y,b,M,R,h,p,C,N),this.isCompressedTexture=!0,this.image={width:o,height:c},this.mipmaps=n,this.flipY=!1,this.generateMipmaps=!1}}class XV extends K_{constructor(n,o,c,h,p,_){super(n,o,c,p,_),this.isCompressedArrayTexture=!0,this.image.depth=h,this.wrapR=It,this.layerUpdates=new Set}addLayerUpdate(n){this.layerUpdates.add(n)}clearLayerUpdates(){this.layerUpdates.clear()}}class qV extends K_{constructor(n,o,c){super(void 0,n[0].width,n[0].height,o,c,Me),this.isCompressedCubeTexture=!0,this.isCubeTexture=!0,this.image=n}}class YV extends Ps{constructor(n,o,c,h,p,_,y,b,M){super(n,o,c,h,p,_,y,b,M),this.isCanvasTexture=!0,this.needsUpdate=!0}}class OS extends Ps{constructor(n,o,c=nr,h,p,_,y=mt,b=mt,M,R=Tl,C=1){if(R!==Tl&&R!==Ml)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");const N={width:n,height:o,depth:C};super(N,h,p,_,y,b,R,c,M),this.isDepthTexture=!0,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(n){return super.copy(n),this.source=new mc(Object.assign({},n.image)),this.compareFunction=n.compareFunction,this}toJSON(n){const o=super.toJSON(n);return this.compareFunction!==null&&(o.compareFunction=this.compareFunction),o}}class J_ extends pi{constructor(n=1,o=1,c=4,h=8,p=1){super(),this.type="CapsuleGeometry",this.parameters={radius:n,height:o,capSegments:c,radialSegments:h,heightSegments:p},o=Math.max(0,o),c=Math.max(1,Math.floor(c)),h=Math.max(3,Math.floor(h)),p=Math.max(1,Math.floor(p));const _=[],y=[],b=[],M=[],R=o/2,C=Math.PI/2*n,N=o,P=2*C+N,L=c*2+p,V=h+1,U=new ce,I=new ce;for(let Z=0;Z<=L;Z++){let W=0,G=0,ae=0,le=0;if(Z<=c){const j=Z/c,J=j*Math.PI/2;G=-R-n*Math.cos(J),ae=n*Math.sin(J),le=-n*Math.cos(J),W=j*C}else if(Z<=c+p){const j=(Z-c)/p;G=-R+j*o,ae=n,le=0,W=C+j*N}else{const j=(Z-c-p)/c,J=j*Math.PI/2;G=R+n*Math.sin(J),ae=n*Math.cos(J),le=n*Math.sin(J),W=C+N+j*C}const he=Math.max(0,Math.min(1,W/P));let me=0;Z===0?me=.5/h:Z===L&&(me=-.5/h);for(let j=0;j<=h;j++){const J=j/h,fe=J*Math.PI*2,We=Math.sin(fe),Ke=Math.cos(fe);I.x=-ae*Ke,I.y=G,I.z=ae*We,y.push(I.x,I.y,I.z),U.set(-ae*Ke,le,ae*We),U.normalize(),b.push(U.x,U.y,U.z),M.push(J+me,he)}if(Z>0){const j=(Z-1)*V;for(let J=0;J<h;J++){const fe=j+J,We=j+J+1,Ke=Z*V+J,ot=Z*V+J+1;_.push(fe,We,Ke),_.push(We,ot,Ke)}}}this.setIndex(_),this.setAttribute("position",new Tn(y,3)),this.setAttribute("normal",new Tn(b,3)),this.setAttribute("uv",new Tn(M,2))}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new J_(n.radius,n.height,n.capSegments,n.radialSegments,n.heightSegments)}}class j_ extends pi{constructor(n=1,o=32,c=0,h=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:n,segments:o,thetaStart:c,thetaLength:h},o=Math.max(3,o);const p=[],_=[],y=[],b=[],M=new ce,R=new vt;_.push(0,0,0),y.push(0,0,1),b.push(.5,.5);for(let C=0,N=3;C<=o;C++,N+=3){const P=c+C/o*h;M.x=n*Math.cos(P),M.y=n*Math.sin(P),_.push(M.x,M.y,M.z),y.push(0,0,1),R.x=(_[N]/n+1)/2,R.y=(_[N+1]/n+1)/2,b.push(R.x,R.y)}for(let C=1;C<=o;C++)p.push(C,C+1,0);this.setIndex(p),this.setAttribute("position",new Tn(_,3)),this.setAttribute("normal",new Tn(y,3)),this.setAttribute("uv",new Tn(b,2))}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new j_(n.radius,n.segments,n.thetaStart,n.thetaLength)}}class Xp extends pi{constructor(n=1,o=1,c=1,h=32,p=1,_=!1,y=0,b=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:n,radiusBottom:o,height:c,radialSegments:h,heightSegments:p,openEnded:_,thetaStart:y,thetaLength:b};const M=this;h=Math.floor(h),p=Math.floor(p);const R=[],C=[],N=[],P=[];let L=0;const V=[],U=c/2;let I=0;Z(),_===!1&&(n>0&&W(!0),o>0&&W(!1)),this.setIndex(R),this.setAttribute("position",new Tn(C,3)),this.setAttribute("normal",new Tn(N,3)),this.setAttribute("uv",new Tn(P,2));function Z(){const G=new ce,ae=new ce;let le=0;const he=(o-n)/c;for(let me=0;me<=p;me++){const j=[],J=me/p,fe=J*(o-n)+n;for(let We=0;We<=h;We++){const Ke=We/h,ot=Ke*b+y,pt=Math.sin(ot),ht=Math.cos(ot);ae.x=fe*pt,ae.y=-J*c+U,ae.z=fe*ht,C.push(ae.x,ae.y,ae.z),G.set(pt,he,ht).normalize(),N.push(G.x,G.y,G.z),P.push(Ke,1-J),j.push(L++)}V.push(j)}for(let me=0;me<h;me++)for(let j=0;j<p;j++){const J=V[j][me],fe=V[j+1][me],We=V[j+1][me+1],Ke=V[j][me+1];(n>0||j!==0)&&(R.push(J,fe,Ke),le+=3),(o>0||j!==p-1)&&(R.push(fe,We,Ke),le+=3)}M.addGroup(I,le,0),I+=le}function W(G){const ae=L,le=new vt,he=new ce;let me=0;const j=G===!0?n:o,J=G===!0?1:-1;for(let We=1;We<=h;We++)C.push(0,U*J,0),N.push(0,J,0),P.push(.5,.5),L++;const fe=L;for(let We=0;We<=h;We++){const ot=We/h*b+y,pt=Math.cos(ot),ht=Math.sin(ot);he.x=j*ht,he.y=U*J,he.z=j*pt,C.push(he.x,he.y,he.z),N.push(0,J,0),le.x=pt*.5+.5,le.y=ht*.5*J+.5,P.push(le.x,le.y),L++}for(let We=0;We<h;We++){const Ke=ae+We,ot=fe+We;G===!0?R.push(ot,ot+1,Ke):R.push(ot+1,ot,Ke),me+=3}M.addGroup(I,me,G===!0?1:2),I+=me}}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new Xp(n.radiusTop,n.radiusBottom,n.height,n.radialSegments,n.heightSegments,n.openEnded,n.thetaStart,n.thetaLength)}}class qp extends Xp{constructor(n=1,o=1,c=32,h=1,p=!1,_=0,y=Math.PI*2){super(0,n,o,c,h,p,_,y),this.type="ConeGeometry",this.parameters={radius:n,height:o,radialSegments:c,heightSegments:h,openEnded:p,thetaStart:_,thetaLength:y}}static fromJSON(n){return new qp(n.radius,n.height,n.radialSegments,n.heightSegments,n.openEnded,n.thetaStart,n.thetaLength)}}class wc extends pi{constructor(n=[],o=[],c=1,h=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:n,indices:o,radius:c,detail:h};const p=[],_=[];y(h),M(c),R(),this.setAttribute("position",new Tn(p,3)),this.setAttribute("normal",new Tn(p.slice(),3)),this.setAttribute("uv",new Tn(_,2)),h===0?this.computeVertexNormals():this.normalizeNormals();function y(Z){const W=new ce,G=new ce,ae=new ce;for(let le=0;le<o.length;le+=3)P(o[le+0],W),P(o[le+1],G),P(o[le+2],ae),b(W,G,ae,Z)}function b(Z,W,G,ae){const le=ae+1,he=[];for(let me=0;me<=le;me++){he[me]=[];const j=Z.clone().lerp(G,me/le),J=W.clone().lerp(G,me/le),fe=le-me;for(let We=0;We<=fe;We++)We===0&&me===le?he[me][We]=j:he[me][We]=j.clone().lerp(J,We/fe)}for(let me=0;me<le;me++)for(let j=0;j<2*(le-me)-1;j++){const J=Math.floor(j/2);j%2===0?(N(he[me][J+1]),N(he[me+1][J]),N(he[me][J])):(N(he[me][J+1]),N(he[me+1][J+1]),N(he[me+1][J]))}}function M(Z){const W=new ce;for(let G=0;G<p.length;G+=3)W.x=p[G+0],W.y=p[G+1],W.z=p[G+2],W.normalize().multiplyScalar(Z),p[G+0]=W.x,p[G+1]=W.y,p[G+2]=W.z}function R(){const Z=new ce;for(let W=0;W<p.length;W+=3){Z.x=p[W+0],Z.y=p[W+1],Z.z=p[W+2];const G=U(Z)/2/Math.PI+.5,ae=I(Z)/Math.PI+.5;_.push(G,1-ae)}L(),C()}function C(){for(let Z=0;Z<_.length;Z+=6){const W=_[Z+0],G=_[Z+2],ae=_[Z+4],le=Math.max(W,G,ae),he=Math.min(W,G,ae);le>.9&&he<.1&&(W<.2&&(_[Z+0]+=1),G<.2&&(_[Z+2]+=1),ae<.2&&(_[Z+4]+=1))}}function N(Z){p.push(Z.x,Z.y,Z.z)}function P(Z,W){const G=Z*3;W.x=n[G+0],W.y=n[G+1],W.z=n[G+2]}function L(){const Z=new ce,W=new ce,G=new ce,ae=new ce,le=new vt,he=new vt,me=new vt;for(let j=0,J=0;j<p.length;j+=9,J+=6){Z.set(p[j+0],p[j+1],p[j+2]),W.set(p[j+3],p[j+4],p[j+5]),G.set(p[j+6],p[j+7],p[j+8]),le.set(_[J+0],_[J+1]),he.set(_[J+2],_[J+3]),me.set(_[J+4],_[J+5]),ae.copy(Z).add(W).add(G).divideScalar(3);const fe=U(ae);V(le,J+0,Z,fe),V(he,J+2,W,fe),V(me,J+4,G,fe)}}function V(Z,W,G,ae){ae<0&&Z.x===1&&(_[W]=Z.x-1),G.x===0&&G.z===0&&(_[W]=ae/2/Math.PI+.5)}function U(Z){return Math.atan2(Z.z,-Z.x)}function I(Z){return Math.atan2(-Z.y,Math.sqrt(Z.x*Z.x+Z.z*Z.z))}}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new wc(n.vertices,n.indices,n.radius,n.details)}}class Q_ extends wc{constructor(n=1,o=0){const c=(1+Math.sqrt(5))/2,h=1/c,p=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-h,-c,0,-h,c,0,h,-c,0,h,c,-h,-c,0,-h,c,0,h,-c,0,h,c,0,-c,0,-h,c,0,-h,-c,0,h,c,0,h],_=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(p,_,n,o),this.type="DodecahedronGeometry",this.parameters={radius:n,detail:o}}static fromJSON(n){return new Q_(n.radius,n.detail)}}const ex=new ce,tx=new ce,VS=new ce,nx=new fo;class W1 extends pi{constructor(n=null,o=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:n,thresholdAngle:o},n!==null){const h=Math.pow(10,4),p=Math.cos(yu*o),_=n.getIndex(),y=n.getAttribute("position"),b=_?_.count:y.count,M=[0,0,0],R=["a","b","c"],C=new Array(3),N={},P=[];for(let L=0;L<b;L+=3){_?(M[0]=_.getX(L),M[1]=_.getX(L+1),M[2]=_.getX(L+2)):(M[0]=L,M[1]=L+1,M[2]=L+2);const{a:V,b:U,c:I}=nx;if(V.fromBufferAttribute(y,M[0]),U.fromBufferAttribute(y,M[1]),I.fromBufferAttribute(y,M[2]),nx.getNormal(VS),C[0]=`${Math.round(V.x*h)},${Math.round(V.y*h)},${Math.round(V.z*h)}`,C[1]=`${Math.round(U.x*h)},${Math.round(U.y*h)},${Math.round(U.z*h)}`,C[2]=`${Math.round(I.x*h)},${Math.round(I.y*h)},${Math.round(I.z*h)}`,!(C[0]===C[1]||C[1]===C[2]||C[2]===C[0]))for(let Z=0;Z<3;Z++){const W=(Z+1)%3,G=C[Z],ae=C[W],le=nx[R[Z]],he=nx[R[W]],me=`${G}_${ae}`,j=`${ae}_${G}`;j in N&&N[j]?(VS.dot(N[j].normal)<=p&&(P.push(le.x,le.y,le.z),P.push(he.x,he.y,he.z)),N[j]=null):me in N||(N[me]={index0:M[Z],index1:M[W],normal:VS.clone()})}}for(const L in N)if(N[L]){const{index0:V,index1:U}=N[L];ex.fromBufferAttribute(y,V),tx.fromBufferAttribute(y,U),P.push(ex.x,ex.y,ex.z),P.push(tx.x,tx.y,tx.z)}this.setAttribute("position",new Tn(P,3))}}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}}class Ra{constructor(){this.type="Curve",this.arcLengthDivisions=200,this.needsUpdate=!1,this.cacheArcLengths=null}getPoint(){console.warn("THREE.Curve: .getPoint() not implemented.")}getPointAt(n,o){const c=this.getUtoTmapping(n);return this.getPoint(c,o)}getPoints(n=5){const o=[];for(let c=0;c<=n;c++)o.push(this.getPoint(c/n));return o}getSpacedPoints(n=5){const o=[];for(let c=0;c<=n;c++)o.push(this.getPointAt(c/n));return o}getLength(){const n=this.getLengths();return n[n.length-1]}getLengths(n=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===n+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const o=[];let c,h=this.getPoint(0),p=0;o.push(0);for(let _=1;_<=n;_++)c=this.getPoint(_/n),p+=c.distanceTo(h),o.push(p),h=c;return this.cacheArcLengths=o,o}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(n,o=null){const c=this.getLengths();let h=0;const p=c.length;let _;o?_=o:_=n*c[p-1];let y=0,b=p-1,M;for(;y<=b;)if(h=Math.floor(y+(b-y)/2),M=c[h]-_,M<0)y=h+1;else if(M>0)b=h-1;else{b=h;break}if(h=b,c[h]===_)return h/(p-1);const R=c[h],N=c[h+1]-R,P=(_-R)/N;return(h+P)/(p-1)}getTangent(n,o){let h=n-1e-4,p=n+1e-4;h<0&&(h=0),p>1&&(p=1);const _=this.getPoint(h),y=this.getPoint(p),b=o||(_.isVector2?new vt:new ce);return b.copy(y).sub(_).normalize(),b}getTangentAt(n,o){const c=this.getUtoTmapping(n);return this.getTangent(c,o)}computeFrenetFrames(n,o=!1){const c=new ce,h=[],p=[],_=[],y=new ce,b=new Qn;for(let P=0;P<=n;P++){const L=P/n;h[P]=this.getTangentAt(L,new ce)}p[0]=new ce,_[0]=new ce;let M=Number.MAX_VALUE;const R=Math.abs(h[0].x),C=Math.abs(h[0].y),N=Math.abs(h[0].z);R<=M&&(M=R,c.set(1,0,0)),C<=M&&(M=C,c.set(0,1,0)),N<=M&&c.set(0,0,1),y.crossVectors(h[0],c).normalize(),p[0].crossVectors(h[0],y),_[0].crossVectors(h[0],p[0]);for(let P=1;P<=n;P++){if(p[P]=p[P-1].clone(),_[P]=_[P-1].clone(),y.crossVectors(h[P-1],h[P]),y.length()>Number.EPSILON){y.normalize();const L=Math.acos(Kn(h[P-1].dot(h[P]),-1,1));p[P].applyMatrix4(b.makeRotationAxis(y,L))}_[P].crossVectors(h[P],p[P])}if(o===!0){let P=Math.acos(Kn(p[0].dot(p[n]),-1,1));P/=n,h[0].dot(y.crossVectors(p[0],p[n]))>0&&(P=-P);for(let L=1;L<=n;L++)p[L].applyMatrix4(b.makeRotationAxis(h[L],P*L)),_[L].crossVectors(h[L],p[L])}return{tangents:h,normals:p,binormals:_}}clone(){return new this.constructor().copy(this)}copy(n){return this.arcLengthDivisions=n.arcLengthDivisions,this}toJSON(){const n={metadata:{version:4.7,type:"Curve",generator:"Curve.toJSON"}};return n.arcLengthDivisions=this.arcLengthDivisions,n.type=this.type,n}fromJSON(n){return this.arcLengthDivisions=n.arcLengthDivisions,this}}class ix extends Ra{constructor(n=0,o=0,c=1,h=1,p=0,_=Math.PI*2,y=!1,b=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=n,this.aY=o,this.xRadius=c,this.yRadius=h,this.aStartAngle=p,this.aEndAngle=_,this.aClockwise=y,this.aRotation=b}getPoint(n,o=new vt){const c=o,h=Math.PI*2;let p=this.aEndAngle-this.aStartAngle;const _=Math.abs(p)<Number.EPSILON;for(;p<0;)p+=h;for(;p>h;)p-=h;p<Number.EPSILON&&(_?p=0:p=h),this.aClockwise===!0&&!_&&(p===h?p=-h:p=p-h);const y=this.aStartAngle+n*p;let b=this.aX+this.xRadius*Math.cos(y),M=this.aY+this.yRadius*Math.sin(y);if(this.aRotation!==0){const R=Math.cos(this.aRotation),C=Math.sin(this.aRotation),N=b-this.aX,P=M-this.aY;b=N*R-P*C+this.aX,M=N*C+P*R+this.aY}return c.set(b,M)}copy(n){return super.copy(n),this.aX=n.aX,this.aY=n.aY,this.xRadius=n.xRadius,this.yRadius=n.yRadius,this.aStartAngle=n.aStartAngle,this.aEndAngle=n.aEndAngle,this.aClockwise=n.aClockwise,this.aRotation=n.aRotation,this}toJSON(){const n=super.toJSON();return n.aX=this.aX,n.aY=this.aY,n.xRadius=this.xRadius,n.yRadius=this.yRadius,n.aStartAngle=this.aStartAngle,n.aEndAngle=this.aEndAngle,n.aClockwise=this.aClockwise,n.aRotation=this.aRotation,n}fromJSON(n){return super.fromJSON(n),this.aX=n.aX,this.aY=n.aY,this.xRadius=n.xRadius,this.yRadius=n.yRadius,this.aStartAngle=n.aStartAngle,this.aEndAngle=n.aEndAngle,this.aClockwise=n.aClockwise,this.aRotation=n.aRotation,this}}class $1 extends ix{constructor(n,o,c,h,p,_){super(n,o,c,c,h,p,_),this.isArcCurve=!0,this.type="ArcCurve"}}function zS(){let m=0,n=0,o=0,c=0;function h(p,_,y,b){m=p,n=y,o=-3*p+3*_-2*y-b,c=2*p-2*_+y+b}return{initCatmullRom:function(p,_,y,b,M){h(_,y,M*(y-p),M*(b-_))},initNonuniformCatmullRom:function(p,_,y,b,M,R,C){let N=(_-p)/M-(y-p)/(M+R)+(y-_)/R,P=(y-_)/R-(b-_)/(R+C)+(b-y)/C;N*=R,P*=R,h(_,y,N,P)},calc:function(p){const _=p*p,y=_*p;return m+n*p+o*_+c*y}}}const sx=new ce,kS=new zS,GS=new zS,HS=new zS;class X1 extends Ra{constructor(n=[],o=!1,c="centripetal",h=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=n,this.closed=o,this.curveType=c,this.tension=h}getPoint(n,o=new ce){const c=o,h=this.points,p=h.length,_=(p-(this.closed?0:1))*n;let y=Math.floor(_),b=_-y;this.closed?y+=y>0?0:(Math.floor(Math.abs(y)/p)+1)*p:b===0&&y===p-1&&(y=p-2,b=1);let M,R;this.closed||y>0?M=h[(y-1)%p]:(sx.subVectors(h[0],h[1]).add(h[0]),M=sx);const C=h[y%p],N=h[(y+1)%p];if(this.closed||y+2<p?R=h[(y+2)%p]:(sx.subVectors(h[p-1],h[p-2]).add(h[p-1]),R=sx),this.curveType==="centripetal"||this.curveType==="chordal"){const P=this.curveType==="chordal"?.5:.25;let L=Math.pow(M.distanceToSquared(C),P),V=Math.pow(C.distanceToSquared(N),P),U=Math.pow(N.distanceToSquared(R),P);V<1e-4&&(V=1),L<1e-4&&(L=V),U<1e-4&&(U=V),kS.initNonuniformCatmullRom(M.x,C.x,N.x,R.x,L,V,U),GS.initNonuniformCatmullRom(M.y,C.y,N.y,R.y,L,V,U),HS.initNonuniformCatmullRom(M.z,C.z,N.z,R.z,L,V,U)}else this.curveType==="catmullrom"&&(kS.initCatmullRom(M.x,C.x,N.x,R.x,this.tension),GS.initCatmullRom(M.y,C.y,N.y,R.y,this.tension),HS.initCatmullRom(M.z,C.z,N.z,R.z,this.tension));return c.set(kS.calc(b),GS.calc(b),HS.calc(b)),c}copy(n){super.copy(n),this.points=[];for(let o=0,c=n.points.length;o<c;o++){const h=n.points[o];this.points.push(h.clone())}return this.closed=n.closed,this.curveType=n.curveType,this.tension=n.tension,this}toJSON(){const n=super.toJSON();n.points=[];for(let o=0,c=this.points.length;o<c;o++){const h=this.points[o];n.points.push(h.toArray())}return n.closed=this.closed,n.curveType=this.curveType,n.tension=this.tension,n}fromJSON(n){super.fromJSON(n),this.points=[];for(let o=0,c=n.points.length;o<c;o++){const h=n.points[o];this.points.push(new ce().fromArray(h))}return this.closed=n.closed,this.curveType=n.curveType,this.tension=n.tension,this}}function q1(m,n,o,c,h){const p=(c-n)*.5,_=(h-o)*.5,y=m*m,b=m*y;return(2*o-2*c+p+_)*b+(-3*o+3*c-2*p-_)*y+p*m+o}function ZV(m,n){const o=1-m;return o*o*n}function KV(m,n){return 2*(1-m)*m*n}function JV(m,n){return m*m*n}function Yp(m,n,o,c){return ZV(m,n)+KV(m,o)+JV(m,c)}function jV(m,n){const o=1-m;return o*o*o*n}function QV(m,n){const o=1-m;return 3*o*o*m*n}function ez(m,n){return 3*(1-m)*m*m*n}function tz(m,n){return m*m*m*n}function Zp(m,n,o,c,h){return jV(m,n)+QV(m,o)+ez(m,c)+tz(m,h)}class WS extends Ra{constructor(n=new vt,o=new vt,c=new vt,h=new vt){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=n,this.v1=o,this.v2=c,this.v3=h}getPoint(n,o=new vt){const c=o,h=this.v0,p=this.v1,_=this.v2,y=this.v3;return c.set(Zp(n,h.x,p.x,_.x,y.x),Zp(n,h.y,p.y,_.y,y.y)),c}copy(n){return super.copy(n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this.v3.copy(n.v3),this}toJSON(){const n=super.toJSON();return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n.v3=this.v3.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this.v3.fromArray(n.v3),this}}class Y1 extends Ra{constructor(n=new ce,o=new ce,c=new ce,h=new ce){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=n,this.v1=o,this.v2=c,this.v3=h}getPoint(n,o=new ce){const c=o,h=this.v0,p=this.v1,_=this.v2,y=this.v3;return c.set(Zp(n,h.x,p.x,_.x,y.x),Zp(n,h.y,p.y,_.y,y.y),Zp(n,h.z,p.z,_.z,y.z)),c}copy(n){return super.copy(n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this.v3.copy(n.v3),this}toJSON(){const n=super.toJSON();return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n.v3=this.v3.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this.v3.fromArray(n.v3),this}}class $S extends Ra{constructor(n=new vt,o=new vt){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=n,this.v2=o}getPoint(n,o=new vt){const c=o;return n===1?c.copy(this.v2):(c.copy(this.v2).sub(this.v1),c.multiplyScalar(n).add(this.v1)),c}getPointAt(n,o){return this.getPoint(n,o)}getTangent(n,o=new vt){return o.subVectors(this.v2,this.v1).normalize()}getTangentAt(n,o){return this.getTangent(n,o)}copy(n){return super.copy(n),this.v1.copy(n.v1),this.v2.copy(n.v2),this}toJSON(){const n=super.toJSON();return n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this}}class Z1 extends Ra{constructor(n=new ce,o=new ce){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=n,this.v2=o}getPoint(n,o=new ce){const c=o;return n===1?c.copy(this.v2):(c.copy(this.v2).sub(this.v1),c.multiplyScalar(n).add(this.v1)),c}getPointAt(n,o){return this.getPoint(n,o)}getTangent(n,o=new ce){return o.subVectors(this.v2,this.v1).normalize()}getTangentAt(n,o){return this.getTangent(n,o)}copy(n){return super.copy(n),this.v1.copy(n.v1),this.v2.copy(n.v2),this}toJSON(){const n=super.toJSON();return n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this}}class XS extends Ra{constructor(n=new vt,o=new vt,c=new vt){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=n,this.v1=o,this.v2=c}getPoint(n,o=new vt){const c=o,h=this.v0,p=this.v1,_=this.v2;return c.set(Yp(n,h.x,p.x,_.x),Yp(n,h.y,p.y,_.y)),c}copy(n){return super.copy(n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this}toJSON(){const n=super.toJSON();return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this}}class qS extends Ra{constructor(n=new ce,o=new ce,c=new ce){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=n,this.v1=o,this.v2=c}getPoint(n,o=new ce){const c=o,h=this.v0,p=this.v1,_=this.v2;return c.set(Yp(n,h.x,p.x,_.x),Yp(n,h.y,p.y,_.y),Yp(n,h.z,p.z,_.z)),c}copy(n){return super.copy(n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this}toJSON(){const n=super.toJSON();return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n}fromJSON(n){return super.fromJSON(n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this}}class YS extends Ra{constructor(n=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=n}getPoint(n,o=new vt){const c=o,h=this.points,p=(h.length-1)*n,_=Math.floor(p),y=p-_,b=h[_===0?_:_-1],M=h[_],R=h[_>h.length-2?h.length-1:_+1],C=h[_>h.length-3?h.length-1:_+2];return c.set(q1(y,b.x,M.x,R.x,C.x),q1(y,b.y,M.y,R.y,C.y)),c}copy(n){super.copy(n),this.points=[];for(let o=0,c=n.points.length;o<c;o++){const h=n.points[o];this.points.push(h.clone())}return this}toJSON(){const n=super.toJSON();n.points=[];for(let o=0,c=this.points.length;o<c;o++){const h=this.points[o];n.points.push(h.toArray())}return n}fromJSON(n){super.fromJSON(n),this.points=[];for(let o=0,c=n.points.length;o<c;o++){const h=n.points[o];this.points.push(new vt().fromArray(h))}return this}}var rx=Object.freeze({__proto__:null,ArcCurve:$1,CatmullRomCurve3:X1,CubicBezierCurve:WS,CubicBezierCurve3:Y1,EllipseCurve:ix,LineCurve:$S,LineCurve3:Z1,QuadraticBezierCurve:XS,QuadraticBezierCurve3:qS,SplineCurve:YS});class K1 extends Ra{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(n){this.curves.push(n)}closePath(){const n=this.curves[0].getPoint(0),o=this.curves[this.curves.length-1].getPoint(1);if(!n.equals(o)){const c=n.isVector2===!0?"LineCurve":"LineCurve3";this.curves.push(new rx[c](o,n))}return this}getPoint(n,o){const c=n*this.getLength(),h=this.getCurveLengths();let p=0;for(;p<h.length;){if(h[p]>=c){const _=h[p]-c,y=this.curves[p],b=y.getLength(),M=b===0?0:1-_/b;return y.getPointAt(M,o)}p++}return null}getLength(){const n=this.getCurveLengths();return n[n.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const n=[];let o=0;for(let c=0,h=this.curves.length;c<h;c++)o+=this.curves[c].getLength(),n.push(o);return this.cacheLengths=n,n}getSpacedPoints(n=40){const o=[];for(let c=0;c<=n;c++)o.push(this.getPoint(c/n));return this.autoClose&&o.push(o[0]),o}getPoints(n=12){const o=[];let c;for(let h=0,p=this.curves;h<p.length;h++){const _=p[h],y=_.isEllipseCurve?n*2:_.isLineCurve||_.isLineCurve3?1:_.isSplineCurve?n*_.points.length:n,b=_.getPoints(y);for(let M=0;M<b.length;M++){const R=b[M];c&&c.equals(R)||(o.push(R),c=R)}}return this.autoClose&&o.length>1&&!o[o.length-1].equals(o[0])&&o.push(o[0]),o}copy(n){super.copy(n),this.curves=[];for(let o=0,c=n.curves.length;o<c;o++){const h=n.curves[o];this.curves.push(h.clone())}return this.autoClose=n.autoClose,this}toJSON(){const n=super.toJSON();n.autoClose=this.autoClose,n.curves=[];for(let o=0,c=this.curves.length;o<c;o++){const h=this.curves[o];n.curves.push(h.toJSON())}return n}fromJSON(n){super.fromJSON(n),this.autoClose=n.autoClose,this.curves=[];for(let o=0,c=n.curves.length;o<c;o++){const h=n.curves[o];this.curves.push(new rx[h.type]().fromJSON(h))}return this}}class ox extends K1{constructor(n){super(),this.type="Path",this.currentPoint=new vt,n&&this.setFromPoints(n)}setFromPoints(n){this.moveTo(n[0].x,n[0].y);for(let o=1,c=n.length;o<c;o++)this.lineTo(n[o].x,n[o].y);return this}moveTo(n,o){return this.currentPoint.set(n,o),this}lineTo(n,o){const c=new $S(this.currentPoint.clone(),new vt(n,o));return this.curves.push(c),this.currentPoint.set(n,o),this}quadraticCurveTo(n,o,c,h){const p=new XS(this.currentPoint.clone(),new vt(n,o),new vt(c,h));return this.curves.push(p),this.currentPoint.set(c,h),this}bezierCurveTo(n,o,c,h,p,_){const y=new WS(this.currentPoint.clone(),new vt(n,o),new vt(c,h),new vt(p,_));return this.curves.push(y),this.currentPoint.set(p,_),this}splineThru(n){const o=[this.currentPoint.clone()].concat(n),c=new YS(o);return this.curves.push(c),this.currentPoint.copy(n[n.length-1]),this}arc(n,o,c,h,p,_){const y=this.currentPoint.x,b=this.currentPoint.y;return this.absarc(n+y,o+b,c,h,p,_),this}absarc(n,o,c,h,p,_){return this.absellipse(n,o,c,c,h,p,_),this}ellipse(n,o,c,h,p,_,y,b){const M=this.currentPoint.x,R=this.currentPoint.y;return this.absellipse(n+M,o+R,c,h,p,_,y,b),this}absellipse(n,o,c,h,p,_,y,b){const M=new ix(n,o,c,h,p,_,y,b);if(this.curves.length>0){const C=M.getPoint(0);C.equals(this.currentPoint)||this.lineTo(C.x,C.y)}this.curves.push(M);const R=M.getPoint(1);return this.currentPoint.copy(R),this}copy(n){return super.copy(n),this.currentPoint.copy(n.currentPoint),this}toJSON(){const n=super.toJSON();return n.currentPoint=this.currentPoint.toArray(),n}fromJSON(n){return super.fromJSON(n),this.currentPoint.fromArray(n.currentPoint),this}}class Ru extends ox{constructor(n){super(n),this.uuid=Io(),this.type="Shape",this.holes=[]}getPointsHoles(n){const o=[];for(let c=0,h=this.holes.length;c<h;c++)o[c]=this.holes[c].getPoints(n);return o}extractPoints(n){return{shape:this.getPoints(n),holes:this.getPointsHoles(n)}}copy(n){super.copy(n),this.holes=[];for(let o=0,c=n.holes.length;o<c;o++){const h=n.holes[o];this.holes.push(h.clone())}return this}toJSON(){const n=super.toJSON();n.uuid=this.uuid,n.holes=[];for(let o=0,c=this.holes.length;o<c;o++){const h=this.holes[o];n.holes.push(h.toJSON())}return n}fromJSON(n){super.fromJSON(n),this.uuid=n.uuid,this.holes=[];for(let o=0,c=n.holes.length;o<c;o++){const h=n.holes[o];this.holes.push(new ox().fromJSON(h))}return this}}function nz(m,n,o=2){const c=n&&n.length,h=c?n[0]*o:m.length;let p=J1(m,0,h,o,!0);const _=[];if(!p||p.next===p.prev)return _;let y,b,M;if(c&&(p=az(m,n,p,o)),m.length>80*o){y=1/0,b=1/0;let R=-1/0,C=-1/0;for(let N=o;N<h;N+=o){const P=m[N],L=m[N+1];P<y&&(y=P),L<b&&(b=L),P>R&&(R=P),L>C&&(C=L)}M=Math.max(R-y,C-b),M=M!==0?32767/M:0}return Kp(p,_,o,y,b,M,0),_}function J1(m,n,o,c,h){let p;if(h===xz(m,n,o,c)>0)for(let _=n;_<o;_+=c)p=tR(_/c|0,m[_],m[_+1],p);else for(let _=o-c;_>=n;_-=c)p=tR(_/c|0,m[_],m[_+1],p);return p&&Gd(p,p.next)&&(Qp(p),p=p.next),p}function Cu(m,n){if(!m)return m;n||(n=m);let o=m,c;do if(c=!1,!o.steiner&&(Gd(o,o.next)||ws(o.prev,o,o.next)===0)){if(Qp(o),o=n=o.prev,o===o.next)break;c=!0}else o=o.next;while(c||o!==n);return n}function Kp(m,n,o,c,h,p,_){if(!m)return;!_&&p&&dz(m,c,h,p);let y=m;for(;m.prev!==m.next;){const b=m.prev,M=m.next;if(p?sz(m,c,h,p):iz(m)){n.push(b.i,m.i,M.i),Qp(m),m=M.next,y=M.next;continue}if(m=M,m===y){_?_===1?(m=rz(Cu(m),n),Kp(m,n,o,c,h,p,2)):_===2&&oz(m,n,o,c,h,p):Kp(Cu(m),n,o,c,h,p,1);break}}}function iz(m){const n=m.prev,o=m,c=m.next;if(ws(n,o,c)>=0)return!1;const h=n.x,p=o.x,_=c.x,y=n.y,b=o.y,M=c.y,R=Math.min(h,p,_),C=Math.min(y,b,M),N=Math.max(h,p,_),P=Math.max(y,b,M);let L=c.next;for(;L!==n;){if(L.x>=R&&L.x<=N&&L.y>=C&&L.y<=P&&Jp(h,y,p,b,_,M,L.x,L.y)&&ws(L.prev,L,L.next)>=0)return!1;L=L.next}return!0}function sz(m,n,o,c){const h=m.prev,p=m,_=m.next;if(ws(h,p,_)>=0)return!1;const y=h.x,b=p.x,M=_.x,R=h.y,C=p.y,N=_.y,P=Math.min(y,b,M),L=Math.min(R,C,N),V=Math.max(y,b,M),U=Math.max(R,C,N),I=ZS(P,L,n,o,c),Z=ZS(V,U,n,o,c);let W=m.prevZ,G=m.nextZ;for(;W&&W.z>=I&&G&&G.z<=Z;){if(W.x>=P&&W.x<=V&&W.y>=L&&W.y<=U&&W!==h&&W!==_&&Jp(y,R,b,C,M,N,W.x,W.y)&&ws(W.prev,W,W.next)>=0||(W=W.prevZ,G.x>=P&&G.x<=V&&G.y>=L&&G.y<=U&&G!==h&&G!==_&&Jp(y,R,b,C,M,N,G.x,G.y)&&ws(G.prev,G,G.next)>=0))return!1;G=G.nextZ}for(;W&&W.z>=I;){if(W.x>=P&&W.x<=V&&W.y>=L&&W.y<=U&&W!==h&&W!==_&&Jp(y,R,b,C,M,N,W.x,W.y)&&ws(W.prev,W,W.next)>=0)return!1;W=W.prevZ}for(;G&&G.z<=Z;){if(G.x>=P&&G.x<=V&&G.y>=L&&G.y<=U&&G!==h&&G!==_&&Jp(y,R,b,C,M,N,G.x,G.y)&&ws(G.prev,G,G.next)>=0)return!1;G=G.nextZ}return!0}function rz(m,n){let o=m;do{const c=o.prev,h=o.next.next;!Gd(c,h)&&Q1(c,o,o.next,h)&&jp(c,h)&&jp(h,c)&&(n.push(c.i,o.i,h.i),Qp(o),Qp(o.next),o=m=h),o=o.next}while(o!==m);return Cu(o)}function oz(m,n,o,c,h,p){let _=m;do{let y=_.next.next;for(;y!==_.prev;){if(_.i!==y.i&&mz(_,y)){let b=eR(_,y);_=Cu(_,_.next),b=Cu(b,b.next),Kp(_,n,o,c,h,p,0),Kp(b,n,o,c,h,p,0);return}y=y.next}_=_.next}while(_!==m)}function az(m,n,o,c){const h=[];for(let p=0,_=n.length;p<_;p++){const y=n[p]*c,b=p<_-1?n[p+1]*c:m.length,M=J1(m,y,b,c,!1);M===M.next&&(M.steiner=!0),h.push(pz(M))}h.sort(lz);for(let p=0;p<h.length;p++)o=cz(h[p],o);return o}function lz(m,n){let o=m.x-n.x;if(o===0&&(o=m.y-n.y,o===0)){const c=(m.next.y-m.y)/(m.next.x-m.x),h=(n.next.y-n.y)/(n.next.x-n.x);o=c-h}return o}function cz(m,n){const o=uz(m,n);if(!o)return n;const c=eR(o,m);return Cu(c,c.next),Cu(o,o.next)}function uz(m,n){let o=n;const c=m.x,h=m.y;let p=-1/0,_;if(Gd(m,o))return o;do{if(Gd(m,o.next))return o.next;if(h<=o.y&&h>=o.next.y&&o.next.y!==o.y){const C=o.x+(h-o.y)*(o.next.x-o.x)/(o.next.y-o.y);if(C<=c&&C>p&&(p=C,_=o.x<o.next.x?o:o.next,C===c))return _}o=o.next}while(o!==n);if(!_)return null;const y=_,b=_.x,M=_.y;let R=1/0;o=_;do{if(c>=o.x&&o.x>=b&&c!==o.x&&j1(h<M?c:p,h,b,M,h<M?p:c,h,o.x,o.y)){const C=Math.abs(h-o.y)/(c-o.x);jp(o,m)&&(C<R||C===R&&(o.x>_.x||o.x===_.x&&hz(_,o)))&&(_=o,R=C)}o=o.next}while(o!==y);return _}function hz(m,n){return ws(m.prev,m,n.prev)<0&&ws(n.next,m,m.next)<0}function dz(m,n,o,c){let h=m;do h.z===0&&(h.z=ZS(h.x,h.y,n,o,c)),h.prevZ=h.prev,h.nextZ=h.next,h=h.next;while(h!==m);h.prevZ.nextZ=null,h.prevZ=null,fz(h)}function fz(m){let n,o=1;do{let c=m,h;m=null;let p=null;for(n=0;c;){n++;let _=c,y=0;for(let M=0;M<o&&(y++,_=_.nextZ,!!_);M++);let b=o;for(;y>0||b>0&&_;)y!==0&&(b===0||!_||c.z<=_.z)?(h=c,c=c.nextZ,y--):(h=_,_=_.nextZ,b--),p?p.nextZ=h:m=h,h.prevZ=p,p=h;c=_}p.nextZ=null,o*=2}while(n>1);return m}function ZS(m,n,o,c,h){return m=(m-o)*h|0,n=(n-c)*h|0,m=(m|m<<8)&16711935,m=(m|m<<4)&252645135,m=(m|m<<2)&858993459,m=(m|m<<1)&1431655765,n=(n|n<<8)&16711935,n=(n|n<<4)&252645135,n=(n|n<<2)&858993459,n=(n|n<<1)&1431655765,m|n<<1}function pz(m){let n=m,o=m;do(n.x<o.x||n.x===o.x&&n.y<o.y)&&(o=n),n=n.next;while(n!==m);return o}function j1(m,n,o,c,h,p,_,y){return(h-_)*(n-y)>=(m-_)*(p-y)&&(m-_)*(c-y)>=(o-_)*(n-y)&&(o-_)*(p-y)>=(h-_)*(c-y)}function Jp(m,n,o,c,h,p,_,y){return!(m===_&&n===y)&&j1(m,n,o,c,h,p,_,y)}function mz(m,n){return m.next.i!==n.i&&m.prev.i!==n.i&&!gz(m,n)&&(jp(m,n)&&jp(n,m)&&_z(m,n)&&(ws(m.prev,m,n.prev)||ws(m,n.prev,n))||Gd(m,n)&&ws(m.prev,m,m.next)>0&&ws(n.prev,n,n.next)>0)}function ws(m,n,o){return(n.y-m.y)*(o.x-n.x)-(n.x-m.x)*(o.y-n.y)}function Gd(m,n){return m.x===n.x&&m.y===n.y}function Q1(m,n,o,c){const h=lx(ws(m,n,o)),p=lx(ws(m,n,c)),_=lx(ws(o,c,m)),y=lx(ws(o,c,n));return!!(h!==p&&_!==y||h===0&&ax(m,o,n)||p===0&&ax(m,c,n)||_===0&&ax(o,m,c)||y===0&&ax(o,n,c))}function ax(m,n,o){return n.x<=Math.max(m.x,o.x)&&n.x>=Math.min(m.x,o.x)&&n.y<=Math.max(m.y,o.y)&&n.y>=Math.min(m.y,o.y)}function lx(m){return m>0?1:m<0?-1:0}function gz(m,n){let o=m;do{if(o.i!==m.i&&o.next.i!==m.i&&o.i!==n.i&&o.next.i!==n.i&&Q1(o,o.next,m,n))return!0;o=o.next}while(o!==m);return!1}function jp(m,n){return ws(m.prev,m,m.next)<0?ws(m,n,m.next)>=0&&ws(m,m.prev,n)>=0:ws(m,n,m.prev)<0||ws(m,m.next,n)<0}function _z(m,n){let o=m,c=!1;const h=(m.x+n.x)/2,p=(m.y+n.y)/2;do o.y>p!=o.next.y>p&&o.next.y!==o.y&&h<(o.next.x-o.x)*(p-o.y)/(o.next.y-o.y)+o.x&&(c=!c),o=o.next;while(o!==m);return c}function eR(m,n){const o=KS(m.i,m.x,m.y),c=KS(n.i,n.x,n.y),h=m.next,p=n.prev;return m.next=n,n.prev=m,o.next=h,h.prev=o,c.next=o,o.prev=c,p.next=c,c.prev=p,c}function tR(m,n,o,c){const h=KS(m,n,o);return c?(h.next=c.next,h.prev=c,c.next.prev=h,c.next=h):(h.prev=h,h.next=h),h}function Qp(m){m.next.prev=m.prev,m.prev.next=m.next,m.prevZ&&(m.prevZ.nextZ=m.nextZ),m.nextZ&&(m.nextZ.prevZ=m.prevZ)}function KS(m,n,o){return{i:m,x:n,y:o,prev:null,next:null,z:0,prevZ:null,nextZ:null,steiner:!1}}function xz(m,n,o,c){let h=0;for(let p=n,_=o-c;p<o;p+=c)h+=(m[_]-m[p])*(m[p+1]+m[_+1]),_=p;return h}class yz{static triangulate(n,o,c=2){return nz(n,o,c)}}class Ca{static area(n){const o=n.length;let c=0;for(let h=o-1,p=0;p<o;h=p++)c+=n[h].x*n[p].y-n[p].x*n[h].y;return c*.5}static isClockWise(n){return Ca.area(n)<0}static triangulateShape(n,o){const c=[],h=[],p=[];nR(n),iR(c,n);let _=n.length;o.forEach(nR);for(let b=0;b<o.length;b++)h.push(_),_+=o[b].length,iR(c,o[b]);const y=yz.triangulate(c,h);for(let b=0;b<y.length;b+=3)p.push(y.slice(b,b+3));return p}}function nR(m){const n=m.length;n>2&&m[n-1].equals(m[0])&&m.pop()}function iR(m,n){for(let o=0;o<n.length;o++)m.push(n[o].x),m.push(n[o].y)}class cx extends pi{constructor(n=new Ru([new vt(.5,.5),new vt(-.5,.5),new vt(-.5,-.5),new vt(.5,-.5)]),o={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:n,options:o},n=Array.isArray(n)?n:[n];const c=this,h=[],p=[];for(let y=0,b=n.length;y<b;y++){const M=n[y];_(M)}this.setAttribute("position",new Tn(h,3)),this.setAttribute("uv",new Tn(p,2)),this.computeVertexNormals();function _(y){const b=[],M=o.curveSegments!==void 0?o.curveSegments:12,R=o.steps!==void 0?o.steps:1,C=o.depth!==void 0?o.depth:1;let N=o.bevelEnabled!==void 0?o.bevelEnabled:!0,P=o.bevelThickness!==void 0?o.bevelThickness:.2,L=o.bevelSize!==void 0?o.bevelSize:P-.1,V=o.bevelOffset!==void 0?o.bevelOffset:0,U=o.bevelSegments!==void 0?o.bevelSegments:3;const I=o.extrudePath,Z=o.UVGenerator!==void 0?o.UVGenerator:vz;let W,G=!1,ae,le,he,me;I&&(W=I.getSpacedPoints(R),G=!0,N=!1,ae=I.computeFrenetFrames(R,!1),le=new ce,he=new ce,me=new ce),N||(U=0,P=0,L=0,V=0);const j=y.extractPoints(M);let J=j.shape;const fe=j.holes;if(!Ca.isClockWise(J)){J=J.reverse();for(let Tt=0,gt=fe.length;Tt<gt;Tt++){const Rt=fe[Tt];Ca.isClockWise(Rt)&&(fe[Tt]=Rt.reverse())}}function Ke(Tt){const Rt=10000000000000001e-36;let _t=Tt[0];for(let qt=1;qt<=Tt.length;qt++){const Pt=qt%Tt.length,Yt=Tt[Pt],hi=Yt.x-_t.x,oi=Yt.y-_t.y,ue=hi*hi+oi*oi,K=Math.max(Math.abs(Yt.x),Math.abs(Yt.y),Math.abs(_t.x),Math.abs(_t.y)),Fe=Rt*K*K;if(ue<=Fe){Tt.splice(Pt,1),qt--;continue}_t=Yt}}Ke(J),fe.forEach(Ke);const ot=fe.length,pt=J;for(let Tt=0;Tt<ot;Tt++){const gt=fe[Tt];J=J.concat(gt)}function ht(Tt,gt,Rt){return gt||console.error("THREE.ExtrudeGeometry: vec does not exist"),Tt.clone().addScaledVector(gt,Rt)}const St=J.length;function st(Tt,gt,Rt){let _t,qt,Pt;const Yt=Tt.x-gt.x,hi=Tt.y-gt.y,oi=Rt.x-Tt.x,ue=Rt.y-Tt.y,K=Yt*Yt+hi*hi,Fe=Yt*ue-hi*oi;if(Math.abs(Fe)>Number.EPSILON){const tt=Math.sqrt(K),Mt=Math.sqrt(oi*oi+ue*ue),at=gt.x-hi/tt,Dn=gt.y+Yt/tt,Wt=Rt.x-ue/Mt,Rn=Rt.y+oi/Mt,Cn=((Wt-at)*ue-(Rn-Dn)*oi)/(Yt*ue-hi*oi);_t=at+Yt*Cn-Tt.x,qt=Dn+hi*Cn-Tt.y;const Dt=_t*_t+qt*qt;if(Dt<=2)return new vt(_t,qt);Pt=Math.sqrt(Dt/2)}else{let tt=!1;Yt>Number.EPSILON?oi>Number.EPSILON&&(tt=!0):Yt<-Number.EPSILON?oi<-Number.EPSILON&&(tt=!0):Math.sign(hi)===Math.sign(ue)&&(tt=!0),tt?(_t=-hi,qt=Yt,Pt=Math.sqrt(K)):(_t=Yt,qt=hi,Pt=Math.sqrt(K/2))}return new vt(_t/Pt,qt/Pt)}const jt=[];for(let Tt=0,gt=pt.length,Rt=gt-1,_t=Tt+1;Tt<gt;Tt++,Rt++,_t++)Rt===gt&&(Rt=0),_t===gt&&(_t=0),jt[Tt]=st(pt[Tt],pt[Rt],pt[_t]);const hn=[];let An,ai=jt.concat();for(let Tt=0,gt=ot;Tt<gt;Tt++){const Rt=fe[Tt];An=[];for(let _t=0,qt=Rt.length,Pt=qt-1,Yt=_t+1;_t<qt;_t++,Pt++,Yt++)Pt===qt&&(Pt=0),Yt===qt&&(Yt=0),An[_t]=st(Rt[_t],Rt[Pt],Rt[Yt]);hn.push(An),ai=ai.concat(An)}let Gi;if(U===0)Gi=Ca.triangulateShape(pt,fe);else{const Tt=[],gt=[];for(let Rt=0;Rt<U;Rt++){const _t=Rt/U,qt=P*Math.cos(_t*Math.PI/2),Pt=L*Math.sin(_t*Math.PI/2)+V;for(let Yt=0,hi=pt.length;Yt<hi;Yt++){const oi=ht(pt[Yt],jt[Yt],Pt);Ln(oi.x,oi.y,-qt),_t===0&&Tt.push(oi)}for(let Yt=0,hi=ot;Yt<hi;Yt++){const oi=fe[Yt];An=hn[Yt];const ue=[];for(let K=0,Fe=oi.length;K<Fe;K++){const tt=ht(oi[K],An[K],Pt);Ln(tt.x,tt.y,-qt),_t===0&&ue.push(tt)}_t===0&&gt.push(ue)}}Gi=Ca.triangulateShape(Tt,gt)}const Hi=Gi.length,dt=L+V;for(let Tt=0;Tt<St;Tt++){const gt=N?ht(J[Tt],ai[Tt],dt):J[Tt];G?(he.copy(ae.normals[0]).multiplyScalar(gt.x),le.copy(ae.binormals[0]).multiplyScalar(gt.y),me.copy(W[0]).add(he).add(le),Ln(me.x,me.y,me.z)):Ln(gt.x,gt.y,0)}for(let Tt=1;Tt<=R;Tt++)for(let gt=0;gt<St;gt++){const Rt=N?ht(J[gt],ai[gt],dt):J[gt];G?(he.copy(ae.normals[Tt]).multiplyScalar(Rt.x),le.copy(ae.binormals[Tt]).multiplyScalar(Rt.y),me.copy(W[Tt]).add(he).add(le),Ln(me.x,me.y,me.z)):Ln(Rt.x,Rt.y,C/R*Tt)}for(let Tt=U-1;Tt>=0;Tt--){const gt=Tt/U,Rt=P*Math.cos(gt*Math.PI/2),_t=L*Math.sin(gt*Math.PI/2)+V;for(let qt=0,Pt=pt.length;qt<Pt;qt++){const Yt=ht(pt[qt],jt[qt],_t);Ln(Yt.x,Yt.y,C+Rt)}for(let qt=0,Pt=fe.length;qt<Pt;qt++){const Yt=fe[qt];An=hn[qt];for(let hi=0,oi=Yt.length;hi<oi;hi++){const ue=ht(Yt[hi],An[hi],_t);G?Ln(ue.x,ue.y+W[R-1].y,W[R-1].x+Rt):Ln(ue.x,ue.y,C+Rt)}}}sn(),$t();function sn(){const Tt=h.length/3;if(N){let gt=0,Rt=St*gt;for(let _t=0;_t<Hi;_t++){const qt=Gi[_t];ei(qt[2]+Rt,qt[1]+Rt,qt[0]+Rt)}gt=R+U*2,Rt=St*gt;for(let _t=0;_t<Hi;_t++){const qt=Gi[_t];ei(qt[0]+Rt,qt[1]+Rt,qt[2]+Rt)}}else{for(let gt=0;gt<Hi;gt++){const Rt=Gi[gt];ei(Rt[2],Rt[1],Rt[0])}for(let gt=0;gt<Hi;gt++){const Rt=Gi[gt];ei(Rt[0]+St*R,Rt[1]+St*R,Rt[2]+St*R)}}c.addGroup(Tt,h.length/3-Tt,0)}function $t(){const Tt=h.length/3;let gt=0;Xn(pt,gt),gt+=pt.length;for(let Rt=0,_t=fe.length;Rt<_t;Rt++){const qt=fe[Rt];Xn(qt,gt),gt+=qt.length}c.addGroup(Tt,h.length/3-Tt,1)}function Xn(Tt,gt){let Rt=Tt.length;for(;--Rt>=0;){const _t=Rt;let qt=Rt-1;qt<0&&(qt=Tt.length-1);for(let Pt=0,Yt=R+U*2;Pt<Yt;Pt++){const hi=St*Pt,oi=St*(Pt+1),ue=gt+_t+hi,K=gt+qt+hi,Fe=gt+qt+oi,tt=gt+_t+oi;As(ue,K,Fe,tt)}}}function Ln(Tt,gt,Rt){b.push(Tt),b.push(gt),b.push(Rt)}function ei(Tt,gt,Rt){ui(Tt),ui(gt),ui(Rt);const _t=h.length/3,qt=Z.generateTopUV(c,h,_t-3,_t-2,_t-1);_e(qt[0]),_e(qt[1]),_e(qt[2])}function As(Tt,gt,Rt,_t){ui(Tt),ui(gt),ui(_t),ui(gt),ui(Rt),ui(_t);const qt=h.length/3,Pt=Z.generateSideWallUV(c,h,qt-6,qt-3,qt-2,qt-1);_e(Pt[0]),_e(Pt[1]),_e(Pt[3]),_e(Pt[1]),_e(Pt[2]),_e(Pt[3])}function ui(Tt){h.push(b[Tt*3+0]),h.push(b[Tt*3+1]),h.push(b[Tt*3+2])}function _e(Tt){p.push(Tt.x),p.push(Tt.y)}}}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}toJSON(){const n=super.toJSON(),o=this.parameters.shapes,c=this.parameters.options;return Sz(o,c,n)}static fromJSON(n,o){const c=[];for(let p=0,_=n.shapes.length;p<_;p++){const y=o[n.shapes[p]];c.push(y)}const h=n.options.extrudePath;return h!==void 0&&(n.options.extrudePath=new rx[h.type]().fromJSON(h)),new cx(c,n.options)}}const vz={generateTopUV:function(m,n,o,c,h){const p=n[o*3],_=n[o*3+1],y=n[c*3],b=n[c*3+1],M=n[h*3],R=n[h*3+1];return[new vt(p,_),new vt(y,b),new vt(M,R)]},generateSideWallUV:function(m,n,o,c,h,p){const _=n[o*3],y=n[o*3+1],b=n[o*3+2],M=n[c*3],R=n[c*3+1],C=n[c*3+2],N=n[h*3],P=n[h*3+1],L=n[h*3+2],V=n[p*3],U=n[p*3+1],I=n[p*3+2];return Math.abs(y-R)<Math.abs(_-M)?[new vt(_,1-b),new vt(M,1-C),new vt(N,1-L),new vt(V,1-I)]:[new vt(y,1-b),new vt(R,1-C),new vt(P,1-L),new vt(U,1-I)]}};function Sz(m,n,o){if(o.shapes=[],Array.isArray(m))for(let c=0,h=m.length;c<h;c++){const p=m[c];o.shapes.push(p.uuid)}else o.shapes.push(m.uuid);return o.options=Object.assign({},n),n.extrudePath!==void 0&&(o.options.extrudePath=n.extrudePath.toJSON()),o}class ux extends wc{constructor(n=1,o=0){const c=(1+Math.sqrt(5))/2,h=[-1,c,0,1,c,0,-1,-c,0,1,-c,0,0,-1,c,0,1,c,0,-1,-c,0,1,-c,c,0,-1,c,0,1,-c,0,-1,-c,0,1],p=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(h,p,n,o),this.type="IcosahedronGeometry",this.parameters={radius:n,detail:o}}static fromJSON(n){return new ux(n.radius,n.detail)}}class hx extends pi{constructor(n=[new vt(0,-.5),new vt(.5,0),new vt(0,.5)],o=12,c=0,h=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points:n,segments:o,phiStart:c,phiLength:h},o=Math.floor(o),h=Kn(h,0,Math.PI*2);const p=[],_=[],y=[],b=[],M=[],R=1/o,C=new ce,N=new vt,P=new ce,L=new ce,V=new ce;let U=0,I=0;for(let Z=0;Z<=n.length-1;Z++)switch(Z){case 0:U=n[Z+1].x-n[Z].x,I=n[Z+1].y-n[Z].y,P.x=I*1,P.y=-U,P.z=I*0,V.copy(P),P.normalize(),b.push(P.x,P.y,P.z);break;case n.length-1:b.push(V.x,V.y,V.z);break;default:U=n[Z+1].x-n[Z].x,I=n[Z+1].y-n[Z].y,P.x=I*1,P.y=-U,P.z=I*0,L.copy(P),P.x+=V.x,P.y+=V.y,P.z+=V.z,P.normalize(),b.push(P.x,P.y,P.z),V.copy(L)}for(let Z=0;Z<=o;Z++){const W=c+Z*R*h,G=Math.sin(W),ae=Math.cos(W);for(let le=0;le<=n.length-1;le++){C.x=n[le].x*G,C.y=n[le].y,C.z=n[le].x*ae,_.push(C.x,C.y,C.z),N.x=Z/o,N.y=le/(n.length-1),y.push(N.x,N.y);const he=b[3*le+0]*G,me=b[3*le+1],j=b[3*le+0]*ae;M.push(he,me,j)}}for(let Z=0;Z<o;Z++)for(let W=0;W<n.length-1;W++){const G=W+Z*n.length,ae=G,le=G+n.length,he=G+n.length+1,me=G+1;p.push(ae,le,me),p.push(he,me,le)}this.setIndex(p),this.setAttribute("position",new Tn(_,3)),this.setAttribute("uv",new Tn(y,2)),this.setAttribute("normal",new Tn(M,3))}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new hx(n.points,n.segments,n.phiStart,n.phiLength)}}class em extends wc{constructor(n=1,o=0){const c=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],h=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(c,h,n,o),this.type="OctahedronGeometry",this.parameters={radius:n,detail:o}}static fromJSON(n){return new em(n.radius,n.detail)}}class Hd extends pi{constructor(n=1,o=1,c=1,h=1){super(),this.type="PlaneGeometry",this.parameters={width:n,height:o,widthSegments:c,heightSegments:h};const p=n/2,_=o/2,y=Math.floor(c),b=Math.floor(h),M=y+1,R=b+1,C=n/y,N=o/b,P=[],L=[],V=[],U=[];for(let I=0;I<R;I++){const Z=I*N-_;for(let W=0;W<M;W++){const G=W*C-p;L.push(G,-Z,0),V.push(0,0,1),U.push(W/y),U.push(1-I/b)}}for(let I=0;I<b;I++)for(let Z=0;Z<y;Z++){const W=Z+M*I,G=Z+M*(I+1),ae=Z+1+M*(I+1),le=Z+1+M*I;P.push(W,G,le),P.push(G,ae,le)}this.setIndex(P),this.setAttribute("position",new Tn(L,3)),this.setAttribute("normal",new Tn(V,3)),this.setAttribute("uv",new Tn(U,2))}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new Hd(n.width,n.height,n.widthSegments,n.heightSegments)}}class dx extends pi{constructor(n=.5,o=1,c=32,h=1,p=0,_=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:n,outerRadius:o,thetaSegments:c,phiSegments:h,thetaStart:p,thetaLength:_},c=Math.max(3,c),h=Math.max(1,h);const y=[],b=[],M=[],R=[];let C=n;const N=(o-n)/h,P=new ce,L=new vt;for(let V=0;V<=h;V++){for(let U=0;U<=c;U++){const I=p+U/c*_;P.x=C*Math.cos(I),P.y=C*Math.sin(I),b.push(P.x,P.y,P.z),M.push(0,0,1),L.x=(P.x/o+1)/2,L.y=(P.y/o+1)/2,R.push(L.x,L.y)}C+=N}for(let V=0;V<h;V++){const U=V*(c+1);for(let I=0;I<c;I++){const Z=I+U,W=Z,G=Z+c+1,ae=Z+c+2,le=Z+1;y.push(W,G,le),y.push(G,ae,le)}}this.setIndex(y),this.setAttribute("position",new Tn(b,3)),this.setAttribute("normal",new Tn(M,3)),this.setAttribute("uv",new Tn(R,2))}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new dx(n.innerRadius,n.outerRadius,n.thetaSegments,n.phiSegments,n.thetaStart,n.thetaLength)}}class fx extends pi{constructor(n=new Ru([new vt(0,.5),new vt(-.5,-.5),new vt(.5,-.5)]),o=12){super(),this.type="ShapeGeometry",this.parameters={shapes:n,curveSegments:o};const c=[],h=[],p=[],_=[];let y=0,b=0;if(Array.isArray(n)===!1)M(n);else for(let R=0;R<n.length;R++)M(n[R]),this.addGroup(y,b,R),y+=b,b=0;this.setIndex(c),this.setAttribute("position",new Tn(h,3)),this.setAttribute("normal",new Tn(p,3)),this.setAttribute("uv",new Tn(_,2));function M(R){const C=h.length/3,N=R.extractPoints(o);let P=N.shape;const L=N.holes;Ca.isClockWise(P)===!1&&(P=P.reverse());for(let U=0,I=L.length;U<I;U++){const Z=L[U];Ca.isClockWise(Z)===!0&&(L[U]=Z.reverse())}const V=Ca.triangulateShape(P,L);for(let U=0,I=L.length;U<I;U++){const Z=L[U];P=P.concat(Z)}for(let U=0,I=P.length;U<I;U++){const Z=P[U];h.push(Z.x,Z.y,0),p.push(0,0,1),_.push(Z.x,Z.y)}for(let U=0,I=V.length;U<I;U++){const Z=V[U],W=Z[0]+C,G=Z[1]+C,ae=Z[2]+C;c.push(W,G,ae),b+=3}}}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}toJSON(){const n=super.toJSON(),o=this.parameters.shapes;return bz(o,n)}static fromJSON(n,o){const c=[];for(let h=0,p=n.shapes.length;h<p;h++){const _=o[n.shapes[h]];c.push(_)}return new fx(c,n.curveSegments)}}function bz(m,n){if(n.shapes=[],Array.isArray(m))for(let o=0,c=m.length;o<c;o++){const h=m[o];n.shapes.push(h.uuid)}else n.shapes.push(m.uuid);return n}class tm extends pi{constructor(n=1,o=32,c=16,h=0,p=Math.PI*2,_=0,y=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:n,widthSegments:o,heightSegments:c,phiStart:h,phiLength:p,thetaStart:_,thetaLength:y},o=Math.max(3,Math.floor(o)),c=Math.max(2,Math.floor(c));const b=Math.min(_+y,Math.PI);let M=0;const R=[],C=new ce,N=new ce,P=[],L=[],V=[],U=[];for(let I=0;I<=c;I++){const Z=[],W=I/c;let G=0;I===0&&_===0?G=.5/o:I===c&&b===Math.PI&&(G=-.5/o);for(let ae=0;ae<=o;ae++){const le=ae/o;C.x=-n*Math.cos(h+le*p)*Math.sin(_+W*y),C.y=n*Math.cos(_+W*y),C.z=n*Math.sin(h+le*p)*Math.sin(_+W*y),L.push(C.x,C.y,C.z),N.copy(C).normalize(),V.push(N.x,N.y,N.z),U.push(le+G,1-W),Z.push(M++)}R.push(Z)}for(let I=0;I<c;I++)for(let Z=0;Z<o;Z++){const W=R[I][Z+1],G=R[I][Z],ae=R[I+1][Z],le=R[I+1][Z+1];(I!==0||_>0)&&P.push(W,G,le),(I!==c-1||b<Math.PI)&&P.push(G,ae,le)}this.setIndex(P),this.setAttribute("position",new Tn(L,3)),this.setAttribute("normal",new Tn(V,3)),this.setAttribute("uv",new Tn(U,2))}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new tm(n.radius,n.widthSegments,n.heightSegments,n.phiStart,n.phiLength,n.thetaStart,n.thetaLength)}}class px extends wc{constructor(n=1,o=0){const c=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],h=[2,1,0,0,3,2,1,3,0,2,3,1];super(c,h,n,o),this.type="TetrahedronGeometry",this.parameters={radius:n,detail:o}}static fromJSON(n){return new px(n.radius,n.detail)}}class mx extends pi{constructor(n=1,o=.4,c=12,h=48,p=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:n,tube:o,radialSegments:c,tubularSegments:h,arc:p},c=Math.floor(c),h=Math.floor(h);const _=[],y=[],b=[],M=[],R=new ce,C=new ce,N=new ce;for(let P=0;P<=c;P++)for(let L=0;L<=h;L++){const V=L/h*p,U=P/c*Math.PI*2;C.x=(n+o*Math.cos(U))*Math.cos(V),C.y=(n+o*Math.cos(U))*Math.sin(V),C.z=o*Math.sin(U),y.push(C.x,C.y,C.z),R.x=n*Math.cos(V),R.y=n*Math.sin(V),N.subVectors(C,R).normalize(),b.push(N.x,N.y,N.z),M.push(L/h),M.push(P/c)}for(let P=1;P<=c;P++)for(let L=1;L<=h;L++){const V=(h+1)*P+L-1,U=(h+1)*(P-1)+L-1,I=(h+1)*(P-1)+L,Z=(h+1)*P+L;_.push(V,U,Z),_.push(U,I,Z)}this.setIndex(_),this.setAttribute("position",new Tn(y,3)),this.setAttribute("normal",new Tn(b,3)),this.setAttribute("uv",new Tn(M,2))}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new mx(n.radius,n.tube,n.radialSegments,n.tubularSegments,n.arc)}}class gx extends pi{constructor(n=1,o=.4,c=64,h=8,p=2,_=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:n,tube:o,tubularSegments:c,radialSegments:h,p,q:_},c=Math.floor(c),h=Math.floor(h);const y=[],b=[],M=[],R=[],C=new ce,N=new ce,P=new ce,L=new ce,V=new ce,U=new ce,I=new ce;for(let W=0;W<=c;++W){const G=W/c*p*Math.PI*2;Z(G,p,_,n,P),Z(G+.01,p,_,n,L),U.subVectors(L,P),I.addVectors(L,P),V.crossVectors(U,I),I.crossVectors(V,U),V.normalize(),I.normalize();for(let ae=0;ae<=h;++ae){const le=ae/h*Math.PI*2,he=-o*Math.cos(le),me=o*Math.sin(le);C.x=P.x+(he*I.x+me*V.x),C.y=P.y+(he*I.y+me*V.y),C.z=P.z+(he*I.z+me*V.z),b.push(C.x,C.y,C.z),N.subVectors(C,P).normalize(),M.push(N.x,N.y,N.z),R.push(W/c),R.push(ae/h)}}for(let W=1;W<=c;W++)for(let G=1;G<=h;G++){const ae=(h+1)*(W-1)+(G-1),le=(h+1)*W+(G-1),he=(h+1)*W+G,me=(h+1)*(W-1)+G;y.push(ae,le,me),y.push(le,he,me)}this.setIndex(y),this.setAttribute("position",new Tn(b,3)),this.setAttribute("normal",new Tn(M,3)),this.setAttribute("uv",new Tn(R,2));function Z(W,G,ae,le,he){const me=Math.cos(W),j=Math.sin(W),J=ae/G*W,fe=Math.cos(J);he.x=le*(2+fe)*.5*me,he.y=le*(2+fe)*j*.5,he.z=le*Math.sin(J)*.5}}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new gx(n.radius,n.tube,n.tubularSegments,n.radialSegments,n.p,n.q)}}class _x extends pi{constructor(n=new qS(new ce(-1,-1,0),new ce(-1,1,0),new ce(1,1,0)),o=64,c=1,h=8,p=!1){super(),this.type="TubeGeometry",this.parameters={path:n,tubularSegments:o,radius:c,radialSegments:h,closed:p};const _=n.computeFrenetFrames(o,p);this.tangents=_.tangents,this.normals=_.normals,this.binormals=_.binormals;const y=new ce,b=new ce,M=new vt;let R=new ce;const C=[],N=[],P=[],L=[];V(),this.setIndex(L),this.setAttribute("position",new Tn(C,3)),this.setAttribute("normal",new Tn(N,3)),this.setAttribute("uv",new Tn(P,2));function V(){for(let W=0;W<o;W++)U(W);U(p===!1?o:0),Z(),I()}function U(W){R=n.getPointAt(W/o,R);const G=_.normals[W],ae=_.binormals[W];for(let le=0;le<=h;le++){const he=le/h*Math.PI*2,me=Math.sin(he),j=-Math.cos(he);b.x=j*G.x+me*ae.x,b.y=j*G.y+me*ae.y,b.z=j*G.z+me*ae.z,b.normalize(),N.push(b.x,b.y,b.z),y.x=R.x+c*b.x,y.y=R.y+c*b.y,y.z=R.z+c*b.z,C.push(y.x,y.y,y.z)}}function I(){for(let W=1;W<=o;W++)for(let G=1;G<=h;G++){const ae=(h+1)*(W-1)+(G-1),le=(h+1)*W+(G-1),he=(h+1)*W+G,me=(h+1)*(W-1)+G;L.push(ae,le,me),L.push(le,he,me)}}function Z(){for(let W=0;W<=o;W++)for(let G=0;G<=h;G++)M.x=W/o,M.y=G/h,P.push(M.x,M.y)}}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}toJSON(){const n=super.toJSON();return n.path=this.parameters.path.toJSON(),n}static fromJSON(n){return new _x(new rx[n.path.type]().fromJSON(n.path),n.tubularSegments,n.radius,n.radialSegments,n.closed)}}class sR extends pi{constructor(n=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:n},n!==null){const o=[],c=new Set,h=new ce,p=new ce;if(n.index!==null){const _=n.attributes.position,y=n.index;let b=n.groups;b.length===0&&(b=[{start:0,count:y.count,materialIndex:0}]);for(let M=0,R=b.length;M<R;++M){const C=b[M],N=C.start,P=C.count;for(let L=N,V=N+P;L<V;L+=3)for(let U=0;U<3;U++){const I=y.getX(L+U),Z=y.getX(L+(U+1)%3);h.fromBufferAttribute(_,I),p.fromBufferAttribute(_,Z),rR(h,p,c)===!0&&(o.push(h.x,h.y,h.z),o.push(p.x,p.y,p.z))}}}else{const _=n.attributes.position;for(let y=0,b=_.count/3;y<b;y++)for(let M=0;M<3;M++){const R=3*y+M,C=3*y+(M+1)%3;h.fromBufferAttribute(_,R),p.fromBufferAttribute(_,C),rR(h,p,c)===!0&&(o.push(h.x,h.y,h.z),o.push(p.x,p.y,p.z))}}this.setAttribute("position",new Tn(o,3))}}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}}function rR(m,n,o){const c=`${m.x},${m.y},${m.z}-${n.x},${n.y},${n.z}`,h=`${n.x},${n.y},${n.z}-${m.x},${m.y},${m.z}`;return o.has(c)===!0||o.has(h)===!0?!1:(o.add(c),o.add(h),!0)}var oR=Object.freeze({__proto__:null,BoxGeometry:Tu,CapsuleGeometry:J_,CircleGeometry:j_,ConeGeometry:qp,CylinderGeometry:Xp,DodecahedronGeometry:Q_,EdgesGeometry:W1,ExtrudeGeometry:cx,IcosahedronGeometry:ux,LatheGeometry:hx,OctahedronGeometry:em,PlaneGeometry:Hd,PolyhedronGeometry:wc,RingGeometry:dx,ShapeGeometry:fx,SphereGeometry:tm,TetrahedronGeometry:px,TorusGeometry:mx,TorusKnotGeometry:gx,TubeGeometry:_x,WireframeGeometry:sR});class aR extends Ur{constructor(n){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new mn(0),this.transparent=!0,this.fog=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.fog=n.fog,this}}class lR extends Ea{constructor(n){super(n),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class JS extends Ur{constructor(n){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new mn(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new mn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=pc,this.normalScale=new vt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Do,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(n)}copy(n){return super.copy(n),this.defines={STANDARD:""},this.color.copy(n.color),this.roughness=n.roughness,this.metalness=n.metalness,this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.roughnessMap=n.roughnessMap,this.metalnessMap=n.metalnessMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.envMapRotation.copy(n.envMapRotation),this.envMapIntensity=n.envMapIntensity,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.flatShading=n.flatShading,this.fog=n.fog,this}}class cR extends JS{constructor(n){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new vt(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return Kn(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(o){this.ior=(1+.4*o)/(1-.4*o)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new mn(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new mn(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new mn(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(n)}get anisotropy(){return this._anisotropy}set anisotropy(n){this._anisotropy>0!=n>0&&this.version++,this._anisotropy=n}get clearcoat(){return this._clearcoat}set clearcoat(n){this._clearcoat>0!=n>0&&this.version++,this._clearcoat=n}get iridescence(){return this._iridescence}set iridescence(n){this._iridescence>0!=n>0&&this.version++,this._iridescence=n}get dispersion(){return this._dispersion}set dispersion(n){this._dispersion>0!=n>0&&this.version++,this._dispersion=n}get sheen(){return this._sheen}set sheen(n){this._sheen>0!=n>0&&this.version++,this._sheen=n}get transmission(){return this._transmission}set transmission(n){this._transmission>0!=n>0&&this.version++,this._transmission=n}copy(n){return super.copy(n),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=n.anisotropy,this.anisotropyRotation=n.anisotropyRotation,this.anisotropyMap=n.anisotropyMap,this.clearcoat=n.clearcoat,this.clearcoatMap=n.clearcoatMap,this.clearcoatRoughness=n.clearcoatRoughness,this.clearcoatRoughnessMap=n.clearcoatRoughnessMap,this.clearcoatNormalMap=n.clearcoatNormalMap,this.clearcoatNormalScale.copy(n.clearcoatNormalScale),this.dispersion=n.dispersion,this.ior=n.ior,this.iridescence=n.iridescence,this.iridescenceMap=n.iridescenceMap,this.iridescenceIOR=n.iridescenceIOR,this.iridescenceThicknessRange=[...n.iridescenceThicknessRange],this.iridescenceThicknessMap=n.iridescenceThicknessMap,this.sheen=n.sheen,this.sheenColor.copy(n.sheenColor),this.sheenColorMap=n.sheenColorMap,this.sheenRoughness=n.sheenRoughness,this.sheenRoughnessMap=n.sheenRoughnessMap,this.transmission=n.transmission,this.transmissionMap=n.transmissionMap,this.thickness=n.thickness,this.thicknessMap=n.thicknessMap,this.attenuationDistance=n.attenuationDistance,this.attenuationColor.copy(n.attenuationColor),this.specularIntensity=n.specularIntensity,this.specularIntensityMap=n.specularIntensityMap,this.specularColor.copy(n.specularColor),this.specularColorMap=n.specularColorMap,this}}class uR extends Ur{constructor(n){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new mn(16777215),this.specular=new mn(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new mn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=pc,this.normalScale=new vt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Do,this.combine=Ue,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.specular.copy(n.specular),this.shininess=n.shininess,this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.envMapRotation.copy(n.envMapRotation),this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.flatShading=n.flatShading,this.fog=n.fog,this}}class hR extends Ur{constructor(n){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new mn(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new mn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=pc,this.normalScale=new vt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.gradientMap=n.gradientMap,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.alphaMap=n.alphaMap,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.fog=n.fog,this}}class dR extends Ur{constructor(n){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=pc,this.normalScale=new vt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(n)}copy(n){return super.copy(n),this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.flatShading=n.flatShading,this}}class fR extends Ur{constructor(n){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new mn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new mn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=pc,this.normalScale=new vt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Do,this.combine=Ue,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.envMapRotation.copy(n.envMapRotation),this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.flatShading=n.flatShading,this.fog=n.fog,this}}class jS extends Ur{constructor(n){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=LE,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(n)}copy(n){return super.copy(n),this.depthPacking=n.depthPacking,this.map=n.map,this.alphaMap=n.alphaMap,this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this}}class QS extends Ur{constructor(n){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(n)}copy(n){return super.copy(n),this.map=n.map,this.alphaMap=n.alphaMap,this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this}}class pR extends Ur{constructor(n){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new mn(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=pc,this.normalScale=new vt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(n)}copy(n){return super.copy(n),this.defines={MATCAP:""},this.color.copy(n.color),this.matcap=n.matcap,this.map=n.map,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.alphaMap=n.alphaMap,this.flatShading=n.flatShading,this.fog=n.fog,this}}class mR extends Kr{constructor(n){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(n)}copy(n){return super.copy(n),this.scale=n.scale,this.dashSize=n.dashSize,this.gapSize=n.gapSize,this}}function Nu(m,n){return!m||m.constructor===n?m:typeof n.BYTES_PER_ELEMENT=="number"?new n(m):Array.prototype.slice.call(m)}function gR(m){return ArrayBuffer.isView(m)&&!(m instanceof DataView)}function _R(m){function n(h,p){return m[h]-m[p]}const o=m.length,c=new Array(o);for(let h=0;h!==o;++h)c[h]=h;return c.sort(n),c}function eb(m,n,o){const c=m.length,h=new m.constructor(c);for(let p=0,_=0;_!==c;++p){const y=o[p]*n;for(let b=0;b!==n;++b)h[_++]=m[y+b]}return h}function tb(m,n,o,c){let h=1,p=m[0];for(;p!==void 0&&p[c]===void 0;)p=m[h++];if(p===void 0)return;let _=p[c];if(_!==void 0)if(Array.isArray(_))do _=p[c],_!==void 0&&(n.push(p.time),o.push(..._)),p=m[h++];while(p!==void 0);else if(_.toArray!==void 0)do _=p[c],_!==void 0&&(n.push(p.time),_.toArray(o,o.length)),p=m[h++];while(p!==void 0);else do _=p[c],_!==void 0&&(n.push(p.time),o.push(_)),p=m[h++];while(p!==void 0)}function Tz(m,n,o,c,h=30){const p=m.clone();p.name=n;const _=[];for(let b=0;b<p.tracks.length;++b){const M=p.tracks[b],R=M.getValueSize(),C=[],N=[];for(let P=0;P<M.times.length;++P){const L=M.times[P]*h;if(!(L<o||L>=c)){C.push(M.times[P]);for(let V=0;V<R;++V)N.push(M.values[P*R+V])}}C.length!==0&&(M.times=Nu(C,M.times.constructor),M.values=Nu(N,M.values.constructor),_.push(M))}p.tracks=_;let y=1/0;for(let b=0;b<p.tracks.length;++b)y>p.tracks[b].times[0]&&(y=p.tracks[b].times[0]);for(let b=0;b<p.tracks.length;++b)p.tracks[b].shift(-1*y);return p.resetDuration(),p}function Mz(m,n=0,o=m,c=30){c<=0&&(c=30);const h=o.tracks.length,p=n/c;for(let _=0;_<h;++_){const y=o.tracks[_],b=y.ValueTypeName;if(b==="bool"||b==="string")continue;const M=m.tracks.find(function(I){return I.name===y.name&&I.ValueTypeName===b});if(M===void 0)continue;let R=0;const C=y.getValueSize();y.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(R=C/3);let N=0;const P=M.getValueSize();M.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(N=P/3);const L=y.times.length-1;let V;if(p<=y.times[0]){const I=R,Z=C-R;V=y.values.slice(I,Z)}else if(p>=y.times[L]){const I=L*C+R,Z=I+C-R;V=y.values.slice(I,Z)}else{const I=y.createInterpolant(),Z=R,W=C-R;I.evaluate(p),V=I.resultBuffer.slice(Z,W)}b==="quaternion"&&new ho().fromArray(V).normalize().conjugate().toArray(V);const U=M.times.length;for(let I=0;I<U;++I){const Z=I*P+N;if(b==="quaternion")ho.multiplyQuaternionsFlat(M.values,Z,V,0,M.values,Z);else{const W=P-N*2;for(let G=0;G<W;++G)M.values[Z+G]-=V[G]}}}return m.blendMode=Q0,m}class wz{static convertArray(n,o){return Nu(n,o)}static isTypedArray(n){return gR(n)}static getKeyframeOrder(n){return _R(n)}static sortedArray(n,o,c){return eb(n,o,c)}static flattenJSON(n,o,c,h){tb(n,o,c,h)}static subclip(n,o,c,h,p=30){return Tz(n,o,c,h,p)}static makeClipAdditive(n,o=0,c=n,h=30){return Mz(n,o,c,h)}}class nm{constructor(n,o,c,h){this.parameterPositions=n,this._cachedIndex=0,this.resultBuffer=h!==void 0?h:new o.constructor(c),this.sampleValues=o,this.valueSize=c,this.settings=null,this.DefaultSettings_={}}evaluate(n){const o=this.parameterPositions;let c=this._cachedIndex,h=o[c],p=o[c-1];e:{t:{let _;n:{i:if(!(n<h)){for(let y=c+2;;){if(h===void 0){if(n<p)break i;return c=o.length,this._cachedIndex=c,this.copySampleValue_(c-1)}if(c===y)break;if(p=h,h=o[++c],n<h)break t}_=o.length;break n}if(!(n>=p)){const y=o[1];n<y&&(c=2,p=y);for(let b=c-2;;){if(p===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(c===b)break;if(h=p,p=o[--c-1],n>=p)break t}_=c,c=0;break n}break e}for(;c<_;){const y=c+_>>>1;n<o[y]?_=y:c=y+1}if(h=o[c],p=o[c-1],p===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(h===void 0)return c=o.length,this._cachedIndex=c,this.copySampleValue_(c-1)}this._cachedIndex=c,this.intervalChanged_(c,p,h)}return this.interpolate_(c,p,n,h)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(n){const o=this.resultBuffer,c=this.sampleValues,h=this.valueSize,p=n*h;for(let _=0;_!==h;++_)o[_]=c[p+_];return o}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class xR extends nm{constructor(n,o,c,h){super(n,o,c,h),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:mu,endingEnd:mu}}intervalChanged_(n,o,c){const h=this.parameterPositions;let p=n-2,_=n+1,y=h[p],b=h[_];if(y===void 0)switch(this.getSettings_().endingStart){case gu:p=n,y=2*o-c;break;case Rp:p=h.length-2,y=o+h[p]-h[p+1];break;default:p=n,y=c}if(b===void 0)switch(this.getSettings_().endingEnd){case gu:_=n,b=2*c-o;break;case Rp:_=1,b=c+h[1]-h[0];break;default:_=n-1,b=o}const M=(c-o)*.5,R=this.valueSize;this._weightPrev=M/(o-y),this._weightNext=M/(b-c),this._offsetPrev=p*R,this._offsetNext=_*R}interpolate_(n,o,c,h){const p=this.resultBuffer,_=this.sampleValues,y=this.valueSize,b=n*y,M=b-y,R=this._offsetPrev,C=this._offsetNext,N=this._weightPrev,P=this._weightNext,L=(c-o)/(h-o),V=L*L,U=V*L,I=-N*U+2*N*V-N*L,Z=(1+N)*U+(-1.5-2*N)*V+(-.5+N)*L+1,W=(-1-P)*U+(1.5+P)*V+.5*L,G=P*U-P*V;for(let ae=0;ae!==y;++ae)p[ae]=I*_[R+ae]+Z*_[M+ae]+W*_[b+ae]+G*_[C+ae];return p}}class nb extends nm{constructor(n,o,c,h){super(n,o,c,h)}interpolate_(n,o,c,h){const p=this.resultBuffer,_=this.sampleValues,y=this.valueSize,b=n*y,M=b-y,R=(c-o)/(h-o),C=1-R;for(let N=0;N!==y;++N)p[N]=_[M+N]*C+_[b+N]*R;return p}}class yR extends nm{constructor(n,o,c,h){super(n,o,c,h)}interpolate_(n){return this.copySampleValue_(n-1)}}class na{constructor(n,o,c,h){if(n===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(o===void 0||o.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+n);this.name=n,this.times=Nu(o,this.TimeBufferType),this.values=Nu(c,this.ValueBufferType),this.setInterpolation(h||this.DefaultInterpolation)}static toJSON(n){const o=n.constructor;let c;if(o.toJSON!==this.toJSON)c=o.toJSON(n);else{c={name:n.name,times:Nu(n.times,Array),values:Nu(n.values,Array)};const h=n.getInterpolation();h!==n.DefaultInterpolation&&(c.interpolation=h)}return c.type=n.ValueTypeName,c}InterpolantFactoryMethodDiscrete(n){return new yR(this.times,this.values,this.getValueSize(),n)}InterpolantFactoryMethodLinear(n){return new nb(this.times,this.values,this.getValueSize(),n)}InterpolantFactoryMethodSmooth(n){return new xR(this.times,this.values,this.getValueSize(),n)}setInterpolation(n){let o;switch(n){case Ep:o=this.InterpolantFactoryMethodDiscrete;break;case o_:o=this.InterpolantFactoryMethodLinear;break;case a_:o=this.InterpolantFactoryMethodSmooth;break}if(o===void 0){const c="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(n!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(c);return console.warn("THREE.KeyframeTrack:",c),this}return this.createInterpolant=o,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Ep;case this.InterpolantFactoryMethodLinear:return o_;case this.InterpolantFactoryMethodSmooth:return a_}}getValueSize(){return this.values.length/this.times.length}shift(n){if(n!==0){const o=this.times;for(let c=0,h=o.length;c!==h;++c)o[c]+=n}return this}scale(n){if(n!==1){const o=this.times;for(let c=0,h=o.length;c!==h;++c)o[c]*=n}return this}trim(n,o){const c=this.times,h=c.length;let p=0,_=h-1;for(;p!==h&&c[p]<n;)++p;for(;_!==-1&&c[_]>o;)--_;if(++_,p!==0||_!==h){p>=_&&(_=Math.max(_,1),p=_-1);const y=this.getValueSize();this.times=c.slice(p,_),this.values=this.values.slice(p*y,_*y)}return this}validate(){let n=!0;const o=this.getValueSize();o-Math.floor(o)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),n=!1);const c=this.times,h=this.values,p=c.length;p===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),n=!1);let _=null;for(let y=0;y!==p;y++){const b=c[y];if(typeof b=="number"&&isNaN(b)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,y,b),n=!1;break}if(_!==null&&_>b){console.error("THREE.KeyframeTrack: Out of order keys.",this,y,b,_),n=!1;break}_=b}if(h!==void 0&&gR(h))for(let y=0,b=h.length;y!==b;++y){const M=h[y];if(isNaN(M)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,y,M),n=!1;break}}return n}optimize(){const n=this.times.slice(),o=this.values.slice(),c=this.getValueSize(),h=this.getInterpolation()===a_,p=n.length-1;let _=1;for(let y=1;y<p;++y){let b=!1;const M=n[y],R=n[y+1];if(M!==R&&(y!==1||M!==n[0]))if(h)b=!0;else{const C=y*c,N=C-c,P=C+c;for(let L=0;L!==c;++L){const V=o[C+L];if(V!==o[N+L]||V!==o[P+L]){b=!0;break}}}if(b){if(y!==_){n[_]=n[y];const C=y*c,N=_*c;for(let P=0;P!==c;++P)o[N+P]=o[C+P]}++_}}if(p>0){n[_]=n[p];for(let y=p*c,b=_*c,M=0;M!==c;++M)o[b+M]=o[y+M];++_}return _!==n.length?(this.times=n.slice(0,_),this.values=o.slice(0,_*c)):(this.times=n,this.values=o),this}clone(){const n=this.times.slice(),o=this.values.slice(),c=this.constructor,h=new c(this.name,n,o);return h.createInterpolant=this.createInterpolant,h}}na.prototype.ValueTypeName="",na.prototype.TimeBufferType=Float32Array,na.prototype.ValueBufferType=Float32Array,na.prototype.DefaultInterpolation=o_;class Pu extends na{constructor(n,o,c){super(n,o,c)}}Pu.prototype.ValueTypeName="bool",Pu.prototype.ValueBufferType=Array,Pu.prototype.DefaultInterpolation=Ep,Pu.prototype.InterpolantFactoryMethodLinear=void 0,Pu.prototype.InterpolantFactoryMethodSmooth=void 0;class ib extends na{constructor(n,o,c,h){super(n,o,c,h)}}ib.prototype.ValueTypeName="color";class im extends na{constructor(n,o,c,h){super(n,o,c,h)}}im.prototype.ValueTypeName="number";class vR extends nm{constructor(n,o,c,h){super(n,o,c,h)}interpolate_(n,o,c,h){const p=this.resultBuffer,_=this.sampleValues,y=this.valueSize,b=(c-o)/(h-o);let M=n*y;for(let R=M+y;M!==R;M+=4)ho.slerpFlat(p,0,_,M-y,_,M,b);return p}}class sm extends na{constructor(n,o,c,h){super(n,o,c,h)}InterpolantFactoryMethodLinear(n){return new vR(this.times,this.values,this.getValueSize(),n)}}sm.prototype.ValueTypeName="quaternion",sm.prototype.InterpolantFactoryMethodSmooth=void 0;class Iu extends na{constructor(n,o,c){super(n,o,c)}}Iu.prototype.ValueTypeName="string",Iu.prototype.ValueBufferType=Array,Iu.prototype.DefaultInterpolation=Ep,Iu.prototype.InterpolantFactoryMethodLinear=void 0,Iu.prototype.InterpolantFactoryMethodSmooth=void 0;class rm extends na{constructor(n,o,c,h){super(n,o,c,h)}}rm.prototype.ValueTypeName="vector";class om{constructor(n="",o=-1,c=[],h=l_){this.name=n,this.tracks=c,this.duration=o,this.blendMode=h,this.uuid=Io(),this.duration<0&&this.resetDuration()}static parse(n){const o=[],c=n.tracks,h=1/(n.fps||1);for(let _=0,y=c.length;_!==y;++_)o.push(Ez(c[_]).scale(h));const p=new this(n.name,n.duration,o,n.blendMode);return p.uuid=n.uuid,p}static toJSON(n){const o=[],c=n.tracks,h={name:n.name,duration:n.duration,tracks:o,uuid:n.uuid,blendMode:n.blendMode};for(let p=0,_=c.length;p!==_;++p)o.push(na.toJSON(c[p]));return h}static CreateFromMorphTargetSequence(n,o,c,h){const p=o.length,_=[];for(let y=0;y<p;y++){let b=[],M=[];b.push((y+p-1)%p,y,(y+1)%p),M.push(0,1,0);const R=_R(b);b=eb(b,1,R),M=eb(M,1,R),!h&&b[0]===0&&(b.push(p),M.push(M[0])),_.push(new im(".morphTargetInfluences["+o[y].name+"]",b,M).scale(1/c))}return new this(n,-1,_)}static findByName(n,o){let c=n;if(!Array.isArray(n)){const h=n;c=h.geometry&&h.geometry.animations||h.animations}for(let h=0;h<c.length;h++)if(c[h].name===o)return c[h];return null}static CreateClipsFromMorphTargetSequences(n,o,c){const h={},p=/^([\w-]*?)([\d]+)$/;for(let y=0,b=n.length;y<b;y++){const M=n[y],R=M.name.match(p);if(R&&R.length>1){const C=R[1];let N=h[C];N||(h[C]=N=[]),N.push(M)}}const _=[];for(const y in h)_.push(this.CreateFromMorphTargetSequence(y,h[y],o,c));return _}static parseAnimation(n,o){if(console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"),!n)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const c=function(C,N,P,L,V){if(P.length!==0){const U=[],I=[];tb(P,U,I,L),U.length!==0&&V.push(new C(N,U,I))}},h=[],p=n.name||"default",_=n.fps||30,y=n.blendMode;let b=n.length||-1;const M=n.hierarchy||[];for(let C=0;C<M.length;C++){const N=M[C].keys;if(!(!N||N.length===0))if(N[0].morphTargets){const P={};let L;for(L=0;L<N.length;L++)if(N[L].morphTargets)for(let V=0;V<N[L].morphTargets.length;V++)P[N[L].morphTargets[V]]=-1;for(const V in P){const U=[],I=[];for(let Z=0;Z!==N[L].morphTargets.length;++Z){const W=N[L];U.push(W.time),I.push(W.morphTarget===V?1:0)}h.push(new im(".morphTargetInfluence["+V+"]",U,I))}b=P.length*_}else{const P=".bones["+o[C].name+"]";c(rm,P+".position",N,"pos",h),c(sm,P+".quaternion",N,"rot",h),c(rm,P+".scale",N,"scl",h)}}return h.length===0?null:new this(p,b,h,y)}resetDuration(){const n=this.tracks;let o=0;for(let c=0,h=n.length;c!==h;++c){const p=this.tracks[c];o=Math.max(o,p.times[p.times.length-1])}return this.duration=o,this}trim(){for(let n=0;n<this.tracks.length;n++)this.tracks[n].trim(0,this.duration);return this}validate(){let n=!0;for(let o=0;o<this.tracks.length;o++)n=n&&this.tracks[o].validate();return n}optimize(){for(let n=0;n<this.tracks.length;n++)this.tracks[n].optimize();return this}clone(){const n=[];for(let o=0;o<this.tracks.length;o++)n.push(this.tracks[o].clone());return new this.constructor(this.name,this.duration,n,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function Az(m){switch(m.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return im;case"vector":case"vector2":case"vector3":case"vector4":return rm;case"color":return ib;case"quaternion":return sm;case"bool":case"boolean":return Pu;case"string":return Iu}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+m)}function Ez(m){if(m.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const n=Az(m.type);if(m.times===void 0){const o=[],c=[];tb(m.keys,o,c,"value"),m.times=o,m.values=c}return n.parse!==void 0?n.parse(m):new n(m.name,m.times,m.values,m.interpolation)}const el={enabled:!1,files:{},add:function(m,n){this.enabled!==!1&&(this.files[m]=n)},get:function(m){if(this.enabled!==!1)return this.files[m]},remove:function(m){delete this.files[m]},clear:function(){this.files={}}};class sb{constructor(n,o,c){const h=this;let p=!1,_=0,y=0,b;const M=[];this.onStart=void 0,this.onLoad=n,this.onProgress=o,this.onError=c,this.abortController=new AbortController,this.itemStart=function(R){y++,p===!1&&h.onStart!==void 0&&h.onStart(R,_,y),p=!0},this.itemEnd=function(R){_++,h.onProgress!==void 0&&h.onProgress(R,_,y),_===y&&(p=!1,h.onLoad!==void 0&&h.onLoad())},this.itemError=function(R){h.onError!==void 0&&h.onError(R)},this.resolveURL=function(R){return b?b(R):R},this.setURLModifier=function(R){return b=R,this},this.addHandler=function(R,C){return M.push(R,C),this},this.removeHandler=function(R){const C=M.indexOf(R);return C!==-1&&M.splice(C,2),this},this.getHandler=function(R){for(let C=0,N=M.length;C<N;C+=2){const P=M[C],L=M[C+1];if(P.global&&(P.lastIndex=0),P.test(R))return L}return null},this.abort=function(){return this.abortController.abort(),this.abortController=new AbortController,this}}}const SR=new sb;class go{constructor(n){this.manager=n!==void 0?n:SR,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(n,o){const c=this;return new Promise(function(h,p){c.load(n,h,o,p)})}parse(){}setCrossOrigin(n){return this.crossOrigin=n,this}setWithCredentials(n){return this.withCredentials=n,this}setPath(n){return this.path=n,this}setResourcePath(n){return this.resourcePath=n,this}setRequestHeader(n){return this.requestHeader=n,this}abort(){return this}}go.DEFAULT_MATERIAL_NAME="__DEFAULT";const Ll={};class Rz extends Error{constructor(n,o){super(n),this.response=o}}class Dl extends go{constructor(n){super(n),this.mimeType="",this.responseType="",this._abortController=new AbortController}load(n,o,c,h){n===void 0&&(n=""),this.path!==void 0&&(n=this.path+n),n=this.manager.resolveURL(n);const p=el.get(`file:${n}`);if(p!==void 0)return this.manager.itemStart(n),setTimeout(()=>{o&&o(p),this.manager.itemEnd(n)},0),p;if(Ll[n]!==void 0){Ll[n].push({onLoad:o,onProgress:c,onError:h});return}Ll[n]=[],Ll[n].push({onLoad:o,onProgress:c,onError:h});const _=new Request(n,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin",signal:typeof AbortSignal.any=="function"?AbortSignal.any([this._abortController.signal,this.manager.abortController.signal]):this._abortController.signal}),y=this.mimeType,b=this.responseType;fetch(_).then(M=>{if(M.status===200||M.status===0){if(M.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||M.body===void 0||M.body.getReader===void 0)return M;const R=Ll[n],C=M.body.getReader(),N=M.headers.get("X-File-Size")||M.headers.get("Content-Length"),P=N?parseInt(N):0,L=P!==0;let V=0;const U=new ReadableStream({start(I){Z();function Z(){C.read().then(({done:W,value:G})=>{if(W)I.close();else{V+=G.byteLength;const ae=new ProgressEvent("progress",{lengthComputable:L,loaded:V,total:P});for(let le=0,he=R.length;le<he;le++){const me=R[le];me.onProgress&&me.onProgress(ae)}I.enqueue(G),Z()}},W=>{I.error(W)})}}});return new Response(U)}else throw new Rz(`fetch for "${M.url}" responded with ${M.status}: ${M.statusText}`,M)}).then(M=>{switch(b){case"arraybuffer":return M.arrayBuffer();case"blob":return M.blob();case"document":return M.text().then(R=>new DOMParser().parseFromString(R,y));case"json":return M.json();default:if(y==="")return M.text();{const C=/charset="?([^;"\s]*)"?/i.exec(y),N=C&&C[1]?C[1].toLowerCase():void 0,P=new TextDecoder(N);return M.arrayBuffer().then(L=>P.decode(L))}}}).then(M=>{el.add(`file:${n}`,M);const R=Ll[n];delete Ll[n];for(let C=0,N=R.length;C<N;C++){const P=R[C];P.onLoad&&P.onLoad(M)}}).catch(M=>{const R=Ll[n];if(R===void 0)throw this.manager.itemError(n),M;delete Ll[n];for(let C=0,N=R.length;C<N;C++){const P=R[C];P.onError&&P.onError(M)}this.manager.itemError(n)}).finally(()=>{this.manager.itemEnd(n)}),this.manager.itemStart(n)}setResponseType(n){return this.responseType=n,this}setMimeType(n){return this.mimeType=n,this}abort(){return this._abortController.abort(),this._abortController=new AbortController,this}}class Cz extends go{constructor(n){super(n)}load(n,o,c,h){const p=this,_=new Dl(this.manager);_.setPath(this.path),_.setRequestHeader(this.requestHeader),_.setWithCredentials(this.withCredentials),_.load(n,function(y){try{o(p.parse(JSON.parse(y)))}catch(b){h?h(b):console.error(b),p.manager.itemError(n)}},c,h)}parse(n){const o=[];for(let c=0;c<n.length;c++){const h=om.parse(n[c]);o.push(h)}return o}}class Nz extends go{constructor(n){super(n)}load(n,o,c,h){const p=this,_=[],y=new K_,b=new Dl(this.manager);b.setPath(this.path),b.setResponseType("arraybuffer"),b.setRequestHeader(this.requestHeader),b.setWithCredentials(p.withCredentials);let M=0;function R(C){b.load(n[C],function(N){const P=p.parse(N,!0);_[C]={width:P.width,height:P.height,format:P.format,mipmaps:P.mipmaps},M+=1,M===6&&(P.mipmapCount===1&&(y.minFilter=ge),y.image=_,y.format=P.format,y.needsUpdate=!0,o&&o(y))},c,h)}if(Array.isArray(n))for(let C=0,N=n.length;C<N;++C)R(C);else b.load(n,function(C){const N=p.parse(C,!0);if(N.isCubemap){const P=N.mipmaps.length/N.mipmapCount;for(let L=0;L<P;L++){_[L]={mipmaps:[]};for(let V=0;V<N.mipmapCount;V++)_[L].mipmaps.push(N.mipmaps[L*N.mipmapCount+V]),_[L].format=N.format,_[L].width=N.width,_[L].height=N.height}y.image=_}else y.image.width=N.width,y.image.height=N.height,y.mipmaps=N.mipmaps;N.mipmapCount===1&&(y.minFilter=ge),y.format=N.format,y.needsUpdate=!0,o&&o(y)},c,h);return y}}const Wd=new WeakMap;class am extends go{constructor(n){super(n)}load(n,o,c,h){this.path!==void 0&&(n=this.path+n),n=this.manager.resolveURL(n);const p=this,_=el.get(`image:${n}`);if(_!==void 0){if(_.complete===!0)p.manager.itemStart(n),setTimeout(function(){o&&o(_),p.manager.itemEnd(n)},0);else{let C=Wd.get(_);C===void 0&&(C=[],Wd.set(_,C)),C.push({onLoad:o,onError:h})}return _}const y=Ip("img");function b(){R(),o&&o(this);const C=Wd.get(this)||[];for(let N=0;N<C.length;N++){const P=C[N];P.onLoad&&P.onLoad(this)}Wd.delete(this),p.manager.itemEnd(n)}function M(C){R(),h&&h(C),el.remove(`image:${n}`);const N=Wd.get(this)||[];for(let P=0;P<N.length;P++){const L=N[P];L.onError&&L.onError(C)}Wd.delete(this),p.manager.itemError(n),p.manager.itemEnd(n)}function R(){y.removeEventListener("load",b,!1),y.removeEventListener("error",M,!1)}return y.addEventListener("load",b,!1),y.addEventListener("error",M,!1),n.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(y.crossOrigin=this.crossOrigin),el.add(`image:${n}`,y),p.manager.itemStart(n),y.src=n,y}}class Pz extends go{constructor(n){super(n)}load(n,o,c,h){const p=new Op;p.colorSpace=uo;const _=new am(this.manager);_.setCrossOrigin(this.crossOrigin),_.setPath(this.path);let y=0;function b(M){_.load(n[M],function(R){p.images[M]=R,y++,y===6&&(p.needsUpdate=!0,o&&o(p))},void 0,h)}for(let M=0;M<n.length;++M)b(M);return p}}class Iz extends go{constructor(n){super(n)}load(n,o,c,h){const p=this,_=new Ka,y=new Dl(this.manager);return y.setResponseType("arraybuffer"),y.setRequestHeader(this.requestHeader),y.setPath(this.path),y.setWithCredentials(p.withCredentials),y.load(n,function(b){let M;try{M=p.parse(b)}catch(R){if(h!==void 0)h(R);else{console.error(R);return}}M.image!==void 0?_.image=M.image:M.data!==void 0&&(_.image.width=M.width,_.image.height=M.height,_.image.data=M.data),_.wrapS=M.wrapS!==void 0?M.wrapS:It,_.wrapT=M.wrapT!==void 0?M.wrapT:It,_.magFilter=M.magFilter!==void 0?M.magFilter:ge,_.minFilter=M.minFilter!==void 0?M.minFilter:ge,_.anisotropy=M.anisotropy!==void 0?M.anisotropy:1,M.colorSpace!==void 0&&(_.colorSpace=M.colorSpace),M.flipY!==void 0&&(_.flipY=M.flipY),M.format!==void 0&&(_.format=M.format),M.type!==void 0&&(_.type=M.type),M.mipmaps!==void 0&&(_.mipmaps=M.mipmaps,_.minFilter=Qt),M.mipmapCount===1&&(_.minFilter=ge),M.generateMipmaps!==void 0&&(_.generateMipmaps=M.generateMipmaps),_.needsUpdate=!0,o&&o(_,M)},c,h),_}}class Lz extends go{constructor(n){super(n)}load(n,o,c,h){const p=new Ps,_=new am(this.manager);return _.setCrossOrigin(this.crossOrigin),_.setPath(this.path),_.load(n,function(y){p.image=y,p.needsUpdate=!0,o!==void 0&&o(p)},c,h),p}}class Ac extends Bi{constructor(n,o=1){super(),this.isLight=!0,this.type="Light",this.color=new mn(n),this.intensity=o}dispose(){}copy(n,o){return super.copy(n,o),this.color.copy(n.color),this.intensity=n.intensity,this}toJSON(n){const o=super.toJSON(n);return o.object.color=this.color.getHex(),o.object.intensity=this.intensity,this.groundColor!==void 0&&(o.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(o.object.distance=this.distance),this.angle!==void 0&&(o.object.angle=this.angle),this.decay!==void 0&&(o.object.decay=this.decay),this.penumbra!==void 0&&(o.object.penumbra=this.penumbra),this.shadow!==void 0&&(o.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(o.object.target=this.target.uuid),o}}class bR extends Ac{constructor(n,o,c){super(n,c),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(Bi.DEFAULT_UP),this.updateMatrix(),this.groundColor=new mn(o)}copy(n,o){return super.copy(n,o),this.groundColor.copy(n.groundColor),this}}const rb=new Qn,TR=new ce,MR=new ce;class ob{constructor(n){this.camera=n,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new vt(512,512),this.mapType=ut,this.map=null,this.mapPass=null,this.matrix=new Qn,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new kd,this._frameExtents=new vt(1,1),this._viewportCount=1,this._viewports=[new Fi(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(n){const o=this.camera,c=this.matrix;TR.setFromMatrixPosition(n.matrixWorld),o.position.copy(TR),MR.setFromMatrixPosition(n.target.matrixWorld),o.lookAt(MR),o.updateMatrixWorld(),rb.multiplyMatrices(o.projectionMatrix,o.matrixWorldInverse),this._frustum.setFromProjectionMatrix(rb,o.coordinateSystem,o.reversedDepth),o.reversedDepth?c.set(.5,0,0,.5,0,.5,0,.5,0,0,1,0,0,0,0,1):c.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),c.multiply(rb)}getViewport(n){return this._viewports[n]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(n){return this.camera=n.camera.clone(),this.intensity=n.intensity,this.bias=n.bias,this.radius=n.radius,this.autoUpdate=n.autoUpdate,this.needsUpdate=n.needsUpdate,this.normalBias=n.normalBias,this.blurSamples=n.blurSamples,this.mapSize.copy(n.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const n={};return this.intensity!==1&&(n.intensity=this.intensity),this.bias!==0&&(n.bias=this.bias),this.normalBias!==0&&(n.normalBias=this.normalBias),this.radius!==1&&(n.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(n.mapSize=this.mapSize.toArray()),n.camera=this.camera.toJSON(!1).object,delete n.camera.matrix,n}}class Dz extends ob{constructor(){super(new wr(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1,this.aspect=1}updateMatrices(n){const o=this.camera,c=gd*2*n.angle*this.focus,h=this.mapSize.width/this.mapSize.height*this.aspect,p=n.distance||o.far;(c!==o.fov||h!==o.aspect||p!==o.far)&&(o.fov=c,o.aspect=h,o.far=p,o.updateProjectionMatrix()),super.updateMatrices(n)}copy(n){return super.copy(n),this.focus=n.focus,this}}class wR extends Ac{constructor(n,o,c=0,h=Math.PI/3,p=0,_=2){super(n,o),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Bi.DEFAULT_UP),this.updateMatrix(),this.target=new Bi,this.distance=c,this.angle=h,this.penumbra=p,this.decay=_,this.map=null,this.shadow=new Dz}get power(){return this.intensity*Math.PI}set power(n){this.intensity=n/Math.PI}dispose(){this.shadow.dispose()}copy(n,o){return super.copy(n,o),this.distance=n.distance,this.angle=n.angle,this.penumbra=n.penumbra,this.decay=n.decay,this.target=n.target.clone(),this.shadow=n.shadow.clone(),this}}const AR=new Qn,lm=new ce,ab=new ce;class Uz extends ob{constructor(){super(new wr(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new vt(4,2),this._viewportCount=6,this._viewports=[new Fi(2,1,1,1),new Fi(0,1,1,1),new Fi(3,1,1,1),new Fi(1,1,1,1),new Fi(3,0,1,1),new Fi(1,0,1,1)],this._cubeDirections=[new ce(1,0,0),new ce(-1,0,0),new ce(0,0,1),new ce(0,0,-1),new ce(0,1,0),new ce(0,-1,0)],this._cubeUps=[new ce(0,1,0),new ce(0,1,0),new ce(0,1,0),new ce(0,1,0),new ce(0,0,1),new ce(0,0,-1)]}updateMatrices(n,o=0){const c=this.camera,h=this.matrix,p=n.distance||c.far;p!==c.far&&(c.far=p,c.updateProjectionMatrix()),lm.setFromMatrixPosition(n.matrixWorld),c.position.copy(lm),ab.copy(c.position),ab.add(this._cubeDirections[o]),c.up.copy(this._cubeUps[o]),c.lookAt(ab),c.updateMatrixWorld(),h.makeTranslation(-lm.x,-lm.y,-lm.z),AR.multiplyMatrices(c.projectionMatrix,c.matrixWorldInverse),this._frustum.setFromProjectionMatrix(AR,c.coordinateSystem,c.reversedDepth)}}class ER extends Ac{constructor(n,o,c=0,h=2){super(n,o),this.isPointLight=!0,this.type="PointLight",this.distance=c,this.decay=h,this.shadow=new Uz}get power(){return this.intensity*4*Math.PI}set power(n){this.intensity=n/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(n,o){return super.copy(n,o),this.distance=n.distance,this.decay=n.decay,this.shadow=n.shadow.clone(),this}}class xx extends R_{constructor(n=-1,o=1,c=1,h=-1,p=.1,_=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=n,this.right=o,this.top=c,this.bottom=h,this.near=p,this.far=_,this.updateProjectionMatrix()}copy(n,o){return super.copy(n,o),this.left=n.left,this.right=n.right,this.top=n.top,this.bottom=n.bottom,this.near=n.near,this.far=n.far,this.zoom=n.zoom,this.view=n.view===null?null:Object.assign({},n.view),this}setViewOffset(n,o,c,h,p,_){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=n,this.view.fullHeight=o,this.view.offsetX=c,this.view.offsetY=h,this.view.width=p,this.view.height=_,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const n=(this.right-this.left)/(2*this.zoom),o=(this.top-this.bottom)/(2*this.zoom),c=(this.right+this.left)/2,h=(this.top+this.bottom)/2;let p=c-n,_=c+n,y=h+o,b=h-o;if(this.view!==null&&this.view.enabled){const M=(this.right-this.left)/this.view.fullWidth/this.zoom,R=(this.top-this.bottom)/this.view.fullHeight/this.zoom;p+=M*this.view.offsetX,_=p+M*this.view.width,y-=R*this.view.offsetY,b=y-R*this.view.height}this.projectionMatrix.makeOrthographic(p,_,y,b,this.near,this.far,this.coordinateSystem,this.reversedDepth),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(n){const o=super.toJSON(n);return o.object.zoom=this.zoom,o.object.left=this.left,o.object.right=this.right,o.object.top=this.top,o.object.bottom=this.bottom,o.object.near=this.near,o.object.far=this.far,this.view!==null&&(o.object.view=Object.assign({},this.view)),o}}class Fz extends ob{constructor(){super(new xx(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class RR extends Ac{constructor(n,o){super(n,o),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Bi.DEFAULT_UP),this.updateMatrix(),this.target=new Bi,this.shadow=new Fz}dispose(){this.shadow.dispose()}copy(n){return super.copy(n),this.target=n.target.clone(),this.shadow=n.shadow.clone(),this}}class CR extends Ac{constructor(n,o){super(n,o),this.isAmbientLight=!0,this.type="AmbientLight"}}class NR extends Ac{constructor(n,o,c=10,h=10){super(n,o),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=c,this.height=h}get power(){return this.intensity*this.width*this.height*Math.PI}set power(n){this.intensity=n/(this.width*this.height*Math.PI)}copy(n){return super.copy(n),this.width=n.width,this.height=n.height,this}toJSON(n){const o=super.toJSON(n);return o.object.width=this.width,o.object.height=this.height,o}}class PR{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let n=0;n<9;n++)this.coefficients.push(new ce)}set(n){for(let o=0;o<9;o++)this.coefficients[o].copy(n[o]);return this}zero(){for(let n=0;n<9;n++)this.coefficients[n].set(0,0,0);return this}getAt(n,o){const c=n.x,h=n.y,p=n.z,_=this.coefficients;return o.copy(_[0]).multiplyScalar(.282095),o.addScaledVector(_[1],.488603*h),o.addScaledVector(_[2],.488603*p),o.addScaledVector(_[3],.488603*c),o.addScaledVector(_[4],1.092548*(c*h)),o.addScaledVector(_[5],1.092548*(h*p)),o.addScaledVector(_[6],.315392*(3*p*p-1)),o.addScaledVector(_[7],1.092548*(c*p)),o.addScaledVector(_[8],.546274*(c*c-h*h)),o}getIrradianceAt(n,o){const c=n.x,h=n.y,p=n.z,_=this.coefficients;return o.copy(_[0]).multiplyScalar(.886227),o.addScaledVector(_[1],2*.511664*h),o.addScaledVector(_[2],2*.511664*p),o.addScaledVector(_[3],2*.511664*c),o.addScaledVector(_[4],2*.429043*c*h),o.addScaledVector(_[5],2*.429043*h*p),o.addScaledVector(_[6],.743125*p*p-.247708),o.addScaledVector(_[7],2*.429043*c*p),o.addScaledVector(_[8],.429043*(c*c-h*h)),o}add(n){for(let o=0;o<9;o++)this.coefficients[o].add(n.coefficients[o]);return this}addScaledSH(n,o){for(let c=0;c<9;c++)this.coefficients[c].addScaledVector(n.coefficients[c],o);return this}scale(n){for(let o=0;o<9;o++)this.coefficients[o].multiplyScalar(n);return this}lerp(n,o){for(let c=0;c<9;c++)this.coefficients[c].lerp(n.coefficients[c],o);return this}equals(n){for(let o=0;o<9;o++)if(!this.coefficients[o].equals(n.coefficients[o]))return!1;return!0}copy(n){return this.set(n.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(n,o=0){const c=this.coefficients;for(let h=0;h<9;h++)c[h].fromArray(n,o+h*3);return this}toArray(n=[],o=0){const c=this.coefficients;for(let h=0;h<9;h++)c[h].toArray(n,o+h*3);return n}static getBasisAt(n,o){const c=n.x,h=n.y,p=n.z;o[0]=.282095,o[1]=.488603*h,o[2]=.488603*p,o[3]=.488603*c,o[4]=1.092548*c*h,o[5]=1.092548*h*p,o[6]=.315392*(3*p*p-1),o[7]=1.092548*c*p,o[8]=.546274*(c*c-h*h)}}class IR extends Ac{constructor(n=new PR,o=1){super(void 0,o),this.isLightProbe=!0,this.sh=n}copy(n){return super.copy(n),this.sh.copy(n.sh),this}fromJSON(n){return this.intensity=n.intensity,this.sh.fromArray(n.sh),this}toJSON(n){const o=super.toJSON(n);return o.object.sh=this.sh.toArray(),o}}class yx extends go{constructor(n){super(n),this.textures={}}load(n,o,c,h){const p=this,_=new Dl(p.manager);_.setPath(p.path),_.setRequestHeader(p.requestHeader),_.setWithCredentials(p.withCredentials),_.load(n,function(y){try{o(p.parse(JSON.parse(y)))}catch(b){h?h(b):console.error(b),p.manager.itemError(n)}},c,h)}parse(n){const o=this.textures;function c(p){return o[p]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",p),o[p]}const h=this.createMaterialFromType(n.type);if(n.uuid!==void 0&&(h.uuid=n.uuid),n.name!==void 0&&(h.name=n.name),n.color!==void 0&&h.color!==void 0&&h.color.setHex(n.color),n.roughness!==void 0&&(h.roughness=n.roughness),n.metalness!==void 0&&(h.metalness=n.metalness),n.sheen!==void 0&&(h.sheen=n.sheen),n.sheenColor!==void 0&&(h.sheenColor=new mn().setHex(n.sheenColor)),n.sheenRoughness!==void 0&&(h.sheenRoughness=n.sheenRoughness),n.emissive!==void 0&&h.emissive!==void 0&&h.emissive.setHex(n.emissive),n.specular!==void 0&&h.specular!==void 0&&h.specular.setHex(n.specular),n.specularIntensity!==void 0&&(h.specularIntensity=n.specularIntensity),n.specularColor!==void 0&&h.specularColor!==void 0&&h.specularColor.setHex(n.specularColor),n.shininess!==void 0&&(h.shininess=n.shininess),n.clearcoat!==void 0&&(h.clearcoat=n.clearcoat),n.clearcoatRoughness!==void 0&&(h.clearcoatRoughness=n.clearcoatRoughness),n.dispersion!==void 0&&(h.dispersion=n.dispersion),n.iridescence!==void 0&&(h.iridescence=n.iridescence),n.iridescenceIOR!==void 0&&(h.iridescenceIOR=n.iridescenceIOR),n.iridescenceThicknessRange!==void 0&&(h.iridescenceThicknessRange=n.iridescenceThicknessRange),n.transmission!==void 0&&(h.transmission=n.transmission),n.thickness!==void 0&&(h.thickness=n.thickness),n.attenuationDistance!==void 0&&(h.attenuationDistance=n.attenuationDistance),n.attenuationColor!==void 0&&h.attenuationColor!==void 0&&h.attenuationColor.setHex(n.attenuationColor),n.anisotropy!==void 0&&(h.anisotropy=n.anisotropy),n.anisotropyRotation!==void 0&&(h.anisotropyRotation=n.anisotropyRotation),n.fog!==void 0&&(h.fog=n.fog),n.flatShading!==void 0&&(h.flatShading=n.flatShading),n.blending!==void 0&&(h.blending=n.blending),n.combine!==void 0&&(h.combine=n.combine),n.side!==void 0&&(h.side=n.side),n.shadowSide!==void 0&&(h.shadowSide=n.shadowSide),n.opacity!==void 0&&(h.opacity=n.opacity),n.transparent!==void 0&&(h.transparent=n.transparent),n.alphaTest!==void 0&&(h.alphaTest=n.alphaTest),n.alphaHash!==void 0&&(h.alphaHash=n.alphaHash),n.depthFunc!==void 0&&(h.depthFunc=n.depthFunc),n.depthTest!==void 0&&(h.depthTest=n.depthTest),n.depthWrite!==void 0&&(h.depthWrite=n.depthWrite),n.colorWrite!==void 0&&(h.colorWrite=n.colorWrite),n.blendSrc!==void 0&&(h.blendSrc=n.blendSrc),n.blendDst!==void 0&&(h.blendDst=n.blendDst),n.blendEquation!==void 0&&(h.blendEquation=n.blendEquation),n.blendSrcAlpha!==void 0&&(h.blendSrcAlpha=n.blendSrcAlpha),n.blendDstAlpha!==void 0&&(h.blendDstAlpha=n.blendDstAlpha),n.blendEquationAlpha!==void 0&&(h.blendEquationAlpha=n.blendEquationAlpha),n.blendColor!==void 0&&h.blendColor!==void 0&&h.blendColor.setHex(n.blendColor),n.blendAlpha!==void 0&&(h.blendAlpha=n.blendAlpha),n.stencilWriteMask!==void 0&&(h.stencilWriteMask=n.stencilWriteMask),n.stencilFunc!==void 0&&(h.stencilFunc=n.stencilFunc),n.stencilRef!==void 0&&(h.stencilRef=n.stencilRef),n.stencilFuncMask!==void 0&&(h.stencilFuncMask=n.stencilFuncMask),n.stencilFail!==void 0&&(h.stencilFail=n.stencilFail),n.stencilZFail!==void 0&&(h.stencilZFail=n.stencilZFail),n.stencilZPass!==void 0&&(h.stencilZPass=n.stencilZPass),n.stencilWrite!==void 0&&(h.stencilWrite=n.stencilWrite),n.wireframe!==void 0&&(h.wireframe=n.wireframe),n.wireframeLinewidth!==void 0&&(h.wireframeLinewidth=n.wireframeLinewidth),n.wireframeLinecap!==void 0&&(h.wireframeLinecap=n.wireframeLinecap),n.wireframeLinejoin!==void 0&&(h.wireframeLinejoin=n.wireframeLinejoin),n.rotation!==void 0&&(h.rotation=n.rotation),n.linewidth!==void 0&&(h.linewidth=n.linewidth),n.dashSize!==void 0&&(h.dashSize=n.dashSize),n.gapSize!==void 0&&(h.gapSize=n.gapSize),n.scale!==void 0&&(h.scale=n.scale),n.polygonOffset!==void 0&&(h.polygonOffset=n.polygonOffset),n.polygonOffsetFactor!==void 0&&(h.polygonOffsetFactor=n.polygonOffsetFactor),n.polygonOffsetUnits!==void 0&&(h.polygonOffsetUnits=n.polygonOffsetUnits),n.dithering!==void 0&&(h.dithering=n.dithering),n.alphaToCoverage!==void 0&&(h.alphaToCoverage=n.alphaToCoverage),n.premultipliedAlpha!==void 0&&(h.premultipliedAlpha=n.premultipliedAlpha),n.forceSinglePass!==void 0&&(h.forceSinglePass=n.forceSinglePass),n.visible!==void 0&&(h.visible=n.visible),n.toneMapped!==void 0&&(h.toneMapped=n.toneMapped),n.userData!==void 0&&(h.userData=n.userData),n.vertexColors!==void 0&&(typeof n.vertexColors=="number"?h.vertexColors=n.vertexColors>0:h.vertexColors=n.vertexColors),n.uniforms!==void 0)for(const p in n.uniforms){const _=n.uniforms[p];switch(h.uniforms[p]={},_.type){case"t":h.uniforms[p].value=c(_.value);break;case"c":h.uniforms[p].value=new mn().setHex(_.value);break;case"v2":h.uniforms[p].value=new vt().fromArray(_.value);break;case"v3":h.uniforms[p].value=new ce().fromArray(_.value);break;case"v4":h.uniforms[p].value=new Fi().fromArray(_.value);break;case"m3":h.uniforms[p].value=new ci().fromArray(_.value);break;case"m4":h.uniforms[p].value=new Qn().fromArray(_.value);break;default:h.uniforms[p].value=_.value}}if(n.defines!==void 0&&(h.defines=n.defines),n.vertexShader!==void 0&&(h.vertexShader=n.vertexShader),n.fragmentShader!==void 0&&(h.fragmentShader=n.fragmentShader),n.glslVersion!==void 0&&(h.glslVersion=n.glslVersion),n.extensions!==void 0)for(const p in n.extensions)h.extensions[p]=n.extensions[p];if(n.lights!==void 0&&(h.lights=n.lights),n.clipping!==void 0&&(h.clipping=n.clipping),n.size!==void 0&&(h.size=n.size),n.sizeAttenuation!==void 0&&(h.sizeAttenuation=n.sizeAttenuation),n.map!==void 0&&(h.map=c(n.map)),n.matcap!==void 0&&(h.matcap=c(n.matcap)),n.alphaMap!==void 0&&(h.alphaMap=c(n.alphaMap)),n.bumpMap!==void 0&&(h.bumpMap=c(n.bumpMap)),n.bumpScale!==void 0&&(h.bumpScale=n.bumpScale),n.normalMap!==void 0&&(h.normalMap=c(n.normalMap)),n.normalMapType!==void 0&&(h.normalMapType=n.normalMapType),n.normalScale!==void 0){let p=n.normalScale;Array.isArray(p)===!1&&(p=[p,p]),h.normalScale=new vt().fromArray(p)}return n.displacementMap!==void 0&&(h.displacementMap=c(n.displacementMap)),n.displacementScale!==void 0&&(h.displacementScale=n.displacementScale),n.displacementBias!==void 0&&(h.displacementBias=n.displacementBias),n.roughnessMap!==void 0&&(h.roughnessMap=c(n.roughnessMap)),n.metalnessMap!==void 0&&(h.metalnessMap=c(n.metalnessMap)),n.emissiveMap!==void 0&&(h.emissiveMap=c(n.emissiveMap)),n.emissiveIntensity!==void 0&&(h.emissiveIntensity=n.emissiveIntensity),n.specularMap!==void 0&&(h.specularMap=c(n.specularMap)),n.specularIntensityMap!==void 0&&(h.specularIntensityMap=c(n.specularIntensityMap)),n.specularColorMap!==void 0&&(h.specularColorMap=c(n.specularColorMap)),n.envMap!==void 0&&(h.envMap=c(n.envMap)),n.envMapRotation!==void 0&&h.envMapRotation.fromArray(n.envMapRotation),n.envMapIntensity!==void 0&&(h.envMapIntensity=n.envMapIntensity),n.reflectivity!==void 0&&(h.reflectivity=n.reflectivity),n.refractionRatio!==void 0&&(h.refractionRatio=n.refractionRatio),n.lightMap!==void 0&&(h.lightMap=c(n.lightMap)),n.lightMapIntensity!==void 0&&(h.lightMapIntensity=n.lightMapIntensity),n.aoMap!==void 0&&(h.aoMap=c(n.aoMap)),n.aoMapIntensity!==void 0&&(h.aoMapIntensity=n.aoMapIntensity),n.gradientMap!==void 0&&(h.gradientMap=c(n.gradientMap)),n.clearcoatMap!==void 0&&(h.clearcoatMap=c(n.clearcoatMap)),n.clearcoatRoughnessMap!==void 0&&(h.clearcoatRoughnessMap=c(n.clearcoatRoughnessMap)),n.clearcoatNormalMap!==void 0&&(h.clearcoatNormalMap=c(n.clearcoatNormalMap)),n.clearcoatNormalScale!==void 0&&(h.clearcoatNormalScale=new vt().fromArray(n.clearcoatNormalScale)),n.iridescenceMap!==void 0&&(h.iridescenceMap=c(n.iridescenceMap)),n.iridescenceThicknessMap!==void 0&&(h.iridescenceThicknessMap=c(n.iridescenceThicknessMap)),n.transmissionMap!==void 0&&(h.transmissionMap=c(n.transmissionMap)),n.thicknessMap!==void 0&&(h.thicknessMap=c(n.thicknessMap)),n.anisotropyMap!==void 0&&(h.anisotropyMap=c(n.anisotropyMap)),n.sheenColorMap!==void 0&&(h.sheenColorMap=c(n.sheenColorMap)),n.sheenRoughnessMap!==void 0&&(h.sheenRoughnessMap=c(n.sheenRoughnessMap)),h}setTextures(n){return this.textures=n,this}createMaterialFromType(n){return yx.createMaterialFromType(n)}static createMaterialFromType(n){const o={ShadowMaterial:aR,SpriteMaterial:ES,RawShaderMaterial:lR,ShaderMaterial:Ea,PointsMaterial:FS,MeshPhysicalMaterial:cR,MeshStandardMaterial:JS,MeshPhongMaterial:uR,MeshToonMaterial:hR,MeshNormalMaterial:dR,MeshLambertMaterial:fR,MeshDepthMaterial:jS,MeshDistanceMaterial:QS,MeshBasicMaterial:Sc,MeshMatcapMaterial:pR,LineDashedMaterial:mR,LineBasicMaterial:Kr,Material:Ur};return new o[n]}}class lb{static extractUrlBase(n){const o=n.lastIndexOf("/");return o===-1?"./":n.slice(0,o+1)}static resolveURL(n,o){return typeof n!="string"||n===""?"":(/^https?:\/\//i.test(o)&&/^\//.test(n)&&(o=o.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(n)||/^data:.*,.*$/i.test(n)||/^blob:.*$/i.test(n)?n:o+n)}}class LR extends pi{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(n){return super.copy(n),this.instanceCount=n.instanceCount,this}toJSON(){const n=super.toJSON();return n.instanceCount=this.instanceCount,n.isInstancedBufferGeometry=!0,n}}class DR extends go{constructor(n){super(n)}load(n,o,c,h){const p=this,_=new Dl(p.manager);_.setPath(p.path),_.setRequestHeader(p.requestHeader),_.setWithCredentials(p.withCredentials),_.load(n,function(y){try{o(p.parse(JSON.parse(y)))}catch(b){h?h(b):console.error(b),p.manager.itemError(n)}},c,h)}parse(n){const o={},c={};function h(P,L){if(o[L]!==void 0)return o[L];const U=P.interleavedBuffers[L],I=p(P,U.buffer),Z=_d(U.type,I),W=new I_(Z,U.stride);return W.uuid=U.uuid,o[L]=W,W}function p(P,L){if(c[L]!==void 0)return c[L];const U=P.arrayBuffers[L],I=new Uint32Array(U).buffer;return c[L]=I,I}const _=n.isInstancedBufferGeometry?new LR:new pi,y=n.data.index;if(y!==void 0){const P=_d(y.type,y.array);_.setIndex(new cs(P,1))}const b=n.data.attributes;for(const P in b){const L=b[P];let V;if(L.isInterleavedBufferAttribute){const U=h(n.data,L.data);V=new Mu(U,L.itemSize,L.offset,L.normalized)}else{const U=_d(L.type,L.array),I=L.isInstancedBufferAttribute?Vd:cs;V=new I(U,L.itemSize,L.normalized)}L.name!==void 0&&(V.name=L.name),L.usage!==void 0&&V.setUsage(L.usage),_.setAttribute(P,V)}const M=n.data.morphAttributes;if(M)for(const P in M){const L=M[P],V=[];for(let U=0,I=L.length;U<I;U++){const Z=L[U];let W;if(Z.isInterleavedBufferAttribute){const G=h(n.data,Z.data);W=new Mu(G,Z.itemSize,Z.offset,Z.normalized)}else{const G=_d(Z.type,Z.array);W=new cs(G,Z.itemSize,Z.normalized)}Z.name!==void 0&&(W.name=Z.name),V.push(W)}_.morphAttributes[P]=V}n.data.morphTargetsRelative&&(_.morphTargetsRelative=!0);const C=n.data.groups||n.data.drawcalls||n.data.offsets;if(C!==void 0)for(let P=0,L=C.length;P!==L;++P){const V=C[P];_.addGroup(V.start,V.count,V.materialIndex)}const N=n.data.boundingSphere;return N!==void 0&&(_.boundingSphere=new Mr().fromJSON(N)),n.name&&(_.name=n.name),n.userData&&(_.userData=n.userData),_}}class Bz extends go{constructor(n){super(n)}load(n,o,c,h){const p=this,_=this.path===""?lb.extractUrlBase(n):this.path;this.resourcePath=this.resourcePath||_;const y=new Dl(this.manager);y.setPath(this.path),y.setRequestHeader(this.requestHeader),y.setWithCredentials(this.withCredentials),y.load(n,function(b){let M=null;try{M=JSON.parse(b)}catch(C){h!==void 0&&h(C),console.error("THREE:ObjectLoader: Can't parse "+n+".",C.message);return}const R=M.metadata;if(R===void 0||R.type===void 0||R.type.toLowerCase()==="geometry"){h!==void 0&&h(new Error("THREE.ObjectLoader: Can't load "+n)),console.error("THREE.ObjectLoader: Can't load "+n);return}p.parse(M,o)},c,h)}async loadAsync(n,o){const c=this,h=this.path===""?lb.extractUrlBase(n):this.path;this.resourcePath=this.resourcePath||h;const p=new Dl(this.manager);p.setPath(this.path),p.setRequestHeader(this.requestHeader),p.setWithCredentials(this.withCredentials);const _=await p.loadAsync(n,o),y=JSON.parse(_),b=y.metadata;if(b===void 0||b.type===void 0||b.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+n);return await c.parseAsync(y)}parse(n,o){const c=this.parseAnimations(n.animations),h=this.parseShapes(n.shapes),p=this.parseGeometries(n.geometries,h),_=this.parseImages(n.images,function(){o!==void 0&&o(M)}),y=this.parseTextures(n.textures,_),b=this.parseMaterials(n.materials,y),M=this.parseObject(n.object,p,b,y,c),R=this.parseSkeletons(n.skeletons,M);if(this.bindSkeletons(M,R),this.bindLightTargets(M),o!==void 0){let C=!1;for(const N in _)if(_[N].data instanceof HTMLImageElement){C=!0;break}C===!1&&o(M)}return M}async parseAsync(n){const o=this.parseAnimations(n.animations),c=this.parseShapes(n.shapes),h=this.parseGeometries(n.geometries,c),p=await this.parseImagesAsync(n.images),_=this.parseTextures(n.textures,p),y=this.parseMaterials(n.materials,_),b=this.parseObject(n.object,h,y,_,o),M=this.parseSkeletons(n.skeletons,b);return this.bindSkeletons(b,M),this.bindLightTargets(b),b}parseShapes(n){const o={};if(n!==void 0)for(let c=0,h=n.length;c<h;c++){const p=new Ru().fromJSON(n[c]);o[p.uuid]=p}return o}parseSkeletons(n,o){const c={},h={};if(o.traverse(function(p){p.isBone&&(h[p.uuid]=p)}),n!==void 0)for(let p=0,_=n.length;p<_;p++){const y=new O_().fromJSON(n[p],h);c[y.uuid]=y}return c}parseGeometries(n,o){const c={};if(n!==void 0){const h=new DR;for(let p=0,_=n.length;p<_;p++){let y;const b=n[p];switch(b.type){case"BufferGeometry":case"InstancedBufferGeometry":y=h.parse(b);break;default:b.type in oR?y=oR[b.type].fromJSON(b,o):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${b.type}"`)}y.uuid=b.uuid,b.name!==void 0&&(y.name=b.name),b.userData!==void 0&&(y.userData=b.userData),c[b.uuid]=y}}return c}parseMaterials(n,o){const c={},h={};if(n!==void 0){const p=new yx;p.setTextures(o);for(let _=0,y=n.length;_<y;_++){const b=n[_];c[b.uuid]===void 0&&(c[b.uuid]=p.parse(b)),h[b.uuid]=c[b.uuid]}}return h}parseAnimations(n){const o={};if(n!==void 0)for(let c=0;c<n.length;c++){const h=n[c],p=om.parse(h);o[p.uuid]=p}return o}parseImages(n,o){const c=this,h={};let p;function _(b){return c.manager.itemStart(b),p.load(b,function(){c.manager.itemEnd(b)},void 0,function(){c.manager.itemError(b),c.manager.itemEnd(b)})}function y(b){if(typeof b=="string"){const M=b,R=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(M)?M:c.resourcePath+M;return _(R)}else return b.data?{data:_d(b.type,b.data),width:b.width,height:b.height}:null}if(n!==void 0&&n.length>0){const b=new sb(o);p=new am(b),p.setCrossOrigin(this.crossOrigin);for(let M=0,R=n.length;M<R;M++){const C=n[M],N=C.url;if(Array.isArray(N)){const P=[];for(let L=0,V=N.length;L<V;L++){const U=N[L],I=y(U);I!==null&&(I instanceof HTMLImageElement?P.push(I):P.push(new Ka(I.data,I.width,I.height)))}h[C.uuid]=new mc(P)}else{const P=y(C.url);h[C.uuid]=new mc(P)}}}return h}async parseImagesAsync(n){const o=this,c={};let h;async function p(_){if(typeof _=="string"){const y=_,b=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(y)?y:o.resourcePath+y;return await h.loadAsync(b)}else return _.data?{data:_d(_.type,_.data),width:_.width,height:_.height}:null}if(n!==void 0&&n.length>0){h=new am(this.manager),h.setCrossOrigin(this.crossOrigin);for(let _=0,y=n.length;_<y;_++){const b=n[_],M=b.url;if(Array.isArray(M)){const R=[];for(let C=0,N=M.length;C<N;C++){const P=M[C],L=await p(P);L!==null&&(L instanceof HTMLImageElement?R.push(L):R.push(new Ka(L.data,L.width,L.height)))}c[b.uuid]=new mc(R)}else{const R=await p(b.url);c[b.uuid]=new mc(R)}}}return c}parseTextures(n,o){function c(p,_){return typeof p=="number"?p:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",p),_[p])}const h={};if(n!==void 0)for(let p=0,_=n.length;p<_;p++){const y=n[p];y.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',y.uuid),o[y.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",y.image);const b=o[y.image],M=b.data;let R;Array.isArray(M)?(R=new Op,M.length===6&&(R.needsUpdate=!0)):(M&&M.data?R=new Ka:R=new Ps,M&&(R.needsUpdate=!0)),R.source=b,R.uuid=y.uuid,y.name!==void 0&&(R.name=y.name),y.mapping!==void 0&&(R.mapping=c(y.mapping,Oz)),y.channel!==void 0&&(R.channel=y.channel),y.offset!==void 0&&R.offset.fromArray(y.offset),y.repeat!==void 0&&R.repeat.fromArray(y.repeat),y.center!==void 0&&R.center.fromArray(y.center),y.rotation!==void 0&&(R.rotation=y.rotation),y.wrap!==void 0&&(R.wrapS=c(y.wrap[0],UR),R.wrapT=c(y.wrap[1],UR)),y.format!==void 0&&(R.format=y.format),y.internalFormat!==void 0&&(R.internalFormat=y.internalFormat),y.type!==void 0&&(R.type=y.type),y.colorSpace!==void 0&&(R.colorSpace=y.colorSpace),y.minFilter!==void 0&&(R.minFilter=c(y.minFilter,FR)),y.magFilter!==void 0&&(R.magFilter=c(y.magFilter,FR)),y.anisotropy!==void 0&&(R.anisotropy=y.anisotropy),y.flipY!==void 0&&(R.flipY=y.flipY),y.generateMipmaps!==void 0&&(R.generateMipmaps=y.generateMipmaps),y.premultiplyAlpha!==void 0&&(R.premultiplyAlpha=y.premultiplyAlpha),y.unpackAlignment!==void 0&&(R.unpackAlignment=y.unpackAlignment),y.compareFunction!==void 0&&(R.compareFunction=y.compareFunction),y.userData!==void 0&&(R.userData=y.userData),h[y.uuid]=R}return h}parseObject(n,o,c,h,p){let _;function y(N){return o[N]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",N),o[N]}function b(N){if(N!==void 0){if(Array.isArray(N)){const P=[];for(let L=0,V=N.length;L<V;L++){const U=N[L];c[U]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",U),P.push(c[U])}return P}return c[N]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",N),c[N]}}function M(N){return h[N]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",N),h[N]}let R,C;switch(n.type){case"Scene":_=new m1,n.background!==void 0&&(Number.isInteger(n.background)?_.background=new mn(n.background):_.background=M(n.background)),n.environment!==void 0&&(_.environment=M(n.environment)),n.fog!==void 0&&(n.fog.type==="Fog"?_.fog=new P_(n.fog.color,n.fog.near,n.fog.far):n.fog.type==="FogExp2"&&(_.fog=new N_(n.fog.color,n.fog.density)),n.fog.name!==""&&(_.fog.name=n.fog.name)),n.backgroundBlurriness!==void 0&&(_.backgroundBlurriness=n.backgroundBlurriness),n.backgroundIntensity!==void 0&&(_.backgroundIntensity=n.backgroundIntensity),n.backgroundRotation!==void 0&&_.backgroundRotation.fromArray(n.backgroundRotation),n.environmentIntensity!==void 0&&(_.environmentIntensity=n.environmentIntensity),n.environmentRotation!==void 0&&_.environmentRotation.fromArray(n.environmentRotation);break;case"PerspectiveCamera":_=new wr(n.fov,n.aspect,n.near,n.far),n.focus!==void 0&&(_.focus=n.focus),n.zoom!==void 0&&(_.zoom=n.zoom),n.filmGauge!==void 0&&(_.filmGauge=n.filmGauge),n.filmOffset!==void 0&&(_.filmOffset=n.filmOffset),n.view!==void 0&&(_.view=Object.assign({},n.view));break;case"OrthographicCamera":_=new xx(n.left,n.right,n.top,n.bottom,n.near,n.far),n.zoom!==void 0&&(_.zoom=n.zoom),n.view!==void 0&&(_.view=Object.assign({},n.view));break;case"AmbientLight":_=new CR(n.color,n.intensity);break;case"DirectionalLight":_=new RR(n.color,n.intensity),_.target=n.target||"";break;case"PointLight":_=new ER(n.color,n.intensity,n.distance,n.decay);break;case"RectAreaLight":_=new NR(n.color,n.intensity,n.width,n.height);break;case"SpotLight":_=new wR(n.color,n.intensity,n.distance,n.angle,n.penumbra,n.decay),_.target=n.target||"";break;case"HemisphereLight":_=new bR(n.color,n.groundColor,n.intensity);break;case"LightProbe":_=new IR().fromJSON(n);break;case"SkinnedMesh":R=y(n.geometry),C=b(n.material),_=new E1(R,C),n.bindMode!==void 0&&(_.bindMode=n.bindMode),n.bindMatrix!==void 0&&_.bindMatrix.fromArray(n.bindMatrix),n.skeleton!==void 0&&(_.skeleton=n.skeleton);break;case"Mesh":R=y(n.geometry),C=b(n.material),_=new Zs(R,C);break;case"InstancedMesh":R=y(n.geometry),C=b(n.material);const N=n.count,P=n.instanceMatrix,L=n.instanceColor;_=new P1(R,C,N),_.instanceMatrix=new Vd(new Float32Array(P.array),16),L!==void 0&&(_.instanceColor=new Vd(new Float32Array(L.array),L.itemSize));break;case"BatchedMesh":R=y(n.geometry),C=b(n.material),_=new D1(n.maxInstanceCount,n.maxVertexCount,n.maxIndexCount,C),_.geometry=R,_.perObjectFrustumCulled=n.perObjectFrustumCulled,_.sortObjects=n.sortObjects,_._drawRanges=n.drawRanges,_._reservedRanges=n.reservedRanges,_._geometryInfo=n.geometryInfo.map(V=>{let U=null,I=null;return V.boundingBox!==void 0&&(U=new Lr().fromJSON(V.boundingBox)),V.boundingSphere!==void 0&&(I=new Mr().fromJSON(V.boundingSphere)),{...V,boundingBox:U,boundingSphere:I}}),_._instanceInfo=n.instanceInfo,_._availableInstanceIds=n._availableInstanceIds,_._availableGeometryIds=n._availableGeometryIds,_._nextIndexStart=n.nextIndexStart,_._nextVertexStart=n.nextVertexStart,_._geometryCount=n.geometryCount,_._maxInstanceCount=n.maxInstanceCount,_._maxVertexCount=n.maxVertexCount,_._maxIndexCount=n.maxIndexCount,_._geometryInitialized=n.geometryInitialized,_._matricesTexture=M(n.matricesTexture.uuid),_._indirectTexture=M(n.indirectTexture.uuid),n.colorsTexture!==void 0&&(_._colorsTexture=M(n.colorsTexture.uuid)),n.boundingSphere!==void 0&&(_.boundingSphere=new Mr().fromJSON(n.boundingSphere)),n.boundingBox!==void 0&&(_.boundingBox=new Lr().fromJSON(n.boundingBox));break;case"LOD":_=new S1;break;case"Line":_=new Mc(y(n.geometry),b(n.material));break;case"LineLoop":_=new V1(y(n.geometry),b(n.material));break;case"LineSegments":_=new Qa(y(n.geometry),b(n.material));break;case"PointCloud":case"Points":_=new k1(y(n.geometry),b(n.material));break;case"Sprite":_=new y1(b(n.material));break;case"Group":_=new Dd;break;case"Bone":_=new PS;break;default:_=new Bi}if(_.uuid=n.uuid,n.name!==void 0&&(_.name=n.name),n.matrix!==void 0?(_.matrix.fromArray(n.matrix),n.matrixAutoUpdate!==void 0&&(_.matrixAutoUpdate=n.matrixAutoUpdate),_.matrixAutoUpdate&&_.matrix.decompose(_.position,_.quaternion,_.scale)):(n.position!==void 0&&_.position.fromArray(n.position),n.rotation!==void 0&&_.rotation.fromArray(n.rotation),n.quaternion!==void 0&&_.quaternion.fromArray(n.quaternion),n.scale!==void 0&&_.scale.fromArray(n.scale)),n.up!==void 0&&_.up.fromArray(n.up),n.castShadow!==void 0&&(_.castShadow=n.castShadow),n.receiveShadow!==void 0&&(_.receiveShadow=n.receiveShadow),n.shadow&&(n.shadow.intensity!==void 0&&(_.shadow.intensity=n.shadow.intensity),n.shadow.bias!==void 0&&(_.shadow.bias=n.shadow.bias),n.shadow.normalBias!==void 0&&(_.shadow.normalBias=n.shadow.normalBias),n.shadow.radius!==void 0&&(_.shadow.radius=n.shadow.radius),n.shadow.mapSize!==void 0&&_.shadow.mapSize.fromArray(n.shadow.mapSize),n.shadow.camera!==void 0&&(_.shadow.camera=this.parseObject(n.shadow.camera))),n.visible!==void 0&&(_.visible=n.visible),n.frustumCulled!==void 0&&(_.frustumCulled=n.frustumCulled),n.renderOrder!==void 0&&(_.renderOrder=n.renderOrder),n.userData!==void 0&&(_.userData=n.userData),n.layers!==void 0&&(_.layers.mask=n.layers),n.children!==void 0){const N=n.children;for(let P=0;P<N.length;P++)_.add(this.parseObject(N[P],o,c,h,p))}if(n.animations!==void 0){const N=n.animations;for(let P=0;P<N.length;P++){const L=N[P];_.animations.push(p[L])}}if(n.type==="LOD"){n.autoUpdate!==void 0&&(_.autoUpdate=n.autoUpdate);const N=n.levels;for(let P=0;P<N.length;P++){const L=N[P],V=_.getObjectByProperty("uuid",L.object);V!==void 0&&_.addLevel(V,L.distance,L.hysteresis)}}return _}bindSkeletons(n,o){Object.keys(o).length!==0&&n.traverse(function(c){if(c.isSkinnedMesh===!0&&c.skeleton!==void 0){const h=o[c.skeleton];h===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",c.skeleton):c.bind(h,c.bindMatrix)}})}bindLightTargets(n){n.traverse(function(o){if(o.isDirectionalLight||o.isSpotLight){const c=o.target,h=n.getObjectByProperty("uuid",c);h!==void 0?o.target=h:o.target=new Bi}})}}const Oz={UVMapping:Se,CubeReflectionMapping:Me,CubeRefractionMapping:Ge,EquirectangularReflectionMapping:De,EquirectangularRefractionMapping:Et,CubeUVReflectionMapping:et},UR={RepeatWrapping:kt,ClampToEdgeWrapping:It,MirroredRepeatWrapping:Ye},FR={NearestFilter:mt,NearestMipmapNearestFilter:ft,NearestMipmapLinearFilter:yt,LinearFilter:ge,LinearMipmapNearestFilter:bt,LinearMipmapLinearFilter:Qt},cb=new WeakMap;class Vz extends go{constructor(n){super(n),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"},this._abortController=new AbortController}setOptions(n){return this.options=n,this}load(n,o,c,h){n===void 0&&(n=""),this.path!==void 0&&(n=this.path+n),n=this.manager.resolveURL(n);const p=this,_=el.get(`image-bitmap:${n}`);if(_!==void 0){if(p.manager.itemStart(n),_.then){_.then(M=>{if(cb.has(_)===!0)h&&h(cb.get(_)),p.manager.itemError(n),p.manager.itemEnd(n);else return o&&o(M),p.manager.itemEnd(n),M});return}return setTimeout(function(){o&&o(_),p.manager.itemEnd(n)},0),_}const y={};y.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",y.headers=this.requestHeader,y.signal=typeof AbortSignal.any=="function"?AbortSignal.any([this._abortController.signal,this.manager.abortController.signal]):this._abortController.signal;const b=fetch(n,y).then(function(M){return M.blob()}).then(function(M){return createImageBitmap(M,Object.assign(p.options,{colorSpaceConversion:"none"}))}).then(function(M){return el.add(`image-bitmap:${n}`,M),o&&o(M),p.manager.itemEnd(n),M}).catch(function(M){h&&h(M),cb.set(b,M),el.remove(`image-bitmap:${n}`),p.manager.itemError(n),p.manager.itemEnd(n)});el.add(`image-bitmap:${n}`,b),p.manager.itemStart(n)}abort(){return this._abortController.abort(),this._abortController=new AbortController,this}}let vx;class ub{static getContext(){return vx===void 0&&(vx=new(window.AudioContext||window.webkitAudioContext)),vx}static setContext(n){vx=n}}class zz extends go{constructor(n){super(n)}load(n,o,c,h){const p=this,_=new Dl(this.manager);_.setResponseType("arraybuffer"),_.setPath(this.path),_.setRequestHeader(this.requestHeader),_.setWithCredentials(this.withCredentials),_.load(n,function(b){try{const M=b.slice(0);ub.getContext().decodeAudioData(M,function(C){o(C)}).catch(y)}catch(M){y(M)}},c,h);function y(b){h?h(b):console.error(b),p.manager.itemError(n)}}}const BR=new Qn,OR=new Qn,Lu=new Qn;class kz{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new wr,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new wr,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(n){const o=this._cache;if(o.focus!==n.focus||o.fov!==n.fov||o.aspect!==n.aspect*this.aspect||o.near!==n.near||o.far!==n.far||o.zoom!==n.zoom||o.eyeSep!==this.eyeSep){o.focus=n.focus,o.fov=n.fov,o.aspect=n.aspect*this.aspect,o.near=n.near,o.far=n.far,o.zoom=n.zoom,o.eyeSep=this.eyeSep,Lu.copy(n.projectionMatrix);const h=o.eyeSep/2,p=h*o.near/o.focus,_=o.near*Math.tan(yu*o.fov*.5)/o.zoom;let y,b;OR.elements[12]=-h,BR.elements[12]=h,y=-_*o.aspect+p,b=_*o.aspect+p,Lu.elements[0]=2*o.near/(b-y),Lu.elements[8]=(b+y)/(b-y),this.cameraL.projectionMatrix.copy(Lu),y=-_*o.aspect-p,b=_*o.aspect-p,Lu.elements[0]=2*o.near/(b-y),Lu.elements[8]=(b+y)/(b-y),this.cameraR.projectionMatrix.copy(Lu)}this.cameraL.matrixWorld.copy(n.matrixWorld).multiply(OR),this.cameraR.matrixWorld.copy(n.matrixWorld).multiply(BR)}}class VR extends wr{constructor(n=[]){super(),this.isArrayCamera=!0,this.isMultiViewCamera=!1,this.cameras=n}}class zR{constructor(n=!0){this.autoStart=n,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=performance.now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let n=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const o=performance.now();n=(o-this.oldTime)/1e3,this.oldTime=o,this.elapsedTime+=n}return n}}const Du=new ce,hb=new ho,Gz=new ce,Uu=new ce,Fu=new ce;class Hz extends Bi{constructor(){super(),this.type="AudioListener",this.context=ub.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new zR}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(n){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=n,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(n){return this.gain.gain.setTargetAtTime(n,this.context.currentTime,.01),this}updateMatrixWorld(n){super.updateMatrixWorld(n);const o=this.context.listener;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(Du,hb,Gz),Uu.set(0,0,-1).applyQuaternion(hb),Fu.set(0,1,0).applyQuaternion(hb),o.positionX){const c=this.context.currentTime+this.timeDelta;o.positionX.linearRampToValueAtTime(Du.x,c),o.positionY.linearRampToValueAtTime(Du.y,c),o.positionZ.linearRampToValueAtTime(Du.z,c),o.forwardX.linearRampToValueAtTime(Uu.x,c),o.forwardY.linearRampToValueAtTime(Uu.y,c),o.forwardZ.linearRampToValueAtTime(Uu.z,c),o.upX.linearRampToValueAtTime(Fu.x,c),o.upY.linearRampToValueAtTime(Fu.y,c),o.upZ.linearRampToValueAtTime(Fu.z,c)}else o.setPosition(Du.x,Du.y,Du.z),o.setOrientation(Uu.x,Uu.y,Uu.z,Fu.x,Fu.y,Fu.z)}}class kR extends Bi{constructor(n){super(),this.type="Audio",this.listener=n,this.context=n.context,this.gain=this.context.createGain(),this.gain.connect(n.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(n){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=n,this.connect(),this}setMediaElementSource(n){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(n),this.connect(),this}setMediaStreamSource(n){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(n),this.connect(),this}setBuffer(n){return this.buffer=n,this.sourceType="buffer",this.autoplay&&this.play(),this}play(n=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+n;const o=this.context.createBufferSource();return o.buffer=this.buffer,o.loop=this.loop,o.loopStart=this.loopStart,o.loopEnd=this.loopEnd,o.onended=this.onEnded.bind(this),o.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=o,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(n=0){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source!==null&&(this.source.stop(this.context.currentTime+n),this.source.onended=null),this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let n=1,o=this.filters.length;n<o;n++)this.filters[n-1].connect(this.filters[n]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this._connected!==!1){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let n=1,o=this.filters.length;n<o;n++)this.filters[n-1].disconnect(this.filters[n]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}}getFilters(){return this.filters}setFilters(n){return n||(n=[]),this._connected===!0?(this.disconnect(),this.filters=n.slice(),this.connect()):this.filters=n.slice(),this}setDetune(n){return this.detune=n,this.isPlaying===!0&&this.source.detune!==void 0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(n){return this.setFilters(n?[n]:[])}setPlaybackRate(n){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=n,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1,this._progress=0}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(n){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=n,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(n){return this.loopStart=n,this}setLoopEnd(n){return this.loopEnd=n,this}getVolume(){return this.gain.gain.value}setVolume(n){return this.gain.gain.setTargetAtTime(n,this.context.currentTime,.01),this}copy(n,o){return super.copy(n,o),n.sourceType!=="buffer"?(console.warn("THREE.Audio: Audio source type cannot be copied."),this):(this.autoplay=n.autoplay,this.buffer=n.buffer,this.detune=n.detune,this.loop=n.loop,this.loopStart=n.loopStart,this.loopEnd=n.loopEnd,this.offset=n.offset,this.duration=n.duration,this.playbackRate=n.playbackRate,this.hasPlaybackControl=n.hasPlaybackControl,this.sourceType=n.sourceType,this.filters=n.filters.slice(),this)}clone(n){return new this.constructor(this.listener).copy(this,n)}}const Bu=new ce,GR=new ho,Wz=new ce,Ou=new ce;class $z extends kR{constructor(n){super(n),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}connect(){return super.connect(),this.panner.connect(this.gain),this}disconnect(){return super.disconnect(),this.panner.disconnect(this.gain),this}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(n){return this.panner.refDistance=n,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(n){return this.panner.rolloffFactor=n,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(n){return this.panner.distanceModel=n,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(n){return this.panner.maxDistance=n,this}setDirectionalCone(n,o,c){return this.panner.coneInnerAngle=n,this.panner.coneOuterAngle=o,this.panner.coneOuterGain=c,this}updateMatrixWorld(n){if(super.updateMatrixWorld(n),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(Bu,GR,Wz),Ou.set(0,0,1).applyQuaternion(GR);const o=this.panner;if(o.positionX){const c=this.context.currentTime+this.listener.timeDelta;o.positionX.linearRampToValueAtTime(Bu.x,c),o.positionY.linearRampToValueAtTime(Bu.y,c),o.positionZ.linearRampToValueAtTime(Bu.z,c),o.orientationX.linearRampToValueAtTime(Ou.x,c),o.orientationY.linearRampToValueAtTime(Ou.y,c),o.orientationZ.linearRampToValueAtTime(Ou.z,c)}else o.setPosition(Bu.x,Bu.y,Bu.z),o.setOrientation(Ou.x,Ou.y,Ou.z)}}class Xz{constructor(n,o=2048){this.analyser=n.context.createAnalyser(),this.analyser.fftSize=o,this.data=new Uint8Array(this.analyser.frequencyBinCount),n.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let n=0;const o=this.getFrequencyData();for(let c=0;c<o.length;c++)n+=o[c];return n/o.length}}class HR{constructor(n,o,c){this.binding=n,this.valueSize=c;let h,p,_;switch(o){case"quaternion":h=this._slerp,p=this._slerpAdditive,_=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(c*6),this._workIndex=5;break;case"string":case"bool":h=this._select,p=this._select,_=this._setAdditiveIdentityOther,this.buffer=new Array(c*5);break;default:h=this._lerp,p=this._lerpAdditive,_=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(c*5)}this._mixBufferRegion=h,this._mixBufferRegionAdditive=p,this._setIdentity=_,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(n,o){const c=this.buffer,h=this.valueSize,p=n*h+h;let _=this.cumulativeWeight;if(_===0){for(let y=0;y!==h;++y)c[p+y]=c[y];_=o}else{_+=o;const y=o/_;this._mixBufferRegion(c,p,0,y,h)}this.cumulativeWeight=_}accumulateAdditive(n){const o=this.buffer,c=this.valueSize,h=c*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(o,h,0,n,c),this.cumulativeWeightAdditive+=n}apply(n){const o=this.valueSize,c=this.buffer,h=n*o+o,p=this.cumulativeWeight,_=this.cumulativeWeightAdditive,y=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,p<1){const b=o*this._origIndex;this._mixBufferRegion(c,h,b,1-p,o)}_>0&&this._mixBufferRegionAdditive(c,h,this._addIndex*o,1,o);for(let b=o,M=o+o;b!==M;++b)if(c[b]!==c[b+o]){y.setValue(c,h);break}}saveOriginalState(){const n=this.binding,o=this.buffer,c=this.valueSize,h=c*this._origIndex;n.getValue(o,h);for(let p=c,_=h;p!==_;++p)o[p]=o[h+p%c];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const n=this.valueSize*3;this.binding.setValue(this.buffer,n)}_setAdditiveIdentityNumeric(){const n=this._addIndex*this.valueSize,o=n+this.valueSize;for(let c=n;c<o;c++)this.buffer[c]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const n=this._origIndex*this.valueSize,o=this._addIndex*this.valueSize;for(let c=0;c<this.valueSize;c++)this.buffer[o+c]=this.buffer[n+c]}_select(n,o,c,h,p){if(h>=.5)for(let _=0;_!==p;++_)n[o+_]=n[c+_]}_slerp(n,o,c,h){ho.slerpFlat(n,o,n,o,n,c,h)}_slerpAdditive(n,o,c,h,p){const _=this._workIndex*p;ho.multiplyQuaternionsFlat(n,_,n,o,n,c),ho.slerpFlat(n,o,n,o,n,_,h)}_lerp(n,o,c,h,p){const _=1-h;for(let y=0;y!==p;++y){const b=o+y;n[b]=n[b]*_+n[c+y]*h}}_lerpAdditive(n,o,c,h,p){for(let _=0;_!==p;++_){const y=o+_;n[y]=n[y]+n[c+_]*h}}}const db="\\[\\]\\.:\\/",qz=new RegExp("["+db+"]","g"),fb="[^"+db+"]",Yz="[^"+db.replace("\\.","")+"]",Zz=/((?:WC+[\/:])*)/.source.replace("WC",fb),Kz=/(WCOD+)?/.source.replace("WCOD",Yz),Jz=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",fb),jz=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",fb),Qz=new RegExp("^"+Zz+Kz+Jz+jz+"$"),ek=["material","materials","bones","map"];class tk{constructor(n,o,c){const h=c||Oi.parseTrackName(o);this._targetGroup=n,this._bindings=n.subscribe_(o,h)}getValue(n,o){this.bind();const c=this._targetGroup.nCachedObjects_,h=this._bindings[c];h!==void 0&&h.getValue(n,o)}setValue(n,o){const c=this._bindings;for(let h=this._targetGroup.nCachedObjects_,p=c.length;h!==p;++h)c[h].setValue(n,o)}bind(){const n=this._bindings;for(let o=this._targetGroup.nCachedObjects_,c=n.length;o!==c;++o)n[o].bind()}unbind(){const n=this._bindings;for(let o=this._targetGroup.nCachedObjects_,c=n.length;o!==c;++o)n[o].unbind()}}class Oi{constructor(n,o,c){this.path=o,this.parsedPath=c||Oi.parseTrackName(o),this.node=Oi.findNode(n,this.parsedPath.nodeName),this.rootNode=n,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(n,o,c){return n&&n.isAnimationObjectGroup?new Oi.Composite(n,o,c):new Oi(n,o,c)}static sanitizeNodeName(n){return n.replace(/\s/g,"_").replace(qz,"")}static parseTrackName(n){const o=Qz.exec(n);if(o===null)throw new Error("PropertyBinding: Cannot parse trackName: "+n);const c={nodeName:o[2],objectName:o[3],objectIndex:o[4],propertyName:o[5],propertyIndex:o[6]},h=c.nodeName&&c.nodeName.lastIndexOf(".");if(h!==void 0&&h!==-1){const p=c.nodeName.substring(h+1);ek.indexOf(p)!==-1&&(c.nodeName=c.nodeName.substring(0,h),c.objectName=p)}if(c.propertyName===null||c.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+n);return c}static findNode(n,o){if(o===void 0||o===""||o==="."||o===-1||o===n.name||o===n.uuid)return n;if(n.skeleton){const c=n.skeleton.getBoneByName(o);if(c!==void 0)return c}if(n.children){const c=function(p){for(let _=0;_<p.length;_++){const y=p[_];if(y.name===o||y.uuid===o)return y;const b=c(y.children);if(b)return b}return null},h=c(n.children);if(h)return h}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(n,o){n[o]=this.targetObject[this.propertyName]}_getValue_array(n,o){const c=this.resolvedProperty;for(let h=0,p=c.length;h!==p;++h)n[o++]=c[h]}_getValue_arrayElement(n,o){n[o]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(n,o){this.resolvedProperty.toArray(n,o)}_setValue_direct(n,o){this.targetObject[this.propertyName]=n[o]}_setValue_direct_setNeedsUpdate(n,o){this.targetObject[this.propertyName]=n[o],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(n,o){this.targetObject[this.propertyName]=n[o],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(n,o){const c=this.resolvedProperty;for(let h=0,p=c.length;h!==p;++h)c[h]=n[o++]}_setValue_array_setNeedsUpdate(n,o){const c=this.resolvedProperty;for(let h=0,p=c.length;h!==p;++h)c[h]=n[o++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(n,o){const c=this.resolvedProperty;for(let h=0,p=c.length;h!==p;++h)c[h]=n[o++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(n,o){this.resolvedProperty[this.propertyIndex]=n[o]}_setValue_arrayElement_setNeedsUpdate(n,o){this.resolvedProperty[this.propertyIndex]=n[o],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(n,o){this.resolvedProperty[this.propertyIndex]=n[o],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(n,o){this.resolvedProperty.fromArray(n,o)}_setValue_fromArray_setNeedsUpdate(n,o){this.resolvedProperty.fromArray(n,o),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(n,o){this.resolvedProperty.fromArray(n,o),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(n,o){this.bind(),this.getValue(n,o)}_setValue_unbound(n,o){this.bind(),this.setValue(n,o)}bind(){let n=this.node;const o=this.parsedPath,c=o.objectName,h=o.propertyName;let p=o.propertyIndex;if(n||(n=Oi.findNode(this.rootNode,o.nodeName),this.node=n),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!n){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(c){let M=o.objectIndex;switch(c){case"materials":if(!n.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!n.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}n=n.material.materials;break;case"bones":if(!n.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}n=n.skeleton.bones;for(let R=0;R<n.length;R++)if(n[R].name===M){M=R;break}break;case"map":if("map"in n){n=n.map;break}if(!n.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!n.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}n=n.material.map;break;default:if(n[c]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}n=n[c]}if(M!==void 0){if(n[M]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,n);return}n=n[M]}}const _=n[h];if(_===void 0){const M=o.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+M+"."+h+" but it wasn't found.",n);return}let y=this.Versioning.None;this.targetObject=n,n.isMaterial===!0?y=this.Versioning.NeedsUpdate:n.isObject3D===!0&&(y=this.Versioning.MatrixWorldNeedsUpdate);let b=this.BindingType.Direct;if(p!==void 0){if(h==="morphTargetInfluences"){if(!n.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!n.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}n.morphTargetDictionary[p]!==void 0&&(p=n.morphTargetDictionary[p])}b=this.BindingType.ArrayElement,this.resolvedProperty=_,this.propertyIndex=p}else _.fromArray!==void 0&&_.toArray!==void 0?(b=this.BindingType.HasFromToArray,this.resolvedProperty=_):Array.isArray(_)?(b=this.BindingType.EntireArray,this.resolvedProperty=_):this.propertyName=h;this.getValue=this.GetterByBindingType[b],this.setValue=this.SetterByBindingTypeAndVersioning[b][y]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Oi.Composite=tk,Oi.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Oi.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Oi.prototype.GetterByBindingType=[Oi.prototype._getValue_direct,Oi.prototype._getValue_array,Oi.prototype._getValue_arrayElement,Oi.prototype._getValue_toArray],Oi.prototype.SetterByBindingTypeAndVersioning=[[Oi.prototype._setValue_direct,Oi.prototype._setValue_direct_setNeedsUpdate,Oi.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Oi.prototype._setValue_array,Oi.prototype._setValue_array_setNeedsUpdate,Oi.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Oi.prototype._setValue_arrayElement,Oi.prototype._setValue_arrayElement_setNeedsUpdate,Oi.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Oi.prototype._setValue_fromArray,Oi.prototype._setValue_fromArray_setNeedsUpdate,Oi.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class nk{constructor(){this.isAnimationObjectGroup=!0,this.uuid=Io(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const n={};this._indicesByUUID=n;for(let c=0,h=arguments.length;c!==h;++c)n[arguments[c].uuid]=c;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const o=this;this.stats={objects:{get total(){return o._objects.length},get inUse(){return this.total-o.nCachedObjects_}},get bindingsPerObject(){return o._bindings.length}}}add(){const n=this._objects,o=this._indicesByUUID,c=this._paths,h=this._parsedPaths,p=this._bindings,_=p.length;let y,b=n.length,M=this.nCachedObjects_;for(let R=0,C=arguments.length;R!==C;++R){const N=arguments[R],P=N.uuid;let L=o[P];if(L===void 0){L=b++,o[P]=L,n.push(N);for(let V=0,U=_;V!==U;++V)p[V].push(new Oi(N,c[V],h[V]))}else if(L<M){y=n[L];const V=--M,U=n[V];o[U.uuid]=L,n[L]=U,o[P]=V,n[V]=N;for(let I=0,Z=_;I!==Z;++I){const W=p[I],G=W[V];let ae=W[L];W[L]=G,ae===void 0&&(ae=new Oi(N,c[I],h[I])),W[V]=ae}}else n[L]!==y&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=M}remove(){const n=this._objects,o=this._indicesByUUID,c=this._bindings,h=c.length;let p=this.nCachedObjects_;for(let _=0,y=arguments.length;_!==y;++_){const b=arguments[_],M=b.uuid,R=o[M];if(R!==void 0&&R>=p){const C=p++,N=n[C];o[N.uuid]=R,n[R]=N,o[M]=C,n[C]=b;for(let P=0,L=h;P!==L;++P){const V=c[P],U=V[C],I=V[R];V[R]=U,V[C]=I}}}this.nCachedObjects_=p}uncache(){const n=this._objects,o=this._indicesByUUID,c=this._bindings,h=c.length;let p=this.nCachedObjects_,_=n.length;for(let y=0,b=arguments.length;y!==b;++y){const M=arguments[y],R=M.uuid,C=o[R];if(C!==void 0)if(delete o[R],C<p){const N=--p,P=n[N],L=--_,V=n[L];o[P.uuid]=C,n[C]=P,o[V.uuid]=N,n[N]=V,n.pop();for(let U=0,I=h;U!==I;++U){const Z=c[U],W=Z[N],G=Z[L];Z[C]=W,Z[N]=G,Z.pop()}}else{const N=--_,P=n[N];N>0&&(o[P.uuid]=C),n[C]=P,n.pop();for(let L=0,V=h;L!==V;++L){const U=c[L];U[C]=U[N],U.pop()}}}this.nCachedObjects_=p}subscribe_(n,o){const c=this._bindingsIndicesByPath;let h=c[n];const p=this._bindings;if(h!==void 0)return p[h];const _=this._paths,y=this._parsedPaths,b=this._objects,M=b.length,R=this.nCachedObjects_,C=new Array(M);h=p.length,c[n]=h,_.push(n),y.push(o),p.push(C);for(let N=R,P=b.length;N!==P;++N){const L=b[N];C[N]=new Oi(L,n,o)}return C}unsubscribe_(n){const o=this._bindingsIndicesByPath,c=o[n];if(c!==void 0){const h=this._paths,p=this._parsedPaths,_=this._bindings,y=_.length-1,b=_[y],M=n[y];o[M]=c,_[c]=b,_.pop(),p[c]=p[y],p.pop(),h[c]=h[y],h.pop()}}}class WR{constructor(n,o,c=null,h=o.blendMode){this._mixer=n,this._clip=o,this._localRoot=c,this.blendMode=h;const p=o.tracks,_=p.length,y=new Array(_),b={endingStart:mu,endingEnd:mu};for(let M=0;M!==_;++M){const R=p[M].createInterpolant(null);y[M]=R,R.settings=b}this._interpolantSettings=b,this._interpolants=y,this._propertyBindings=new Array(_),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=PE,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(n){return this._startTime=n,this}setLoop(n,o){return this.loop=n,this.repetitions=o,this}setEffectiveWeight(n){return this.weight=n,this._effectiveWeight=this.enabled?n:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(n){return this._scheduleFading(n,0,1)}fadeOut(n){return this._scheduleFading(n,1,0)}crossFadeFrom(n,o,c=!1){if(n.fadeOut(o),this.fadeIn(o),c===!0){const h=this._clip.duration,p=n._clip.duration,_=p/h,y=h/p;n.warp(1,_,o),this.warp(y,1,o)}return this}crossFadeTo(n,o,c=!1){return n.crossFadeFrom(this,o,c)}stopFading(){const n=this._weightInterpolant;return n!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(n)),this}setEffectiveTimeScale(n){return this.timeScale=n,this._effectiveTimeScale=this.paused?0:n,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(n){return this.timeScale=this._clip.duration/n,this.stopWarping()}syncWith(n){return this.time=n.time,this.timeScale=n.timeScale,this.stopWarping()}halt(n){return this.warp(this._effectiveTimeScale,0,n)}warp(n,o,c){const h=this._mixer,p=h.time,_=this.timeScale;let y=this._timeScaleInterpolant;y===null&&(y=h._lendControlInterpolant(),this._timeScaleInterpolant=y);const b=y.parameterPositions,M=y.sampleValues;return b[0]=p,b[1]=p+c,M[0]=n/_,M[1]=o/_,this}stopWarping(){const n=this._timeScaleInterpolant;return n!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(n)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(n,o,c,h){if(!this.enabled){this._updateWeight(n);return}const p=this._startTime;if(p!==null){const b=(n-p)*c;b<0||c===0?o=0:(this._startTime=null,o=c*b)}o*=this._updateTimeScale(n);const _=this._updateTime(o),y=this._updateWeight(n);if(y>0){const b=this._interpolants,M=this._propertyBindings;switch(this.blendMode){case Q0:for(let R=0,C=b.length;R!==C;++R)b[R].evaluate(_),M[R].accumulateAdditive(y);break;case l_:default:for(let R=0,C=b.length;R!==C;++R)b[R].evaluate(_),M[R].accumulate(h,y)}}}_updateWeight(n){let o=0;if(this.enabled){o=this.weight;const c=this._weightInterpolant;if(c!==null){const h=c.evaluate(n)[0];o*=h,n>c.parameterPositions[1]&&(this.stopFading(),h===0&&(this.enabled=!1))}}return this._effectiveWeight=o,o}_updateTimeScale(n){let o=0;if(!this.paused){o=this.timeScale;const c=this._timeScaleInterpolant;if(c!==null){const h=c.evaluate(n)[0];o*=h,n>c.parameterPositions[1]&&(this.stopWarping(),o===0?this.paused=!0:this.timeScale=o)}}return this._effectiveTimeScale=o,o}_updateTime(n){const o=this._clip.duration,c=this.loop;let h=this.time+n,p=this._loopCount;const _=c===IE;if(n===0)return p===-1?h:_&&(p&1)===1?o-h:h;if(c===NE){p===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(h>=o)h=o;else if(h<0)h=0;else{this.time=h;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=h,this._mixer.dispatchEvent({type:"finished",action:this,direction:n<0?-1:1})}}else{if(p===-1&&(n>=0?(p=0,this._setEndings(!0,this.repetitions===0,_)):this._setEndings(this.repetitions===0,!0,_)),h>=o||h<0){const y=Math.floor(h/o);h-=o*y,p+=Math.abs(y);const b=this.repetitions-p;if(b<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,h=n>0?o:0,this.time=h,this._mixer.dispatchEvent({type:"finished",action:this,direction:n>0?1:-1});else{if(b===1){const M=n<0;this._setEndings(M,!M,_)}else this._setEndings(!1,!1,_);this._loopCount=p,this.time=h,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:y})}}else this.time=h;if(_&&(p&1)===1)return o-h}return h}_setEndings(n,o,c){const h=this._interpolantSettings;c?(h.endingStart=gu,h.endingEnd=gu):(n?h.endingStart=this.zeroSlopeAtStart?gu:mu:h.endingStart=Rp,o?h.endingEnd=this.zeroSlopeAtEnd?gu:mu:h.endingEnd=Rp)}_scheduleFading(n,o,c){const h=this._mixer,p=h.time;let _=this._weightInterpolant;_===null&&(_=h._lendControlInterpolant(),this._weightInterpolant=_);const y=_.parameterPositions,b=_.sampleValues;return y[0]=p,b[0]=o,y[1]=p+n,b[1]=c,this}}const ik=new Float32Array(1);class sk extends Ya{constructor(n){super(),this._root=n,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(n,o){const c=n._localRoot||this._root,h=n._clip.tracks,p=h.length,_=n._propertyBindings,y=n._interpolants,b=c.uuid,M=this._bindingsByRootAndName;let R=M[b];R===void 0&&(R={},M[b]=R);for(let C=0;C!==p;++C){const N=h[C],P=N.name;let L=R[P];if(L!==void 0)++L.referenceCount,_[C]=L;else{if(L=_[C],L!==void 0){L._cacheIndex===null&&(++L.referenceCount,this._addInactiveBinding(L,b,P));continue}const V=o&&o._propertyBindings[C].binding.parsedPath;L=new HR(Oi.create(c,P,V),N.ValueTypeName,N.getValueSize()),++L.referenceCount,this._addInactiveBinding(L,b,P),_[C]=L}y[C].resultBuffer=L.buffer}}_activateAction(n){if(!this._isActiveAction(n)){if(n._cacheIndex===null){const c=(n._localRoot||this._root).uuid,h=n._clip.uuid,p=this._actionsByClip[h];this._bindAction(n,p&&p.knownActions[0]),this._addInactiveAction(n,h,c)}const o=n._propertyBindings;for(let c=0,h=o.length;c!==h;++c){const p=o[c];p.useCount++===0&&(this._lendBinding(p),p.saveOriginalState())}this._lendAction(n)}}_deactivateAction(n){if(this._isActiveAction(n)){const o=n._propertyBindings;for(let c=0,h=o.length;c!==h;++c){const p=o[c];--p.useCount===0&&(p.restoreOriginalState(),this._takeBackBinding(p))}this._takeBackAction(n)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const n=this;this.stats={actions:{get total(){return n._actions.length},get inUse(){return n._nActiveActions}},bindings:{get total(){return n._bindings.length},get inUse(){return n._nActiveBindings}},controlInterpolants:{get total(){return n._controlInterpolants.length},get inUse(){return n._nActiveControlInterpolants}}}}_isActiveAction(n){const o=n._cacheIndex;return o!==null&&o<this._nActiveActions}_addInactiveAction(n,o,c){const h=this._actions,p=this._actionsByClip;let _=p[o];if(_===void 0)_={knownActions:[n],actionByRoot:{}},n._byClipCacheIndex=0,p[o]=_;else{const y=_.knownActions;n._byClipCacheIndex=y.length,y.push(n)}n._cacheIndex=h.length,h.push(n),_.actionByRoot[c]=n}_removeInactiveAction(n){const o=this._actions,c=o[o.length-1],h=n._cacheIndex;c._cacheIndex=h,o[h]=c,o.pop(),n._cacheIndex=null;const p=n._clip.uuid,_=this._actionsByClip,y=_[p],b=y.knownActions,M=b[b.length-1],R=n._byClipCacheIndex;M._byClipCacheIndex=R,b[R]=M,b.pop(),n._byClipCacheIndex=null;const C=y.actionByRoot,N=(n._localRoot||this._root).uuid;delete C[N],b.length===0&&delete _[p],this._removeInactiveBindingsForAction(n)}_removeInactiveBindingsForAction(n){const o=n._propertyBindings;for(let c=0,h=o.length;c!==h;++c){const p=o[c];--p.referenceCount===0&&this._removeInactiveBinding(p)}}_lendAction(n){const o=this._actions,c=n._cacheIndex,h=this._nActiveActions++,p=o[h];n._cacheIndex=h,o[h]=n,p._cacheIndex=c,o[c]=p}_takeBackAction(n){const o=this._actions,c=n._cacheIndex,h=--this._nActiveActions,p=o[h];n._cacheIndex=h,o[h]=n,p._cacheIndex=c,o[c]=p}_addInactiveBinding(n,o,c){const h=this._bindingsByRootAndName,p=this._bindings;let _=h[o];_===void 0&&(_={},h[o]=_),_[c]=n,n._cacheIndex=p.length,p.push(n)}_removeInactiveBinding(n){const o=this._bindings,c=n.binding,h=c.rootNode.uuid,p=c.path,_=this._bindingsByRootAndName,y=_[h],b=o[o.length-1],M=n._cacheIndex;b._cacheIndex=M,o[M]=b,o.pop(),delete y[p],Object.keys(y).length===0&&delete _[h]}_lendBinding(n){const o=this._bindings,c=n._cacheIndex,h=this._nActiveBindings++,p=o[h];n._cacheIndex=h,o[h]=n,p._cacheIndex=c,o[c]=p}_takeBackBinding(n){const o=this._bindings,c=n._cacheIndex,h=--this._nActiveBindings,p=o[h];n._cacheIndex=h,o[h]=n,p._cacheIndex=c,o[c]=p}_lendControlInterpolant(){const n=this._controlInterpolants,o=this._nActiveControlInterpolants++;let c=n[o];return c===void 0&&(c=new nb(new Float32Array(2),new Float32Array(2),1,ik),c.__cacheIndex=o,n[o]=c),c}_takeBackControlInterpolant(n){const o=this._controlInterpolants,c=n.__cacheIndex,h=--this._nActiveControlInterpolants,p=o[h];n.__cacheIndex=h,o[h]=n,p.__cacheIndex=c,o[c]=p}clipAction(n,o,c){const h=o||this._root,p=h.uuid;let _=typeof n=="string"?om.findByName(h,n):n;const y=_!==null?_.uuid:n,b=this._actionsByClip[y];let M=null;if(c===void 0&&(_!==null?c=_.blendMode:c=l_),b!==void 0){const C=b.actionByRoot[p];if(C!==void 0&&C.blendMode===c)return C;M=b.knownActions[0],_===null&&(_=M._clip)}if(_===null)return null;const R=new WR(this,_,o,c);return this._bindAction(R,M),this._addInactiveAction(R,y,p),R}existingAction(n,o){const c=o||this._root,h=c.uuid,p=typeof n=="string"?om.findByName(c,n):n,_=p?p.uuid:n,y=this._actionsByClip[_];return y!==void 0&&y.actionByRoot[h]||null}stopAllAction(){const n=this._actions,o=this._nActiveActions;for(let c=o-1;c>=0;--c)n[c].stop();return this}update(n){n*=this.timeScale;const o=this._actions,c=this._nActiveActions,h=this.time+=n,p=Math.sign(n),_=this._accuIndex^=1;for(let M=0;M!==c;++M)o[M]._update(h,n,p,_);const y=this._bindings,b=this._nActiveBindings;for(let M=0;M!==b;++M)y[M].apply(_);return this}setTime(n){this.time=0;for(let o=0;o<this._actions.length;o++)this._actions[o].time=0;return this.update(n)}getRoot(){return this._root}uncacheClip(n){const o=this._actions,c=n.uuid,h=this._actionsByClip,p=h[c];if(p!==void 0){const _=p.knownActions;for(let y=0,b=_.length;y!==b;++y){const M=_[y];this._deactivateAction(M);const R=M._cacheIndex,C=o[o.length-1];M._cacheIndex=null,M._byClipCacheIndex=null,C._cacheIndex=R,o[R]=C,o.pop(),this._removeInactiveBindingsForAction(M)}delete h[c]}}uncacheRoot(n){const o=n.uuid,c=this._actionsByClip;for(const _ in c){const y=c[_].actionByRoot,b=y[o];b!==void 0&&(this._deactivateAction(b),this._removeInactiveAction(b))}const h=this._bindingsByRootAndName,p=h[o];if(p!==void 0)for(const _ in p){const y=p[_];y.restoreOriginalState(),this._removeInactiveBinding(y)}}uncacheAction(n,o){const c=this.existingAction(n,o);c!==null&&(this._deactivateAction(c),this._removeInactiveAction(c))}}class rk extends lS{constructor(n=1,o=1,c=1,h={}){super(n,o,h),this.isRenderTarget3D=!0,this.depth=c,this.texture=new u_(null,n,o,c),this._setTextureOptions(h),this.texture.isRenderTargetTexture=!0}}class pb{constructor(n){this.value=n}clone(){return new pb(this.value.clone===void 0?this.value:this.value.clone())}}let ok=0;class ak extends Ya{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:ok++}),this.name="",this.usage=Np,this.uniforms=[]}add(n){return this.uniforms.push(n),this}remove(n){const o=this.uniforms.indexOf(n);return o!==-1&&this.uniforms.splice(o,1),this}setName(n){return this.name=n,this}setUsage(n){return this.usage=n,this}dispose(){this.dispatchEvent({type:"dispose"})}copy(n){this.name=n.name,this.usage=n.usage;const o=n.uniforms;this.uniforms.length=0;for(let c=0,h=o.length;c<h;c++){const p=Array.isArray(o[c])?o[c]:[o[c]];for(let _=0;_<p.length;_++)this.uniforms.push(p[_].clone())}return this}clone(){return new this.constructor().copy(this)}}class lk extends I_{constructor(n,o,c=1){super(n,o),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=c}copy(n){return super.copy(n),this.meshPerAttribute=n.meshPerAttribute,this}clone(n){const o=super.clone(n);return o.meshPerAttribute=this.meshPerAttribute,o}toJSON(n){const o=super.toJSON(n);return o.isInstancedInterleavedBuffer=!0,o.meshPerAttribute=this.meshPerAttribute,o}}class ck{constructor(n,o,c,h,p,_=!1){this.isGLBufferAttribute=!0,this.name="",this.buffer=n,this.type=o,this.itemSize=c,this.elementSize=h,this.count=p,this.normalized=_,this.version=0}set needsUpdate(n){n===!0&&this.version++}setBuffer(n){return this.buffer=n,this}setType(n,o){return this.type=n,this.elementSize=o,this}setItemSize(n){return this.itemSize=n,this}setCount(n){return this.count=n,this}}const $R=new Qn;class uk{constructor(n,o,c=0,h=1/0){this.ray=new Md(n,o),this.near=c,this.far=h,this.camera=null,this.layers=new __,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(n,o){this.ray.set(n,o)}setFromCamera(n,o){o.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(o.matrixWorld),this.ray.direction.set(n.x,n.y,.5).unproject(o).sub(this.ray.origin).normalize(),this.camera=o):o.isOrthographicCamera?(this.ray.origin.set(n.x,n.y,(o.near+o.far)/(o.near-o.far)).unproject(o),this.ray.direction.set(0,0,-1).transformDirection(o.matrixWorld),this.camera=o):console.error("THREE.Raycaster: Unsupported camera type: "+o.type)}setFromXRController(n){return $R.identity().extractRotation(n.matrixWorld),this.ray.origin.setFromMatrixPosition(n.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4($R),this}intersectObject(n,o=!0,c=[]){return mb(n,this,c,o),c.sort(XR),c}intersectObjects(n,o=!0,c=[]){for(let h=0,p=n.length;h<p;h++)mb(n[h],this,c,o);return c.sort(XR),c}}function XR(m,n){return m.distance-n.distance}function mb(m,n,o,c){let h=!0;if(m.layers.test(n.layers)&&m.raycast(n,o)===!1&&(h=!1),h===!0&&c===!0){const p=m.children;for(let _=0,y=p.length;_<y;_++)mb(p[_],n,o,!0)}}class hk{constructor(){this._previousTime=0,this._currentTime=0,this._startTime=performance.now(),this._delta=0,this._elapsed=0,this._timescale=1,this._document=null,this._pageVisibilityHandler=null}connect(n){this._document=n,n.hidden!==void 0&&(this._pageVisibilityHandler=dk.bind(this),n.addEventListener("visibilitychange",this._pageVisibilityHandler,!1))}disconnect(){this._pageVisibilityHandler!==null&&(this._document.removeEventListener("visibilitychange",this._pageVisibilityHandler),this._pageVisibilityHandler=null),this._document=null}getDelta(){return this._delta/1e3}getElapsed(){return this._elapsed/1e3}getTimescale(){return this._timescale}setTimescale(n){return this._timescale=n,this}reset(){return this._currentTime=performance.now()-this._startTime,this}dispose(){this.disconnect()}update(n){return this._pageVisibilityHandler!==null&&this._document.hidden===!0?this._delta=0:(this._previousTime=this._currentTime,this._currentTime=(n!==void 0?n:performance.now())-this._startTime,this._delta=(this._currentTime-this._previousTime)*this._timescale,this._elapsed+=this._delta),this}}function dk(){this._document.hidden===!1&&this.reset()}class fk{constructor(n=1,o=0,c=0){this.radius=n,this.phi=o,this.theta=c}set(n,o,c){return this.radius=n,this.phi=o,this.theta=c,this}copy(n){return this.radius=n.radius,this.phi=n.phi,this.theta=n.theta,this}makeSafe(){return this.phi=Kn(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(n){return this.setFromCartesianCoords(n.x,n.y,n.z)}setFromCartesianCoords(n,o,c){return this.radius=Math.sqrt(n*n+o*o+c*c),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(n,c),this.phi=Math.acos(Kn(o/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class pk{constructor(n=1,o=0,c=0){this.radius=n,this.theta=o,this.y=c}set(n,o,c){return this.radius=n,this.theta=o,this.y=c,this}copy(n){return this.radius=n.radius,this.theta=n.theta,this.y=n.y,this}setFromVector3(n){return this.setFromCartesianCoords(n.x,n.y,n.z)}setFromCartesianCoords(n,o,c){return this.radius=Math.sqrt(n*n+c*c),this.theta=Math.atan2(n,c),this.y=o,this}clone(){return new this.constructor().copy(this)}}class gb{constructor(n,o,c,h){gb.prototype.isMatrix2=!0,this.elements=[1,0,0,1],n!==void 0&&this.set(n,o,c,h)}identity(){return this.set(1,0,0,1),this}fromArray(n,o=0){for(let c=0;c<4;c++)this.elements[c]=n[c+o];return this}set(n,o,c,h){const p=this.elements;return p[0]=n,p[2]=o,p[1]=c,p[3]=h,this}}const qR=new vt;class mk{constructor(n=new vt(1/0,1/0),o=new vt(-1/0,-1/0)){this.isBox2=!0,this.min=n,this.max=o}set(n,o){return this.min.copy(n),this.max.copy(o),this}setFromPoints(n){this.makeEmpty();for(let o=0,c=n.length;o<c;o++)this.expandByPoint(n[o]);return this}setFromCenterAndSize(n,o){const c=qR.copy(o).multiplyScalar(.5);return this.min.copy(n).sub(c),this.max.copy(n).add(c),this}clone(){return new this.constructor().copy(this)}copy(n){return this.min.copy(n.min),this.max.copy(n.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(n){return this.isEmpty()?n.set(0,0):n.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(n){return this.isEmpty()?n.set(0,0):n.subVectors(this.max,this.min)}expandByPoint(n){return this.min.min(n),this.max.max(n),this}expandByVector(n){return this.min.sub(n),this.max.add(n),this}expandByScalar(n){return this.min.addScalar(-n),this.max.addScalar(n),this}containsPoint(n){return n.x>=this.min.x&&n.x<=this.max.x&&n.y>=this.min.y&&n.y<=this.max.y}containsBox(n){return this.min.x<=n.min.x&&n.max.x<=this.max.x&&this.min.y<=n.min.y&&n.max.y<=this.max.y}getParameter(n,o){return o.set((n.x-this.min.x)/(this.max.x-this.min.x),(n.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(n){return n.max.x>=this.min.x&&n.min.x<=this.max.x&&n.max.y>=this.min.y&&n.min.y<=this.max.y}clampPoint(n,o){return o.copy(n).clamp(this.min,this.max)}distanceToPoint(n){return this.clampPoint(n,qR).distanceTo(n)}intersect(n){return this.min.max(n.min),this.max.min(n.max),this.isEmpty()&&this.makeEmpty(),this}union(n){return this.min.min(n.min),this.max.max(n.max),this}translate(n){return this.min.add(n),this.max.add(n),this}equals(n){return n.min.equals(this.min)&&n.max.equals(this.max)}}const YR=new ce,Sx=new ce,$d=new ce,Xd=new ce,_b=new ce,gk=new ce,_k=new ce;class xk{constructor(n=new ce,o=new ce){this.start=n,this.end=o}set(n,o){return this.start.copy(n),this.end.copy(o),this}copy(n){return this.start.copy(n.start),this.end.copy(n.end),this}getCenter(n){return n.addVectors(this.start,this.end).multiplyScalar(.5)}delta(n){return n.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(n,o){return this.delta(o).multiplyScalar(n).add(this.start)}closestPointToPointParameter(n,o){YR.subVectors(n,this.start),Sx.subVectors(this.end,this.start);const c=Sx.dot(Sx);let p=Sx.dot(YR)/c;return o&&(p=Kn(p,0,1)),p}closestPointToPoint(n,o,c){const h=this.closestPointToPointParameter(n,o);return this.delta(c).multiplyScalar(h).add(this.start)}distanceSqToLine3(n,o=gk,c=_k){const h=10000000000000001e-32;let p,_;const y=this.start,b=n.start,M=this.end,R=n.end;$d.subVectors(M,y),Xd.subVectors(R,b),_b.subVectors(y,b);const C=$d.dot($d),N=Xd.dot(Xd),P=Xd.dot(_b);if(C<=h&&N<=h)return o.copy(y),c.copy(b),o.sub(c),o.dot(o);if(C<=h)p=0,_=P/N,_=Kn(_,0,1);else{const L=$d.dot(_b);if(N<=h)_=0,p=Kn(-L/C,0,1);else{const V=$d.dot(Xd),U=C*N-V*V;U!==0?p=Kn((V*P-L*N)/U,0,1):p=0,_=(V*p+P)/N,_<0?(_=0,p=Kn(-L/C,0,1)):_>1&&(_=1,p=Kn((V-L)/C,0,1))}}return o.copy(y).add($d.multiplyScalar(p)),c.copy(b).add(Xd.multiplyScalar(_)),o.sub(c),o.dot(o)}applyMatrix4(n){return this.start.applyMatrix4(n),this.end.applyMatrix4(n),this}equals(n){return n.start.equals(this.start)&&n.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}const ZR=new ce;class yk extends Bi{constructor(n,o){super(),this.light=n,this.matrixAutoUpdate=!1,this.color=o,this.type="SpotLightHelper";const c=new pi,h=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let _=0,y=1,b=32;_<b;_++,y++){const M=_/b*Math.PI*2,R=y/b*Math.PI*2;h.push(Math.cos(M),Math.sin(M),1,Math.cos(R),Math.sin(R),1)}c.setAttribute("position",new Tn(h,3));const p=new Kr({fog:!1,toneMapped:!1});this.cone=new Qa(c,p),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),this.parent?(this.parent.updateWorldMatrix(!0),this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)):this.matrix.copy(this.light.matrixWorld),this.matrixWorld.copy(this.light.matrixWorld);const n=this.light.distance?this.light.distance:1e3,o=n*Math.tan(this.light.angle);this.cone.scale.set(o,o,n),ZR.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(ZR),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const Ec=new ce,bx=new Qn,xb=new Qn;class vk extends Qa{constructor(n){const o=KR(n),c=new pi,h=[],p=[];for(let M=0;M<o.length;M++){const R=o[M];R.parent&&R.parent.isBone&&(h.push(0,0,0),h.push(0,0,0),p.push(0,0,0),p.push(0,0,0))}c.setAttribute("position",new Tn(h,3)),c.setAttribute("color",new Tn(p,3));const _=new Kr({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(c,_),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=n,this.bones=o,this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1;const y=new mn(255),b=new mn(65280);this.setColors(y,b)}updateMatrixWorld(n){const o=this.bones,c=this.geometry,h=c.getAttribute("position");xb.copy(this.root.matrixWorld).invert();for(let p=0,_=0;p<o.length;p++){const y=o[p];y.parent&&y.parent.isBone&&(bx.multiplyMatrices(xb,y.matrixWorld),Ec.setFromMatrixPosition(bx),h.setXYZ(_,Ec.x,Ec.y,Ec.z),bx.multiplyMatrices(xb,y.parent.matrixWorld),Ec.setFromMatrixPosition(bx),h.setXYZ(_+1,Ec.x,Ec.y,Ec.z),_+=2)}c.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(n)}setColors(n,o){const h=this.geometry.getAttribute("color");for(let p=0;p<h.count;p+=2)h.setXYZ(p,n.r,n.g,n.b),h.setXYZ(p+1,o.r,o.g,o.b);return h.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}function KR(m){const n=[];m.isBone===!0&&n.push(m);for(let o=0;o<m.children.length;o++)n.push(...KR(m.children[o]));return n}class Sk extends Zs{constructor(n,o,c){const h=new tm(o,4,2),p=new Sc({wireframe:!0,fog:!1,toneMapped:!1});super(h,p),this.light=n,this.color=c,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const bk=new ce,JR=new mn,jR=new mn;class Tk extends Bi{constructor(n,o,c){super(),this.light=n,this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1,this.color=c,this.type="HemisphereLightHelper";const h=new em(o);h.rotateY(Math.PI*.5),this.material=new Sc({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const p=h.getAttribute("position"),_=new Float32Array(p.count*3);h.setAttribute("color",new cs(_,3)),this.add(new Zs(h,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const n=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const o=n.geometry.getAttribute("color");JR.copy(this.light.color),jR.copy(this.light.groundColor);for(let c=0,h=o.count;c<h;c++){const p=c<h/2?JR:jR;o.setXYZ(c,p.r,p.g,p.b)}o.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),n.lookAt(bk.setFromMatrixPosition(this.light.matrixWorld).negate())}}class Mk extends Qa{constructor(n=10,o=10,c=4473924,h=8947848){c=new mn(c),h=new mn(h);const p=o/2,_=n/o,y=n/2,b=[],M=[];for(let N=0,P=0,L=-y;N<=o;N++,L+=_){b.push(-y,0,L,y,0,L),b.push(L,0,-y,L,0,y);const V=N===p?c:h;V.toArray(M,P),P+=3,V.toArray(M,P),P+=3,V.toArray(M,P),P+=3,V.toArray(M,P),P+=3}const R=new pi;R.setAttribute("position",new Tn(b,3)),R.setAttribute("color",new Tn(M,3));const C=new Kr({vertexColors:!0,toneMapped:!1});super(R,C),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class wk extends Qa{constructor(n=10,o=16,c=8,h=64,p=4473924,_=8947848){p=new mn(p),_=new mn(_);const y=[],b=[];if(o>1)for(let C=0;C<o;C++){const N=C/o*(Math.PI*2),P=Math.sin(N)*n,L=Math.cos(N)*n;y.push(0,0,0),y.push(P,0,L);const V=C&1?p:_;b.push(V.r,V.g,V.b),b.push(V.r,V.g,V.b)}for(let C=0;C<c;C++){const N=C&1?p:_,P=n-n/c*C;for(let L=0;L<h;L++){let V=L/h*(Math.PI*2),U=Math.sin(V)*P,I=Math.cos(V)*P;y.push(U,0,I),b.push(N.r,N.g,N.b),V=(L+1)/h*(Math.PI*2),U=Math.sin(V)*P,I=Math.cos(V)*P,y.push(U,0,I),b.push(N.r,N.g,N.b)}}const M=new pi;M.setAttribute("position",new Tn(y,3)),M.setAttribute("color",new Tn(b,3));const R=new Kr({vertexColors:!0,toneMapped:!1});super(M,R),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const QR=new ce,Tx=new ce,eC=new ce;class Ak extends Bi{constructor(n,o,c){super(),this.light=n,this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1,this.color=c,this.type="DirectionalLightHelper",o===void 0&&(o=1);let h=new pi;h.setAttribute("position",new Tn([-o,o,0,o,o,0,o,-o,0,-o,-o,0,-o,o,0],3));const p=new Kr({fog:!1,toneMapped:!1});this.lightPlane=new Mc(h,p),this.add(this.lightPlane),h=new pi,h.setAttribute("position",new Tn([0,0,0,0,0,1],3)),this.targetLine=new Mc(h,p),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),QR.setFromMatrixPosition(this.light.matrixWorld),Tx.setFromMatrixPosition(this.light.target.matrixWorld),eC.subVectors(Tx,QR),this.lightPlane.lookAt(Tx),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Tx),this.targetLine.scale.z=eC.length()}}const Mx=new ce,Is=new R_;class Ek extends Qa{constructor(n){const o=new pi,c=new Kr({color:16777215,vertexColors:!0,toneMapped:!1}),h=[],p=[],_={};y("n1","n2"),y("n2","n4"),y("n4","n3"),y("n3","n1"),y("f1","f2"),y("f2","f4"),y("f4","f3"),y("f3","f1"),y("n1","f1"),y("n2","f2"),y("n3","f3"),y("n4","f4"),y("p","n1"),y("p","n2"),y("p","n3"),y("p","n4"),y("u1","u2"),y("u2","u3"),y("u3","u1"),y("c","t"),y("p","c"),y("cn1","cn2"),y("cn3","cn4"),y("cf1","cf2"),y("cf3","cf4");function y(L,V){b(L),b(V)}function b(L){h.push(0,0,0),p.push(0,0,0),_[L]===void 0&&(_[L]=[]),_[L].push(h.length/3-1)}o.setAttribute("position",new Tn(h,3)),o.setAttribute("color",new Tn(p,3)),super(o,c),this.type="CameraHelper",this.camera=n,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=n.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=_,this.update();const M=new mn(16755200),R=new mn(16711680),C=new mn(43775),N=new mn(16777215),P=new mn(3355443);this.setColors(M,R,C,N,P)}setColors(n,o,c,h,p){const y=this.geometry.getAttribute("color");return y.setXYZ(0,n.r,n.g,n.b),y.setXYZ(1,n.r,n.g,n.b),y.setXYZ(2,n.r,n.g,n.b),y.setXYZ(3,n.r,n.g,n.b),y.setXYZ(4,n.r,n.g,n.b),y.setXYZ(5,n.r,n.g,n.b),y.setXYZ(6,n.r,n.g,n.b),y.setXYZ(7,n.r,n.g,n.b),y.setXYZ(8,n.r,n.g,n.b),y.setXYZ(9,n.r,n.g,n.b),y.setXYZ(10,n.r,n.g,n.b),y.setXYZ(11,n.r,n.g,n.b),y.setXYZ(12,n.r,n.g,n.b),y.setXYZ(13,n.r,n.g,n.b),y.setXYZ(14,n.r,n.g,n.b),y.setXYZ(15,n.r,n.g,n.b),y.setXYZ(16,n.r,n.g,n.b),y.setXYZ(17,n.r,n.g,n.b),y.setXYZ(18,n.r,n.g,n.b),y.setXYZ(19,n.r,n.g,n.b),y.setXYZ(20,n.r,n.g,n.b),y.setXYZ(21,n.r,n.g,n.b),y.setXYZ(22,n.r,n.g,n.b),y.setXYZ(23,n.r,n.g,n.b),y.setXYZ(24,o.r,o.g,o.b),y.setXYZ(25,o.r,o.g,o.b),y.setXYZ(26,o.r,o.g,o.b),y.setXYZ(27,o.r,o.g,o.b),y.setXYZ(28,o.r,o.g,o.b),y.setXYZ(29,o.r,o.g,o.b),y.setXYZ(30,o.r,o.g,o.b),y.setXYZ(31,o.r,o.g,o.b),y.setXYZ(32,c.r,c.g,c.b),y.setXYZ(33,c.r,c.g,c.b),y.setXYZ(34,c.r,c.g,c.b),y.setXYZ(35,c.r,c.g,c.b),y.setXYZ(36,c.r,c.g,c.b),y.setXYZ(37,c.r,c.g,c.b),y.setXYZ(38,h.r,h.g,h.b),y.setXYZ(39,h.r,h.g,h.b),y.setXYZ(40,p.r,p.g,p.b),y.setXYZ(41,p.r,p.g,p.b),y.setXYZ(42,p.r,p.g,p.b),y.setXYZ(43,p.r,p.g,p.b),y.setXYZ(44,p.r,p.g,p.b),y.setXYZ(45,p.r,p.g,p.b),y.setXYZ(46,p.r,p.g,p.b),y.setXYZ(47,p.r,p.g,p.b),y.setXYZ(48,p.r,p.g,p.b),y.setXYZ(49,p.r,p.g,p.b),y.needsUpdate=!0,this}update(){const n=this.geometry,o=this.pointMap,c=1,h=1;let p,_;if(Is.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),this.camera.reversedDepth===!0)p=1,_=0;else if(this.camera.coordinateSystem===Po)p=-1,_=1;else if(this.camera.coordinateSystem===md)p=0,_=1;else throw new Error("THREE.CameraHelper.update(): Invalid coordinate system: "+this.camera.coordinateSystem);Os("c",o,n,Is,0,0,p),Os("t",o,n,Is,0,0,_),Os("n1",o,n,Is,-c,-h,p),Os("n2",o,n,Is,c,-h,p),Os("n3",o,n,Is,-c,h,p),Os("n4",o,n,Is,c,h,p),Os("f1",o,n,Is,-c,-h,_),Os("f2",o,n,Is,c,-h,_),Os("f3",o,n,Is,-c,h,_),Os("f4",o,n,Is,c,h,_),Os("u1",o,n,Is,c*.7,h*1.1,p),Os("u2",o,n,Is,-c*.7,h*1.1,p),Os("u3",o,n,Is,0,h*2,p),Os("cf1",o,n,Is,-c,0,_),Os("cf2",o,n,Is,c,0,_),Os("cf3",o,n,Is,0,-h,_),Os("cf4",o,n,Is,0,h,_),Os("cn1",o,n,Is,-c,0,p),Os("cn2",o,n,Is,c,0,p),Os("cn3",o,n,Is,0,-h,p),Os("cn4",o,n,Is,0,h,p),n.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function Os(m,n,o,c,h,p,_){Mx.set(h,p,_).unproject(c);const y=n[m];if(y!==void 0){const b=o.getAttribute("position");for(let M=0,R=y.length;M<R;M++)b.setXYZ(y[M],Mx.x,Mx.y,Mx.z)}}const wx=new Lr;class Rk extends Qa{constructor(n,o=16776960){const c=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),h=new Float32Array(24),p=new pi;p.setIndex(new cs(c,1)),p.setAttribute("position",new cs(h,3)),super(p,new Kr({color:o,toneMapped:!1})),this.object=n,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(){if(this.object!==void 0&&wx.setFromObject(this.object),wx.isEmpty())return;const n=wx.min,o=wx.max,c=this.geometry.attributes.position,h=c.array;h[0]=o.x,h[1]=o.y,h[2]=o.z,h[3]=n.x,h[4]=o.y,h[5]=o.z,h[6]=n.x,h[7]=n.y,h[8]=o.z,h[9]=o.x,h[10]=n.y,h[11]=o.z,h[12]=o.x,h[13]=o.y,h[14]=n.z,h[15]=n.x,h[16]=o.y,h[17]=n.z,h[18]=n.x,h[19]=n.y,h[20]=n.z,h[21]=o.x,h[22]=n.y,h[23]=n.z,c.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(n){return this.object=n,this.update(),this}copy(n,o){return super.copy(n,o),this.object=n.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class Ck extends Qa{constructor(n,o=16776960){const c=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),h=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],p=new pi;p.setIndex(new cs(c,1)),p.setAttribute("position",new Tn(h,3)),super(p,new Kr({color:o,toneMapped:!1})),this.box=n,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(n){const o=this.box;o.isEmpty()||(o.getCenter(this.position),o.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(n))}dispose(){this.geometry.dispose(),this.material.dispose()}}class Nk extends Mc{constructor(n,o=1,c=16776960){const h=c,p=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],_=new pi;_.setAttribute("position",new Tn(p,3)),_.computeBoundingSphere(),super(_,new Kr({color:h,toneMapped:!1})),this.type="PlaneHelper",this.plane=n,this.size=o;const y=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],b=new pi;b.setAttribute("position",new Tn(y,3)),b.computeBoundingSphere(),this.add(new Zs(b,new Sc({color:h,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(n){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(n)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}const tC=new ce;let Ax,yb;class Pk extends Bi{constructor(n=new ce(0,0,1),o=new ce(0,0,0),c=1,h=16776960,p=c*.2,_=p*.2){super(),this.type="ArrowHelper",Ax===void 0&&(Ax=new pi,Ax.setAttribute("position",new Tn([0,0,0,0,1,0],3)),yb=new qp(.5,1,5,1),yb.translate(0,-.5,0)),this.position.copy(o),this.line=new Mc(Ax,new Kr({color:h,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Zs(yb,new Sc({color:h,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(n),this.setLength(c,p,_)}setDirection(n){if(n.y>.99999)this.quaternion.set(0,0,0,1);else if(n.y<-.99999)this.quaternion.set(1,0,0,0);else{tC.set(n.z,0,-n.x).normalize();const o=Math.acos(n.y);this.quaternion.setFromAxisAngle(tC,o)}}setLength(n,o=n*.2,c=o*.2){this.line.scale.set(1,Math.max(1e-4,n-o),1),this.line.updateMatrix(),this.cone.scale.set(c,o,c),this.cone.position.y=n,this.cone.updateMatrix()}setColor(n){this.line.material.color.set(n),this.cone.material.color.set(n)}copy(n){return super.copy(n,!1),this.line.copy(n.line),this.cone.copy(n.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class Ik extends Qa{constructor(n=1){const o=[0,0,0,n,0,0,0,0,0,0,n,0,0,0,0,0,0,n],c=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],h=new pi;h.setAttribute("position",new Tn(o,3)),h.setAttribute("color",new Tn(c,3));const p=new Kr({vertexColors:!0,toneMapped:!1});super(h,p),this.type="AxesHelper"}setColors(n,o,c){const h=new mn,p=this.geometry.attributes.color.array;return h.set(n),h.toArray(p,0),h.toArray(p,3),h.set(o),h.toArray(p,6),h.toArray(p,9),h.set(c),h.toArray(p,12),h.toArray(p,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class Lk{constructor(){this.type="ShapePath",this.color=new mn,this.subPaths=[],this.currentPath=null}moveTo(n,o){return this.currentPath=new ox,this.subPaths.push(this.currentPath),this.currentPath.moveTo(n,o),this}lineTo(n,o){return this.currentPath.lineTo(n,o),this}quadraticCurveTo(n,o,c,h){return this.currentPath.quadraticCurveTo(n,o,c,h),this}bezierCurveTo(n,o,c,h,p,_){return this.currentPath.bezierCurveTo(n,o,c,h,p,_),this}splineThru(n){return this.currentPath.splineThru(n),this}toShapes(n){function o(I){const Z=[];for(let W=0,G=I.length;W<G;W++){const ae=I[W],le=new Ru;le.curves=ae.curves,Z.push(le)}return Z}function c(I,Z){const W=Z.length;let G=!1;for(let ae=W-1,le=0;le<W;ae=le++){let he=Z[ae],me=Z[le],j=me.x-he.x,J=me.y-he.y;if(Math.abs(J)>Number.EPSILON){if(J<0&&(he=Z[le],j=-j,me=Z[ae],J=-J),I.y<he.y||I.y>me.y)continue;if(I.y===he.y){if(I.x===he.x)return!0}else{const fe=J*(I.x-he.x)-j*(I.y-he.y);if(fe===0)return!0;if(fe<0)continue;G=!G}}else{if(I.y!==he.y)continue;if(me.x<=I.x&&I.x<=he.x||he.x<=I.x&&I.x<=me.x)return!0}}return G}const h=Ca.isClockWise,p=this.subPaths;if(p.length===0)return[];let _,y,b;const M=[];if(p.length===1)return y=p[0],b=new Ru,b.curves=y.curves,M.push(b),M;let R=!h(p[0].getPoints());R=n?!R:R;const C=[],N=[];let P=[],L=0,V;N[L]=void 0,P[L]=[];for(let I=0,Z=p.length;I<Z;I++)y=p[I],V=y.getPoints(),_=h(V),_=n?!_:_,_?(!R&&N[L]&&L++,N[L]={s:new Ru,p:V},N[L].s.curves=y.curves,R&&L++,P[L]=[]):P[L].push({h:y,p:V[0]});if(!N[0])return o(p);if(N.length>1){let I=!1,Z=0;for(let W=0,G=N.length;W<G;W++)C[W]=[];for(let W=0,G=N.length;W<G;W++){const ae=P[W];for(let le=0;le<ae.length;le++){const he=ae[le];let me=!0;for(let j=0;j<N.length;j++)c(he.p,N[j].p)&&(W!==j&&Z++,me?(me=!1,C[j].push(he)):I=!0);me&&C[W].push(he)}}Z>0&&I===!1&&(P=C)}let U;for(let I=0,Z=N.length;I<Z;I++){b=N[I].s,M.push(b),U=P[I];for(let W=0,G=U.length;W<G;W++)b.holes.push(U[W].h)}return M}}class Dk extends Ya{constructor(n,o=null){super(),this.object=n,this.domElement=o,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(n){if(n===void 0){console.warn("THREE.Controls: connect() now requires an element.");return}this.domElement!==null&&this.disconnect(),this.domElement=n}disconnect(){}dispose(){}update(){}}function Uk(m,n){const o=m.image&&m.image.width?m.image.width/m.image.height:1;return o>n?(m.repeat.x=1,m.repeat.y=o/n,m.offset.x=0,m.offset.y=(1-m.repeat.y)/2):(m.repeat.x=n/o,m.repeat.y=1,m.offset.x=(1-m.repeat.x)/2,m.offset.y=0),m}function Fk(m,n){const o=m.image&&m.image.width?m.image.width/m.image.height:1;return o>n?(m.repeat.x=n/o,m.repeat.y=1,m.offset.x=(1-m.repeat.x)/2,m.offset.y=0):(m.repeat.x=1,m.repeat.y=o/n,m.offset.x=0,m.offset.y=(1-m.repeat.y)/2),m}function Bk(m){return m.repeat.x=1,m.repeat.y=1,m.offset.x=0,m.offset.y=0,m}function vb(m,n,o,c){const h=Ok(c);switch(o){case dc:return m*n;case dd:return m*n/h.components*h.byteLength;case pu:return m*n/h.components*h.byteLength;case Ap:return m*n*2/h.components*h.byteLength;case fd:return m*n*2/h.components*h.byteLength;case hd:return m*n*3/h.components*h.byteLength;case Xs:return m*n*4/h.components*h.byteLength;case pd:return m*n*4/h.components*h.byteLength;case ne:case Ee:return Math.floor((m+3)/4)*Math.floor((n+3)/4)*8;case ze:case ke:return Math.floor((m+3)/4)*Math.floor((n+3)/4)*16;case Nt:case _n:return Math.max(m,16)*Math.max(n,8)/4;case Re:case en:return Math.max(m,8)*Math.max(n,8)/2;case fn:case Gn:return Math.floor((m+3)/4)*Math.floor((n+3)/4)*8;case $n:return Math.floor((m+3)/4)*Math.floor((n+3)/4)*16;case Fn:return Math.floor((m+3)/4)*Math.floor((n+3)/4)*16;case gi:return Math.floor((m+4)/5)*Math.floor((n+3)/4)*16;case Ui:return Math.floor((m+4)/5)*Math.floor((n+4)/5)*16;case fs:return Math.floor((m+5)/6)*Math.floor((n+4)/5)*16;case Ji:return Math.floor((m+5)/6)*Math.floor((n+5)/6)*16;case ki:return Math.floor((m+7)/8)*Math.floor((n+4)/5)*16;case Vn:return Math.floor((m+7)/8)*Math.floor((n+5)/6)*16;case as:return Math.floor((m+7)/8)*Math.floor((n+7)/8)*16;case wi:return Math.floor((m+9)/10)*Math.floor((n+4)/5)*16;case ur:return Math.floor((m+9)/10)*Math.floor((n+5)/6)*16;case Ta:return Math.floor((m+9)/10)*Math.floor((n+7)/8)*16;case hr:return Math.floor((m+9)/10)*Math.floor((n+9)/10)*16;case qa:return Math.floor((m+11)/12)*Math.floor((n+9)/10)*16;case ls:return Math.floor((m+11)/12)*Math.floor((n+11)/12)*16;case dr:case Tr:case qs:return Math.ceil(m/4)*Math.ceil(n/4)*16;case fr:case fc:return Math.ceil(m/4)*Math.ceil(n/4)*8;case ea:case r_:return Math.ceil(m/4)*Math.ceil(n/4)*16}throw new Error(`Unable to determine texture byte length for ${o} format.`)}function Ok(m){switch(m){case ut:case ln:return{byteLength:1,components:1};case Pi:case Yn:case Sl:return{byteLength:2,components:1};case Qo:case hc:return{byteLength:2,components:4};case nr:case Ii:case vs:return{byteLength:4,components:1};case ud:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${m}.`)}class Vk{static contain(n,o){return Uk(n,o)}static cover(n,o){return Fk(n,o)}static fill(n){return Bk(n)}static getByteLength(n,o,c,h){return vb(n,o,c,h)}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:a}})),typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=a);function nC(){let m=null,n=!1,o=null,c=null;function h(p,_){o(p,_),c=m.requestAnimationFrame(h)}return{start:function(){n!==!0&&o!==null&&(c=m.requestAnimationFrame(h),n=!0)},stop:function(){m.cancelAnimationFrame(c),n=!1},setAnimationLoop:function(p){o=p},setContext:function(p){m=p}}}function zk(m){const n=new WeakMap;function o(y,b){const M=y.array,R=y.usage,C=M.byteLength,N=m.createBuffer();m.bindBuffer(b,N),m.bufferData(b,M,R),y.onUploadCallback();let P;if(M instanceof Float32Array)P=m.FLOAT;else if(typeof Float16Array<"u"&&M instanceof Float16Array)P=m.HALF_FLOAT;else if(M instanceof Uint16Array)y.isFloat16BufferAttribute?P=m.HALF_FLOAT:P=m.UNSIGNED_SHORT;else if(M instanceof Int16Array)P=m.SHORT;else if(M instanceof Uint32Array)P=m.UNSIGNED_INT;else if(M instanceof Int32Array)P=m.INT;else if(M instanceof Int8Array)P=m.BYTE;else if(M instanceof Uint8Array)P=m.UNSIGNED_BYTE;else if(M instanceof Uint8ClampedArray)P=m.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+M);return{buffer:N,type:P,bytesPerElement:M.BYTES_PER_ELEMENT,version:y.version,size:C}}function c(y,b,M){const R=b.array,C=b.updateRanges;if(m.bindBuffer(M,y),C.length===0)m.bufferSubData(M,0,R);else{C.sort((P,L)=>P.start-L.start);let N=0;for(let P=1;P<C.length;P++){const L=C[N],V=C[P];V.start<=L.start+L.count+1?L.count=Math.max(L.count,V.start+V.count-L.start):(++N,C[N]=V)}C.length=N+1;for(let P=0,L=C.length;P<L;P++){const V=C[P];m.bufferSubData(M,V.start*R.BYTES_PER_ELEMENT,R,V.start,V.count)}b.clearUpdateRanges()}b.onUploadCallback()}function h(y){return y.isInterleavedBufferAttribute&&(y=y.data),n.get(y)}function p(y){y.isInterleavedBufferAttribute&&(y=y.data);const b=n.get(y);b&&(m.deleteBuffer(b.buffer),n.delete(y))}function _(y,b){if(y.isInterleavedBufferAttribute&&(y=y.data),y.isGLBufferAttribute){const R=n.get(y);(!R||R.version<y.version)&&n.set(y,{buffer:y.buffer,type:y.type,bytesPerElement:y.elementSize,version:y.version});return}const M=n.get(y);if(M===void 0)n.set(y,o(y,b));else if(M.version<y.version){if(M.size!==y.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");c(M.buffer,y,b),M.version=y.version}}return{get:h,remove:p,update:_}}var kk=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,Gk=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,Hk=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,Wk=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,$k=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,Xk=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,qk=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,Yk=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,Zk=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,Kk=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,Jk=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,jk=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,Qk=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,eG=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,tG=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,nG=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,iG=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,sG=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,rG=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,oG=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,aG=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,lG=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,cG=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,uG=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,hG=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,dG=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,fG=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,pG=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,mG=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,gG=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,_G="gl_FragColor = linearToOutputTexel( gl_FragColor );",xG=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,yG=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,vG=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,SG=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,bG=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,TG=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,MG=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,wG=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,AG=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,EG=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,RG=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,CG=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,NG=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,PG=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,IG=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,LG=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,DG=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,UG=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,FG=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,BG=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,OG=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,VG=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,zG=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,kG=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,GG=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,HG=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,WG=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,$G=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,XG=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,qG=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,YG=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,ZG=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,KG=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,JG=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,jG=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,QG=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,eH=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,tH=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,nH=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,iH=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,sH=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,rH=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,oH=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,aH=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,lH=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,cH=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,uH=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,hH=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,dH=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,fH=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,pH=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,mH=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,gH=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,_H=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,xH=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,yH=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,vH=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,SH=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,bH=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		float depth = unpackRGBAToDepth( texture2D( depths, uv ) );
		#ifdef USE_REVERSEDEPTHBUF
			return step( depth, compare );
		#else
			return step( compare, depth );
		#endif
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		#ifdef USE_REVERSEDEPTHBUF
			float hard_shadow = step( distribution.x, compare );
		#else
			float hard_shadow = step( compare , distribution.x );
		#endif
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,TH=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,MH=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,wH=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,AH=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,EH=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,RH=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,CH=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,NH=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,PH=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,IH=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,LH=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,DH=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,UH=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,FH=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,BH=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,OH=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,VH=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const _i={alphahash_fragment:kk,alphahash_pars_fragment:Gk,alphamap_fragment:Hk,alphamap_pars_fragment:Wk,alphatest_fragment:$k,alphatest_pars_fragment:Xk,aomap_fragment:qk,aomap_pars_fragment:Yk,batching_pars_vertex:Zk,batching_vertex:Kk,begin_vertex:Jk,beginnormal_vertex:jk,bsdfs:Qk,iridescence_fragment:eG,bumpmap_pars_fragment:tG,clipping_planes_fragment:nG,clipping_planes_pars_fragment:iG,clipping_planes_pars_vertex:sG,clipping_planes_vertex:rG,color_fragment:oG,color_pars_fragment:aG,color_pars_vertex:lG,color_vertex:cG,common:uG,cube_uv_reflection_fragment:hG,defaultnormal_vertex:dG,displacementmap_pars_vertex:fG,displacementmap_vertex:pG,emissivemap_fragment:mG,emissivemap_pars_fragment:gG,colorspace_fragment:_G,colorspace_pars_fragment:xG,envmap_fragment:yG,envmap_common_pars_fragment:vG,envmap_pars_fragment:SG,envmap_pars_vertex:bG,envmap_physical_pars_fragment:LG,envmap_vertex:TG,fog_vertex:MG,fog_pars_vertex:wG,fog_fragment:AG,fog_pars_fragment:EG,gradientmap_pars_fragment:RG,lightmap_pars_fragment:CG,lights_lambert_fragment:NG,lights_lambert_pars_fragment:PG,lights_pars_begin:IG,lights_toon_fragment:DG,lights_toon_pars_fragment:UG,lights_phong_fragment:FG,lights_phong_pars_fragment:BG,lights_physical_fragment:OG,lights_physical_pars_fragment:VG,lights_fragment_begin:zG,lights_fragment_maps:kG,lights_fragment_end:GG,logdepthbuf_fragment:HG,logdepthbuf_pars_fragment:WG,logdepthbuf_pars_vertex:$G,logdepthbuf_vertex:XG,map_fragment:qG,map_pars_fragment:YG,map_particle_fragment:ZG,map_particle_pars_fragment:KG,metalnessmap_fragment:JG,metalnessmap_pars_fragment:jG,morphinstance_vertex:QG,morphcolor_vertex:eH,morphnormal_vertex:tH,morphtarget_pars_vertex:nH,morphtarget_vertex:iH,normal_fragment_begin:sH,normal_fragment_maps:rH,normal_pars_fragment:oH,normal_pars_vertex:aH,normal_vertex:lH,normalmap_pars_fragment:cH,clearcoat_normal_fragment_begin:uH,clearcoat_normal_fragment_maps:hH,clearcoat_pars_fragment:dH,iridescence_pars_fragment:fH,opaque_fragment:pH,packing:mH,premultiplied_alpha_fragment:gH,project_vertex:_H,dithering_fragment:xH,dithering_pars_fragment:yH,roughnessmap_fragment:vH,roughnessmap_pars_fragment:SH,shadowmap_pars_fragment:bH,shadowmap_pars_vertex:TH,shadowmap_vertex:MH,shadowmask_pars_fragment:wH,skinbase_vertex:AH,skinning_pars_vertex:EH,skinning_vertex:RH,skinnormal_vertex:CH,specularmap_fragment:NH,specularmap_pars_fragment:PH,tonemapping_fragment:IH,tonemapping_pars_fragment:LH,transmission_fragment:DH,transmission_pars_fragment:UH,uv_pars_fragment:FH,uv_pars_vertex:BH,uv_vertex:OH,worldpos_vertex:VH,background_vert:`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,background_frag:`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,backgroundCube_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,backgroundCube_frag:`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,cube_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,cube_frag:`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,depth_vert:`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,depth_frag:`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	#ifdef USE_REVERSEDEPTHBUF
		float fragCoordZ = vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ];
	#else
		float fragCoordZ = 0.5 * vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ] + 0.5;
	#endif
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,distanceRGBA_vert:`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,distanceRGBA_frag:`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,equirect_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,equirect_frag:`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,linedashed_vert:`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,linedashed_frag:`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,meshbasic_vert:`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,meshbasic_frag:`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshlambert_vert:`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshlambert_frag:`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshmatcap_vert:`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,meshmatcap_frag:`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshnormal_vert:`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,meshnormal_frag:`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,meshphong_vert:`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshphong_frag:`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshphysical_vert:`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,meshphysical_frag:`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshtoon_vert:`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshtoon_frag:`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,points_vert:`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,points_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,shadow_vert:`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,shadow_frag:`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,sprite_vert:`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,sprite_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`},nn={common:{diffuse:{value:new mn(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new ci},alphaMap:{value:null},alphaMapTransform:{value:new ci},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new ci}},envmap:{envMap:{value:null},envMapRotation:{value:new ci},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new ci}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new ci}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new ci},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new ci},normalScale:{value:new vt(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new ci},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new ci}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new ci}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new ci}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new mn(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new mn(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new ci},alphaTest:{value:0},uvTransform:{value:new ci}},sprite:{diffuse:{value:new mn(16777215)},opacity:{value:1},center:{value:new vt(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new ci},alphaMap:{value:null},alphaMapTransform:{value:new ci},alphaTest:{value:0}}},Na={basic:{uniforms:Yr([nn.common,nn.specularmap,nn.envmap,nn.aomap,nn.lightmap,nn.fog]),vertexShader:_i.meshbasic_vert,fragmentShader:_i.meshbasic_frag},lambert:{uniforms:Yr([nn.common,nn.specularmap,nn.envmap,nn.aomap,nn.lightmap,nn.emissivemap,nn.bumpmap,nn.normalmap,nn.displacementmap,nn.fog,nn.lights,{emissive:{value:new mn(0)}}]),vertexShader:_i.meshlambert_vert,fragmentShader:_i.meshlambert_frag},phong:{uniforms:Yr([nn.common,nn.specularmap,nn.envmap,nn.aomap,nn.lightmap,nn.emissivemap,nn.bumpmap,nn.normalmap,nn.displacementmap,nn.fog,nn.lights,{emissive:{value:new mn(0)},specular:{value:new mn(1118481)},shininess:{value:30}}]),vertexShader:_i.meshphong_vert,fragmentShader:_i.meshphong_frag},standard:{uniforms:Yr([nn.common,nn.envmap,nn.aomap,nn.lightmap,nn.emissivemap,nn.bumpmap,nn.normalmap,nn.displacementmap,nn.roughnessmap,nn.metalnessmap,nn.fog,nn.lights,{emissive:{value:new mn(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:_i.meshphysical_vert,fragmentShader:_i.meshphysical_frag},toon:{uniforms:Yr([nn.common,nn.aomap,nn.lightmap,nn.emissivemap,nn.bumpmap,nn.normalmap,nn.displacementmap,nn.gradientmap,nn.fog,nn.lights,{emissive:{value:new mn(0)}}]),vertexShader:_i.meshtoon_vert,fragmentShader:_i.meshtoon_frag},matcap:{uniforms:Yr([nn.common,nn.bumpmap,nn.normalmap,nn.displacementmap,nn.fog,{matcap:{value:null}}]),vertexShader:_i.meshmatcap_vert,fragmentShader:_i.meshmatcap_frag},points:{uniforms:Yr([nn.points,nn.fog]),vertexShader:_i.points_vert,fragmentShader:_i.points_frag},dashed:{uniforms:Yr([nn.common,nn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:_i.linedashed_vert,fragmentShader:_i.linedashed_frag},depth:{uniforms:Yr([nn.common,nn.displacementmap]),vertexShader:_i.depth_vert,fragmentShader:_i.depth_frag},normal:{uniforms:Yr([nn.common,nn.bumpmap,nn.normalmap,nn.displacementmap,{opacity:{value:1}}]),vertexShader:_i.meshnormal_vert,fragmentShader:_i.meshnormal_frag},sprite:{uniforms:Yr([nn.sprite,nn.fog]),vertexShader:_i.sprite_vert,fragmentShader:_i.sprite_frag},background:{uniforms:{uvTransform:{value:new ci},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:_i.background_vert,fragmentShader:_i.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new ci}},vertexShader:_i.backgroundCube_vert,fragmentShader:_i.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:_i.cube_vert,fragmentShader:_i.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:_i.equirect_vert,fragmentShader:_i.equirect_frag},distanceRGBA:{uniforms:Yr([nn.common,nn.displacementmap,{referencePosition:{value:new ce},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:_i.distanceRGBA_vert,fragmentShader:_i.distanceRGBA_frag},shadow:{uniforms:Yr([nn.lights,nn.fog,{color:{value:new mn(0)},opacity:{value:1}}]),vertexShader:_i.shadow_vert,fragmentShader:_i.shadow_frag}};Na.physical={uniforms:Yr([Na.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new ci},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new ci},clearcoatNormalScale:{value:new vt(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new ci},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new ci},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new ci},sheen:{value:0},sheenColor:{value:new mn(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new ci},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new ci},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new ci},transmissionSamplerSize:{value:new vt},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new ci},attenuationDistance:{value:0},attenuationColor:{value:new mn(0)},specularColor:{value:new mn(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new ci},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new ci},anisotropyVector:{value:new vt},anisotropyMap:{value:null},anisotropyMapTransform:{value:new ci}}]),vertexShader:_i.meshphysical_vert,fragmentShader:_i.meshphysical_frag};const Ex={r:0,b:0,g:0},Vu=new Do,zH=new Qn;function kH(m,n,o,c,h,p,_){const y=new mn(0);let b=p===!0?0:1,M,R,C=null,N=0,P=null;function L(W){let G=W.isScene===!0?W.background:null;return G&&G.isTexture&&(G=(W.backgroundBlurriness>0?o:n).get(G)),G}function V(W){let G=!1;const ae=L(W);ae===null?I(y,b):ae&&ae.isColor&&(I(ae,1),G=!0);const le=m.xr.getEnvironmentBlendMode();le==="additive"?c.buffers.color.setClear(0,0,0,1,_):le==="alpha-blend"&&c.buffers.color.setClear(0,0,0,0,_),(m.autoClear||G)&&(c.buffers.depth.setTest(!0),c.buffers.depth.setMask(!0),c.buffers.color.setMask(!0),m.clear(m.autoClearColor,m.autoClearDepth,m.autoClearStencil))}function U(W,G){const ae=L(G);ae&&(ae.isCubeTexture||ae.mapping===et)?(R===void 0&&(R=new Zs(new Tu(1,1,1),new Ea({name:"BackgroundCubeMaterial",uniforms:Pd(Na.backgroundCube.uniforms),vertexShader:Na.backgroundCube.vertexShader,fragmentShader:Na.backgroundCube.fragmentShader,side:v,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),R.geometry.deleteAttribute("normal"),R.geometry.deleteAttribute("uv"),R.onBeforeRender=function(le,he,me){this.matrixWorld.copyPosition(me.matrixWorld)},Object.defineProperty(R.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),h.update(R)),Vu.copy(G.backgroundRotation),Vu.x*=-1,Vu.y*=-1,Vu.z*=-1,ae.isCubeTexture&&ae.isRenderTargetTexture===!1&&(Vu.y*=-1,Vu.z*=-1),R.material.uniforms.envMap.value=ae,R.material.uniforms.flipEnvMap.value=ae.isCubeTexture&&ae.isRenderTargetTexture===!1?-1:1,R.material.uniforms.backgroundBlurriness.value=G.backgroundBlurriness,R.material.uniforms.backgroundIntensity.value=G.backgroundIntensity,R.material.uniforms.backgroundRotation.value.setFromMatrix4(zH.makeRotationFromEuler(Vu)),R.material.toneMapped=Li.getTransfer(ae.colorSpace)!==ss,(C!==ae||N!==ae.version||P!==m.toneMapping)&&(R.material.needsUpdate=!0,C=ae,N=ae.version,P=m.toneMapping),R.layers.enableAll(),W.unshift(R,R.geometry,R.material,0,0,null)):ae&&ae.isTexture&&(M===void 0&&(M=new Zs(new Hd(2,2),new Ea({name:"BackgroundMaterial",uniforms:Pd(Na.background.uniforms),vertexShader:Na.background.vertexShader,fragmentShader:Na.background.fragmentShader,side:x,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),M.geometry.deleteAttribute("normal"),Object.defineProperty(M.material,"map",{get:function(){return this.uniforms.t2D.value}}),h.update(M)),M.material.uniforms.t2D.value=ae,M.material.uniforms.backgroundIntensity.value=G.backgroundIntensity,M.material.toneMapped=Li.getTransfer(ae.colorSpace)!==ss,ae.matrixAutoUpdate===!0&&ae.updateMatrix(),M.material.uniforms.uvTransform.value.copy(ae.matrix),(C!==ae||N!==ae.version||P!==m.toneMapping)&&(M.material.needsUpdate=!0,C=ae,N=ae.version,P=m.toneMapping),M.layers.enableAll(),W.unshift(M,M.geometry,M.material,0,0,null))}function I(W,G){W.getRGB(Ex,c1(m)),c.buffers.color.setClear(Ex.r,Ex.g,Ex.b,G,_)}function Z(){R!==void 0&&(R.geometry.dispose(),R.material.dispose(),R=void 0),M!==void 0&&(M.geometry.dispose(),M.material.dispose(),M=void 0)}return{getClearColor:function(){return y},setClearColor:function(W,G=1){y.set(W),b=G,I(y,b)},getClearAlpha:function(){return b},setClearAlpha:function(W){b=W,I(y,b)},render:V,addToRenderList:U,dispose:Z}}function GH(m,n){const o=m.getParameter(m.MAX_VERTEX_ATTRIBS),c={},h=N(null);let p=h,_=!1;function y(J,fe,We,Ke,ot){let pt=!1;const ht=C(Ke,We,fe);p!==ht&&(p=ht,M(p.object)),pt=P(J,Ke,We,ot),pt&&L(J,Ke,We,ot),ot!==null&&n.update(ot,m.ELEMENT_ARRAY_BUFFER),(pt||_)&&(_=!1,G(J,fe,We,Ke),ot!==null&&m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,n.get(ot).buffer))}function b(){return m.createVertexArray()}function M(J){return m.bindVertexArray(J)}function R(J){return m.deleteVertexArray(J)}function C(J,fe,We){const Ke=We.wireframe===!0;let ot=c[J.id];ot===void 0&&(ot={},c[J.id]=ot);let pt=ot[fe.id];pt===void 0&&(pt={},ot[fe.id]=pt);let ht=pt[Ke];return ht===void 0&&(ht=N(b()),pt[Ke]=ht),ht}function N(J){const fe=[],We=[],Ke=[];for(let ot=0;ot<o;ot++)fe[ot]=0,We[ot]=0,Ke[ot]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:fe,enabledAttributes:We,attributeDivisors:Ke,object:J,attributes:{},index:null}}function P(J,fe,We,Ke){const ot=p.attributes,pt=fe.attributes;let ht=0;const St=We.getAttributes();for(const st in St)if(St[st].location>=0){const hn=ot[st];let An=pt[st];if(An===void 0&&(st==="instanceMatrix"&&J.instanceMatrix&&(An=J.instanceMatrix),st==="instanceColor"&&J.instanceColor&&(An=J.instanceColor)),hn===void 0||hn.attribute!==An||An&&hn.data!==An.data)return!0;ht++}return p.attributesNum!==ht||p.index!==Ke}function L(J,fe,We,Ke){const ot={},pt=fe.attributes;let ht=0;const St=We.getAttributes();for(const st in St)if(St[st].location>=0){let hn=pt[st];hn===void 0&&(st==="instanceMatrix"&&J.instanceMatrix&&(hn=J.instanceMatrix),st==="instanceColor"&&J.instanceColor&&(hn=J.instanceColor));const An={};An.attribute=hn,hn&&hn.data&&(An.data=hn.data),ot[st]=An,ht++}p.attributes=ot,p.attributesNum=ht,p.index=Ke}function V(){const J=p.newAttributes;for(let fe=0,We=J.length;fe<We;fe++)J[fe]=0}function U(J){I(J,0)}function I(J,fe){const We=p.newAttributes,Ke=p.enabledAttributes,ot=p.attributeDivisors;We[J]=1,Ke[J]===0&&(m.enableVertexAttribArray(J),Ke[J]=1),ot[J]!==fe&&(m.vertexAttribDivisor(J,fe),ot[J]=fe)}function Z(){const J=p.newAttributes,fe=p.enabledAttributes;for(let We=0,Ke=fe.length;We<Ke;We++)fe[We]!==J[We]&&(m.disableVertexAttribArray(We),fe[We]=0)}function W(J,fe,We,Ke,ot,pt,ht){ht===!0?m.vertexAttribIPointer(J,fe,We,ot,pt):m.vertexAttribPointer(J,fe,We,Ke,ot,pt)}function G(J,fe,We,Ke){V();const ot=Ke.attributes,pt=We.getAttributes(),ht=fe.defaultAttributeValues;for(const St in pt){const st=pt[St];if(st.location>=0){let jt=ot[St];if(jt===void 0&&(St==="instanceMatrix"&&J.instanceMatrix&&(jt=J.instanceMatrix),St==="instanceColor"&&J.instanceColor&&(jt=J.instanceColor)),jt!==void 0){const hn=jt.normalized,An=jt.itemSize,ai=n.get(jt);if(ai===void 0)continue;const Gi=ai.buffer,Hi=ai.type,dt=ai.bytesPerElement,sn=Hi===m.INT||Hi===m.UNSIGNED_INT||jt.gpuType===Ii;if(jt.isInterleavedBufferAttribute){const $t=jt.data,Xn=$t.stride,Ln=jt.offset;if($t.isInstancedInterleavedBuffer){for(let ei=0;ei<st.locationSize;ei++)I(st.location+ei,$t.meshPerAttribute);J.isInstancedMesh!==!0&&Ke._maxInstanceCount===void 0&&(Ke._maxInstanceCount=$t.meshPerAttribute*$t.count)}else for(let ei=0;ei<st.locationSize;ei++)U(st.location+ei);m.bindBuffer(m.ARRAY_BUFFER,Gi);for(let ei=0;ei<st.locationSize;ei++)W(st.location+ei,An/st.locationSize,Hi,hn,Xn*dt,(Ln+An/st.locationSize*ei)*dt,sn)}else{if(jt.isInstancedBufferAttribute){for(let $t=0;$t<st.locationSize;$t++)I(st.location+$t,jt.meshPerAttribute);J.isInstancedMesh!==!0&&Ke._maxInstanceCount===void 0&&(Ke._maxInstanceCount=jt.meshPerAttribute*jt.count)}else for(let $t=0;$t<st.locationSize;$t++)U(st.location+$t);m.bindBuffer(m.ARRAY_BUFFER,Gi);for(let $t=0;$t<st.locationSize;$t++)W(st.location+$t,An/st.locationSize,Hi,hn,An*dt,An/st.locationSize*$t*dt,sn)}}else if(ht!==void 0){const hn=ht[St];if(hn!==void 0)switch(hn.length){case 2:m.vertexAttrib2fv(st.location,hn);break;case 3:m.vertexAttrib3fv(st.location,hn);break;case 4:m.vertexAttrib4fv(st.location,hn);break;default:m.vertexAttrib1fv(st.location,hn)}}}}Z()}function ae(){me();for(const J in c){const fe=c[J];for(const We in fe){const Ke=fe[We];for(const ot in Ke)R(Ke[ot].object),delete Ke[ot];delete fe[We]}delete c[J]}}function le(J){if(c[J.id]===void 0)return;const fe=c[J.id];for(const We in fe){const Ke=fe[We];for(const ot in Ke)R(Ke[ot].object),delete Ke[ot];delete fe[We]}delete c[J.id]}function he(J){for(const fe in c){const We=c[fe];if(We[J.id]===void 0)continue;const Ke=We[J.id];for(const ot in Ke)R(Ke[ot].object),delete Ke[ot];delete We[J.id]}}function me(){j(),_=!0,p!==h&&(p=h,M(p.object))}function j(){h.geometry=null,h.program=null,h.wireframe=!1}return{setup:y,reset:me,resetDefaultState:j,dispose:ae,releaseStatesOfGeometry:le,releaseStatesOfProgram:he,initAttributes:V,enableAttribute:U,disableUnusedAttributes:Z}}function HH(m,n,o){let c;function h(M){c=M}function p(M,R){m.drawArrays(c,M,R),o.update(R,c,1)}function _(M,R,C){C!==0&&(m.drawArraysInstanced(c,M,R,C),o.update(R,c,C))}function y(M,R,C){if(C===0)return;n.get("WEBGL_multi_draw").multiDrawArraysWEBGL(c,M,0,R,0,C);let P=0;for(let L=0;L<C;L++)P+=R[L];o.update(P,c,1)}function b(M,R,C,N){if(C===0)return;const P=n.get("WEBGL_multi_draw");if(P===null)for(let L=0;L<M.length;L++)_(M[L],R[L],N[L]);else{P.multiDrawArraysInstancedWEBGL(c,M,0,R,0,N,0,C);let L=0;for(let V=0;V<C;V++)L+=R[V]*N[V];o.update(L,c,1)}}this.setMode=h,this.render=p,this.renderInstances=_,this.renderMultiDraw=y,this.renderMultiDrawInstances=b}function WH(m,n,o,c){let h;function p(){if(h!==void 0)return h;if(n.has("EXT_texture_filter_anisotropic")===!0){const he=n.get("EXT_texture_filter_anisotropic");h=m.getParameter(he.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else h=0;return h}function _(he){return!(he!==Xs&&c.convert(he)!==m.getParameter(m.IMPLEMENTATION_COLOR_READ_FORMAT))}function y(he){const me=he===Sl&&(n.has("EXT_color_buffer_half_float")||n.has("EXT_color_buffer_float"));return!(he!==ut&&c.convert(he)!==m.getParameter(m.IMPLEMENTATION_COLOR_READ_TYPE)&&he!==vs&&!me)}function b(he){if(he==="highp"){if(m.getShaderPrecisionFormat(m.VERTEX_SHADER,m.HIGH_FLOAT).precision>0&&m.getShaderPrecisionFormat(m.FRAGMENT_SHADER,m.HIGH_FLOAT).precision>0)return"highp";he="mediump"}return he==="mediump"&&m.getShaderPrecisionFormat(m.VERTEX_SHADER,m.MEDIUM_FLOAT).precision>0&&m.getShaderPrecisionFormat(m.FRAGMENT_SHADER,m.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let M=o.precision!==void 0?o.precision:"highp";const R=b(M);R!==M&&(console.warn("THREE.WebGLRenderer:",M,"not supported, using",R,"instead."),M=R);const C=o.logarithmicDepthBuffer===!0,N=o.reversedDepthBuffer===!0&&n.has("EXT_clip_control"),P=m.getParameter(m.MAX_TEXTURE_IMAGE_UNITS),L=m.getParameter(m.MAX_VERTEX_TEXTURE_IMAGE_UNITS),V=m.getParameter(m.MAX_TEXTURE_SIZE),U=m.getParameter(m.MAX_CUBE_MAP_TEXTURE_SIZE),I=m.getParameter(m.MAX_VERTEX_ATTRIBS),Z=m.getParameter(m.MAX_VERTEX_UNIFORM_VECTORS),W=m.getParameter(m.MAX_VARYING_VECTORS),G=m.getParameter(m.MAX_FRAGMENT_UNIFORM_VECTORS),ae=L>0,le=m.getParameter(m.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:p,getMaxPrecision:b,textureFormatReadable:_,textureTypeReadable:y,precision:M,logarithmicDepthBuffer:C,reversedDepthBuffer:N,maxTextures:P,maxVertexTextures:L,maxTextureSize:V,maxCubemapSize:U,maxAttributes:I,maxVertexUniforms:Z,maxVaryings:W,maxFragmentUniforms:G,vertexTextures:ae,maxSamples:le}}function $H(m){const n=this;let o=null,c=0,h=!1,p=!1;const _=new Tc,y=new ci,b={value:null,needsUpdate:!1};this.uniform=b,this.numPlanes=0,this.numIntersection=0,this.init=function(C,N){const P=C.length!==0||N||c!==0||h;return h=N,c=C.length,P},this.beginShadows=function(){p=!0,R(null)},this.endShadows=function(){p=!1},this.setGlobalState=function(C,N){o=R(C,N,0)},this.setState=function(C,N,P){const L=C.clippingPlanes,V=C.clipIntersection,U=C.clipShadows,I=m.get(C);if(!h||L===null||L.length===0||p&&!U)p?R(null):M();else{const Z=p?0:c,W=Z*4;let G=I.clippingState||null;b.value=G,G=R(L,N,W,P);for(let ae=0;ae!==W;++ae)G[ae]=o[ae];I.clippingState=G,this.numIntersection=V?this.numPlanes:0,this.numPlanes+=Z}};function M(){b.value!==o&&(b.value=o,b.needsUpdate=c>0),n.numPlanes=c,n.numIntersection=0}function R(C,N,P,L){const V=C!==null?C.length:0;let U=null;if(V!==0){if(U=b.value,L!==!0||U===null){const I=P+V*4,Z=N.matrixWorldInverse;y.getNormalMatrix(Z),(U===null||U.length<I)&&(U=new Float32Array(I));for(let W=0,G=P;W!==V;++W,G+=4)_.copy(C[W]).applyMatrix4(Z,y),_.normal.toArray(U,G),U[G+3]=_.constant}b.value=U,b.needsUpdate=!0}return n.numPlanes=V,n.numIntersection=0,U}}function XH(m){let n=new WeakMap;function o(_,y){return y===De?_.mapping=Me:y===Et&&(_.mapping=Ge),_}function c(_){if(_&&_.isTexture){const y=_.mapping;if(y===De||y===Et)if(n.has(_)){const b=n.get(_).texture;return o(b,_.mapping)}else{const b=_.image;if(b&&b.height>0){const M=new p1(b.height);return M.fromEquirectangularTexture(m,_),n.set(_,M),_.addEventListener("dispose",h),o(M.texture,_.mapping)}else return null}}return _}function h(_){const y=_.target;y.removeEventListener("dispose",h);const b=n.get(y);b!==void 0&&(n.delete(y),b.dispose())}function p(){n=new WeakMap}return{get:c,dispose:p}}const qd=4,iC=[.125,.215,.35,.446,.526,.582],zu=20,Sb=new xx,sC=new mn;let bb=null,Tb=0,Mb=0,wb=!1;const ku=(1+Math.sqrt(5))/2,Yd=1/ku,rC=[new ce(-ku,Yd,0),new ce(ku,Yd,0),new ce(-Yd,0,ku),new ce(Yd,0,ku),new ce(0,ku,-Yd),new ce(0,ku,Yd),new ce(-1,1,-1),new ce(1,1,-1),new ce(-1,1,1),new ce(1,1,1)],qH=new ce;class Ab{constructor(n){this._renderer=n,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(n,o=0,c=.1,h=100,p={}){const{size:_=256,position:y=qH}=p;bb=this._renderer.getRenderTarget(),Tb=this._renderer.getActiveCubeFace(),Mb=this._renderer.getActiveMipmapLevel(),wb=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(_);const b=this._allocateTargets();return b.depthBuffer=!0,this._sceneToCubeUV(n,c,h,b,y),o>0&&this._blur(b,0,0,o),this._applyPMREM(b),this._cleanup(b),b}fromEquirectangular(n,o=null){return this._fromTexture(n,o)}fromCubemap(n,o=null){return this._fromTexture(n,o)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=lC(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=aC(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(n){this._lodMax=Math.floor(Math.log2(n)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let n=0;n<this._lodPlanes.length;n++)this._lodPlanes[n].dispose()}_cleanup(n){this._renderer.setRenderTarget(bb,Tb,Mb),this._renderer.xr.enabled=wb,n.scissorTest=!1,Rx(n,0,0,n.width,n.height)}_fromTexture(n,o){n.mapping===Me||n.mapping===Ge?this._setSize(n.image.length===0?16:n.image[0].width||n.image[0].image.width):this._setSize(n.image.width/4),bb=this._renderer.getRenderTarget(),Tb=this._renderer.getActiveCubeFace(),Mb=this._renderer.getActiveMipmapLevel(),wb=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const c=o||this._allocateTargets();return this._textureToCubeUV(n,c),this._applyPMREM(c),this._cleanup(c),c}_allocateTargets(){const n=3*Math.max(this._cubeSize,112),o=4*this._cubeSize,c={magFilter:ge,minFilter:ge,generateMipmaps:!1,type:Sl,format:Xs,colorSpace:_u,depthBuffer:!1},h=oC(n,o,c);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==n||this._pingPongRenderTarget.height!==o){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=oC(n,o,c);const{_lodMax:p}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=YH(p)),this._blurMaterial=ZH(p,n,o)}return h}_compileMaterial(n){const o=new Zs(this._lodPlanes[0],n);this._renderer.compile(o,Sb)}_sceneToCubeUV(n,o,c,h,p){const b=new wr(90,1,o,c),M=[1,-1,1,1,1,1],R=[1,1,1,-1,-1,-1],C=this._renderer,N=C.autoClear,P=C.toneMapping;C.getClearColor(sC),C.toneMapping=de,C.autoClear=!1,C.state.buffers.depth.getReversed()&&(C.setRenderTarget(h),C.clearDepth(),C.setRenderTarget(null));const V=new Sc({name:"PMREM.Background",side:v,depthWrite:!1,depthTest:!1}),U=new Zs(new Tu,V);let I=!1;const Z=n.background;Z?Z.isColor&&(V.color.copy(Z),n.background=null,I=!0):(V.color.copy(sC),I=!0);for(let W=0;W<6;W++){const G=W%3;G===0?(b.up.set(0,M[W],0),b.position.set(p.x,p.y,p.z),b.lookAt(p.x+R[W],p.y,p.z)):G===1?(b.up.set(0,0,M[W]),b.position.set(p.x,p.y,p.z),b.lookAt(p.x,p.y+R[W],p.z)):(b.up.set(0,M[W],0),b.position.set(p.x,p.y,p.z),b.lookAt(p.x,p.y,p.z+R[W]));const ae=this._cubeSize;Rx(h,G*ae,W>2?ae:0,ae,ae),C.setRenderTarget(h),I&&C.render(U,b),C.render(n,b)}U.geometry.dispose(),U.material.dispose(),C.toneMapping=P,C.autoClear=N,n.background=Z}_textureToCubeUV(n,o){const c=this._renderer,h=n.mapping===Me||n.mapping===Ge;h?(this._cubemapMaterial===null&&(this._cubemapMaterial=lC()),this._cubemapMaterial.uniforms.flipEnvMap.value=n.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=aC());const p=h?this._cubemapMaterial:this._equirectMaterial,_=new Zs(this._lodPlanes[0],p),y=p.uniforms;y.envMap.value=n;const b=this._cubeSize;Rx(o,0,0,3*b,2*b),c.setRenderTarget(o),c.render(_,Sb)}_applyPMREM(n){const o=this._renderer,c=o.autoClear;o.autoClear=!1;const h=this._lodPlanes.length;for(let p=1;p<h;p++){const _=Math.sqrt(this._sigmas[p]*this._sigmas[p]-this._sigmas[p-1]*this._sigmas[p-1]),y=rC[(h-p-1)%rC.length];this._blur(n,p-1,p,_,y)}o.autoClear=c}_blur(n,o,c,h,p){const _=this._pingPongRenderTarget;this._halfBlur(n,_,o,c,h,"latitudinal",p),this._halfBlur(_,n,c,c,h,"longitudinal",p)}_halfBlur(n,o,c,h,p,_,y){const b=this._renderer,M=this._blurMaterial;_!=="latitudinal"&&_!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const R=3,C=new Zs(this._lodPlanes[h],M),N=M.uniforms,P=this._sizeLods[c]-1,L=isFinite(p)?Math.PI/(2*P):2*Math.PI/(2*zu-1),V=p/L,U=isFinite(p)?1+Math.floor(R*V):zu;U>zu&&console.warn(`sigmaRadians, ${p}, is too large and will clip, as it requested ${U} samples when the maximum is set to ${zu}`);const I=[];let Z=0;for(let he=0;he<zu;++he){const me=he/V,j=Math.exp(-me*me/2);I.push(j),he===0?Z+=j:he<U&&(Z+=2*j)}for(let he=0;he<I.length;he++)I[he]=I[he]/Z;N.envMap.value=n.texture,N.samples.value=U,N.weights.value=I,N.latitudinal.value=_==="latitudinal",y&&(N.poleAxis.value=y);const{_lodMax:W}=this;N.dTheta.value=L,N.mipInt.value=W-c;const G=this._sizeLods[h],ae=3*G*(h>W-qd?h-W+qd:0),le=4*(this._cubeSize-G);Rx(o,ae,le,3*G,2*G),b.setRenderTarget(o),b.render(C,Sb)}}function YH(m){const n=[],o=[],c=[];let h=m;const p=m-qd+1+iC.length;for(let _=0;_<p;_++){const y=Math.pow(2,h);o.push(y);let b=1/y;_>m-qd?b=iC[_-m+qd-1]:_===0&&(b=0),c.push(b);const M=1/(y-2),R=-M,C=1+M,N=[R,R,C,R,C,C,R,R,C,C,R,C],P=6,L=6,V=3,U=2,I=1,Z=new Float32Array(V*L*P),W=new Float32Array(U*L*P),G=new Float32Array(I*L*P);for(let le=0;le<P;le++){const he=le%3*2/3-1,me=le>2?0:-1,j=[he,me,0,he+2/3,me,0,he+2/3,me+1,0,he,me,0,he+2/3,me+1,0,he,me+1,0];Z.set(j,V*L*le),W.set(N,U*L*le);const J=[le,le,le,le,le,le];G.set(J,I*L*le)}const ae=new pi;ae.setAttribute("position",new cs(Z,V)),ae.setAttribute("uv",new cs(W,U)),ae.setAttribute("faceIndex",new cs(G,I)),n.push(ae),h>qd&&h--}return{lodPlanes:n,sizeLods:o,sigmas:c}}function oC(m,n,o){const c=new Za(m,n,o);return c.texture.mapping=et,c.texture.name="PMREM.cubeUv",c.scissorTest=!0,c}function Rx(m,n,o,c,h){m.viewport.set(n,o,c,h),m.scissor.set(n,o,c,h)}function ZH(m,n,o){const c=new Float32Array(zu),h=new ce(0,1,0);return new Ea({name:"SphericalGaussianBlur",defines:{n:zu,CUBEUV_TEXEL_WIDTH:1/n,CUBEUV_TEXEL_HEIGHT:1/o,CUBEUV_MAX_MIP:`${m}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:c},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:h}},vertexShader:Eb(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:T,depthTest:!1,depthWrite:!1})}function aC(){return new Ea({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Eb(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:T,depthTest:!1,depthWrite:!1})}function lC(){return new Ea({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Eb(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:T,depthTest:!1,depthWrite:!1})}function Eb(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function KH(m){let n=new WeakMap,o=null;function c(y){if(y&&y.isTexture){const b=y.mapping,M=b===De||b===Et,R=b===Me||b===Ge;if(M||R){let C=n.get(y);const N=C!==void 0?C.texture.pmremVersion:0;if(y.isRenderTargetTexture&&y.pmremVersion!==N)return o===null&&(o=new Ab(m)),C=M?o.fromEquirectangular(y,C):o.fromCubemap(y,C),C.texture.pmremVersion=y.pmremVersion,n.set(y,C),C.texture;if(C!==void 0)return C.texture;{const P=y.image;return M&&P&&P.height>0||R&&P&&h(P)?(o===null&&(o=new Ab(m)),C=M?o.fromEquirectangular(y):o.fromCubemap(y),C.texture.pmremVersion=y.pmremVersion,n.set(y,C),y.addEventListener("dispose",p),C.texture):null}}}return y}function h(y){let b=0;const M=6;for(let R=0;R<M;R++)y[R]!==void 0&&b++;return b===M}function p(y){const b=y.target;b.removeEventListener("dispose",p);const M=n.get(b);M!==void 0&&(n.delete(b),M.dispose())}function _(){n=new WeakMap,o!==null&&(o.dispose(),o=null)}return{get:c,dispose:_}}function JH(m){const n={};function o(c){if(n[c]!==void 0)return n[c];let h;switch(c){case"WEBGL_depth_texture":h=m.getExtension("WEBGL_depth_texture")||m.getExtension("MOZ_WEBGL_depth_texture")||m.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":h=m.getExtension("EXT_texture_filter_anisotropic")||m.getExtension("MOZ_EXT_texture_filter_anisotropic")||m.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":h=m.getExtension("WEBGL_compressed_texture_s3tc")||m.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||m.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":h=m.getExtension("WEBGL_compressed_texture_pvrtc")||m.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:h=m.getExtension(c)}return n[c]=h,h}return{has:function(c){return o(c)!==null},init:function(){o("EXT_color_buffer_float"),o("WEBGL_clip_cull_distance"),o("OES_texture_float_linear"),o("EXT_color_buffer_half_float"),o("WEBGL_multisampled_render_to_texture"),o("WEBGL_render_shared_exponent")},get:function(c){const h=o(c);return h===null&&xd("THREE.WebGLRenderer: "+c+" extension not supported."),h}}}function jH(m,n,o,c){const h={},p=new WeakMap;function _(C){const N=C.target;N.index!==null&&n.remove(N.index);for(const L in N.attributes)n.remove(N.attributes[L]);N.removeEventListener("dispose",_),delete h[N.id];const P=p.get(N);P&&(n.remove(P),p.delete(N)),c.releaseStatesOfGeometry(N),N.isInstancedBufferGeometry===!0&&delete N._maxInstanceCount,o.memory.geometries--}function y(C,N){return h[N.id]===!0||(N.addEventListener("dispose",_),h[N.id]=!0,o.memory.geometries++),N}function b(C){const N=C.attributes;for(const P in N)n.update(N[P],m.ARRAY_BUFFER)}function M(C){const N=[],P=C.index,L=C.attributes.position;let V=0;if(P!==null){const Z=P.array;V=P.version;for(let W=0,G=Z.length;W<G;W+=3){const ae=Z[W+0],le=Z[W+1],he=Z[W+2];N.push(ae,le,le,he,he,ae)}}else if(L!==void 0){const Z=L.array;V=L.version;for(let W=0,G=Z.length/3-1;W<G;W+=3){const ae=W+0,le=W+1,he=W+2;N.push(ae,le,le,he,he,ae)}}else return;const U=new($E(N)?MS:TS)(N,1);U.version=V;const I=p.get(C);I&&n.remove(I),p.set(C,U)}function R(C){const N=p.get(C);if(N){const P=C.index;P!==null&&N.version<P.version&&M(C)}else M(C);return p.get(C)}return{get:y,update:b,getWireframeAttribute:R}}function QH(m,n,o){let c;function h(N){c=N}let p,_;function y(N){p=N.type,_=N.bytesPerElement}function b(N,P){m.drawElements(c,P,p,N*_),o.update(P,c,1)}function M(N,P,L){L!==0&&(m.drawElementsInstanced(c,P,p,N*_,L),o.update(P,c,L))}function R(N,P,L){if(L===0)return;n.get("WEBGL_multi_draw").multiDrawElementsWEBGL(c,P,0,p,N,0,L);let U=0;for(let I=0;I<L;I++)U+=P[I];o.update(U,c,1)}function C(N,P,L,V){if(L===0)return;const U=n.get("WEBGL_multi_draw");if(U===null)for(let I=0;I<N.length;I++)M(N[I]/_,P[I],V[I]);else{U.multiDrawElementsInstancedWEBGL(c,P,0,p,N,0,V,0,L);let I=0;for(let Z=0;Z<L;Z++)I+=P[Z]*V[Z];o.update(I,c,1)}}this.setMode=h,this.setIndex=y,this.render=b,this.renderInstances=M,this.renderMultiDraw=R,this.renderMultiDrawInstances=C}function e4(m){const n={geometries:0,textures:0},o={frame:0,calls:0,triangles:0,points:0,lines:0};function c(p,_,y){switch(o.calls++,_){case m.TRIANGLES:o.triangles+=y*(p/3);break;case m.LINES:o.lines+=y*(p/2);break;case m.LINE_STRIP:o.lines+=y*(p-1);break;case m.LINE_LOOP:o.lines+=y*p;break;case m.POINTS:o.points+=y*p;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",_);break}}function h(){o.calls=0,o.triangles=0,o.points=0,o.lines=0}return{memory:n,render:o,programs:null,autoReset:!0,reset:h,update:c}}function t4(m,n,o){const c=new WeakMap,h=new Fi;function p(_,y,b){const M=_.morphTargetInfluences,R=y.morphAttributes.position||y.morphAttributes.normal||y.morphAttributes.color,C=R!==void 0?R.length:0;let N=c.get(y);if(N===void 0||N.count!==C){let J=function(){me.dispose(),c.delete(y),y.removeEventListener("dispose",J)};var P=J;N!==void 0&&N.texture.dispose();const L=y.morphAttributes.position!==void 0,V=y.morphAttributes.normal!==void 0,U=y.morphAttributes.color!==void 0,I=y.morphAttributes.position||[],Z=y.morphAttributes.normal||[],W=y.morphAttributes.color||[];let G=0;L===!0&&(G=1),V===!0&&(G=2),U===!0&&(G=3);let ae=y.attributes.position.count*G,le=1;ae>n.maxTextureSize&&(le=Math.ceil(ae/n.maxTextureSize),ae=n.maxTextureSize);const he=new Float32Array(ae*le*4*C),me=new c_(he,ae,le,C);me.type=vs,me.needsUpdate=!0;const j=G*4;for(let fe=0;fe<C;fe++){const We=I[fe],Ke=Z[fe],ot=W[fe],pt=ae*le*4*fe;for(let ht=0;ht<We.count;ht++){const St=ht*j;L===!0&&(h.fromBufferAttribute(We,ht),he[pt+St+0]=h.x,he[pt+St+1]=h.y,he[pt+St+2]=h.z,he[pt+St+3]=0),V===!0&&(h.fromBufferAttribute(Ke,ht),he[pt+St+4]=h.x,he[pt+St+5]=h.y,he[pt+St+6]=h.z,he[pt+St+7]=0),U===!0&&(h.fromBufferAttribute(ot,ht),he[pt+St+8]=h.x,he[pt+St+9]=h.y,he[pt+St+10]=h.z,he[pt+St+11]=ot.itemSize===4?h.w:1)}}N={count:C,texture:me,size:new vt(ae,le)},c.set(y,N),y.addEventListener("dispose",J)}if(_.isInstancedMesh===!0&&_.morphTexture!==null)b.getUniforms().setValue(m,"morphTexture",_.morphTexture,o);else{let L=0;for(let U=0;U<M.length;U++)L+=M[U];const V=y.morphTargetsRelative?1:1-L;b.getUniforms().setValue(m,"morphTargetBaseInfluence",V),b.getUniforms().setValue(m,"morphTargetInfluences",M)}b.getUniforms().setValue(m,"morphTargetsTexture",N.texture,o),b.getUniforms().setValue(m,"morphTargetsTextureSize",N.size)}return{update:p}}function n4(m,n,o,c){let h=new WeakMap;function p(b){const M=c.render.frame,R=b.geometry,C=n.get(b,R);if(h.get(C)!==M&&(n.update(C),h.set(C,M)),b.isInstancedMesh&&(b.hasEventListener("dispose",y)===!1&&b.addEventListener("dispose",y),h.get(b)!==M&&(o.update(b.instanceMatrix,m.ARRAY_BUFFER),b.instanceColor!==null&&o.update(b.instanceColor,m.ARRAY_BUFFER),h.set(b,M))),b.isSkinnedMesh){const N=b.skeleton;h.get(N)!==M&&(N.update(),h.set(N,M))}return C}function _(){h=new WeakMap}function y(b){const M=b.target;M.removeEventListener("dispose",y),o.remove(M.instanceMatrix),M.instanceColor!==null&&o.remove(M.instanceColor)}return{update:p,dispose:_}}const cC=new Ps,uC=new OS(1,1),hC=new c_,dC=new u_,fC=new Op,pC=[],mC=[],gC=new Float32Array(16),_C=new Float32Array(9),xC=new Float32Array(4);function Zd(m,n,o){const c=m[0];if(c<=0||c>0)return m;const h=n*o;let p=pC[h];if(p===void 0&&(p=new Float32Array(h),pC[h]=p),n!==0){c.toArray(p,0);for(let _=1,y=0;_!==n;++_)y+=o,m[_].toArray(p,y)}return p}function ir(m,n){if(m.length!==n.length)return!1;for(let o=0,c=m.length;o<c;o++)if(m[o]!==n[o])return!1;return!0}function sr(m,n){for(let o=0,c=n.length;o<c;o++)m[o]=n[o]}function Cx(m,n){let o=mC[n];o===void 0&&(o=new Int32Array(n),mC[n]=o);for(let c=0;c!==n;++c)o[c]=m.allocateTextureUnit();return o}function i4(m,n){const o=this.cache;o[0]!==n&&(m.uniform1f(this.addr,n),o[0]=n)}function s4(m,n){const o=this.cache;if(n.x!==void 0)(o[0]!==n.x||o[1]!==n.y)&&(m.uniform2f(this.addr,n.x,n.y),o[0]=n.x,o[1]=n.y);else{if(ir(o,n))return;m.uniform2fv(this.addr,n),sr(o,n)}}function r4(m,n){const o=this.cache;if(n.x!==void 0)(o[0]!==n.x||o[1]!==n.y||o[2]!==n.z)&&(m.uniform3f(this.addr,n.x,n.y,n.z),o[0]=n.x,o[1]=n.y,o[2]=n.z);else if(n.r!==void 0)(o[0]!==n.r||o[1]!==n.g||o[2]!==n.b)&&(m.uniform3f(this.addr,n.r,n.g,n.b),o[0]=n.r,o[1]=n.g,o[2]=n.b);else{if(ir(o,n))return;m.uniform3fv(this.addr,n),sr(o,n)}}function o4(m,n){const o=this.cache;if(n.x!==void 0)(o[0]!==n.x||o[1]!==n.y||o[2]!==n.z||o[3]!==n.w)&&(m.uniform4f(this.addr,n.x,n.y,n.z,n.w),o[0]=n.x,o[1]=n.y,o[2]=n.z,o[3]=n.w);else{if(ir(o,n))return;m.uniform4fv(this.addr,n),sr(o,n)}}function a4(m,n){const o=this.cache,c=n.elements;if(c===void 0){if(ir(o,n))return;m.uniformMatrix2fv(this.addr,!1,n),sr(o,n)}else{if(ir(o,c))return;xC.set(c),m.uniformMatrix2fv(this.addr,!1,xC),sr(o,c)}}function l4(m,n){const o=this.cache,c=n.elements;if(c===void 0){if(ir(o,n))return;m.uniformMatrix3fv(this.addr,!1,n),sr(o,n)}else{if(ir(o,c))return;_C.set(c),m.uniformMatrix3fv(this.addr,!1,_C),sr(o,c)}}function c4(m,n){const o=this.cache,c=n.elements;if(c===void 0){if(ir(o,n))return;m.uniformMatrix4fv(this.addr,!1,n),sr(o,n)}else{if(ir(o,c))return;gC.set(c),m.uniformMatrix4fv(this.addr,!1,gC),sr(o,c)}}function u4(m,n){const o=this.cache;o[0]!==n&&(m.uniform1i(this.addr,n),o[0]=n)}function h4(m,n){const o=this.cache;if(n.x!==void 0)(o[0]!==n.x||o[1]!==n.y)&&(m.uniform2i(this.addr,n.x,n.y),o[0]=n.x,o[1]=n.y);else{if(ir(o,n))return;m.uniform2iv(this.addr,n),sr(o,n)}}function d4(m,n){const o=this.cache;if(n.x!==void 0)(o[0]!==n.x||o[1]!==n.y||o[2]!==n.z)&&(m.uniform3i(this.addr,n.x,n.y,n.z),o[0]=n.x,o[1]=n.y,o[2]=n.z);else{if(ir(o,n))return;m.uniform3iv(this.addr,n),sr(o,n)}}function f4(m,n){const o=this.cache;if(n.x!==void 0)(o[0]!==n.x||o[1]!==n.y||o[2]!==n.z||o[3]!==n.w)&&(m.uniform4i(this.addr,n.x,n.y,n.z,n.w),o[0]=n.x,o[1]=n.y,o[2]=n.z,o[3]=n.w);else{if(ir(o,n))return;m.uniform4iv(this.addr,n),sr(o,n)}}function p4(m,n){const o=this.cache;o[0]!==n&&(m.uniform1ui(this.addr,n),o[0]=n)}function m4(m,n){const o=this.cache;if(n.x!==void 0)(o[0]!==n.x||o[1]!==n.y)&&(m.uniform2ui(this.addr,n.x,n.y),o[0]=n.x,o[1]=n.y);else{if(ir(o,n))return;m.uniform2uiv(this.addr,n),sr(o,n)}}function g4(m,n){const o=this.cache;if(n.x!==void 0)(o[0]!==n.x||o[1]!==n.y||o[2]!==n.z)&&(m.uniform3ui(this.addr,n.x,n.y,n.z),o[0]=n.x,o[1]=n.y,o[2]=n.z);else{if(ir(o,n))return;m.uniform3uiv(this.addr,n),sr(o,n)}}function _4(m,n){const o=this.cache;if(n.x!==void 0)(o[0]!==n.x||o[1]!==n.y||o[2]!==n.z||o[3]!==n.w)&&(m.uniform4ui(this.addr,n.x,n.y,n.z,n.w),o[0]=n.x,o[1]=n.y,o[2]=n.z,o[3]=n.w);else{if(ir(o,n))return;m.uniform4uiv(this.addr,n),sr(o,n)}}function x4(m,n,o){const c=this.cache,h=o.allocateTextureUnit();c[0]!==h&&(m.uniform1i(this.addr,h),c[0]=h);let p;this.type===m.SAMPLER_2D_SHADOW?(uC.compareFunction=tS,p=uC):p=cC,o.setTexture2D(n||p,h)}function y4(m,n,o){const c=this.cache,h=o.allocateTextureUnit();c[0]!==h&&(m.uniform1i(this.addr,h),c[0]=h),o.setTexture3D(n||dC,h)}function v4(m,n,o){const c=this.cache,h=o.allocateTextureUnit();c[0]!==h&&(m.uniform1i(this.addr,h),c[0]=h),o.setTextureCube(n||fC,h)}function S4(m,n,o){const c=this.cache,h=o.allocateTextureUnit();c[0]!==h&&(m.uniform1i(this.addr,h),c[0]=h),o.setTexture2DArray(n||hC,h)}function b4(m){switch(m){case 5126:return i4;case 35664:return s4;case 35665:return r4;case 35666:return o4;case 35674:return a4;case 35675:return l4;case 35676:return c4;case 5124:case 35670:return u4;case 35667:case 35671:return h4;case 35668:case 35672:return d4;case 35669:case 35673:return f4;case 5125:return p4;case 36294:return m4;case 36295:return g4;case 36296:return _4;case 35678:case 36198:case 36298:case 36306:case 35682:return x4;case 35679:case 36299:case 36307:return y4;case 35680:case 36300:case 36308:case 36293:return v4;case 36289:case 36303:case 36311:case 36292:return S4}}function T4(m,n){m.uniform1fv(this.addr,n)}function M4(m,n){const o=Zd(n,this.size,2);m.uniform2fv(this.addr,o)}function w4(m,n){const o=Zd(n,this.size,3);m.uniform3fv(this.addr,o)}function A4(m,n){const o=Zd(n,this.size,4);m.uniform4fv(this.addr,o)}function E4(m,n){const o=Zd(n,this.size,4);m.uniformMatrix2fv(this.addr,!1,o)}function R4(m,n){const o=Zd(n,this.size,9);m.uniformMatrix3fv(this.addr,!1,o)}function C4(m,n){const o=Zd(n,this.size,16);m.uniformMatrix4fv(this.addr,!1,o)}function N4(m,n){m.uniform1iv(this.addr,n)}function P4(m,n){m.uniform2iv(this.addr,n)}function I4(m,n){m.uniform3iv(this.addr,n)}function L4(m,n){m.uniform4iv(this.addr,n)}function D4(m,n){m.uniform1uiv(this.addr,n)}function U4(m,n){m.uniform2uiv(this.addr,n)}function F4(m,n){m.uniform3uiv(this.addr,n)}function B4(m,n){m.uniform4uiv(this.addr,n)}function O4(m,n,o){const c=this.cache,h=n.length,p=Cx(o,h);ir(c,p)||(m.uniform1iv(this.addr,p),sr(c,p));for(let _=0;_!==h;++_)o.setTexture2D(n[_]||cC,p[_])}function V4(m,n,o){const c=this.cache,h=n.length,p=Cx(o,h);ir(c,p)||(m.uniform1iv(this.addr,p),sr(c,p));for(let _=0;_!==h;++_)o.setTexture3D(n[_]||dC,p[_])}function z4(m,n,o){const c=this.cache,h=n.length,p=Cx(o,h);ir(c,p)||(m.uniform1iv(this.addr,p),sr(c,p));for(let _=0;_!==h;++_)o.setTextureCube(n[_]||fC,p[_])}function k4(m,n,o){const c=this.cache,h=n.length,p=Cx(o,h);ir(c,p)||(m.uniform1iv(this.addr,p),sr(c,p));for(let _=0;_!==h;++_)o.setTexture2DArray(n[_]||hC,p[_])}function G4(m){switch(m){case 5126:return T4;case 35664:return M4;case 35665:return w4;case 35666:return A4;case 35674:return E4;case 35675:return R4;case 35676:return C4;case 5124:case 35670:return N4;case 35667:case 35671:return P4;case 35668:case 35672:return I4;case 35669:case 35673:return L4;case 5125:return D4;case 36294:return U4;case 36295:return F4;case 36296:return B4;case 35678:case 36198:case 36298:case 36306:case 35682:return O4;case 35679:case 36299:case 36307:return V4;case 35680:case 36300:case 36308:case 36293:return z4;case 36289:case 36303:case 36311:case 36292:return k4}}class H4{constructor(n,o,c){this.id=n,this.addr=c,this.cache=[],this.type=o.type,this.setValue=b4(o.type)}}class W4{constructor(n,o,c){this.id=n,this.addr=c,this.cache=[],this.type=o.type,this.size=o.size,this.setValue=G4(o.type)}}class $4{constructor(n){this.id=n,this.seq=[],this.map={}}setValue(n,o,c){const h=this.seq;for(let p=0,_=h.length;p!==_;++p){const y=h[p];y.setValue(n,o[y.id],c)}}}const Rb=/(\w+)(\])?(\[|\.)?/g;function yC(m,n){m.seq.push(n),m.map[n.id]=n}function X4(m,n,o){const c=m.name,h=c.length;for(Rb.lastIndex=0;;){const p=Rb.exec(c),_=Rb.lastIndex;let y=p[1];const b=p[2]==="]",M=p[3];if(b&&(y=y|0),M===void 0||M==="["&&_+2===h){yC(o,M===void 0?new H4(y,m,n):new W4(y,m,n));break}else{let C=o.map[y];C===void 0&&(C=new $4(y),yC(o,C)),o=C}}}class Nx{constructor(n,o){this.seq=[],this.map={};const c=n.getProgramParameter(o,n.ACTIVE_UNIFORMS);for(let h=0;h<c;++h){const p=n.getActiveUniform(o,h),_=n.getUniformLocation(o,p.name);X4(p,_,this)}}setValue(n,o,c,h){const p=this.map[o];p!==void 0&&p.setValue(n,c,h)}setOptional(n,o,c){const h=o[c];h!==void 0&&this.setValue(n,c,h)}static upload(n,o,c,h){for(let p=0,_=o.length;p!==_;++p){const y=o[p],b=c[y.id];b.needsUpdate!==!1&&y.setValue(n,b.value,h)}}static seqWithValue(n,o){const c=[];for(let h=0,p=n.length;h!==p;++h){const _=n[h];_.id in o&&c.push(_)}return c}}function vC(m,n,o){const c=m.createShader(n);return m.shaderSource(c,o),m.compileShader(c),c}const q4=37297;let Y4=0;function Z4(m,n){const o=m.split(`
`),c=[],h=Math.max(n-6,0),p=Math.min(n+6,o.length);for(let _=h;_<p;_++){const y=_+1;c.push(`${y===n?">":" "} ${y}: ${o[_]}`)}return c.join(`
`)}const SC=new ci;function K4(m){Li._getMatrix(SC,Li.workingColorSpace,m);const n=`mat3( ${SC.elements.map(o=>o.toFixed(4))} )`;switch(Li.getTransfer(m)){case Cp:return[n,"LinearTransferOETF"];case ss:return[n,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",m),[n,"LinearTransferOETF"]}}function bC(m,n,o){const c=m.getShaderParameter(n,m.COMPILE_STATUS),p=(m.getShaderInfoLog(n)||"").trim();if(c&&p==="")return"";const _=/ERROR: 0:(\d+)/.exec(p);if(_){const y=parseInt(_[1]);return o.toUpperCase()+`

`+p+`

`+Z4(m.getShaderSource(n),y)}else return p}function J4(m,n){const o=K4(n);return[`vec4 ${m}( vec4 value ) {`,`	return ${o[1]}( vec4( value.rgb * ${o[0]}, value.a ) );`,"}"].join(`
`)}function j4(m,n){let o;switch(n){case we:o="Linear";break;case Ie:o="Reinhard";break;case lt:o="Cineon";break;case Xe:o="ACESFilmic";break;case Ft:o="AgX";break;case Bt:o="Neutral";break;case qe:o="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",n),o="Linear"}return"vec3 "+m+"( vec3 color ) { return "+o+"ToneMapping( color ); }"}const Px=new ce;function Q4(){Li.getLuminanceCoefficients(Px);const m=Px.x.toFixed(4),n=Px.y.toFixed(4),o=Px.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${m}, ${n}, ${o} );`,"	return dot( weights, rgb );","}"].join(`
`)}function eW(m){return[m.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",m.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(cm).join(`
`)}function tW(m){const n=[];for(const o in m){const c=m[o];c!==!1&&n.push("#define "+o+" "+c)}return n.join(`
`)}function nW(m,n){const o={},c=m.getProgramParameter(n,m.ACTIVE_ATTRIBUTES);for(let h=0;h<c;h++){const p=m.getActiveAttrib(n,h),_=p.name;let y=1;p.type===m.FLOAT_MAT2&&(y=2),p.type===m.FLOAT_MAT3&&(y=3),p.type===m.FLOAT_MAT4&&(y=4),o[_]={type:p.type,location:m.getAttribLocation(n,_),locationSize:y}}return o}function cm(m){return m!==""}function TC(m,n){const o=n.numSpotLightShadows+n.numSpotLightMaps-n.numSpotLightShadowsWithMaps;return m.replace(/NUM_DIR_LIGHTS/g,n.numDirLights).replace(/NUM_SPOT_LIGHTS/g,n.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,n.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,o).replace(/NUM_RECT_AREA_LIGHTS/g,n.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,n.numPointLights).replace(/NUM_HEMI_LIGHTS/g,n.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,n.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,n.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,n.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,n.numPointLightShadows)}function MC(m,n){return m.replace(/NUM_CLIPPING_PLANES/g,n.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,n.numClippingPlanes-n.numClipIntersection)}const iW=/^[ \t]*#include +<([\w\d./]+)>/gm;function Cb(m){return m.replace(iW,rW)}const sW=new Map;function rW(m,n){let o=_i[n];if(o===void 0){const c=sW.get(n);if(c!==void 0)o=_i[c],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',n,c);else throw new Error("Can not resolve #include <"+n+">")}return Cb(o)}const oW=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function wC(m){return m.replace(oW,aW)}function aW(m,n,o,c){let h="";for(let p=parseInt(n);p<parseInt(o);p++)h+=c.replace(/\[\s*i\s*\]/g,"[ "+p+" ]").replace(/UNROLLED_LOOP_INDEX/g,p);return h}function AC(m){let n=`precision ${m.precision} float;
	precision ${m.precision} int;
	precision ${m.precision} sampler2D;
	precision ${m.precision} samplerCube;
	precision ${m.precision} sampler3D;
	precision ${m.precision} sampler2DArray;
	precision ${m.precision} sampler2DShadow;
	precision ${m.precision} samplerCubeShadow;
	precision ${m.precision} sampler2DArrayShadow;
	precision ${m.precision} isampler2D;
	precision ${m.precision} isampler3D;
	precision ${m.precision} isamplerCube;
	precision ${m.precision} isampler2DArray;
	precision ${m.precision} usampler2D;
	precision ${m.precision} usampler3D;
	precision ${m.precision} usamplerCube;
	precision ${m.precision} usampler2DArray;
	`;return m.precision==="highp"?n+=`
#define HIGH_PRECISION`:m.precision==="mediump"?n+=`
#define MEDIUM_PRECISION`:m.precision==="lowp"&&(n+=`
#define LOW_PRECISION`),n}function lW(m){let n="SHADOWMAP_TYPE_BASIC";return m.shadowMapType===d?n="SHADOWMAP_TYPE_PCF":m.shadowMapType===f?n="SHADOWMAP_TYPE_PCF_SOFT":m.shadowMapType===g&&(n="SHADOWMAP_TYPE_VSM"),n}function cW(m){let n="ENVMAP_TYPE_CUBE";if(m.envMap)switch(m.envMapMode){case Me:case Ge:n="ENVMAP_TYPE_CUBE";break;case et:n="ENVMAP_TYPE_CUBE_UV";break}return n}function uW(m){let n="ENVMAP_MODE_REFLECTION";if(m.envMap)switch(m.envMapMode){case Ge:n="ENVMAP_MODE_REFRACTION";break}return n}function hW(m){let n="ENVMAP_BLENDING_NONE";if(m.envMap)switch(m.combine){case Ue:n="ENVMAP_BLENDING_MULTIPLY";break;case ee:n="ENVMAP_BLENDING_MIX";break;case ve:n="ENVMAP_BLENDING_ADD";break}return n}function dW(m){const n=m.envMapCubeUVHeight;if(n===null)return null;const o=Math.log2(n)-2,c=1/n;return{texelWidth:1/(3*Math.max(Math.pow(2,o),112)),texelHeight:c,maxMip:o}}function fW(m,n,o,c){const h=m.getContext(),p=o.defines;let _=o.vertexShader,y=o.fragmentShader;const b=lW(o),M=cW(o),R=uW(o),C=hW(o),N=dW(o),P=eW(o),L=tW(p),V=h.createProgram();let U,I,Z=o.glslVersion?"#version "+o.glslVersion+`
`:"";o.isRawShaderMaterial?(U=["#define SHADER_TYPE "+o.shaderType,"#define SHADER_NAME "+o.shaderName,L].filter(cm).join(`
`),U.length>0&&(U+=`
`),I=["#define SHADER_TYPE "+o.shaderType,"#define SHADER_NAME "+o.shaderName,L].filter(cm).join(`
`),I.length>0&&(I+=`
`)):(U=[AC(o),"#define SHADER_TYPE "+o.shaderType,"#define SHADER_NAME "+o.shaderName,L,o.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",o.batching?"#define USE_BATCHING":"",o.batchingColor?"#define USE_BATCHING_COLOR":"",o.instancing?"#define USE_INSTANCING":"",o.instancingColor?"#define USE_INSTANCING_COLOR":"",o.instancingMorph?"#define USE_INSTANCING_MORPH":"",o.useFog&&o.fog?"#define USE_FOG":"",o.useFog&&o.fogExp2?"#define FOG_EXP2":"",o.map?"#define USE_MAP":"",o.envMap?"#define USE_ENVMAP":"",o.envMap?"#define "+R:"",o.lightMap?"#define USE_LIGHTMAP":"",o.aoMap?"#define USE_AOMAP":"",o.bumpMap?"#define USE_BUMPMAP":"",o.normalMap?"#define USE_NORMALMAP":"",o.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",o.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",o.displacementMap?"#define USE_DISPLACEMENTMAP":"",o.emissiveMap?"#define USE_EMISSIVEMAP":"",o.anisotropy?"#define USE_ANISOTROPY":"",o.anisotropyMap?"#define USE_ANISOTROPYMAP":"",o.clearcoatMap?"#define USE_CLEARCOATMAP":"",o.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",o.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",o.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",o.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",o.specularMap?"#define USE_SPECULARMAP":"",o.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",o.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",o.roughnessMap?"#define USE_ROUGHNESSMAP":"",o.metalnessMap?"#define USE_METALNESSMAP":"",o.alphaMap?"#define USE_ALPHAMAP":"",o.alphaHash?"#define USE_ALPHAHASH":"",o.transmission?"#define USE_TRANSMISSION":"",o.transmissionMap?"#define USE_TRANSMISSIONMAP":"",o.thicknessMap?"#define USE_THICKNESSMAP":"",o.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",o.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",o.mapUv?"#define MAP_UV "+o.mapUv:"",o.alphaMapUv?"#define ALPHAMAP_UV "+o.alphaMapUv:"",o.lightMapUv?"#define LIGHTMAP_UV "+o.lightMapUv:"",o.aoMapUv?"#define AOMAP_UV "+o.aoMapUv:"",o.emissiveMapUv?"#define EMISSIVEMAP_UV "+o.emissiveMapUv:"",o.bumpMapUv?"#define BUMPMAP_UV "+o.bumpMapUv:"",o.normalMapUv?"#define NORMALMAP_UV "+o.normalMapUv:"",o.displacementMapUv?"#define DISPLACEMENTMAP_UV "+o.displacementMapUv:"",o.metalnessMapUv?"#define METALNESSMAP_UV "+o.metalnessMapUv:"",o.roughnessMapUv?"#define ROUGHNESSMAP_UV "+o.roughnessMapUv:"",o.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+o.anisotropyMapUv:"",o.clearcoatMapUv?"#define CLEARCOATMAP_UV "+o.clearcoatMapUv:"",o.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+o.clearcoatNormalMapUv:"",o.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+o.clearcoatRoughnessMapUv:"",o.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+o.iridescenceMapUv:"",o.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+o.iridescenceThicknessMapUv:"",o.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+o.sheenColorMapUv:"",o.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+o.sheenRoughnessMapUv:"",o.specularMapUv?"#define SPECULARMAP_UV "+o.specularMapUv:"",o.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+o.specularColorMapUv:"",o.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+o.specularIntensityMapUv:"",o.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+o.transmissionMapUv:"",o.thicknessMapUv?"#define THICKNESSMAP_UV "+o.thicknessMapUv:"",o.vertexTangents&&o.flatShading===!1?"#define USE_TANGENT":"",o.vertexColors?"#define USE_COLOR":"",o.vertexAlphas?"#define USE_COLOR_ALPHA":"",o.vertexUv1s?"#define USE_UV1":"",o.vertexUv2s?"#define USE_UV2":"",o.vertexUv3s?"#define USE_UV3":"",o.pointsUvs?"#define USE_POINTS_UV":"",o.flatShading?"#define FLAT_SHADED":"",o.skinning?"#define USE_SKINNING":"",o.morphTargets?"#define USE_MORPHTARGETS":"",o.morphNormals&&o.flatShading===!1?"#define USE_MORPHNORMALS":"",o.morphColors?"#define USE_MORPHCOLORS":"",o.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+o.morphTextureStride:"",o.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+o.morphTargetsCount:"",o.doubleSided?"#define DOUBLE_SIDED":"",o.flipSided?"#define FLIP_SIDED":"",o.shadowMapEnabled?"#define USE_SHADOWMAP":"",o.shadowMapEnabled?"#define "+b:"",o.sizeAttenuation?"#define USE_SIZEATTENUATION":"",o.numLightProbes>0?"#define USE_LIGHT_PROBES":"",o.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",o.reversedDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(cm).join(`
`),I=[AC(o),"#define SHADER_TYPE "+o.shaderType,"#define SHADER_NAME "+o.shaderName,L,o.useFog&&o.fog?"#define USE_FOG":"",o.useFog&&o.fogExp2?"#define FOG_EXP2":"",o.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",o.map?"#define USE_MAP":"",o.matcap?"#define USE_MATCAP":"",o.envMap?"#define USE_ENVMAP":"",o.envMap?"#define "+M:"",o.envMap?"#define "+R:"",o.envMap?"#define "+C:"",N?"#define CUBEUV_TEXEL_WIDTH "+N.texelWidth:"",N?"#define CUBEUV_TEXEL_HEIGHT "+N.texelHeight:"",N?"#define CUBEUV_MAX_MIP "+N.maxMip+".0":"",o.lightMap?"#define USE_LIGHTMAP":"",o.aoMap?"#define USE_AOMAP":"",o.bumpMap?"#define USE_BUMPMAP":"",o.normalMap?"#define USE_NORMALMAP":"",o.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",o.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",o.emissiveMap?"#define USE_EMISSIVEMAP":"",o.anisotropy?"#define USE_ANISOTROPY":"",o.anisotropyMap?"#define USE_ANISOTROPYMAP":"",o.clearcoat?"#define USE_CLEARCOAT":"",o.clearcoatMap?"#define USE_CLEARCOATMAP":"",o.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",o.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",o.dispersion?"#define USE_DISPERSION":"",o.iridescence?"#define USE_IRIDESCENCE":"",o.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",o.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",o.specularMap?"#define USE_SPECULARMAP":"",o.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",o.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",o.roughnessMap?"#define USE_ROUGHNESSMAP":"",o.metalnessMap?"#define USE_METALNESSMAP":"",o.alphaMap?"#define USE_ALPHAMAP":"",o.alphaTest?"#define USE_ALPHATEST":"",o.alphaHash?"#define USE_ALPHAHASH":"",o.sheen?"#define USE_SHEEN":"",o.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",o.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",o.transmission?"#define USE_TRANSMISSION":"",o.transmissionMap?"#define USE_TRANSMISSIONMAP":"",o.thicknessMap?"#define USE_THICKNESSMAP":"",o.vertexTangents&&o.flatShading===!1?"#define USE_TANGENT":"",o.vertexColors||o.instancingColor||o.batchingColor?"#define USE_COLOR":"",o.vertexAlphas?"#define USE_COLOR_ALPHA":"",o.vertexUv1s?"#define USE_UV1":"",o.vertexUv2s?"#define USE_UV2":"",o.vertexUv3s?"#define USE_UV3":"",o.pointsUvs?"#define USE_POINTS_UV":"",o.gradientMap?"#define USE_GRADIENTMAP":"",o.flatShading?"#define FLAT_SHADED":"",o.doubleSided?"#define DOUBLE_SIDED":"",o.flipSided?"#define FLIP_SIDED":"",o.shadowMapEnabled?"#define USE_SHADOWMAP":"",o.shadowMapEnabled?"#define "+b:"",o.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",o.numLightProbes>0?"#define USE_LIGHT_PROBES":"",o.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",o.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",o.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",o.reversedDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",o.toneMapping!==de?"#define TONE_MAPPING":"",o.toneMapping!==de?_i.tonemapping_pars_fragment:"",o.toneMapping!==de?j4("toneMapping",o.toneMapping):"",o.dithering?"#define DITHERING":"",o.opaque?"#define OPAQUE":"",_i.colorspace_pars_fragment,J4("linearToOutputTexel",o.outputColorSpace),Q4(),o.useDepthPacking?"#define DEPTH_PACKING "+o.depthPacking:"",`
`].filter(cm).join(`
`)),_=Cb(_),_=TC(_,o),_=MC(_,o),y=Cb(y),y=TC(y,o),y=MC(y,o),_=wC(_),y=wC(y),o.isRawShaderMaterial!==!0&&(Z=`#version 300 es
`,U=[P,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+U,I=["#define varying in",o.glslVersion===nS?"":"layout(location = 0) out highp vec4 pc_fragColor;",o.glslVersion===nS?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+I);const W=Z+U+_,G=Z+I+y,ae=vC(h,h.VERTEX_SHADER,W),le=vC(h,h.FRAGMENT_SHADER,G);h.attachShader(V,ae),h.attachShader(V,le),o.index0AttributeName!==void 0?h.bindAttribLocation(V,0,o.index0AttributeName):o.morphTargets===!0&&h.bindAttribLocation(V,0,"position"),h.linkProgram(V);function he(fe){if(m.debug.checkShaderErrors){const We=h.getProgramInfoLog(V)||"",Ke=h.getShaderInfoLog(ae)||"",ot=h.getShaderInfoLog(le)||"",pt=We.trim(),ht=Ke.trim(),St=ot.trim();let st=!0,jt=!0;if(h.getProgramParameter(V,h.LINK_STATUS)===!1)if(st=!1,typeof m.debug.onShaderError=="function")m.debug.onShaderError(h,V,ae,le);else{const hn=bC(h,ae,"vertex"),An=bC(h,le,"fragment");console.error("THREE.WebGLProgram: Shader Error "+h.getError()+" - VALIDATE_STATUS "+h.getProgramParameter(V,h.VALIDATE_STATUS)+`

Material Name: `+fe.name+`
Material Type: `+fe.type+`

Program Info Log: `+pt+`
`+hn+`
`+An)}else pt!==""?console.warn("THREE.WebGLProgram: Program Info Log:",pt):(ht===""||St==="")&&(jt=!1);jt&&(fe.diagnostics={runnable:st,programLog:pt,vertexShader:{log:ht,prefix:U},fragmentShader:{log:St,prefix:I}})}h.deleteShader(ae),h.deleteShader(le),me=new Nx(h,V),j=nW(h,V)}let me;this.getUniforms=function(){return me===void 0&&he(this),me};let j;this.getAttributes=function(){return j===void 0&&he(this),j};let J=o.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return J===!1&&(J=h.getProgramParameter(V,q4)),J},this.destroy=function(){c.releaseStatesOfProgram(this),h.deleteProgram(V),this.program=void 0},this.type=o.shaderType,this.name=o.shaderName,this.id=Y4++,this.cacheKey=n,this.usedTimes=1,this.program=V,this.vertexShader=ae,this.fragmentShader=le,this}let pW=0;class mW{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(n){const o=n.vertexShader,c=n.fragmentShader,h=this._getShaderStage(o),p=this._getShaderStage(c),_=this._getShaderCacheForMaterial(n);return _.has(h)===!1&&(_.add(h),h.usedTimes++),_.has(p)===!1&&(_.add(p),p.usedTimes++),this}remove(n){const o=this.materialCache.get(n);for(const c of o)c.usedTimes--,c.usedTimes===0&&this.shaderCache.delete(c.code);return this.materialCache.delete(n),this}getVertexShaderID(n){return this._getShaderStage(n.vertexShader).id}getFragmentShaderID(n){return this._getShaderStage(n.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(n){const o=this.materialCache;let c=o.get(n);return c===void 0&&(c=new Set,o.set(n,c)),c}_getShaderStage(n){const o=this.shaderCache;let c=o.get(n);return c===void 0&&(c=new gW(n),o.set(n,c)),c}}class gW{constructor(n){this.id=pW++,this.code=n,this.usedTimes=0}}function _W(m,n,o,c,h,p,_){const y=new __,b=new mW,M=new Set,R=[],C=h.logarithmicDepthBuffer,N=h.vertexTextures;let P=h.precision;const L={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function V(j){return M.add(j),j===0?"uv":`uv${j}`}function U(j,J,fe,We,Ke){const ot=We.fog,pt=Ke.geometry,ht=j.isMeshStandardMaterial?We.environment:null,St=(j.isMeshStandardMaterial?o:n).get(j.envMap||ht),st=St&&St.mapping===et?St.image.height:null,jt=L[j.type];j.precision!==null&&(P=h.getMaxPrecision(j.precision),P!==j.precision&&console.warn("THREE.WebGLProgram.getParameters:",j.precision,"not supported, using",P,"instead."));const hn=pt.morphAttributes.position||pt.morphAttributes.normal||pt.morphAttributes.color,An=hn!==void 0?hn.length:0;let ai=0;pt.morphAttributes.position!==void 0&&(ai=1),pt.morphAttributes.normal!==void 0&&(ai=2),pt.morphAttributes.color!==void 0&&(ai=3);let Gi,Hi,dt,sn;if(jt){const ji=Na[jt];Gi=ji.vertexShader,Hi=ji.fragmentShader}else Gi=j.vertexShader,Hi=j.fragmentShader,b.update(j),dt=b.getVertexShaderID(j),sn=b.getFragmentShaderID(j);const $t=m.getRenderTarget(),Xn=m.state.buffers.depth.getReversed(),Ln=Ke.isInstancedMesh===!0,ei=Ke.isBatchedMesh===!0,As=!!j.map,ui=!!j.matcap,_e=!!St,Tt=!!j.aoMap,gt=!!j.lightMap,Rt=!!j.bumpMap,_t=!!j.normalMap,qt=!!j.displacementMap,Pt=!!j.emissiveMap,Yt=!!j.metalnessMap,hi=!!j.roughnessMap,oi=j.anisotropy>0,ue=j.clearcoat>0,K=j.dispersion>0,Fe=j.iridescence>0,tt=j.sheen>0,Mt=j.transmission>0,at=oi&&!!j.anisotropyMap,Dn=ue&&!!j.clearcoatMap,Wt=ue&&!!j.clearcoatNormalMap,Rn=ue&&!!j.clearcoatRoughnessMap,Cn=Fe&&!!j.iridescenceMap,Dt=Fe&&!!j.iridescenceThicknessMap,dn=tt&&!!j.sheenColorMap,ti=tt&&!!j.sheenRoughnessMap,Bn=!!j.specularMap,an=!!j.specularColorMap,xi=!!j.specularIntensityMap,Te=Mt&&!!j.transmissionMap,zt=Mt&&!!j.thicknessMap,Zt=!!j.gradientMap,Mn=!!j.alphaMap,Ut=j.alphaTest>0,xt=!!j.alphaHash,Nn=!!j.extensions;let di=de;j.toneMapped&&($t===null||$t.isXRRenderTarget===!0)&&(di=m.toneMapping);const gs={shaderID:jt,shaderType:j.type,shaderName:j.name,vertexShader:Gi,fragmentShader:Hi,defines:j.defines,customVertexShaderID:dt,customFragmentShaderID:sn,isRawShaderMaterial:j.isRawShaderMaterial===!0,glslVersion:j.glslVersion,precision:P,batching:ei,batchingColor:ei&&Ke._colorsTexture!==null,instancing:Ln,instancingColor:Ln&&Ke.instanceColor!==null,instancingMorph:Ln&&Ke.morphTexture!==null,supportsVertexTextures:N,outputColorSpace:$t===null?m.outputColorSpace:$t.isXRRenderTarget===!0?$t.texture.colorSpace:_u,alphaToCoverage:!!j.alphaToCoverage,map:As,matcap:ui,envMap:_e,envMapMode:_e&&St.mapping,envMapCubeUVHeight:st,aoMap:Tt,lightMap:gt,bumpMap:Rt,normalMap:_t,displacementMap:N&&qt,emissiveMap:Pt,normalMapObjectSpace:_t&&j.normalMapType===UE,normalMapTangentSpace:_t&&j.normalMapType===pc,metalnessMap:Yt,roughnessMap:hi,anisotropy:oi,anisotropyMap:at,clearcoat:ue,clearcoatMap:Dn,clearcoatNormalMap:Wt,clearcoatRoughnessMap:Rn,dispersion:K,iridescence:Fe,iridescenceMap:Cn,iridescenceThicknessMap:Dt,sheen:tt,sheenColorMap:dn,sheenRoughnessMap:ti,specularMap:Bn,specularColorMap:an,specularIntensityMap:xi,transmission:Mt,transmissionMap:Te,thicknessMap:zt,gradientMap:Zt,opaque:j.transparent===!1&&j.blending===E&&j.alphaToCoverage===!1,alphaMap:Mn,alphaTest:Ut,alphaHash:xt,combine:j.combine,mapUv:As&&V(j.map.channel),aoMapUv:Tt&&V(j.aoMap.channel),lightMapUv:gt&&V(j.lightMap.channel),bumpMapUv:Rt&&V(j.bumpMap.channel),normalMapUv:_t&&V(j.normalMap.channel),displacementMapUv:qt&&V(j.displacementMap.channel),emissiveMapUv:Pt&&V(j.emissiveMap.channel),metalnessMapUv:Yt&&V(j.metalnessMap.channel),roughnessMapUv:hi&&V(j.roughnessMap.channel),anisotropyMapUv:at&&V(j.anisotropyMap.channel),clearcoatMapUv:Dn&&V(j.clearcoatMap.channel),clearcoatNormalMapUv:Wt&&V(j.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:Rn&&V(j.clearcoatRoughnessMap.channel),iridescenceMapUv:Cn&&V(j.iridescenceMap.channel),iridescenceThicknessMapUv:Dt&&V(j.iridescenceThicknessMap.channel),sheenColorMapUv:dn&&V(j.sheenColorMap.channel),sheenRoughnessMapUv:ti&&V(j.sheenRoughnessMap.channel),specularMapUv:Bn&&V(j.specularMap.channel),specularColorMapUv:an&&V(j.specularColorMap.channel),specularIntensityMapUv:xi&&V(j.specularIntensityMap.channel),transmissionMapUv:Te&&V(j.transmissionMap.channel),thicknessMapUv:zt&&V(j.thicknessMap.channel),alphaMapUv:Mn&&V(j.alphaMap.channel),vertexTangents:!!pt.attributes.tangent&&(_t||oi),vertexColors:j.vertexColors,vertexAlphas:j.vertexColors===!0&&!!pt.attributes.color&&pt.attributes.color.itemSize===4,pointsUvs:Ke.isPoints===!0&&!!pt.attributes.uv&&(As||Mn),fog:!!ot,useFog:j.fog===!0,fogExp2:!!ot&&ot.isFogExp2,flatShading:j.flatShading===!0&&j.wireframe===!1,sizeAttenuation:j.sizeAttenuation===!0,logarithmicDepthBuffer:C,reversedDepthBuffer:Xn,skinning:Ke.isSkinnedMesh===!0,morphTargets:pt.morphAttributes.position!==void 0,morphNormals:pt.morphAttributes.normal!==void 0,morphColors:pt.morphAttributes.color!==void 0,morphTargetsCount:An,morphTextureStride:ai,numDirLights:J.directional.length,numPointLights:J.point.length,numSpotLights:J.spot.length,numSpotLightMaps:J.spotLightMap.length,numRectAreaLights:J.rectArea.length,numHemiLights:J.hemi.length,numDirLightShadows:J.directionalShadowMap.length,numPointLightShadows:J.pointShadowMap.length,numSpotLightShadows:J.spotShadowMap.length,numSpotLightShadowsWithMaps:J.numSpotLightShadowsWithMaps,numLightProbes:J.numLightProbes,numClippingPlanes:_.numPlanes,numClipIntersection:_.numIntersection,dithering:j.dithering,shadowMapEnabled:m.shadowMap.enabled&&fe.length>0,shadowMapType:m.shadowMap.type,toneMapping:di,decodeVideoTexture:As&&j.map.isVideoTexture===!0&&Li.getTransfer(j.map.colorSpace)===ss,decodeVideoTextureEmissive:Pt&&j.emissiveMap.isVideoTexture===!0&&Li.getTransfer(j.emissiveMap.colorSpace)===ss,premultipliedAlpha:j.premultipliedAlpha,doubleSided:j.side===S,flipSided:j.side===v,useDepthPacking:j.depthPacking>=0,depthPacking:j.depthPacking||0,index0AttributeName:j.index0AttributeName,extensionClipCullDistance:Nn&&j.extensions.clipCullDistance===!0&&c.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Nn&&j.extensions.multiDraw===!0||ei)&&c.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:c.has("KHR_parallel_shader_compile"),customProgramCacheKey:j.customProgramCacheKey()};return gs.vertexUv1s=M.has(1),gs.vertexUv2s=M.has(2),gs.vertexUv3s=M.has(3),M.clear(),gs}function I(j){const J=[];if(j.shaderID?J.push(j.shaderID):(J.push(j.customVertexShaderID),J.push(j.customFragmentShaderID)),j.defines!==void 0)for(const fe in j.defines)J.push(fe),J.push(j.defines[fe]);return j.isRawShaderMaterial===!1&&(Z(J,j),W(J,j),J.push(m.outputColorSpace)),J.push(j.customProgramCacheKey),J.join()}function Z(j,J){j.push(J.precision),j.push(J.outputColorSpace),j.push(J.envMapMode),j.push(J.envMapCubeUVHeight),j.push(J.mapUv),j.push(J.alphaMapUv),j.push(J.lightMapUv),j.push(J.aoMapUv),j.push(J.bumpMapUv),j.push(J.normalMapUv),j.push(J.displacementMapUv),j.push(J.emissiveMapUv),j.push(J.metalnessMapUv),j.push(J.roughnessMapUv),j.push(J.anisotropyMapUv),j.push(J.clearcoatMapUv),j.push(J.clearcoatNormalMapUv),j.push(J.clearcoatRoughnessMapUv),j.push(J.iridescenceMapUv),j.push(J.iridescenceThicknessMapUv),j.push(J.sheenColorMapUv),j.push(J.sheenRoughnessMapUv),j.push(J.specularMapUv),j.push(J.specularColorMapUv),j.push(J.specularIntensityMapUv),j.push(J.transmissionMapUv),j.push(J.thicknessMapUv),j.push(J.combine),j.push(J.fogExp2),j.push(J.sizeAttenuation),j.push(J.morphTargetsCount),j.push(J.morphAttributeCount),j.push(J.numDirLights),j.push(J.numPointLights),j.push(J.numSpotLights),j.push(J.numSpotLightMaps),j.push(J.numHemiLights),j.push(J.numRectAreaLights),j.push(J.numDirLightShadows),j.push(J.numPointLightShadows),j.push(J.numSpotLightShadows),j.push(J.numSpotLightShadowsWithMaps),j.push(J.numLightProbes),j.push(J.shadowMapType),j.push(J.toneMapping),j.push(J.numClippingPlanes),j.push(J.numClipIntersection),j.push(J.depthPacking)}function W(j,J){y.disableAll(),J.supportsVertexTextures&&y.enable(0),J.instancing&&y.enable(1),J.instancingColor&&y.enable(2),J.instancingMorph&&y.enable(3),J.matcap&&y.enable(4),J.envMap&&y.enable(5),J.normalMapObjectSpace&&y.enable(6),J.normalMapTangentSpace&&y.enable(7),J.clearcoat&&y.enable(8),J.iridescence&&y.enable(9),J.alphaTest&&y.enable(10),J.vertexColors&&y.enable(11),J.vertexAlphas&&y.enable(12),J.vertexUv1s&&y.enable(13),J.vertexUv2s&&y.enable(14),J.vertexUv3s&&y.enable(15),J.vertexTangents&&y.enable(16),J.anisotropy&&y.enable(17),J.alphaHash&&y.enable(18),J.batching&&y.enable(19),J.dispersion&&y.enable(20),J.batchingColor&&y.enable(21),J.gradientMap&&y.enable(22),j.push(y.mask),y.disableAll(),J.fog&&y.enable(0),J.useFog&&y.enable(1),J.flatShading&&y.enable(2),J.logarithmicDepthBuffer&&y.enable(3),J.reversedDepthBuffer&&y.enable(4),J.skinning&&y.enable(5),J.morphTargets&&y.enable(6),J.morphNormals&&y.enable(7),J.morphColors&&y.enable(8),J.premultipliedAlpha&&y.enable(9),J.shadowMapEnabled&&y.enable(10),J.doubleSided&&y.enable(11),J.flipSided&&y.enable(12),J.useDepthPacking&&y.enable(13),J.dithering&&y.enable(14),J.transmission&&y.enable(15),J.sheen&&y.enable(16),J.opaque&&y.enable(17),J.pointsUvs&&y.enable(18),J.decodeVideoTexture&&y.enable(19),J.decodeVideoTextureEmissive&&y.enable(20),J.alphaToCoverage&&y.enable(21),j.push(y.mask)}function G(j){const J=L[j.type];let fe;if(J){const We=Na[J];fe=u1.clone(We.uniforms)}else fe=j.uniforms;return fe}function ae(j,J){let fe;for(let We=0,Ke=R.length;We<Ke;We++){const ot=R[We];if(ot.cacheKey===J){fe=ot,++fe.usedTimes;break}}return fe===void 0&&(fe=new fW(m,J,j,p),R.push(fe)),fe}function le(j){if(--j.usedTimes===0){const J=R.indexOf(j);R[J]=R[R.length-1],R.pop(),j.destroy()}}function he(j){b.remove(j)}function me(){b.dispose()}return{getParameters:U,getProgramCacheKey:I,getUniforms:G,acquireProgram:ae,releaseProgram:le,releaseShaderCache:he,programs:R,dispose:me}}function xW(){let m=new WeakMap;function n(_){return m.has(_)}function o(_){let y=m.get(_);return y===void 0&&(y={},m.set(_,y)),y}function c(_){m.delete(_)}function h(_,y,b){m.get(_)[y]=b}function p(){m=new WeakMap}return{has:n,get:o,remove:c,update:h,dispose:p}}function yW(m,n){return m.groupOrder!==n.groupOrder?m.groupOrder-n.groupOrder:m.renderOrder!==n.renderOrder?m.renderOrder-n.renderOrder:m.material.id!==n.material.id?m.material.id-n.material.id:m.z!==n.z?m.z-n.z:m.id-n.id}function EC(m,n){return m.groupOrder!==n.groupOrder?m.groupOrder-n.groupOrder:m.renderOrder!==n.renderOrder?m.renderOrder-n.renderOrder:m.z!==n.z?n.z-m.z:m.id-n.id}function RC(){const m=[];let n=0;const o=[],c=[],h=[];function p(){n=0,o.length=0,c.length=0,h.length=0}function _(C,N,P,L,V,U){let I=m[n];return I===void 0?(I={id:C.id,object:C,geometry:N,material:P,groupOrder:L,renderOrder:C.renderOrder,z:V,group:U},m[n]=I):(I.id=C.id,I.object=C,I.geometry=N,I.material=P,I.groupOrder=L,I.renderOrder=C.renderOrder,I.z=V,I.group=U),n++,I}function y(C,N,P,L,V,U){const I=_(C,N,P,L,V,U);P.transmission>0?c.push(I):P.transparent===!0?h.push(I):o.push(I)}function b(C,N,P,L,V,U){const I=_(C,N,P,L,V,U);P.transmission>0?c.unshift(I):P.transparent===!0?h.unshift(I):o.unshift(I)}function M(C,N){o.length>1&&o.sort(C||yW),c.length>1&&c.sort(N||EC),h.length>1&&h.sort(N||EC)}function R(){for(let C=n,N=m.length;C<N;C++){const P=m[C];if(P.id===null)break;P.id=null,P.object=null,P.geometry=null,P.material=null,P.group=null}}return{opaque:o,transmissive:c,transparent:h,init:p,push:y,unshift:b,finish:R,sort:M}}function vW(){let m=new WeakMap;function n(c,h){const p=m.get(c);let _;return p===void 0?(_=new RC,m.set(c,[_])):h>=p.length?(_=new RC,p.push(_)):_=p[h],_}function o(){m=new WeakMap}return{get:n,dispose:o}}function SW(){const m={};return{get:function(n){if(m[n.id]!==void 0)return m[n.id];let o;switch(n.type){case"DirectionalLight":o={direction:new ce,color:new mn};break;case"SpotLight":o={position:new ce,direction:new ce,color:new mn,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":o={position:new ce,color:new mn,distance:0,decay:0};break;case"HemisphereLight":o={direction:new ce,skyColor:new mn,groundColor:new mn};break;case"RectAreaLight":o={color:new mn,position:new ce,halfWidth:new ce,halfHeight:new ce};break}return m[n.id]=o,o}}}function bW(){const m={};return{get:function(n){if(m[n.id]!==void 0)return m[n.id];let o;switch(n.type){case"DirectionalLight":o={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new vt};break;case"SpotLight":o={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new vt};break;case"PointLight":o={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new vt,shadowCameraNear:1,shadowCameraFar:1e3};break}return m[n.id]=o,o}}}let TW=0;function MW(m,n){return(n.castShadow?2:0)-(m.castShadow?2:0)+(n.map?1:0)-(m.map?1:0)}function wW(m){const n=new SW,o=bW(),c={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let M=0;M<9;M++)c.probe.push(new ce);const h=new ce,p=new Qn,_=new Qn;function y(M){let R=0,C=0,N=0;for(let j=0;j<9;j++)c.probe[j].set(0,0,0);let P=0,L=0,V=0,U=0,I=0,Z=0,W=0,G=0,ae=0,le=0,he=0;M.sort(MW);for(let j=0,J=M.length;j<J;j++){const fe=M[j],We=fe.color,Ke=fe.intensity,ot=fe.distance,pt=fe.shadow&&fe.shadow.map?fe.shadow.map.texture:null;if(fe.isAmbientLight)R+=We.r*Ke,C+=We.g*Ke,N+=We.b*Ke;else if(fe.isLightProbe){for(let ht=0;ht<9;ht++)c.probe[ht].addScaledVector(fe.sh.coefficients[ht],Ke);he++}else if(fe.isDirectionalLight){const ht=n.get(fe);if(ht.color.copy(fe.color).multiplyScalar(fe.intensity),fe.castShadow){const St=fe.shadow,st=o.get(fe);st.shadowIntensity=St.intensity,st.shadowBias=St.bias,st.shadowNormalBias=St.normalBias,st.shadowRadius=St.radius,st.shadowMapSize=St.mapSize,c.directionalShadow[P]=st,c.directionalShadowMap[P]=pt,c.directionalShadowMatrix[P]=fe.shadow.matrix,Z++}c.directional[P]=ht,P++}else if(fe.isSpotLight){const ht=n.get(fe);ht.position.setFromMatrixPosition(fe.matrixWorld),ht.color.copy(We).multiplyScalar(Ke),ht.distance=ot,ht.coneCos=Math.cos(fe.angle),ht.penumbraCos=Math.cos(fe.angle*(1-fe.penumbra)),ht.decay=fe.decay,c.spot[V]=ht;const St=fe.shadow;if(fe.map&&(c.spotLightMap[ae]=fe.map,ae++,St.updateMatrices(fe),fe.castShadow&&le++),c.spotLightMatrix[V]=St.matrix,fe.castShadow){const st=o.get(fe);st.shadowIntensity=St.intensity,st.shadowBias=St.bias,st.shadowNormalBias=St.normalBias,st.shadowRadius=St.radius,st.shadowMapSize=St.mapSize,c.spotShadow[V]=st,c.spotShadowMap[V]=pt,G++}V++}else if(fe.isRectAreaLight){const ht=n.get(fe);ht.color.copy(We).multiplyScalar(Ke),ht.halfWidth.set(fe.width*.5,0,0),ht.halfHeight.set(0,fe.height*.5,0),c.rectArea[U]=ht,U++}else if(fe.isPointLight){const ht=n.get(fe);if(ht.color.copy(fe.color).multiplyScalar(fe.intensity),ht.distance=fe.distance,ht.decay=fe.decay,fe.castShadow){const St=fe.shadow,st=o.get(fe);st.shadowIntensity=St.intensity,st.shadowBias=St.bias,st.shadowNormalBias=St.normalBias,st.shadowRadius=St.radius,st.shadowMapSize=St.mapSize,st.shadowCameraNear=St.camera.near,st.shadowCameraFar=St.camera.far,c.pointShadow[L]=st,c.pointShadowMap[L]=pt,c.pointShadowMatrix[L]=fe.shadow.matrix,W++}c.point[L]=ht,L++}else if(fe.isHemisphereLight){const ht=n.get(fe);ht.skyColor.copy(fe.color).multiplyScalar(Ke),ht.groundColor.copy(fe.groundColor).multiplyScalar(Ke),c.hemi[I]=ht,I++}}U>0&&(m.has("OES_texture_float_linear")===!0?(c.rectAreaLTC1=nn.LTC_FLOAT_1,c.rectAreaLTC2=nn.LTC_FLOAT_2):(c.rectAreaLTC1=nn.LTC_HALF_1,c.rectAreaLTC2=nn.LTC_HALF_2)),c.ambient[0]=R,c.ambient[1]=C,c.ambient[2]=N;const me=c.hash;(me.directionalLength!==P||me.pointLength!==L||me.spotLength!==V||me.rectAreaLength!==U||me.hemiLength!==I||me.numDirectionalShadows!==Z||me.numPointShadows!==W||me.numSpotShadows!==G||me.numSpotMaps!==ae||me.numLightProbes!==he)&&(c.directional.length=P,c.spot.length=V,c.rectArea.length=U,c.point.length=L,c.hemi.length=I,c.directionalShadow.length=Z,c.directionalShadowMap.length=Z,c.pointShadow.length=W,c.pointShadowMap.length=W,c.spotShadow.length=G,c.spotShadowMap.length=G,c.directionalShadowMatrix.length=Z,c.pointShadowMatrix.length=W,c.spotLightMatrix.length=G+ae-le,c.spotLightMap.length=ae,c.numSpotLightShadowsWithMaps=le,c.numLightProbes=he,me.directionalLength=P,me.pointLength=L,me.spotLength=V,me.rectAreaLength=U,me.hemiLength=I,me.numDirectionalShadows=Z,me.numPointShadows=W,me.numSpotShadows=G,me.numSpotMaps=ae,me.numLightProbes=he,c.version=TW++)}function b(M,R){let C=0,N=0,P=0,L=0,V=0;const U=R.matrixWorldInverse;for(let I=0,Z=M.length;I<Z;I++){const W=M[I];if(W.isDirectionalLight){const G=c.directional[C];G.direction.setFromMatrixPosition(W.matrixWorld),h.setFromMatrixPosition(W.target.matrixWorld),G.direction.sub(h),G.direction.transformDirection(U),C++}else if(W.isSpotLight){const G=c.spot[P];G.position.setFromMatrixPosition(W.matrixWorld),G.position.applyMatrix4(U),G.direction.setFromMatrixPosition(W.matrixWorld),h.setFromMatrixPosition(W.target.matrixWorld),G.direction.sub(h),G.direction.transformDirection(U),P++}else if(W.isRectAreaLight){const G=c.rectArea[L];G.position.setFromMatrixPosition(W.matrixWorld),G.position.applyMatrix4(U),_.identity(),p.copy(W.matrixWorld),p.premultiply(U),_.extractRotation(p),G.halfWidth.set(W.width*.5,0,0),G.halfHeight.set(0,W.height*.5,0),G.halfWidth.applyMatrix4(_),G.halfHeight.applyMatrix4(_),L++}else if(W.isPointLight){const G=c.point[N];G.position.setFromMatrixPosition(W.matrixWorld),G.position.applyMatrix4(U),N++}else if(W.isHemisphereLight){const G=c.hemi[V];G.direction.setFromMatrixPosition(W.matrixWorld),G.direction.transformDirection(U),V++}}}return{setup:y,setupView:b,state:c}}function CC(m){const n=new wW(m),o=[],c=[];function h(R){M.camera=R,o.length=0,c.length=0}function p(R){o.push(R)}function _(R){c.push(R)}function y(){n.setup(o)}function b(R){n.setupView(o,R)}const M={lightsArray:o,shadowsArray:c,camera:null,lights:n,transmissionRenderTarget:{}};return{init:h,state:M,setupLights:y,setupLightsView:b,pushLight:p,pushShadow:_}}function AW(m){let n=new WeakMap;function o(h,p=0){const _=n.get(h);let y;return _===void 0?(y=new CC(m),n.set(h,[y])):p>=_.length?(y=new CC(m),_.push(y)):y=_[p],y}function c(){n=new WeakMap}return{get:o,dispose:c}}const EW=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,RW=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function CW(m,n,o){let c=new kd;const h=new vt,p=new vt,_=new Fi,y=new jS({depthPacking:DE}),b=new QS,M={},R=o.maxTextureSize,C={[x]:v,[v]:x,[S]:S},N=new Ea({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new vt},radius:{value:4}},vertexShader:EW,fragmentShader:RW}),P=N.clone();P.defines.HORIZONTAL_PASS=1;const L=new pi;L.setAttribute("position",new cs(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const V=new Zs(L,N),U=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=d;let I=this.type;this.render=function(le,he,me){if(U.enabled===!1||U.autoUpdate===!1&&U.needsUpdate===!1||le.length===0)return;const j=m.getRenderTarget(),J=m.getActiveCubeFace(),fe=m.getActiveMipmapLevel(),We=m.state;We.setBlending(T),We.buffers.depth.getReversed()?We.buffers.color.setClear(0,0,0,0):We.buffers.color.setClear(1,1,1,1),We.buffers.depth.setTest(!0),We.setScissorTest(!1);const Ke=I!==g&&this.type===g,ot=I===g&&this.type!==g;for(let pt=0,ht=le.length;pt<ht;pt++){const St=le[pt],st=St.shadow;if(st===void 0){console.warn("THREE.WebGLShadowMap:",St,"has no shadow.");continue}if(st.autoUpdate===!1&&st.needsUpdate===!1)continue;h.copy(st.mapSize);const jt=st.getFrameExtents();if(h.multiply(jt),p.copy(st.mapSize),(h.x>R||h.y>R)&&(h.x>R&&(p.x=Math.floor(R/jt.x),h.x=p.x*jt.x,st.mapSize.x=p.x),h.y>R&&(p.y=Math.floor(R/jt.y),h.y=p.y*jt.y,st.mapSize.y=p.y)),st.map===null||Ke===!0||ot===!0){const An=this.type!==g?{minFilter:mt,magFilter:mt}:{};st.map!==null&&st.map.dispose(),st.map=new Za(h.x,h.y,An),st.map.texture.name=St.name+".shadowMap",st.camera.updateProjectionMatrix()}m.setRenderTarget(st.map),m.clear();const hn=st.getViewportCount();for(let An=0;An<hn;An++){const ai=st.getViewport(An);_.set(p.x*ai.x,p.y*ai.y,p.x*ai.z,p.y*ai.w),We.viewport(_),st.updateMatrices(St,An),c=st.getFrustum(),G(he,me,st.camera,St,this.type)}st.isPointLightShadow!==!0&&this.type===g&&Z(st,me),st.needsUpdate=!1}I=this.type,U.needsUpdate=!1,m.setRenderTarget(j,J,fe)};function Z(le,he){const me=n.update(V);N.defines.VSM_SAMPLES!==le.blurSamples&&(N.defines.VSM_SAMPLES=le.blurSamples,P.defines.VSM_SAMPLES=le.blurSamples,N.needsUpdate=!0,P.needsUpdate=!0),le.mapPass===null&&(le.mapPass=new Za(h.x,h.y)),N.uniforms.shadow_pass.value=le.map.texture,N.uniforms.resolution.value=le.mapSize,N.uniforms.radius.value=le.radius,m.setRenderTarget(le.mapPass),m.clear(),m.renderBufferDirect(he,null,me,N,V,null),P.uniforms.shadow_pass.value=le.mapPass.texture,P.uniforms.resolution.value=le.mapSize,P.uniforms.radius.value=le.radius,m.setRenderTarget(le.map),m.clear(),m.renderBufferDirect(he,null,me,P,V,null)}function W(le,he,me,j){let J=null;const fe=me.isPointLight===!0?le.customDistanceMaterial:le.customDepthMaterial;if(fe!==void 0)J=fe;else if(J=me.isPointLight===!0?b:y,m.localClippingEnabled&&he.clipShadows===!0&&Array.isArray(he.clippingPlanes)&&he.clippingPlanes.length!==0||he.displacementMap&&he.displacementScale!==0||he.alphaMap&&he.alphaTest>0||he.map&&he.alphaTest>0||he.alphaToCoverage===!0){const We=J.uuid,Ke=he.uuid;let ot=M[We];ot===void 0&&(ot={},M[We]=ot);let pt=ot[Ke];pt===void 0&&(pt=J.clone(),ot[Ke]=pt,he.addEventListener("dispose",ae)),J=pt}if(J.visible=he.visible,J.wireframe=he.wireframe,j===g?J.side=he.shadowSide!==null?he.shadowSide:he.side:J.side=he.shadowSide!==null?he.shadowSide:C[he.side],J.alphaMap=he.alphaMap,J.alphaTest=he.alphaToCoverage===!0?.5:he.alphaTest,J.map=he.map,J.clipShadows=he.clipShadows,J.clippingPlanes=he.clippingPlanes,J.clipIntersection=he.clipIntersection,J.displacementMap=he.displacementMap,J.displacementScale=he.displacementScale,J.displacementBias=he.displacementBias,J.wireframeLinewidth=he.wireframeLinewidth,J.linewidth=he.linewidth,me.isPointLight===!0&&J.isMeshDistanceMaterial===!0){const We=m.properties.get(J);We.light=me}return J}function G(le,he,me,j,J){if(le.visible===!1)return;if(le.layers.test(he.layers)&&(le.isMesh||le.isLine||le.isPoints)&&(le.castShadow||le.receiveShadow&&J===g)&&(!le.frustumCulled||c.intersectsObject(le))){le.modelViewMatrix.multiplyMatrices(me.matrixWorldInverse,le.matrixWorld);const Ke=n.update(le),ot=le.material;if(Array.isArray(ot)){const pt=Ke.groups;for(let ht=0,St=pt.length;ht<St;ht++){const st=pt[ht],jt=ot[st.materialIndex];if(jt&&jt.visible){const hn=W(le,jt,j,J);le.onBeforeShadow(m,le,he,me,Ke,hn,st),m.renderBufferDirect(me,null,Ke,hn,le,st),le.onAfterShadow(m,le,he,me,Ke,hn,st)}}}else if(ot.visible){const pt=W(le,ot,j,J);le.onBeforeShadow(m,le,he,me,Ke,pt,null),m.renderBufferDirect(me,null,Ke,pt,le,null),le.onAfterShadow(m,le,he,me,Ke,pt,null)}}const We=le.children;for(let Ke=0,ot=We.length;Ke<ot;Ke++)G(We[Ke],he,me,j,J)}function ae(le){le.target.removeEventListener("dispose",ae);for(const me in M){const j=M[me],J=le.target.uuid;J in j&&(j[J].dispose(),delete j[J])}}}const NW={[bi]:rt,[Xt]:kn,[In]:Ki,[At]:gn,[rt]:bi,[kn]:Xt,[Ki]:In,[gn]:At};function PW(m,n){function o(){let Te=!1;const zt=new Fi;let Zt=null;const Mn=new Fi(0,0,0,0);return{setMask:function(Ut){Zt!==Ut&&!Te&&(m.colorMask(Ut,Ut,Ut,Ut),Zt=Ut)},setLocked:function(Ut){Te=Ut},setClear:function(Ut,xt,Nn,di,gs){gs===!0&&(Ut*=di,xt*=di,Nn*=di),zt.set(Ut,xt,Nn,di),Mn.equals(zt)===!1&&(m.clearColor(Ut,xt,Nn,di),Mn.copy(zt))},reset:function(){Te=!1,Zt=null,Mn.set(-1,0,0,0)}}}function c(){let Te=!1,zt=!1,Zt=null,Mn=null,Ut=null;return{setReversed:function(xt){if(zt!==xt){const Nn=n.get("EXT_clip_control");xt?Nn.clipControlEXT(Nn.LOWER_LEFT_EXT,Nn.ZERO_TO_ONE_EXT):Nn.clipControlEXT(Nn.LOWER_LEFT_EXT,Nn.NEGATIVE_ONE_TO_ONE_EXT),zt=xt;const di=Ut;Ut=null,this.setClear(di)}},getReversed:function(){return zt},setTest:function(xt){xt?$t(m.DEPTH_TEST):Xn(m.DEPTH_TEST)},setMask:function(xt){Zt!==xt&&!Te&&(m.depthMask(xt),Zt=xt)},setFunc:function(xt){if(zt&&(xt=NW[xt]),Mn!==xt){switch(xt){case bi:m.depthFunc(m.NEVER);break;case rt:m.depthFunc(m.ALWAYS);break;case Xt:m.depthFunc(m.LESS);break;case At:m.depthFunc(m.LEQUAL);break;case In:m.depthFunc(m.EQUAL);break;case gn:m.depthFunc(m.GEQUAL);break;case kn:m.depthFunc(m.GREATER);break;case Ki:m.depthFunc(m.NOTEQUAL);break;default:m.depthFunc(m.LEQUAL)}Mn=xt}},setLocked:function(xt){Te=xt},setClear:function(xt){Ut!==xt&&(zt&&(xt=1-xt),m.clearDepth(xt),Ut=xt)},reset:function(){Te=!1,Zt=null,Mn=null,Ut=null,zt=!1}}}function h(){let Te=!1,zt=null,Zt=null,Mn=null,Ut=null,xt=null,Nn=null,di=null,gs=null;return{setTest:function(ji){Te||(ji?$t(m.STENCIL_TEST):Xn(m.STENCIL_TEST))},setMask:function(ji){zt!==ji&&!Te&&(m.stencilMask(ji),zt=ji)},setFunc:function(ji,Ul,tl){(Zt!==ji||Mn!==Ul||Ut!==tl)&&(m.stencilFunc(ji,Ul,tl),Zt=ji,Mn=Ul,Ut=tl)},setOp:function(ji,Ul,tl){(xt!==ji||Nn!==Ul||di!==tl)&&(m.stencilOp(ji,Ul,tl),xt=ji,Nn=Ul,di=tl)},setLocked:function(ji){Te=ji},setClear:function(ji){gs!==ji&&(m.clearStencil(ji),gs=ji)},reset:function(){Te=!1,zt=null,Zt=null,Mn=null,Ut=null,xt=null,Nn=null,di=null,gs=null}}}const p=new o,_=new c,y=new h,b=new WeakMap,M=new WeakMap;let R={},C={},N=new WeakMap,P=[],L=null,V=!1,U=null,I=null,Z=null,W=null,G=null,ae=null,le=null,he=new mn(0,0,0),me=0,j=!1,J=null,fe=null,We=null,Ke=null,ot=null;const pt=m.getParameter(m.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let ht=!1,St=0;const st=m.getParameter(m.VERSION);st.indexOf("WebGL")!==-1?(St=parseFloat(/^WebGL (\d)/.exec(st)[1]),ht=St>=1):st.indexOf("OpenGL ES")!==-1&&(St=parseFloat(/^OpenGL ES (\d)/.exec(st)[1]),ht=St>=2);let jt=null,hn={};const An=m.getParameter(m.SCISSOR_BOX),ai=m.getParameter(m.VIEWPORT),Gi=new Fi().fromArray(An),Hi=new Fi().fromArray(ai);function dt(Te,zt,Zt,Mn){const Ut=new Uint8Array(4),xt=m.createTexture();m.bindTexture(Te,xt),m.texParameteri(Te,m.TEXTURE_MIN_FILTER,m.NEAREST),m.texParameteri(Te,m.TEXTURE_MAG_FILTER,m.NEAREST);for(let Nn=0;Nn<Zt;Nn++)Te===m.TEXTURE_3D||Te===m.TEXTURE_2D_ARRAY?m.texImage3D(zt,0,m.RGBA,1,1,Mn,0,m.RGBA,m.UNSIGNED_BYTE,Ut):m.texImage2D(zt+Nn,0,m.RGBA,1,1,0,m.RGBA,m.UNSIGNED_BYTE,Ut);return xt}const sn={};sn[m.TEXTURE_2D]=dt(m.TEXTURE_2D,m.TEXTURE_2D,1),sn[m.TEXTURE_CUBE_MAP]=dt(m.TEXTURE_CUBE_MAP,m.TEXTURE_CUBE_MAP_POSITIVE_X,6),sn[m.TEXTURE_2D_ARRAY]=dt(m.TEXTURE_2D_ARRAY,m.TEXTURE_2D_ARRAY,1,1),sn[m.TEXTURE_3D]=dt(m.TEXTURE_3D,m.TEXTURE_3D,1,1),p.setClear(0,0,0,1),_.setClear(1),y.setClear(0),$t(m.DEPTH_TEST),_.setFunc(At),Rt(!1),_t(s),$t(m.CULL_FACE),Tt(T);function $t(Te){R[Te]!==!0&&(m.enable(Te),R[Te]=!0)}function Xn(Te){R[Te]!==!1&&(m.disable(Te),R[Te]=!1)}function Ln(Te,zt){return C[Te]!==zt?(m.bindFramebuffer(Te,zt),C[Te]=zt,Te===m.DRAW_FRAMEBUFFER&&(C[m.FRAMEBUFFER]=zt),Te===m.FRAMEBUFFER&&(C[m.DRAW_FRAMEBUFFER]=zt),!0):!1}function ei(Te,zt){let Zt=P,Mn=!1;if(Te){Zt=N.get(zt),Zt===void 0&&(Zt=[],N.set(zt,Zt));const Ut=Te.textures;if(Zt.length!==Ut.length||Zt[0]!==m.COLOR_ATTACHMENT0){for(let xt=0,Nn=Ut.length;xt<Nn;xt++)Zt[xt]=m.COLOR_ATTACHMENT0+xt;Zt.length=Ut.length,Mn=!0}}else Zt[0]!==m.BACK&&(Zt[0]=m.BACK,Mn=!0);Mn&&m.drawBuffers(Zt)}function As(Te){return L!==Te?(m.useProgram(Te),L=Te,!0):!1}const ui={[B]:m.FUNC_ADD,[k]:m.FUNC_SUBTRACT,[Y]:m.FUNC_REVERSE_SUBTRACT};ui[$]=m.MIN,ui[Q]=m.MAX;const _e={[z]:m.ZERO,[q]:m.ONE,[oe]:m.SRC_COLOR,[Ne]:m.SRC_ALPHA,[Ct]:m.SRC_ALPHA_SATURATE,[ct]:m.DST_COLOR,[Be]:m.DST_ALPHA,[Ce]:m.ONE_MINUS_SRC_COLOR,[Oe]:m.ONE_MINUS_SRC_ALPHA,[Ve]:m.ONE_MINUS_DST_COLOR,[He]:m.ONE_MINUS_DST_ALPHA,[Gt]:m.CONSTANT_COLOR,[pn]:m.ONE_MINUS_CONSTANT_COLOR,[qn]:m.CONSTANT_ALPHA,[yi]:m.ONE_MINUS_CONSTANT_ALPHA};function Tt(Te,zt,Zt,Mn,Ut,xt,Nn,di,gs,ji){if(Te===T){V===!0&&(Xn(m.BLEND),V=!1);return}if(V===!1&&($t(m.BLEND),V=!0),Te!==F){if(Te!==U||ji!==j){if((I!==B||G!==B)&&(m.blendEquation(m.FUNC_ADD),I=B,G=B),ji)switch(Te){case E:m.blendFuncSeparate(m.ONE,m.ONE_MINUS_SRC_ALPHA,m.ONE,m.ONE_MINUS_SRC_ALPHA);break;case A:m.blendFunc(m.ONE,m.ONE);break;case w:m.blendFuncSeparate(m.ZERO,m.ONE_MINUS_SRC_COLOR,m.ZERO,m.ONE);break;case O:m.blendFuncSeparate(m.DST_COLOR,m.ONE_MINUS_SRC_ALPHA,m.ZERO,m.ONE);break;default:console.error("THREE.WebGLState: Invalid blending: ",Te);break}else switch(Te){case E:m.blendFuncSeparate(m.SRC_ALPHA,m.ONE_MINUS_SRC_ALPHA,m.ONE,m.ONE_MINUS_SRC_ALPHA);break;case A:m.blendFuncSeparate(m.SRC_ALPHA,m.ONE,m.ONE,m.ONE);break;case w:console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");break;case O:console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");break;default:console.error("THREE.WebGLState: Invalid blending: ",Te);break}Z=null,W=null,ae=null,le=null,he.set(0,0,0),me=0,U=Te,j=ji}return}Ut=Ut||zt,xt=xt||Zt,Nn=Nn||Mn,(zt!==I||Ut!==G)&&(m.blendEquationSeparate(ui[zt],ui[Ut]),I=zt,G=Ut),(Zt!==Z||Mn!==W||xt!==ae||Nn!==le)&&(m.blendFuncSeparate(_e[Zt],_e[Mn],_e[xt],_e[Nn]),Z=Zt,W=Mn,ae=xt,le=Nn),(di.equals(he)===!1||gs!==me)&&(m.blendColor(di.r,di.g,di.b,gs),he.copy(di),me=gs),U=Te,j=!1}function gt(Te,zt){Te.side===S?Xn(m.CULL_FACE):$t(m.CULL_FACE);let Zt=Te.side===v;zt&&(Zt=!Zt),Rt(Zt),Te.blending===E&&Te.transparent===!1?Tt(T):Tt(Te.blending,Te.blendEquation,Te.blendSrc,Te.blendDst,Te.blendEquationAlpha,Te.blendSrcAlpha,Te.blendDstAlpha,Te.blendColor,Te.blendAlpha,Te.premultipliedAlpha),_.setFunc(Te.depthFunc),_.setTest(Te.depthTest),_.setMask(Te.depthWrite),p.setMask(Te.colorWrite);const Mn=Te.stencilWrite;y.setTest(Mn),Mn&&(y.setMask(Te.stencilWriteMask),y.setFunc(Te.stencilFunc,Te.stencilRef,Te.stencilFuncMask),y.setOp(Te.stencilFail,Te.stencilZFail,Te.stencilZPass)),Pt(Te.polygonOffset,Te.polygonOffsetFactor,Te.polygonOffsetUnits),Te.alphaToCoverage===!0?$t(m.SAMPLE_ALPHA_TO_COVERAGE):Xn(m.SAMPLE_ALPHA_TO_COVERAGE)}function Rt(Te){J!==Te&&(Te?m.frontFace(m.CW):m.frontFace(m.CCW),J=Te)}function _t(Te){Te!==i?($t(m.CULL_FACE),Te!==fe&&(Te===s?m.cullFace(m.BACK):Te===r?m.cullFace(m.FRONT):m.cullFace(m.FRONT_AND_BACK))):Xn(m.CULL_FACE),fe=Te}function qt(Te){Te!==We&&(ht&&m.lineWidth(Te),We=Te)}function Pt(Te,zt,Zt){Te?($t(m.POLYGON_OFFSET_FILL),(Ke!==zt||ot!==Zt)&&(m.polygonOffset(zt,Zt),Ke=zt,ot=Zt)):Xn(m.POLYGON_OFFSET_FILL)}function Yt(Te){Te?$t(m.SCISSOR_TEST):Xn(m.SCISSOR_TEST)}function hi(Te){Te===void 0&&(Te=m.TEXTURE0+pt-1),jt!==Te&&(m.activeTexture(Te),jt=Te)}function oi(Te,zt,Zt){Zt===void 0&&(jt===null?Zt=m.TEXTURE0+pt-1:Zt=jt);let Mn=hn[Zt];Mn===void 0&&(Mn={type:void 0,texture:void 0},hn[Zt]=Mn),(Mn.type!==Te||Mn.texture!==zt)&&(jt!==Zt&&(m.activeTexture(Zt),jt=Zt),m.bindTexture(Te,zt||sn[Te]),Mn.type=Te,Mn.texture=zt)}function ue(){const Te=hn[jt];Te!==void 0&&Te.type!==void 0&&(m.bindTexture(Te.type,null),Te.type=void 0,Te.texture=void 0)}function K(){try{m.compressedTexImage2D(...arguments)}catch(Te){console.error("THREE.WebGLState:",Te)}}function Fe(){try{m.compressedTexImage3D(...arguments)}catch(Te){console.error("THREE.WebGLState:",Te)}}function tt(){try{m.texSubImage2D(...arguments)}catch(Te){console.error("THREE.WebGLState:",Te)}}function Mt(){try{m.texSubImage3D(...arguments)}catch(Te){console.error("THREE.WebGLState:",Te)}}function at(){try{m.compressedTexSubImage2D(...arguments)}catch(Te){console.error("THREE.WebGLState:",Te)}}function Dn(){try{m.compressedTexSubImage3D(...arguments)}catch(Te){console.error("THREE.WebGLState:",Te)}}function Wt(){try{m.texStorage2D(...arguments)}catch(Te){console.error("THREE.WebGLState:",Te)}}function Rn(){try{m.texStorage3D(...arguments)}catch(Te){console.error("THREE.WebGLState:",Te)}}function Cn(){try{m.texImage2D(...arguments)}catch(Te){console.error("THREE.WebGLState:",Te)}}function Dt(){try{m.texImage3D(...arguments)}catch(Te){console.error("THREE.WebGLState:",Te)}}function dn(Te){Gi.equals(Te)===!1&&(m.scissor(Te.x,Te.y,Te.z,Te.w),Gi.copy(Te))}function ti(Te){Hi.equals(Te)===!1&&(m.viewport(Te.x,Te.y,Te.z,Te.w),Hi.copy(Te))}function Bn(Te,zt){let Zt=M.get(zt);Zt===void 0&&(Zt=new WeakMap,M.set(zt,Zt));let Mn=Zt.get(Te);Mn===void 0&&(Mn=m.getUniformBlockIndex(zt,Te.name),Zt.set(Te,Mn))}function an(Te,zt){const Mn=M.get(zt).get(Te);b.get(zt)!==Mn&&(m.uniformBlockBinding(zt,Mn,Te.__bindingPointIndex),b.set(zt,Mn))}function xi(){m.disable(m.BLEND),m.disable(m.CULL_FACE),m.disable(m.DEPTH_TEST),m.disable(m.POLYGON_OFFSET_FILL),m.disable(m.SCISSOR_TEST),m.disable(m.STENCIL_TEST),m.disable(m.SAMPLE_ALPHA_TO_COVERAGE),m.blendEquation(m.FUNC_ADD),m.blendFunc(m.ONE,m.ZERO),m.blendFuncSeparate(m.ONE,m.ZERO,m.ONE,m.ZERO),m.blendColor(0,0,0,0),m.colorMask(!0,!0,!0,!0),m.clearColor(0,0,0,0),m.depthMask(!0),m.depthFunc(m.LESS),_.setReversed(!1),m.clearDepth(1),m.stencilMask(4294967295),m.stencilFunc(m.ALWAYS,0,4294967295),m.stencilOp(m.KEEP,m.KEEP,m.KEEP),m.clearStencil(0),m.cullFace(m.BACK),m.frontFace(m.CCW),m.polygonOffset(0,0),m.activeTexture(m.TEXTURE0),m.bindFramebuffer(m.FRAMEBUFFER,null),m.bindFramebuffer(m.DRAW_FRAMEBUFFER,null),m.bindFramebuffer(m.READ_FRAMEBUFFER,null),m.useProgram(null),m.lineWidth(1),m.scissor(0,0,m.canvas.width,m.canvas.height),m.viewport(0,0,m.canvas.width,m.canvas.height),R={},jt=null,hn={},C={},N=new WeakMap,P=[],L=null,V=!1,U=null,I=null,Z=null,W=null,G=null,ae=null,le=null,he=new mn(0,0,0),me=0,j=!1,J=null,fe=null,We=null,Ke=null,ot=null,Gi.set(0,0,m.canvas.width,m.canvas.height),Hi.set(0,0,m.canvas.width,m.canvas.height),p.reset(),_.reset(),y.reset()}return{buffers:{color:p,depth:_,stencil:y},enable:$t,disable:Xn,bindFramebuffer:Ln,drawBuffers:ei,useProgram:As,setBlending:Tt,setMaterial:gt,setFlipSided:Rt,setCullFace:_t,setLineWidth:qt,setPolygonOffset:Pt,setScissorTest:Yt,activeTexture:hi,bindTexture:oi,unbindTexture:ue,compressedTexImage2D:K,compressedTexImage3D:Fe,texImage2D:Cn,texImage3D:Dt,updateUBOMapping:Bn,uniformBlockBinding:an,texStorage2D:Wt,texStorage3D:Rn,texSubImage2D:tt,texSubImage3D:Mt,compressedTexSubImage2D:at,compressedTexSubImage3D:Dn,scissor:dn,viewport:ti,reset:xi}}function IW(m,n,o,c,h,p,_){const y=n.has("WEBGL_multisampled_render_to_texture")?n.get("WEBGL_multisampled_render_to_texture"):null,b=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),M=new vt,R=new WeakMap;let C;const N=new WeakMap;let P=!1;try{P=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function L(ue,K){return P?new OffscreenCanvas(ue,K):Ip("canvas")}function V(ue,K,Fe){let tt=1;const Mt=oi(ue);if((Mt.width>Fe||Mt.height>Fe)&&(tt=Fe/Math.max(Mt.width,Mt.height)),tt<1)if(typeof HTMLImageElement<"u"&&ue instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&ue instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&ue instanceof ImageBitmap||typeof VideoFrame<"u"&&ue instanceof VideoFrame){const at=Math.floor(tt*Mt.width),Dn=Math.floor(tt*Mt.height);C===void 0&&(C=L(at,Dn));const Wt=K?L(at,Dn):C;return Wt.width=at,Wt.height=Dn,Wt.getContext("2d").drawImage(ue,0,0,at,Dn),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+Mt.width+"x"+Mt.height+") to ("+at+"x"+Dn+")."),Wt}else return"data"in ue&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+Mt.width+"x"+Mt.height+")."),ue;return ue}function U(ue){return ue.generateMipmaps}function I(ue){m.generateMipmap(ue)}function Z(ue){return ue.isWebGLCubeRenderTarget?m.TEXTURE_CUBE_MAP:ue.isWebGL3DRenderTarget?m.TEXTURE_3D:ue.isWebGLArrayRenderTarget||ue.isCompressedArrayTexture?m.TEXTURE_2D_ARRAY:m.TEXTURE_2D}function W(ue,K,Fe,tt,Mt=!1){if(ue!==null){if(m[ue]!==void 0)return m[ue];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+ue+"'")}let at=K;if(K===m.RED&&(Fe===m.FLOAT&&(at=m.R32F),Fe===m.HALF_FLOAT&&(at=m.R16F),Fe===m.UNSIGNED_BYTE&&(at=m.R8)),K===m.RED_INTEGER&&(Fe===m.UNSIGNED_BYTE&&(at=m.R8UI),Fe===m.UNSIGNED_SHORT&&(at=m.R16UI),Fe===m.UNSIGNED_INT&&(at=m.R32UI),Fe===m.BYTE&&(at=m.R8I),Fe===m.SHORT&&(at=m.R16I),Fe===m.INT&&(at=m.R32I)),K===m.RG&&(Fe===m.FLOAT&&(at=m.RG32F),Fe===m.HALF_FLOAT&&(at=m.RG16F),Fe===m.UNSIGNED_BYTE&&(at=m.RG8)),K===m.RG_INTEGER&&(Fe===m.UNSIGNED_BYTE&&(at=m.RG8UI),Fe===m.UNSIGNED_SHORT&&(at=m.RG16UI),Fe===m.UNSIGNED_INT&&(at=m.RG32UI),Fe===m.BYTE&&(at=m.RG8I),Fe===m.SHORT&&(at=m.RG16I),Fe===m.INT&&(at=m.RG32I)),K===m.RGB_INTEGER&&(Fe===m.UNSIGNED_BYTE&&(at=m.RGB8UI),Fe===m.UNSIGNED_SHORT&&(at=m.RGB16UI),Fe===m.UNSIGNED_INT&&(at=m.RGB32UI),Fe===m.BYTE&&(at=m.RGB8I),Fe===m.SHORT&&(at=m.RGB16I),Fe===m.INT&&(at=m.RGB32I)),K===m.RGBA_INTEGER&&(Fe===m.UNSIGNED_BYTE&&(at=m.RGBA8UI),Fe===m.UNSIGNED_SHORT&&(at=m.RGBA16UI),Fe===m.UNSIGNED_INT&&(at=m.RGBA32UI),Fe===m.BYTE&&(at=m.RGBA8I),Fe===m.SHORT&&(at=m.RGBA16I),Fe===m.INT&&(at=m.RGBA32I)),K===m.RGB&&Fe===m.UNSIGNED_INT_5_9_9_9_REV&&(at=m.RGB9_E5),K===m.RGBA){const Dn=Mt?Cp:Li.getTransfer(tt);Fe===m.FLOAT&&(at=m.RGBA32F),Fe===m.HALF_FLOAT&&(at=m.RGBA16F),Fe===m.UNSIGNED_BYTE&&(at=Dn===ss?m.SRGB8_ALPHA8:m.RGBA8),Fe===m.UNSIGNED_SHORT_4_4_4_4&&(at=m.RGBA4),Fe===m.UNSIGNED_SHORT_5_5_5_1&&(at=m.RGB5_A1)}return(at===m.R16F||at===m.R32F||at===m.RG16F||at===m.RG32F||at===m.RGBA16F||at===m.RGBA32F)&&n.get("EXT_color_buffer_float"),at}function G(ue,K){let Fe;return ue?K===null||K===nr||K===bl?Fe=m.DEPTH24_STENCIL8:K===vs?Fe=m.DEPTH32F_STENCIL8:K===Pi&&(Fe=m.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):K===null||K===nr||K===bl?Fe=m.DEPTH_COMPONENT24:K===vs?Fe=m.DEPTH_COMPONENT32F:K===Pi&&(Fe=m.DEPTH_COMPONENT16),Fe}function ae(ue,K){return U(ue)===!0||ue.isFramebufferTexture&&ue.minFilter!==mt&&ue.minFilter!==ge?Math.log2(Math.max(K.width,K.height))+1:ue.mipmaps!==void 0&&ue.mipmaps.length>0?ue.mipmaps.length:ue.isCompressedTexture&&Array.isArray(ue.image)?K.mipmaps.length:1}function le(ue){const K=ue.target;K.removeEventListener("dispose",le),me(K),K.isVideoTexture&&R.delete(K)}function he(ue){const K=ue.target;K.removeEventListener("dispose",he),J(K)}function me(ue){const K=c.get(ue);if(K.__webglInit===void 0)return;const Fe=ue.source,tt=N.get(Fe);if(tt){const Mt=tt[K.__cacheKey];Mt.usedTimes--,Mt.usedTimes===0&&j(ue),Object.keys(tt).length===0&&N.delete(Fe)}c.remove(ue)}function j(ue){const K=c.get(ue);m.deleteTexture(K.__webglTexture);const Fe=ue.source,tt=N.get(Fe);delete tt[K.__cacheKey],_.memory.textures--}function J(ue){const K=c.get(ue);if(ue.depthTexture&&(ue.depthTexture.dispose(),c.remove(ue.depthTexture)),ue.isWebGLCubeRenderTarget)for(let tt=0;tt<6;tt++){if(Array.isArray(K.__webglFramebuffer[tt]))for(let Mt=0;Mt<K.__webglFramebuffer[tt].length;Mt++)m.deleteFramebuffer(K.__webglFramebuffer[tt][Mt]);else m.deleteFramebuffer(K.__webglFramebuffer[tt]);K.__webglDepthbuffer&&m.deleteRenderbuffer(K.__webglDepthbuffer[tt])}else{if(Array.isArray(K.__webglFramebuffer))for(let tt=0;tt<K.__webglFramebuffer.length;tt++)m.deleteFramebuffer(K.__webglFramebuffer[tt]);else m.deleteFramebuffer(K.__webglFramebuffer);if(K.__webglDepthbuffer&&m.deleteRenderbuffer(K.__webglDepthbuffer),K.__webglMultisampledFramebuffer&&m.deleteFramebuffer(K.__webglMultisampledFramebuffer),K.__webglColorRenderbuffer)for(let tt=0;tt<K.__webglColorRenderbuffer.length;tt++)K.__webglColorRenderbuffer[tt]&&m.deleteRenderbuffer(K.__webglColorRenderbuffer[tt]);K.__webglDepthRenderbuffer&&m.deleteRenderbuffer(K.__webglDepthRenderbuffer)}const Fe=ue.textures;for(let tt=0,Mt=Fe.length;tt<Mt;tt++){const at=c.get(Fe[tt]);at.__webglTexture&&(m.deleteTexture(at.__webglTexture),_.memory.textures--),c.remove(Fe[tt])}c.remove(ue)}let fe=0;function We(){fe=0}function Ke(){const ue=fe;return ue>=h.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+ue+" texture units while this GPU supports only "+h.maxTextures),fe+=1,ue}function ot(ue){const K=[];return K.push(ue.wrapS),K.push(ue.wrapT),K.push(ue.wrapR||0),K.push(ue.magFilter),K.push(ue.minFilter),K.push(ue.anisotropy),K.push(ue.internalFormat),K.push(ue.format),K.push(ue.type),K.push(ue.generateMipmaps),K.push(ue.premultiplyAlpha),K.push(ue.flipY),K.push(ue.unpackAlignment),K.push(ue.colorSpace),K.join()}function pt(ue,K){const Fe=c.get(ue);if(ue.isVideoTexture&&Yt(ue),ue.isRenderTargetTexture===!1&&ue.isExternalTexture!==!0&&ue.version>0&&Fe.__version!==ue.version){const tt=ue.image;if(tt===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(tt.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{sn(Fe,ue,K);return}}else ue.isExternalTexture&&(Fe.__webglTexture=ue.sourceTexture?ue.sourceTexture:null);o.bindTexture(m.TEXTURE_2D,Fe.__webglTexture,m.TEXTURE0+K)}function ht(ue,K){const Fe=c.get(ue);if(ue.isRenderTargetTexture===!1&&ue.version>0&&Fe.__version!==ue.version){sn(Fe,ue,K);return}o.bindTexture(m.TEXTURE_2D_ARRAY,Fe.__webglTexture,m.TEXTURE0+K)}function St(ue,K){const Fe=c.get(ue);if(ue.isRenderTargetTexture===!1&&ue.version>0&&Fe.__version!==ue.version){sn(Fe,ue,K);return}o.bindTexture(m.TEXTURE_3D,Fe.__webglTexture,m.TEXTURE0+K)}function st(ue,K){const Fe=c.get(ue);if(ue.version>0&&Fe.__version!==ue.version){$t(Fe,ue,K);return}o.bindTexture(m.TEXTURE_CUBE_MAP,Fe.__webglTexture,m.TEXTURE0+K)}const jt={[kt]:m.REPEAT,[It]:m.CLAMP_TO_EDGE,[Ye]:m.MIRRORED_REPEAT},hn={[mt]:m.NEAREST,[ft]:m.NEAREST_MIPMAP_NEAREST,[yt]:m.NEAREST_MIPMAP_LINEAR,[ge]:m.LINEAR,[bt]:m.LINEAR_MIPMAP_NEAREST,[Qt]:m.LINEAR_MIPMAP_LINEAR},An={[FE]:m.NEVER,[GE]:m.ALWAYS,[BE]:m.LESS,[tS]:m.LEQUAL,[OE]:m.EQUAL,[kE]:m.GEQUAL,[VE]:m.GREATER,[zE]:m.NOTEQUAL};function ai(ue,K){if(K.type===vs&&n.has("OES_texture_float_linear")===!1&&(K.magFilter===ge||K.magFilter===bt||K.magFilter===yt||K.magFilter===Qt||K.minFilter===ge||K.minFilter===bt||K.minFilter===yt||K.minFilter===Qt)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),m.texParameteri(ue,m.TEXTURE_WRAP_S,jt[K.wrapS]),m.texParameteri(ue,m.TEXTURE_WRAP_T,jt[K.wrapT]),(ue===m.TEXTURE_3D||ue===m.TEXTURE_2D_ARRAY)&&m.texParameteri(ue,m.TEXTURE_WRAP_R,jt[K.wrapR]),m.texParameteri(ue,m.TEXTURE_MAG_FILTER,hn[K.magFilter]),m.texParameteri(ue,m.TEXTURE_MIN_FILTER,hn[K.minFilter]),K.compareFunction&&(m.texParameteri(ue,m.TEXTURE_COMPARE_MODE,m.COMPARE_REF_TO_TEXTURE),m.texParameteri(ue,m.TEXTURE_COMPARE_FUNC,An[K.compareFunction])),n.has("EXT_texture_filter_anisotropic")===!0){if(K.magFilter===mt||K.minFilter!==yt&&K.minFilter!==Qt||K.type===vs&&n.has("OES_texture_float_linear")===!1)return;if(K.anisotropy>1||c.get(K).__currentAnisotropy){const Fe=n.get("EXT_texture_filter_anisotropic");m.texParameterf(ue,Fe.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(K.anisotropy,h.getMaxAnisotropy())),c.get(K).__currentAnisotropy=K.anisotropy}}}function Gi(ue,K){let Fe=!1;ue.__webglInit===void 0&&(ue.__webglInit=!0,K.addEventListener("dispose",le));const tt=K.source;let Mt=N.get(tt);Mt===void 0&&(Mt={},N.set(tt,Mt));const at=ot(K);if(at!==ue.__cacheKey){Mt[at]===void 0&&(Mt[at]={texture:m.createTexture(),usedTimes:0},_.memory.textures++,Fe=!0),Mt[at].usedTimes++;const Dn=Mt[ue.__cacheKey];Dn!==void 0&&(Mt[ue.__cacheKey].usedTimes--,Dn.usedTimes===0&&j(K)),ue.__cacheKey=at,ue.__webglTexture=Mt[at].texture}return Fe}function Hi(ue,K,Fe){return Math.floor(Math.floor(ue/Fe)/K)}function dt(ue,K,Fe,tt){const at=ue.updateRanges;if(at.length===0)o.texSubImage2D(m.TEXTURE_2D,0,0,0,K.width,K.height,Fe,tt,K.data);else{at.sort((Dt,dn)=>Dt.start-dn.start);let Dn=0;for(let Dt=1;Dt<at.length;Dt++){const dn=at[Dn],ti=at[Dt],Bn=dn.start+dn.count,an=Hi(ti.start,K.width,4),xi=Hi(dn.start,K.width,4);ti.start<=Bn+1&&an===xi&&Hi(ti.start+ti.count-1,K.width,4)===an?dn.count=Math.max(dn.count,ti.start+ti.count-dn.start):(++Dn,at[Dn]=ti)}at.length=Dn+1;const Wt=m.getParameter(m.UNPACK_ROW_LENGTH),Rn=m.getParameter(m.UNPACK_SKIP_PIXELS),Cn=m.getParameter(m.UNPACK_SKIP_ROWS);m.pixelStorei(m.UNPACK_ROW_LENGTH,K.width);for(let Dt=0,dn=at.length;Dt<dn;Dt++){const ti=at[Dt],Bn=Math.floor(ti.start/4),an=Math.ceil(ti.count/4),xi=Bn%K.width,Te=Math.floor(Bn/K.width),zt=an,Zt=1;m.pixelStorei(m.UNPACK_SKIP_PIXELS,xi),m.pixelStorei(m.UNPACK_SKIP_ROWS,Te),o.texSubImage2D(m.TEXTURE_2D,0,xi,Te,zt,Zt,Fe,tt,K.data)}ue.clearUpdateRanges(),m.pixelStorei(m.UNPACK_ROW_LENGTH,Wt),m.pixelStorei(m.UNPACK_SKIP_PIXELS,Rn),m.pixelStorei(m.UNPACK_SKIP_ROWS,Cn)}}function sn(ue,K,Fe){let tt=m.TEXTURE_2D;(K.isDataArrayTexture||K.isCompressedArrayTexture)&&(tt=m.TEXTURE_2D_ARRAY),K.isData3DTexture&&(tt=m.TEXTURE_3D);const Mt=Gi(ue,K),at=K.source;o.bindTexture(tt,ue.__webglTexture,m.TEXTURE0+Fe);const Dn=c.get(at);if(at.version!==Dn.__version||Mt===!0){o.activeTexture(m.TEXTURE0+Fe);const Wt=Li.getPrimaries(Li.workingColorSpace),Rn=K.colorSpace===wl?null:Li.getPrimaries(K.colorSpace),Cn=K.colorSpace===wl||Wt===Rn?m.NONE:m.BROWSER_DEFAULT_WEBGL;m.pixelStorei(m.UNPACK_FLIP_Y_WEBGL,K.flipY),m.pixelStorei(m.UNPACK_PREMULTIPLY_ALPHA_WEBGL,K.premultiplyAlpha),m.pixelStorei(m.UNPACK_ALIGNMENT,K.unpackAlignment),m.pixelStorei(m.UNPACK_COLORSPACE_CONVERSION_WEBGL,Cn);let Dt=V(K.image,!1,h.maxTextureSize);Dt=hi(K,Dt);const dn=p.convert(K.format,K.colorSpace),ti=p.convert(K.type);let Bn=W(K.internalFormat,dn,ti,K.colorSpace,K.isVideoTexture);ai(tt,K);let an;const xi=K.mipmaps,Te=K.isVideoTexture!==!0,zt=Dn.__version===void 0||Mt===!0,Zt=at.dataReady,Mn=ae(K,Dt);if(K.isDepthTexture)Bn=G(K.format===Ml,K.type),zt&&(Te?o.texStorage2D(m.TEXTURE_2D,1,Bn,Dt.width,Dt.height):o.texImage2D(m.TEXTURE_2D,0,Bn,Dt.width,Dt.height,0,dn,ti,null));else if(K.isDataTexture)if(xi.length>0){Te&&zt&&o.texStorage2D(m.TEXTURE_2D,Mn,Bn,xi[0].width,xi[0].height);for(let Ut=0,xt=xi.length;Ut<xt;Ut++)an=xi[Ut],Te?Zt&&o.texSubImage2D(m.TEXTURE_2D,Ut,0,0,an.width,an.height,dn,ti,an.data):o.texImage2D(m.TEXTURE_2D,Ut,Bn,an.width,an.height,0,dn,ti,an.data);K.generateMipmaps=!1}else Te?(zt&&o.texStorage2D(m.TEXTURE_2D,Mn,Bn,Dt.width,Dt.height),Zt&&dt(K,Dt,dn,ti)):o.texImage2D(m.TEXTURE_2D,0,Bn,Dt.width,Dt.height,0,dn,ti,Dt.data);else if(K.isCompressedTexture)if(K.isCompressedArrayTexture){Te&&zt&&o.texStorage3D(m.TEXTURE_2D_ARRAY,Mn,Bn,xi[0].width,xi[0].height,Dt.depth);for(let Ut=0,xt=xi.length;Ut<xt;Ut++)if(an=xi[Ut],K.format!==Xs)if(dn!==null)if(Te){if(Zt)if(K.layerUpdates.size>0){const Nn=vb(an.width,an.height,K.format,K.type);for(const di of K.layerUpdates){const gs=an.data.subarray(di*Nn/an.data.BYTES_PER_ELEMENT,(di+1)*Nn/an.data.BYTES_PER_ELEMENT);o.compressedTexSubImage3D(m.TEXTURE_2D_ARRAY,Ut,0,0,di,an.width,an.height,1,dn,gs)}K.clearLayerUpdates()}else o.compressedTexSubImage3D(m.TEXTURE_2D_ARRAY,Ut,0,0,0,an.width,an.height,Dt.depth,dn,an.data)}else o.compressedTexImage3D(m.TEXTURE_2D_ARRAY,Ut,Bn,an.width,an.height,Dt.depth,0,an.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else Te?Zt&&o.texSubImage3D(m.TEXTURE_2D_ARRAY,Ut,0,0,0,an.width,an.height,Dt.depth,dn,ti,an.data):o.texImage3D(m.TEXTURE_2D_ARRAY,Ut,Bn,an.width,an.height,Dt.depth,0,dn,ti,an.data)}else{Te&&zt&&o.texStorage2D(m.TEXTURE_2D,Mn,Bn,xi[0].width,xi[0].height);for(let Ut=0,xt=xi.length;Ut<xt;Ut++)an=xi[Ut],K.format!==Xs?dn!==null?Te?Zt&&o.compressedTexSubImage2D(m.TEXTURE_2D,Ut,0,0,an.width,an.height,dn,an.data):o.compressedTexImage2D(m.TEXTURE_2D,Ut,Bn,an.width,an.height,0,an.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Te?Zt&&o.texSubImage2D(m.TEXTURE_2D,Ut,0,0,an.width,an.height,dn,ti,an.data):o.texImage2D(m.TEXTURE_2D,Ut,Bn,an.width,an.height,0,dn,ti,an.data)}else if(K.isDataArrayTexture)if(Te){if(zt&&o.texStorage3D(m.TEXTURE_2D_ARRAY,Mn,Bn,Dt.width,Dt.height,Dt.depth),Zt)if(K.layerUpdates.size>0){const Ut=vb(Dt.width,Dt.height,K.format,K.type);for(const xt of K.layerUpdates){const Nn=Dt.data.subarray(xt*Ut/Dt.data.BYTES_PER_ELEMENT,(xt+1)*Ut/Dt.data.BYTES_PER_ELEMENT);o.texSubImage3D(m.TEXTURE_2D_ARRAY,0,0,0,xt,Dt.width,Dt.height,1,dn,ti,Nn)}K.clearLayerUpdates()}else o.texSubImage3D(m.TEXTURE_2D_ARRAY,0,0,0,0,Dt.width,Dt.height,Dt.depth,dn,ti,Dt.data)}else o.texImage3D(m.TEXTURE_2D_ARRAY,0,Bn,Dt.width,Dt.height,Dt.depth,0,dn,ti,Dt.data);else if(K.isData3DTexture)Te?(zt&&o.texStorage3D(m.TEXTURE_3D,Mn,Bn,Dt.width,Dt.height,Dt.depth),Zt&&o.texSubImage3D(m.TEXTURE_3D,0,0,0,0,Dt.width,Dt.height,Dt.depth,dn,ti,Dt.data)):o.texImage3D(m.TEXTURE_3D,0,Bn,Dt.width,Dt.height,Dt.depth,0,dn,ti,Dt.data);else if(K.isFramebufferTexture){if(zt)if(Te)o.texStorage2D(m.TEXTURE_2D,Mn,Bn,Dt.width,Dt.height);else{let Ut=Dt.width,xt=Dt.height;for(let Nn=0;Nn<Mn;Nn++)o.texImage2D(m.TEXTURE_2D,Nn,Bn,Ut,xt,0,dn,ti,null),Ut>>=1,xt>>=1}}else if(xi.length>0){if(Te&&zt){const Ut=oi(xi[0]);o.texStorage2D(m.TEXTURE_2D,Mn,Bn,Ut.width,Ut.height)}for(let Ut=0,xt=xi.length;Ut<xt;Ut++)an=xi[Ut],Te?Zt&&o.texSubImage2D(m.TEXTURE_2D,Ut,0,0,dn,ti,an):o.texImage2D(m.TEXTURE_2D,Ut,Bn,dn,ti,an);K.generateMipmaps=!1}else if(Te){if(zt){const Ut=oi(Dt);o.texStorage2D(m.TEXTURE_2D,Mn,Bn,Ut.width,Ut.height)}Zt&&o.texSubImage2D(m.TEXTURE_2D,0,0,0,dn,ti,Dt)}else o.texImage2D(m.TEXTURE_2D,0,Bn,dn,ti,Dt);U(K)&&I(tt),Dn.__version=at.version,K.onUpdate&&K.onUpdate(K)}ue.__version=K.version}function $t(ue,K,Fe){if(K.image.length!==6)return;const tt=Gi(ue,K),Mt=K.source;o.bindTexture(m.TEXTURE_CUBE_MAP,ue.__webglTexture,m.TEXTURE0+Fe);const at=c.get(Mt);if(Mt.version!==at.__version||tt===!0){o.activeTexture(m.TEXTURE0+Fe);const Dn=Li.getPrimaries(Li.workingColorSpace),Wt=K.colorSpace===wl?null:Li.getPrimaries(K.colorSpace),Rn=K.colorSpace===wl||Dn===Wt?m.NONE:m.BROWSER_DEFAULT_WEBGL;m.pixelStorei(m.UNPACK_FLIP_Y_WEBGL,K.flipY),m.pixelStorei(m.UNPACK_PREMULTIPLY_ALPHA_WEBGL,K.premultiplyAlpha),m.pixelStorei(m.UNPACK_ALIGNMENT,K.unpackAlignment),m.pixelStorei(m.UNPACK_COLORSPACE_CONVERSION_WEBGL,Rn);const Cn=K.isCompressedTexture||K.image[0].isCompressedTexture,Dt=K.image[0]&&K.image[0].isDataTexture,dn=[];for(let xt=0;xt<6;xt++)!Cn&&!Dt?dn[xt]=V(K.image[xt],!0,h.maxCubemapSize):dn[xt]=Dt?K.image[xt].image:K.image[xt],dn[xt]=hi(K,dn[xt]);const ti=dn[0],Bn=p.convert(K.format,K.colorSpace),an=p.convert(K.type),xi=W(K.internalFormat,Bn,an,K.colorSpace),Te=K.isVideoTexture!==!0,zt=at.__version===void 0||tt===!0,Zt=Mt.dataReady;let Mn=ae(K,ti);ai(m.TEXTURE_CUBE_MAP,K);let Ut;if(Cn){Te&&zt&&o.texStorage2D(m.TEXTURE_CUBE_MAP,Mn,xi,ti.width,ti.height);for(let xt=0;xt<6;xt++){Ut=dn[xt].mipmaps;for(let Nn=0;Nn<Ut.length;Nn++){const di=Ut[Nn];K.format!==Xs?Bn!==null?Te?Zt&&o.compressedTexSubImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,Nn,0,0,di.width,di.height,Bn,di.data):o.compressedTexImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,Nn,xi,di.width,di.height,0,di.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):Te?Zt&&o.texSubImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,Nn,0,0,di.width,di.height,Bn,an,di.data):o.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,Nn,xi,di.width,di.height,0,Bn,an,di.data)}}}else{if(Ut=K.mipmaps,Te&&zt){Ut.length>0&&Mn++;const xt=oi(dn[0]);o.texStorage2D(m.TEXTURE_CUBE_MAP,Mn,xi,xt.width,xt.height)}for(let xt=0;xt<6;xt++)if(Dt){Te?Zt&&o.texSubImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,0,0,0,dn[xt].width,dn[xt].height,Bn,an,dn[xt].data):o.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,0,xi,dn[xt].width,dn[xt].height,0,Bn,an,dn[xt].data);for(let Nn=0;Nn<Ut.length;Nn++){const gs=Ut[Nn].image[xt].image;Te?Zt&&o.texSubImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,Nn+1,0,0,gs.width,gs.height,Bn,an,gs.data):o.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,Nn+1,xi,gs.width,gs.height,0,Bn,an,gs.data)}}else{Te?Zt&&o.texSubImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,0,0,0,Bn,an,dn[xt]):o.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,0,xi,Bn,an,dn[xt]);for(let Nn=0;Nn<Ut.length;Nn++){const di=Ut[Nn];Te?Zt&&o.texSubImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,Nn+1,0,0,Bn,an,di.image[xt]):o.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X+xt,Nn+1,xi,Bn,an,di.image[xt])}}}U(K)&&I(m.TEXTURE_CUBE_MAP),at.__version=Mt.version,K.onUpdate&&K.onUpdate(K)}ue.__version=K.version}function Xn(ue,K,Fe,tt,Mt,at){const Dn=p.convert(Fe.format,Fe.colorSpace),Wt=p.convert(Fe.type),Rn=W(Fe.internalFormat,Dn,Wt,Fe.colorSpace),Cn=c.get(K),Dt=c.get(Fe);if(Dt.__renderTarget=K,!Cn.__hasExternalTextures){const dn=Math.max(1,K.width>>at),ti=Math.max(1,K.height>>at);Mt===m.TEXTURE_3D||Mt===m.TEXTURE_2D_ARRAY?o.texImage3D(Mt,at,Rn,dn,ti,K.depth,0,Dn,Wt,null):o.texImage2D(Mt,at,Rn,dn,ti,0,Dn,Wt,null)}o.bindFramebuffer(m.FRAMEBUFFER,ue),Pt(K)?y.framebufferTexture2DMultisampleEXT(m.FRAMEBUFFER,tt,Mt,Dt.__webglTexture,0,qt(K)):(Mt===m.TEXTURE_2D||Mt>=m.TEXTURE_CUBE_MAP_POSITIVE_X&&Mt<=m.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&m.framebufferTexture2D(m.FRAMEBUFFER,tt,Mt,Dt.__webglTexture,at),o.bindFramebuffer(m.FRAMEBUFFER,null)}function Ln(ue,K,Fe){if(m.bindRenderbuffer(m.RENDERBUFFER,ue),K.depthBuffer){const tt=K.depthTexture,Mt=tt&&tt.isDepthTexture?tt.type:null,at=G(K.stencilBuffer,Mt),Dn=K.stencilBuffer?m.DEPTH_STENCIL_ATTACHMENT:m.DEPTH_ATTACHMENT,Wt=qt(K);Pt(K)?y.renderbufferStorageMultisampleEXT(m.RENDERBUFFER,Wt,at,K.width,K.height):Fe?m.renderbufferStorageMultisample(m.RENDERBUFFER,Wt,at,K.width,K.height):m.renderbufferStorage(m.RENDERBUFFER,at,K.width,K.height),m.framebufferRenderbuffer(m.FRAMEBUFFER,Dn,m.RENDERBUFFER,ue)}else{const tt=K.textures;for(let Mt=0;Mt<tt.length;Mt++){const at=tt[Mt],Dn=p.convert(at.format,at.colorSpace),Wt=p.convert(at.type),Rn=W(at.internalFormat,Dn,Wt,at.colorSpace),Cn=qt(K);Fe&&Pt(K)===!1?m.renderbufferStorageMultisample(m.RENDERBUFFER,Cn,Rn,K.width,K.height):Pt(K)?y.renderbufferStorageMultisampleEXT(m.RENDERBUFFER,Cn,Rn,K.width,K.height):m.renderbufferStorage(m.RENDERBUFFER,Rn,K.width,K.height)}}m.bindRenderbuffer(m.RENDERBUFFER,null)}function ei(ue,K){if(K&&K.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(o.bindFramebuffer(m.FRAMEBUFFER,ue),!(K.depthTexture&&K.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const tt=c.get(K.depthTexture);tt.__renderTarget=K,(!tt.__webglTexture||K.depthTexture.image.width!==K.width||K.depthTexture.image.height!==K.height)&&(K.depthTexture.image.width=K.width,K.depthTexture.image.height=K.height,K.depthTexture.needsUpdate=!0),pt(K.depthTexture,0);const Mt=tt.__webglTexture,at=qt(K);if(K.depthTexture.format===Tl)Pt(K)?y.framebufferTexture2DMultisampleEXT(m.FRAMEBUFFER,m.DEPTH_ATTACHMENT,m.TEXTURE_2D,Mt,0,at):m.framebufferTexture2D(m.FRAMEBUFFER,m.DEPTH_ATTACHMENT,m.TEXTURE_2D,Mt,0);else if(K.depthTexture.format===Ml)Pt(K)?y.framebufferTexture2DMultisampleEXT(m.FRAMEBUFFER,m.DEPTH_STENCIL_ATTACHMENT,m.TEXTURE_2D,Mt,0,at):m.framebufferTexture2D(m.FRAMEBUFFER,m.DEPTH_STENCIL_ATTACHMENT,m.TEXTURE_2D,Mt,0);else throw new Error("Unknown depthTexture format")}function As(ue){const K=c.get(ue),Fe=ue.isWebGLCubeRenderTarget===!0;if(K.__boundDepthTexture!==ue.depthTexture){const tt=ue.depthTexture;if(K.__depthDisposeCallback&&K.__depthDisposeCallback(),tt){const Mt=()=>{delete K.__boundDepthTexture,delete K.__depthDisposeCallback,tt.removeEventListener("dispose",Mt)};tt.addEventListener("dispose",Mt),K.__depthDisposeCallback=Mt}K.__boundDepthTexture=tt}if(ue.depthTexture&&!K.__autoAllocateDepthBuffer){if(Fe)throw new Error("target.depthTexture not supported in Cube render targets");const tt=ue.texture.mipmaps;tt&&tt.length>0?ei(K.__webglFramebuffer[0],ue):ei(K.__webglFramebuffer,ue)}else if(Fe){K.__webglDepthbuffer=[];for(let tt=0;tt<6;tt++)if(o.bindFramebuffer(m.FRAMEBUFFER,K.__webglFramebuffer[tt]),K.__webglDepthbuffer[tt]===void 0)K.__webglDepthbuffer[tt]=m.createRenderbuffer(),Ln(K.__webglDepthbuffer[tt],ue,!1);else{const Mt=ue.stencilBuffer?m.DEPTH_STENCIL_ATTACHMENT:m.DEPTH_ATTACHMENT,at=K.__webglDepthbuffer[tt];m.bindRenderbuffer(m.RENDERBUFFER,at),m.framebufferRenderbuffer(m.FRAMEBUFFER,Mt,m.RENDERBUFFER,at)}}else{const tt=ue.texture.mipmaps;if(tt&&tt.length>0?o.bindFramebuffer(m.FRAMEBUFFER,K.__webglFramebuffer[0]):o.bindFramebuffer(m.FRAMEBUFFER,K.__webglFramebuffer),K.__webglDepthbuffer===void 0)K.__webglDepthbuffer=m.createRenderbuffer(),Ln(K.__webglDepthbuffer,ue,!1);else{const Mt=ue.stencilBuffer?m.DEPTH_STENCIL_ATTACHMENT:m.DEPTH_ATTACHMENT,at=K.__webglDepthbuffer;m.bindRenderbuffer(m.RENDERBUFFER,at),m.framebufferRenderbuffer(m.FRAMEBUFFER,Mt,m.RENDERBUFFER,at)}}o.bindFramebuffer(m.FRAMEBUFFER,null)}function ui(ue,K,Fe){const tt=c.get(ue);K!==void 0&&Xn(tt.__webglFramebuffer,ue,ue.texture,m.COLOR_ATTACHMENT0,m.TEXTURE_2D,0),Fe!==void 0&&As(ue)}function _e(ue){const K=ue.texture,Fe=c.get(ue),tt=c.get(K);ue.addEventListener("dispose",he);const Mt=ue.textures,at=ue.isWebGLCubeRenderTarget===!0,Dn=Mt.length>1;if(Dn||(tt.__webglTexture===void 0&&(tt.__webglTexture=m.createTexture()),tt.__version=K.version,_.memory.textures++),at){Fe.__webglFramebuffer=[];for(let Wt=0;Wt<6;Wt++)if(K.mipmaps&&K.mipmaps.length>0){Fe.__webglFramebuffer[Wt]=[];for(let Rn=0;Rn<K.mipmaps.length;Rn++)Fe.__webglFramebuffer[Wt][Rn]=m.createFramebuffer()}else Fe.__webglFramebuffer[Wt]=m.createFramebuffer()}else{if(K.mipmaps&&K.mipmaps.length>0){Fe.__webglFramebuffer=[];for(let Wt=0;Wt<K.mipmaps.length;Wt++)Fe.__webglFramebuffer[Wt]=m.createFramebuffer()}else Fe.__webglFramebuffer=m.createFramebuffer();if(Dn)for(let Wt=0,Rn=Mt.length;Wt<Rn;Wt++){const Cn=c.get(Mt[Wt]);Cn.__webglTexture===void 0&&(Cn.__webglTexture=m.createTexture(),_.memory.textures++)}if(ue.samples>0&&Pt(ue)===!1){Fe.__webglMultisampledFramebuffer=m.createFramebuffer(),Fe.__webglColorRenderbuffer=[],o.bindFramebuffer(m.FRAMEBUFFER,Fe.__webglMultisampledFramebuffer);for(let Wt=0;Wt<Mt.length;Wt++){const Rn=Mt[Wt];Fe.__webglColorRenderbuffer[Wt]=m.createRenderbuffer(),m.bindRenderbuffer(m.RENDERBUFFER,Fe.__webglColorRenderbuffer[Wt]);const Cn=p.convert(Rn.format,Rn.colorSpace),Dt=p.convert(Rn.type),dn=W(Rn.internalFormat,Cn,Dt,Rn.colorSpace,ue.isXRRenderTarget===!0),ti=qt(ue);m.renderbufferStorageMultisample(m.RENDERBUFFER,ti,dn,ue.width,ue.height),m.framebufferRenderbuffer(m.FRAMEBUFFER,m.COLOR_ATTACHMENT0+Wt,m.RENDERBUFFER,Fe.__webglColorRenderbuffer[Wt])}m.bindRenderbuffer(m.RENDERBUFFER,null),ue.depthBuffer&&(Fe.__webglDepthRenderbuffer=m.createRenderbuffer(),Ln(Fe.__webglDepthRenderbuffer,ue,!0)),o.bindFramebuffer(m.FRAMEBUFFER,null)}}if(at){o.bindTexture(m.TEXTURE_CUBE_MAP,tt.__webglTexture),ai(m.TEXTURE_CUBE_MAP,K);for(let Wt=0;Wt<6;Wt++)if(K.mipmaps&&K.mipmaps.length>0)for(let Rn=0;Rn<K.mipmaps.length;Rn++)Xn(Fe.__webglFramebuffer[Wt][Rn],ue,K,m.COLOR_ATTACHMENT0,m.TEXTURE_CUBE_MAP_POSITIVE_X+Wt,Rn);else Xn(Fe.__webglFramebuffer[Wt],ue,K,m.COLOR_ATTACHMENT0,m.TEXTURE_CUBE_MAP_POSITIVE_X+Wt,0);U(K)&&I(m.TEXTURE_CUBE_MAP),o.unbindTexture()}else if(Dn){for(let Wt=0,Rn=Mt.length;Wt<Rn;Wt++){const Cn=Mt[Wt],Dt=c.get(Cn);let dn=m.TEXTURE_2D;(ue.isWebGL3DRenderTarget||ue.isWebGLArrayRenderTarget)&&(dn=ue.isWebGL3DRenderTarget?m.TEXTURE_3D:m.TEXTURE_2D_ARRAY),o.bindTexture(dn,Dt.__webglTexture),ai(dn,Cn),Xn(Fe.__webglFramebuffer,ue,Cn,m.COLOR_ATTACHMENT0+Wt,dn,0),U(Cn)&&I(dn)}o.unbindTexture()}else{let Wt=m.TEXTURE_2D;if((ue.isWebGL3DRenderTarget||ue.isWebGLArrayRenderTarget)&&(Wt=ue.isWebGL3DRenderTarget?m.TEXTURE_3D:m.TEXTURE_2D_ARRAY),o.bindTexture(Wt,tt.__webglTexture),ai(Wt,K),K.mipmaps&&K.mipmaps.length>0)for(let Rn=0;Rn<K.mipmaps.length;Rn++)Xn(Fe.__webglFramebuffer[Rn],ue,K,m.COLOR_ATTACHMENT0,Wt,Rn);else Xn(Fe.__webglFramebuffer,ue,K,m.COLOR_ATTACHMENT0,Wt,0);U(K)&&I(Wt),o.unbindTexture()}ue.depthBuffer&&As(ue)}function Tt(ue){const K=ue.textures;for(let Fe=0,tt=K.length;Fe<tt;Fe++){const Mt=K[Fe];if(U(Mt)){const at=Z(ue),Dn=c.get(Mt).__webglTexture;o.bindTexture(at,Dn),I(at),o.unbindTexture()}}}const gt=[],Rt=[];function _t(ue){if(ue.samples>0){if(Pt(ue)===!1){const K=ue.textures,Fe=ue.width,tt=ue.height;let Mt=m.COLOR_BUFFER_BIT;const at=ue.stencilBuffer?m.DEPTH_STENCIL_ATTACHMENT:m.DEPTH_ATTACHMENT,Dn=c.get(ue),Wt=K.length>1;if(Wt)for(let Cn=0;Cn<K.length;Cn++)o.bindFramebuffer(m.FRAMEBUFFER,Dn.__webglMultisampledFramebuffer),m.framebufferRenderbuffer(m.FRAMEBUFFER,m.COLOR_ATTACHMENT0+Cn,m.RENDERBUFFER,null),o.bindFramebuffer(m.FRAMEBUFFER,Dn.__webglFramebuffer),m.framebufferTexture2D(m.DRAW_FRAMEBUFFER,m.COLOR_ATTACHMENT0+Cn,m.TEXTURE_2D,null,0);o.bindFramebuffer(m.READ_FRAMEBUFFER,Dn.__webglMultisampledFramebuffer);const Rn=ue.texture.mipmaps;Rn&&Rn.length>0?o.bindFramebuffer(m.DRAW_FRAMEBUFFER,Dn.__webglFramebuffer[0]):o.bindFramebuffer(m.DRAW_FRAMEBUFFER,Dn.__webglFramebuffer);for(let Cn=0;Cn<K.length;Cn++){if(ue.resolveDepthBuffer&&(ue.depthBuffer&&(Mt|=m.DEPTH_BUFFER_BIT),ue.stencilBuffer&&ue.resolveStencilBuffer&&(Mt|=m.STENCIL_BUFFER_BIT)),Wt){m.framebufferRenderbuffer(m.READ_FRAMEBUFFER,m.COLOR_ATTACHMENT0,m.RENDERBUFFER,Dn.__webglColorRenderbuffer[Cn]);const Dt=c.get(K[Cn]).__webglTexture;m.framebufferTexture2D(m.DRAW_FRAMEBUFFER,m.COLOR_ATTACHMENT0,m.TEXTURE_2D,Dt,0)}m.blitFramebuffer(0,0,Fe,tt,0,0,Fe,tt,Mt,m.NEAREST),b===!0&&(gt.length=0,Rt.length=0,gt.push(m.COLOR_ATTACHMENT0+Cn),ue.depthBuffer&&ue.resolveDepthBuffer===!1&&(gt.push(at),Rt.push(at),m.invalidateFramebuffer(m.DRAW_FRAMEBUFFER,Rt)),m.invalidateFramebuffer(m.READ_FRAMEBUFFER,gt))}if(o.bindFramebuffer(m.READ_FRAMEBUFFER,null),o.bindFramebuffer(m.DRAW_FRAMEBUFFER,null),Wt)for(let Cn=0;Cn<K.length;Cn++){o.bindFramebuffer(m.FRAMEBUFFER,Dn.__webglMultisampledFramebuffer),m.framebufferRenderbuffer(m.FRAMEBUFFER,m.COLOR_ATTACHMENT0+Cn,m.RENDERBUFFER,Dn.__webglColorRenderbuffer[Cn]);const Dt=c.get(K[Cn]).__webglTexture;o.bindFramebuffer(m.FRAMEBUFFER,Dn.__webglFramebuffer),m.framebufferTexture2D(m.DRAW_FRAMEBUFFER,m.COLOR_ATTACHMENT0+Cn,m.TEXTURE_2D,Dt,0)}o.bindFramebuffer(m.DRAW_FRAMEBUFFER,Dn.__webglMultisampledFramebuffer)}else if(ue.depthBuffer&&ue.resolveDepthBuffer===!1&&b){const K=ue.stencilBuffer?m.DEPTH_STENCIL_ATTACHMENT:m.DEPTH_ATTACHMENT;m.invalidateFramebuffer(m.DRAW_FRAMEBUFFER,[K])}}}function qt(ue){return Math.min(h.maxSamples,ue.samples)}function Pt(ue){const K=c.get(ue);return ue.samples>0&&n.has("WEBGL_multisampled_render_to_texture")===!0&&K.__useRenderToTexture!==!1}function Yt(ue){const K=_.render.frame;R.get(ue)!==K&&(R.set(ue,K),ue.update())}function hi(ue,K){const Fe=ue.colorSpace,tt=ue.format,Mt=ue.type;return ue.isCompressedTexture===!0||ue.isVideoTexture===!0||Fe!==_u&&Fe!==wl&&(Li.getTransfer(Fe)===ss?(tt!==Xs||Mt!==ut)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",Fe)),K}function oi(ue){return typeof HTMLImageElement<"u"&&ue instanceof HTMLImageElement?(M.width=ue.naturalWidth||ue.width,M.height=ue.naturalHeight||ue.height):typeof VideoFrame<"u"&&ue instanceof VideoFrame?(M.width=ue.displayWidth,M.height=ue.displayHeight):(M.width=ue.width,M.height=ue.height),M}this.allocateTextureUnit=Ke,this.resetTextureUnits=We,this.setTexture2D=pt,this.setTexture2DArray=ht,this.setTexture3D=St,this.setTextureCube=st,this.rebindTextures=ui,this.setupRenderTarget=_e,this.updateRenderTargetMipmap=Tt,this.updateMultisampleRenderTarget=_t,this.setupDepthRenderbuffer=As,this.setupFrameBufferTexture=Xn,this.useMultisampledRTT=Pt}function NC(m,n){function o(c,h=wl){let p;const _=Li.getTransfer(h);if(c===ut)return m.UNSIGNED_BYTE;if(c===Qo)return m.UNSIGNED_SHORT_4_4_4_4;if(c===hc)return m.UNSIGNED_SHORT_5_5_5_1;if(c===ud)return m.UNSIGNED_INT_5_9_9_9_REV;if(c===ln)return m.BYTE;if(c===Yn)return m.SHORT;if(c===Pi)return m.UNSIGNED_SHORT;if(c===Ii)return m.INT;if(c===nr)return m.UNSIGNED_INT;if(c===vs)return m.FLOAT;if(c===Sl)return m.HALF_FLOAT;if(c===dc)return m.ALPHA;if(c===hd)return m.RGB;if(c===Xs)return m.RGBA;if(c===Tl)return m.DEPTH_COMPONENT;if(c===Ml)return m.DEPTH_STENCIL;if(c===dd)return m.RED;if(c===pu)return m.RED_INTEGER;if(c===Ap)return m.RG;if(c===fd)return m.RG_INTEGER;if(c===pd)return m.RGBA_INTEGER;if(c===ne||c===Ee||c===ze||c===ke)if(_===ss)if(p=n.get("WEBGL_compressed_texture_s3tc_srgb"),p!==null){if(c===ne)return p.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(c===Ee)return p.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(c===ze)return p.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(c===ke)return p.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(p=n.get("WEBGL_compressed_texture_s3tc"),p!==null){if(c===ne)return p.COMPRESSED_RGB_S3TC_DXT1_EXT;if(c===Ee)return p.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(c===ze)return p.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(c===ke)return p.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(c===Re||c===Nt||c===en||c===_n)if(p=n.get("WEBGL_compressed_texture_pvrtc"),p!==null){if(c===Re)return p.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(c===Nt)return p.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(c===en)return p.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(c===_n)return p.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(c===fn||c===Gn||c===$n)if(p=n.get("WEBGL_compressed_texture_etc"),p!==null){if(c===fn||c===Gn)return _===ss?p.COMPRESSED_SRGB8_ETC2:p.COMPRESSED_RGB8_ETC2;if(c===$n)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:p.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(c===Fn||c===gi||c===Ui||c===fs||c===Ji||c===ki||c===Vn||c===as||c===wi||c===ur||c===Ta||c===hr||c===qa||c===ls)if(p=n.get("WEBGL_compressed_texture_astc"),p!==null){if(c===Fn)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:p.COMPRESSED_RGBA_ASTC_4x4_KHR;if(c===gi)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:p.COMPRESSED_RGBA_ASTC_5x4_KHR;if(c===Ui)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:p.COMPRESSED_RGBA_ASTC_5x5_KHR;if(c===fs)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:p.COMPRESSED_RGBA_ASTC_6x5_KHR;if(c===Ji)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:p.COMPRESSED_RGBA_ASTC_6x6_KHR;if(c===ki)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:p.COMPRESSED_RGBA_ASTC_8x5_KHR;if(c===Vn)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:p.COMPRESSED_RGBA_ASTC_8x6_KHR;if(c===as)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:p.COMPRESSED_RGBA_ASTC_8x8_KHR;if(c===wi)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:p.COMPRESSED_RGBA_ASTC_10x5_KHR;if(c===ur)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:p.COMPRESSED_RGBA_ASTC_10x6_KHR;if(c===Ta)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:p.COMPRESSED_RGBA_ASTC_10x8_KHR;if(c===hr)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:p.COMPRESSED_RGBA_ASTC_10x10_KHR;if(c===qa)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:p.COMPRESSED_RGBA_ASTC_12x10_KHR;if(c===ls)return _===ss?p.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:p.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(c===dr||c===Tr||c===qs)if(p=n.get("EXT_texture_compression_bptc"),p!==null){if(c===dr)return _===ss?p.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:p.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(c===Tr)return p.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(c===qs)return p.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(c===fr||c===fc||c===ea||c===r_)if(p=n.get("EXT_texture_compression_rgtc"),p!==null){if(c===dr)return p.COMPRESSED_RED_RGTC1_EXT;if(c===fc)return p.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(c===ea)return p.COMPRESSED_RED_GREEN_RGTC2_EXT;if(c===r_)return p.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return c===bl?m.UNSIGNED_INT_24_8:m[c]!==void 0?m[c]:null}return{convert:o}}class PC extends Ps{constructor(n=null){super(),this.sourceTexture=n,this.isExternalTexture=!0}}const LW=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,DW=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class UW{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(n,o){if(this.texture===null){const c=new PC(n.texture);(n.depthNear!==o.depthNear||n.depthFar!==o.depthFar)&&(this.depthNear=n.depthNear,this.depthFar=n.depthFar),this.texture=c}}getMesh(n){if(this.texture!==null&&this.mesh===null){const o=n.cameras[0].viewport,c=new Ea({vertexShader:LW,fragmentShader:DW,uniforms:{depthColor:{value:this.texture},depthWidth:{value:o.z},depthHeight:{value:o.w}}});this.mesh=new Zs(new Hd(20,20),c)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class FW extends Ya{constructor(n,o){super();const c=this;let h=null,p=1,_=null,y="local-floor",b=1,M=null,R=null,C=null,N=null,P=null,L=null;const V=new UW,U={},I=o.getContextAttributes();let Z=null,W=null;const G=[],ae=[],le=new vt;let he=null;const me=new wr;me.viewport=new Fi;const j=new wr;j.viewport=new Fi;const J=[me,j],fe=new VR;let We=null,Ke=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(dt){let sn=G[dt];return sn===void 0&&(sn=new C_,G[dt]=sn),sn.getTargetRaySpace()},this.getControllerGrip=function(dt){let sn=G[dt];return sn===void 0&&(sn=new C_,G[dt]=sn),sn.getGripSpace()},this.getHand=function(dt){let sn=G[dt];return sn===void 0&&(sn=new C_,G[dt]=sn),sn.getHandSpace()};function ot(dt){const sn=ae.indexOf(dt.inputSource);if(sn===-1)return;const $t=G[sn];$t!==void 0&&($t.update(dt.inputSource,dt.frame,M||_),$t.dispatchEvent({type:dt.type,data:dt.inputSource}))}function pt(){h.removeEventListener("select",ot),h.removeEventListener("selectstart",ot),h.removeEventListener("selectend",ot),h.removeEventListener("squeeze",ot),h.removeEventListener("squeezestart",ot),h.removeEventListener("squeezeend",ot),h.removeEventListener("end",pt),h.removeEventListener("inputsourceschange",ht);for(let dt=0;dt<G.length;dt++){const sn=ae[dt];sn!==null&&(ae[dt]=null,G[dt].disconnect(sn))}We=null,Ke=null,V.reset();for(const dt in U)delete U[dt];n.setRenderTarget(Z),P=null,N=null,C=null,h=null,W=null,Hi.stop(),c.isPresenting=!1,n.setPixelRatio(he),n.setSize(le.width,le.height,!1),c.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(dt){p=dt,c.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(dt){y=dt,c.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return M||_},this.setReferenceSpace=function(dt){M=dt},this.getBaseLayer=function(){return N!==null?N:P},this.getBinding=function(){return C},this.getFrame=function(){return L},this.getSession=function(){return h},this.setSession=async function(dt){if(h=dt,h!==null){if(Z=n.getRenderTarget(),h.addEventListener("select",ot),h.addEventListener("selectstart",ot),h.addEventListener("selectend",ot),h.addEventListener("squeeze",ot),h.addEventListener("squeezestart",ot),h.addEventListener("squeezeend",ot),h.addEventListener("end",pt),h.addEventListener("inputsourceschange",ht),I.xrCompatible!==!0&&await o.makeXRCompatible(),he=n.getPixelRatio(),n.getSize(le),typeof XRWebGLBinding<"u"&&(C=new XRWebGLBinding(h,o)),C!==null&&"createProjectionLayer"in XRWebGLBinding.prototype){let $t=null,Xn=null,Ln=null;I.depth&&(Ln=I.stencil?o.DEPTH24_STENCIL8:o.DEPTH_COMPONENT24,$t=I.stencil?Ml:Tl,Xn=I.stencil?bl:nr);const ei={colorFormat:o.RGBA8,depthFormat:Ln,scaleFactor:p};N=C.createProjectionLayer(ei),h.updateRenderState({layers:[N]}),n.setPixelRatio(1),n.setSize(N.textureWidth,N.textureHeight,!1),W=new Za(N.textureWidth,N.textureHeight,{format:Xs,type:ut,depthTexture:new OS(N.textureWidth,N.textureHeight,Xn,void 0,void 0,void 0,void 0,void 0,void 0,$t),stencilBuffer:I.stencil,colorSpace:n.outputColorSpace,samples:I.antialias?4:0,resolveDepthBuffer:N.ignoreDepthValues===!1,resolveStencilBuffer:N.ignoreDepthValues===!1})}else{const $t={antialias:I.antialias,alpha:!0,depth:I.depth,stencil:I.stencil,framebufferScaleFactor:p};P=new XRWebGLLayer(h,o,$t),h.updateRenderState({baseLayer:P}),n.setPixelRatio(1),n.setSize(P.framebufferWidth,P.framebufferHeight,!1),W=new Za(P.framebufferWidth,P.framebufferHeight,{format:Xs,type:ut,colorSpace:n.outputColorSpace,stencilBuffer:I.stencil,resolveDepthBuffer:P.ignoreDepthValues===!1,resolveStencilBuffer:P.ignoreDepthValues===!1})}W.isXRRenderTarget=!0,this.setFoveation(b),M=null,_=await h.requestReferenceSpace(y),Hi.setContext(h),Hi.start(),c.isPresenting=!0,c.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(h!==null)return h.environmentBlendMode},this.getDepthTexture=function(){return V.getDepthTexture()};function ht(dt){for(let sn=0;sn<dt.removed.length;sn++){const $t=dt.removed[sn],Xn=ae.indexOf($t);Xn>=0&&(ae[Xn]=null,G[Xn].disconnect($t))}for(let sn=0;sn<dt.added.length;sn++){const $t=dt.added[sn];let Xn=ae.indexOf($t);if(Xn===-1){for(let ei=0;ei<G.length;ei++)if(ei>=ae.length){ae.push($t),Xn=ei;break}else if(ae[ei]===null){ae[ei]=$t,Xn=ei;break}if(Xn===-1)break}const Ln=G[Xn];Ln&&Ln.connect($t)}}const St=new ce,st=new ce;function jt(dt,sn,$t){St.setFromMatrixPosition(sn.matrixWorld),st.setFromMatrixPosition($t.matrixWorld);const Xn=St.distanceTo(st),Ln=sn.projectionMatrix.elements,ei=$t.projectionMatrix.elements,As=Ln[14]/(Ln[10]-1),ui=Ln[14]/(Ln[10]+1),_e=(Ln[9]+1)/Ln[5],Tt=(Ln[9]-1)/Ln[5],gt=(Ln[8]-1)/Ln[0],Rt=(ei[8]+1)/ei[0],_t=As*gt,qt=As*Rt,Pt=Xn/(-gt+Rt),Yt=Pt*-gt;if(sn.matrixWorld.decompose(dt.position,dt.quaternion,dt.scale),dt.translateX(Yt),dt.translateZ(Pt),dt.matrixWorld.compose(dt.position,dt.quaternion,dt.scale),dt.matrixWorldInverse.copy(dt.matrixWorld).invert(),Ln[10]===-1)dt.projectionMatrix.copy(sn.projectionMatrix),dt.projectionMatrixInverse.copy(sn.projectionMatrixInverse);else{const hi=As+Pt,oi=ui+Pt,ue=_t-Yt,K=qt+(Xn-Yt),Fe=_e*ui/oi*hi,tt=Tt*ui/oi*hi;dt.projectionMatrix.makePerspective(ue,K,Fe,tt,hi,oi),dt.projectionMatrixInverse.copy(dt.projectionMatrix).invert()}}function hn(dt,sn){sn===null?dt.matrixWorld.copy(dt.matrix):dt.matrixWorld.multiplyMatrices(sn.matrixWorld,dt.matrix),dt.matrixWorldInverse.copy(dt.matrixWorld).invert()}this.updateCamera=function(dt){if(h===null)return;let sn=dt.near,$t=dt.far;V.texture!==null&&(V.depthNear>0&&(sn=V.depthNear),V.depthFar>0&&($t=V.depthFar)),fe.near=j.near=me.near=sn,fe.far=j.far=me.far=$t,(We!==fe.near||Ke!==fe.far)&&(h.updateRenderState({depthNear:fe.near,depthFar:fe.far}),We=fe.near,Ke=fe.far),fe.layers.mask=dt.layers.mask|6,me.layers.mask=fe.layers.mask&3,j.layers.mask=fe.layers.mask&5;const Xn=dt.parent,Ln=fe.cameras;hn(fe,Xn);for(let ei=0;ei<Ln.length;ei++)hn(Ln[ei],Xn);Ln.length===2?jt(fe,me,j):fe.projectionMatrix.copy(me.projectionMatrix),An(dt,fe,Xn)};function An(dt,sn,$t){$t===null?dt.matrix.copy(sn.matrixWorld):(dt.matrix.copy($t.matrixWorld),dt.matrix.invert(),dt.matrix.multiply(sn.matrixWorld)),dt.matrix.decompose(dt.position,dt.quaternion,dt.scale),dt.updateMatrixWorld(!0),dt.projectionMatrix.copy(sn.projectionMatrix),dt.projectionMatrixInverse.copy(sn.projectionMatrixInverse),dt.isPerspectiveCamera&&(dt.fov=gd*2*Math.atan(1/dt.projectionMatrix.elements[5]),dt.zoom=1)}this.getCamera=function(){return fe},this.getFoveation=function(){if(!(N===null&&P===null))return b},this.setFoveation=function(dt){b=dt,N!==null&&(N.fixedFoveation=dt),P!==null&&P.fixedFoveation!==void 0&&(P.fixedFoveation=dt)},this.hasDepthSensing=function(){return V.texture!==null},this.getDepthSensingMesh=function(){return V.getMesh(fe)},this.getCameraTexture=function(dt){return U[dt]};let ai=null;function Gi(dt,sn){if(R=sn.getViewerPose(M||_),L=sn,R!==null){const $t=R.views;P!==null&&(n.setRenderTargetFramebuffer(W,P.framebuffer),n.setRenderTarget(W));let Xn=!1;$t.length!==fe.cameras.length&&(fe.cameras.length=0,Xn=!0);for(let ui=0;ui<$t.length;ui++){const _e=$t[ui];let Tt=null;if(P!==null)Tt=P.getViewport(_e);else{const Rt=C.getViewSubImage(N,_e);Tt=Rt.viewport,ui===0&&(n.setRenderTargetTextures(W,Rt.colorTexture,Rt.depthStencilTexture),n.setRenderTarget(W))}let gt=J[ui];gt===void 0&&(gt=new wr,gt.layers.enable(ui),gt.viewport=new Fi,J[ui]=gt),gt.matrix.fromArray(_e.transform.matrix),gt.matrix.decompose(gt.position,gt.quaternion,gt.scale),gt.projectionMatrix.fromArray(_e.projectionMatrix),gt.projectionMatrixInverse.copy(gt.projectionMatrix).invert(),gt.viewport.set(Tt.x,Tt.y,Tt.width,Tt.height),ui===0&&(fe.matrix.copy(gt.matrix),fe.matrix.decompose(fe.position,fe.quaternion,fe.scale)),Xn===!0&&fe.cameras.push(gt)}const Ln=h.enabledFeatures;if(Ln&&Ln.includes("depth-sensing")&&h.depthUsage=="gpu-optimized"&&C){const ui=C.getDepthInformation($t[0]);ui&&ui.isValid&&ui.texture&&V.init(ui,h.renderState)}if(Ln&&Ln.includes("camera-access")&&(n.state.unbindTexture(),C))for(let ui=0;ui<$t.length;ui++){const _e=$t[ui].camera;if(_e){let Tt=U[_e];Tt||(Tt=new PC,U[_e]=Tt);const gt=C.getCameraImage(_e);Tt.sourceTexture=gt}}}for(let $t=0;$t<G.length;$t++){const Xn=ae[$t],Ln=G[$t];Xn!==null&&Ln!==void 0&&Ln.update(Xn,sn,M||_)}ai&&ai(dt,sn),sn.detectedPlanes&&c.dispatchEvent({type:"planesdetected",data:sn}),L=null}const Hi=new nC;Hi.setAnimationLoop(Gi),this.setAnimationLoop=function(dt){ai=dt},this.dispose=function(){}}}const Gu=new Do,BW=new Qn;function OW(m,n){function o(U,I){U.matrixAutoUpdate===!0&&U.updateMatrix(),I.value.copy(U.matrix)}function c(U,I){I.color.getRGB(U.fogColor.value,c1(m)),I.isFog?(U.fogNear.value=I.near,U.fogFar.value=I.far):I.isFogExp2&&(U.fogDensity.value=I.density)}function h(U,I,Z,W,G){I.isMeshBasicMaterial||I.isMeshLambertMaterial?p(U,I):I.isMeshToonMaterial?(p(U,I),C(U,I)):I.isMeshPhongMaterial?(p(U,I),R(U,I)):I.isMeshStandardMaterial?(p(U,I),N(U,I),I.isMeshPhysicalMaterial&&P(U,I,G)):I.isMeshMatcapMaterial?(p(U,I),L(U,I)):I.isMeshDepthMaterial?p(U,I):I.isMeshDistanceMaterial?(p(U,I),V(U,I)):I.isMeshNormalMaterial?p(U,I):I.isLineBasicMaterial?(_(U,I),I.isLineDashedMaterial&&y(U,I)):I.isPointsMaterial?b(U,I,Z,W):I.isSpriteMaterial?M(U,I):I.isShadowMaterial?(U.color.value.copy(I.color),U.opacity.value=I.opacity):I.isShaderMaterial&&(I.uniformsNeedUpdate=!1)}function p(U,I){U.opacity.value=I.opacity,I.color&&U.diffuse.value.copy(I.color),I.emissive&&U.emissive.value.copy(I.emissive).multiplyScalar(I.emissiveIntensity),I.map&&(U.map.value=I.map,o(I.map,U.mapTransform)),I.alphaMap&&(U.alphaMap.value=I.alphaMap,o(I.alphaMap,U.alphaMapTransform)),I.bumpMap&&(U.bumpMap.value=I.bumpMap,o(I.bumpMap,U.bumpMapTransform),U.bumpScale.value=I.bumpScale,I.side===v&&(U.bumpScale.value*=-1)),I.normalMap&&(U.normalMap.value=I.normalMap,o(I.normalMap,U.normalMapTransform),U.normalScale.value.copy(I.normalScale),I.side===v&&U.normalScale.value.negate()),I.displacementMap&&(U.displacementMap.value=I.displacementMap,o(I.displacementMap,U.displacementMapTransform),U.displacementScale.value=I.displacementScale,U.displacementBias.value=I.displacementBias),I.emissiveMap&&(U.emissiveMap.value=I.emissiveMap,o(I.emissiveMap,U.emissiveMapTransform)),I.specularMap&&(U.specularMap.value=I.specularMap,o(I.specularMap,U.specularMapTransform)),I.alphaTest>0&&(U.alphaTest.value=I.alphaTest);const Z=n.get(I),W=Z.envMap,G=Z.envMapRotation;W&&(U.envMap.value=W,Gu.copy(G),Gu.x*=-1,Gu.y*=-1,Gu.z*=-1,W.isCubeTexture&&W.isRenderTargetTexture===!1&&(Gu.y*=-1,Gu.z*=-1),U.envMapRotation.value.setFromMatrix4(BW.makeRotationFromEuler(Gu)),U.flipEnvMap.value=W.isCubeTexture&&W.isRenderTargetTexture===!1?-1:1,U.reflectivity.value=I.reflectivity,U.ior.value=I.ior,U.refractionRatio.value=I.refractionRatio),I.lightMap&&(U.lightMap.value=I.lightMap,U.lightMapIntensity.value=I.lightMapIntensity,o(I.lightMap,U.lightMapTransform)),I.aoMap&&(U.aoMap.value=I.aoMap,U.aoMapIntensity.value=I.aoMapIntensity,o(I.aoMap,U.aoMapTransform))}function _(U,I){U.diffuse.value.copy(I.color),U.opacity.value=I.opacity,I.map&&(U.map.value=I.map,o(I.map,U.mapTransform))}function y(U,I){U.dashSize.value=I.dashSize,U.totalSize.value=I.dashSize+I.gapSize,U.scale.value=I.scale}function b(U,I,Z,W){U.diffuse.value.copy(I.color),U.opacity.value=I.opacity,U.size.value=I.size*Z,U.scale.value=W*.5,I.map&&(U.map.value=I.map,o(I.map,U.uvTransform)),I.alphaMap&&(U.alphaMap.value=I.alphaMap,o(I.alphaMap,U.alphaMapTransform)),I.alphaTest>0&&(U.alphaTest.value=I.alphaTest)}function M(U,I){U.diffuse.value.copy(I.color),U.opacity.value=I.opacity,U.rotation.value=I.rotation,I.map&&(U.map.value=I.map,o(I.map,U.mapTransform)),I.alphaMap&&(U.alphaMap.value=I.alphaMap,o(I.alphaMap,U.alphaMapTransform)),I.alphaTest>0&&(U.alphaTest.value=I.alphaTest)}function R(U,I){U.specular.value.copy(I.specular),U.shininess.value=Math.max(I.shininess,1e-4)}function C(U,I){I.gradientMap&&(U.gradientMap.value=I.gradientMap)}function N(U,I){U.metalness.value=I.metalness,I.metalnessMap&&(U.metalnessMap.value=I.metalnessMap,o(I.metalnessMap,U.metalnessMapTransform)),U.roughness.value=I.roughness,I.roughnessMap&&(U.roughnessMap.value=I.roughnessMap,o(I.roughnessMap,U.roughnessMapTransform)),I.envMap&&(U.envMapIntensity.value=I.envMapIntensity)}function P(U,I,Z){U.ior.value=I.ior,I.sheen>0&&(U.sheenColor.value.copy(I.sheenColor).multiplyScalar(I.sheen),U.sheenRoughness.value=I.sheenRoughness,I.sheenColorMap&&(U.sheenColorMap.value=I.sheenColorMap,o(I.sheenColorMap,U.sheenColorMapTransform)),I.sheenRoughnessMap&&(U.sheenRoughnessMap.value=I.sheenRoughnessMap,o(I.sheenRoughnessMap,U.sheenRoughnessMapTransform))),I.clearcoat>0&&(U.clearcoat.value=I.clearcoat,U.clearcoatRoughness.value=I.clearcoatRoughness,I.clearcoatMap&&(U.clearcoatMap.value=I.clearcoatMap,o(I.clearcoatMap,U.clearcoatMapTransform)),I.clearcoatRoughnessMap&&(U.clearcoatRoughnessMap.value=I.clearcoatRoughnessMap,o(I.clearcoatRoughnessMap,U.clearcoatRoughnessMapTransform)),I.clearcoatNormalMap&&(U.clearcoatNormalMap.value=I.clearcoatNormalMap,o(I.clearcoatNormalMap,U.clearcoatNormalMapTransform),U.clearcoatNormalScale.value.copy(I.clearcoatNormalScale),I.side===v&&U.clearcoatNormalScale.value.negate())),I.dispersion>0&&(U.dispersion.value=I.dispersion),I.iridescence>0&&(U.iridescence.value=I.iridescence,U.iridescenceIOR.value=I.iridescenceIOR,U.iridescenceThicknessMinimum.value=I.iridescenceThicknessRange[0],U.iridescenceThicknessMaximum.value=I.iridescenceThicknessRange[1],I.iridescenceMap&&(U.iridescenceMap.value=I.iridescenceMap,o(I.iridescenceMap,U.iridescenceMapTransform)),I.iridescenceThicknessMap&&(U.iridescenceThicknessMap.value=I.iridescenceThicknessMap,o(I.iridescenceThicknessMap,U.iridescenceThicknessMapTransform))),I.transmission>0&&(U.transmission.value=I.transmission,U.transmissionSamplerMap.value=Z.texture,U.transmissionSamplerSize.value.set(Z.width,Z.height),I.transmissionMap&&(U.transmissionMap.value=I.transmissionMap,o(I.transmissionMap,U.transmissionMapTransform)),U.thickness.value=I.thickness,I.thicknessMap&&(U.thicknessMap.value=I.thicknessMap,o(I.thicknessMap,U.thicknessMapTransform)),U.attenuationDistance.value=I.attenuationDistance,U.attenuationColor.value.copy(I.attenuationColor)),I.anisotropy>0&&(U.anisotropyVector.value.set(I.anisotropy*Math.cos(I.anisotropyRotation),I.anisotropy*Math.sin(I.anisotropyRotation)),I.anisotropyMap&&(U.anisotropyMap.value=I.anisotropyMap,o(I.anisotropyMap,U.anisotropyMapTransform))),U.specularIntensity.value=I.specularIntensity,U.specularColor.value.copy(I.specularColor),I.specularColorMap&&(U.specularColorMap.value=I.specularColorMap,o(I.specularColorMap,U.specularColorMapTransform)),I.specularIntensityMap&&(U.specularIntensityMap.value=I.specularIntensityMap,o(I.specularIntensityMap,U.specularIntensityMapTransform))}function L(U,I){I.matcap&&(U.matcap.value=I.matcap)}function V(U,I){const Z=n.get(I).light;U.referencePosition.value.setFromMatrixPosition(Z.matrixWorld),U.nearDistance.value=Z.shadow.camera.near,U.farDistance.value=Z.shadow.camera.far}return{refreshFogUniforms:c,refreshMaterialUniforms:h}}function VW(m,n,o,c){let h={},p={},_=[];const y=m.getParameter(m.MAX_UNIFORM_BUFFER_BINDINGS);function b(Z,W){const G=W.program;c.uniformBlockBinding(Z,G)}function M(Z,W){let G=h[Z.id];G===void 0&&(L(Z),G=R(Z),h[Z.id]=G,Z.addEventListener("dispose",U));const ae=W.program;c.updateUBOMapping(Z,ae);const le=n.render.frame;p[Z.id]!==le&&(N(Z),p[Z.id]=le)}function R(Z){const W=C();Z.__bindingPointIndex=W;const G=m.createBuffer(),ae=Z.__size,le=Z.usage;return m.bindBuffer(m.UNIFORM_BUFFER,G),m.bufferData(m.UNIFORM_BUFFER,ae,le),m.bindBuffer(m.UNIFORM_BUFFER,null),m.bindBufferBase(m.UNIFORM_BUFFER,W,G),G}function C(){for(let Z=0;Z<y;Z++)if(_.indexOf(Z)===-1)return _.push(Z),Z;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function N(Z){const W=h[Z.id],G=Z.uniforms,ae=Z.__cache;m.bindBuffer(m.UNIFORM_BUFFER,W);for(let le=0,he=G.length;le<he;le++){const me=Array.isArray(G[le])?G[le]:[G[le]];for(let j=0,J=me.length;j<J;j++){const fe=me[j];if(P(fe,le,j,ae)===!0){const We=fe.__offset,Ke=Array.isArray(fe.value)?fe.value:[fe.value];let ot=0;for(let pt=0;pt<Ke.length;pt++){const ht=Ke[pt],St=V(ht);typeof ht=="number"||typeof ht=="boolean"?(fe.__data[0]=ht,m.bufferSubData(m.UNIFORM_BUFFER,We+ot,fe.__data)):ht.isMatrix3?(fe.__data[0]=ht.elements[0],fe.__data[1]=ht.elements[1],fe.__data[2]=ht.elements[2],fe.__data[3]=0,fe.__data[4]=ht.elements[3],fe.__data[5]=ht.elements[4],fe.__data[6]=ht.elements[5],fe.__data[7]=0,fe.__data[8]=ht.elements[6],fe.__data[9]=ht.elements[7],fe.__data[10]=ht.elements[8],fe.__data[11]=0):(ht.toArray(fe.__data,ot),ot+=St.storage/Float32Array.BYTES_PER_ELEMENT)}m.bufferSubData(m.UNIFORM_BUFFER,We,fe.__data)}}}m.bindBuffer(m.UNIFORM_BUFFER,null)}function P(Z,W,G,ae){const le=Z.value,he=W+"_"+G;if(ae[he]===void 0)return typeof le=="number"||typeof le=="boolean"?ae[he]=le:ae[he]=le.clone(),!0;{const me=ae[he];if(typeof le=="number"||typeof le=="boolean"){if(me!==le)return ae[he]=le,!0}else if(me.equals(le)===!1)return me.copy(le),!0}return!1}function L(Z){const W=Z.uniforms;let G=0;const ae=16;for(let he=0,me=W.length;he<me;he++){const j=Array.isArray(W[he])?W[he]:[W[he]];for(let J=0,fe=j.length;J<fe;J++){const We=j[J],Ke=Array.isArray(We.value)?We.value:[We.value];for(let ot=0,pt=Ke.length;ot<pt;ot++){const ht=Ke[ot],St=V(ht),st=G%ae,jt=st%St.boundary,hn=st+jt;G+=jt,hn!==0&&ae-hn<St.storage&&(G+=ae-hn),We.__data=new Float32Array(St.storage/Float32Array.BYTES_PER_ELEMENT),We.__offset=G,G+=St.storage}}}const le=G%ae;return le>0&&(G+=ae-le),Z.__size=G,Z.__cache={},this}function V(Z){const W={boundary:0,storage:0};return typeof Z=="number"||typeof Z=="boolean"?(W.boundary=4,W.storage=4):Z.isVector2?(W.boundary=8,W.storage=8):Z.isVector3||Z.isColor?(W.boundary=16,W.storage=12):Z.isVector4?(W.boundary=16,W.storage=16):Z.isMatrix3?(W.boundary=48,W.storage=48):Z.isMatrix4?(W.boundary=64,W.storage=64):Z.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",Z),W}function U(Z){const W=Z.target;W.removeEventListener("dispose",U);const G=_.indexOf(W.__bindingPointIndex);_.splice(G,1),m.deleteBuffer(h[W.id]),delete h[W.id],delete p[W.id]}function I(){for(const Z in h)m.deleteBuffer(h[Z]);_=[],h={},p={}}return{bind:b,update:M,dispose:I}}class zW{constructor(n={}){const{canvas:o=XE(),context:c=null,depth:h=!0,stencil:p=!1,alpha:_=!1,antialias:y=!1,premultipliedAlpha:b=!0,preserveDrawingBuffer:M=!1,powerPreference:R="default",failIfMajorPerformanceCaveat:C=!1,reversedDepthBuffer:N=!1}=n;this.isWebGLRenderer=!0;let P;if(c!==null){if(typeof WebGLRenderingContext<"u"&&c instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");P=c.getContextAttributes().alpha}else P=_;const L=new Uint32Array(4),V=new Int32Array(4);let U=null,I=null;const Z=[],W=[];this.domElement=o,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=de,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const G=this;let ae=!1;this._outputColorSpace=uo;let le=0,he=0,me=null,j=-1,J=null;const fe=new Fi,We=new Fi;let Ke=null;const ot=new mn(0);let pt=0,ht=o.width,St=o.height,st=1,jt=null,hn=null;const An=new Fi(0,0,ht,St),ai=new Fi(0,0,ht,St);let Gi=!1;const Hi=new kd;let dt=!1,sn=!1;const $t=new Qn,Xn=new ce,Ln=new Fi,ei={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let As=!1;function ui(){return me===null?st:1}let _e=c;function Tt(ie,Pe){return o.getContext(ie,Pe)}try{const ie={alpha:!0,depth:h,stencil:p,antialias:y,premultipliedAlpha:b,preserveDrawingBuffer:M,powerPreference:R,failIfMajorPerformanceCaveat:C};if("setAttribute"in o&&o.setAttribute("data-engine",`three.js r${a}`),o.addEventListener("webglcontextlost",Zt,!1),o.addEventListener("webglcontextrestored",Mn,!1),o.addEventListener("webglcontextcreationerror",Ut,!1),_e===null){const Pe="webgl2";if(_e=Tt(Pe,ie),_e===null)throw Tt(Pe)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(ie){throw console.error("THREE.WebGLRenderer: "+ie.message),ie}let gt,Rt,_t,qt,Pt,Yt,hi,oi,ue,K,Fe,tt,Mt,at,Dn,Wt,Rn,Cn,Dt,dn,ti,Bn,an,xi;function Te(){gt=new JH(_e),gt.init(),Bn=new NC(_e,gt),Rt=new WH(_e,gt,n,Bn),_t=new PW(_e,gt),Rt.reversedDepthBuffer&&N&&_t.buffers.depth.setReversed(!0),qt=new e4(_e),Pt=new xW,Yt=new IW(_e,gt,_t,Pt,Rt,Bn,qt),hi=new XH(G),oi=new KH(G),ue=new zk(_e),an=new GH(_e,ue),K=new jH(_e,ue,qt,an),Fe=new n4(_e,K,ue,qt),Dt=new t4(_e,Rt,Yt),Wt=new $H(Pt),tt=new _W(G,hi,oi,gt,Rt,an,Wt),Mt=new OW(G,Pt),at=new vW,Dn=new AW(gt),Cn=new kH(G,hi,oi,_t,Fe,P,b),Rn=new CW(G,Fe,Rt),xi=new VW(_e,qt,Rt,_t),dn=new HH(_e,gt,qt),ti=new QH(_e,gt,qt),qt.programs=tt.programs,G.capabilities=Rt,G.extensions=gt,G.properties=Pt,G.renderLists=at,G.shadowMap=Rn,G.state=_t,G.info=qt}Te();const zt=new FW(G,_e);this.xr=zt,this.getContext=function(){return _e},this.getContextAttributes=function(){return _e.getContextAttributes()},this.forceContextLoss=function(){const ie=gt.get("WEBGL_lose_context");ie&&ie.loseContext()},this.forceContextRestore=function(){const ie=gt.get("WEBGL_lose_context");ie&&ie.restoreContext()},this.getPixelRatio=function(){return st},this.setPixelRatio=function(ie){ie!==void 0&&(st=ie,this.setSize(ht,St,!1))},this.getSize=function(ie){return ie.set(ht,St)},this.setSize=function(ie,Pe,$e=!0){if(zt.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}ht=ie,St=Pe,o.width=Math.floor(ie*st),o.height=Math.floor(Pe*st),$e===!0&&(o.style.width=ie+"px",o.style.height=Pe+"px"),this.setViewport(0,0,ie,Pe)},this.getDrawingBufferSize=function(ie){return ie.set(ht*st,St*st).floor()},this.setDrawingBufferSize=function(ie,Pe,$e){ht=ie,St=Pe,st=$e,o.width=Math.floor(ie*$e),o.height=Math.floor(Pe*$e),this.setViewport(0,0,ie,Pe)},this.getCurrentViewport=function(ie){return ie.copy(fe)},this.getViewport=function(ie){return ie.copy(An)},this.setViewport=function(ie,Pe,$e,Ze){ie.isVector4?An.set(ie.x,ie.y,ie.z,ie.w):An.set(ie,Pe,$e,Ze),_t.viewport(fe.copy(An).multiplyScalar(st).round())},this.getScissor=function(ie){return ie.copy(ai)},this.setScissor=function(ie,Pe,$e,Ze){ie.isVector4?ai.set(ie.x,ie.y,ie.z,ie.w):ai.set(ie,Pe,$e,Ze),_t.scissor(We.copy(ai).multiplyScalar(st).round())},this.getScissorTest=function(){return Gi},this.setScissorTest=function(ie){_t.setScissorTest(Gi=ie)},this.setOpaqueSort=function(ie){jt=ie},this.setTransparentSort=function(ie){hn=ie},this.getClearColor=function(ie){return ie.copy(Cn.getClearColor())},this.setClearColor=function(){Cn.setClearColor(...arguments)},this.getClearAlpha=function(){return Cn.getClearAlpha()},this.setClearAlpha=function(){Cn.setClearAlpha(...arguments)},this.clear=function(ie=!0,Pe=!0,$e=!0){let Ze=0;if(ie){let Le=!1;if(me!==null){const Ot=me.texture.format;Le=Ot===pd||Ot===fd||Ot===pu}if(Le){const Ot=me.texture.type,cn=Ot===ut||Ot===nr||Ot===Pi||Ot===bl||Ot===Qo||Ot===hc,En=Cn.getClearColor(),Sn=Cn.getClearAlpha(),Jn=En.r,si=En.g,Hn=En.b;cn?(L[0]=Jn,L[1]=si,L[2]=Hn,L[3]=Sn,_e.clearBufferuiv(_e.COLOR,0,L)):(V[0]=Jn,V[1]=si,V[2]=Hn,V[3]=Sn,_e.clearBufferiv(_e.COLOR,0,V))}else Ze|=_e.COLOR_BUFFER_BIT}Pe&&(Ze|=_e.DEPTH_BUFFER_BIT),$e&&(Ze|=_e.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),_e.clear(Ze)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){o.removeEventListener("webglcontextlost",Zt,!1),o.removeEventListener("webglcontextrestored",Mn,!1),o.removeEventListener("webglcontextcreationerror",Ut,!1),Cn.dispose(),at.dispose(),Dn.dispose(),Pt.dispose(),hi.dispose(),oi.dispose(),Fe.dispose(),an.dispose(),xi.dispose(),tt.dispose(),zt.dispose(),zt.removeEventListener("sessionstart",tl),zt.removeEventListener("sessionend",IC),Hu.stop()};function Zt(ie){ie.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),ae=!0}function Mn(){console.log("THREE.WebGLRenderer: Context Restored."),ae=!1;const ie=qt.autoReset,Pe=Rn.enabled,$e=Rn.autoUpdate,Ze=Rn.needsUpdate,Le=Rn.type;Te(),qt.autoReset=ie,Rn.enabled=Pe,Rn.autoUpdate=$e,Rn.needsUpdate=Ze,Rn.type=Le}function Ut(ie){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",ie.statusMessage)}function xt(ie){const Pe=ie.target;Pe.removeEventListener("dispose",xt),Nn(Pe)}function Nn(ie){di(ie),Pt.remove(ie)}function di(ie){const Pe=Pt.get(ie).programs;Pe!==void 0&&(Pe.forEach(function($e){tt.releaseProgram($e)}),ie.isShaderMaterial&&tt.releaseShaderCache(ie))}this.renderBufferDirect=function(ie,Pe,$e,Ze,Le,Ot){Pe===null&&(Pe=ei);const cn=Le.isMesh&&Le.matrixWorld.determinant()<0,En=kW(ie,Pe,$e,Ze,Le);_t.setMaterial(Ze,cn);let Sn=$e.index,Jn=1;if(Ze.wireframe===!0){if(Sn=K.getWireframeAttribute($e),Sn===void 0)return;Jn=2}const si=$e.drawRange,Hn=$e.attributes.position;let Ei=si.start*Jn,us=(si.start+si.count)*Jn;Ot!==null&&(Ei=Math.max(Ei,Ot.start*Jn),us=Math.min(us,(Ot.start+Ot.count)*Jn)),Sn!==null?(Ei=Math.max(Ei,0),us=Math.min(us,Sn.count)):Hn!=null&&(Ei=Math.max(Ei,0),us=Math.min(us,Hn.count));const Ls=us-Ei;if(Ls<0||Ls===1/0)return;an.setup(Le,Ze,En,$e,Sn);let Ss,ps=dn;if(Sn!==null&&(Ss=ue.get(Sn),ps=ti,ps.setIndex(Ss)),Le.isMesh)Ze.wireframe===!0?(_t.setLineWidth(Ze.wireframeLinewidth*ui()),ps.setMode(_e.LINES)):ps.setMode(_e.TRIANGLES);else if(Le.isLine){let Zn=Ze.linewidth;Zn===void 0&&(Zn=1),_t.setLineWidth(Zn*ui()),Le.isLineSegments?ps.setMode(_e.LINES):Le.isLineLoop?ps.setMode(_e.LINE_LOOP):ps.setMode(_e.LINE_STRIP)}else Le.isPoints?ps.setMode(_e.POINTS):Le.isSprite&&ps.setMode(_e.TRIANGLES);if(Le.isBatchedMesh)if(Le._multiDrawInstances!==null)xd("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),ps.renderMultiDrawInstances(Le._multiDrawStarts,Le._multiDrawCounts,Le._multiDrawCount,Le._multiDrawInstances);else if(gt.get("WEBGL_multi_draw"))ps.renderMultiDraw(Le._multiDrawStarts,Le._multiDrawCounts,Le._multiDrawCount);else{const Zn=Le._multiDrawStarts,Es=Le._multiDrawCounts,Wi=Le._multiDrawCount,Fo=Sn?ue.get(Sn).bytesPerElement:1,Kd=Pt.get(Ze).currentProgram.getUniforms();for(let Bo=0;Bo<Wi;Bo++)Kd.setValue(_e,"_gl_DrawID",Bo),ps.render(Zn[Bo]/Fo,Es[Bo])}else if(Le.isInstancedMesh)ps.renderInstances(Ei,Ls,Le.count);else if($e.isInstancedBufferGeometry){const Zn=$e._maxInstanceCount!==void 0?$e._maxInstanceCount:1/0,Es=Math.min($e.instanceCount,Zn);ps.renderInstances(Ei,Ls,Es)}else ps.render(Ei,Ls)};function gs(ie,Pe,$e){ie.transparent===!0&&ie.side===S&&ie.forceSinglePass===!1?(ie.side=v,ie.needsUpdate=!0,Lx(ie,Pe,$e),ie.side=x,ie.needsUpdate=!0,Lx(ie,Pe,$e),ie.side=S):Lx(ie,Pe,$e)}this.compile=function(ie,Pe,$e=null){$e===null&&($e=ie),I=Dn.get($e),I.init(Pe),W.push(I),$e.traverseVisible(function(Le){Le.isLight&&Le.layers.test(Pe.layers)&&(I.pushLight(Le),Le.castShadow&&I.pushShadow(Le))}),ie!==$e&&ie.traverseVisible(function(Le){Le.isLight&&Le.layers.test(Pe.layers)&&(I.pushLight(Le),Le.castShadow&&I.pushShadow(Le))}),I.setupLights();const Ze=new Set;return ie.traverse(function(Le){if(!(Le.isMesh||Le.isPoints||Le.isLine||Le.isSprite))return;const Ot=Le.material;if(Ot)if(Array.isArray(Ot))for(let cn=0;cn<Ot.length;cn++){const En=Ot[cn];gs(En,$e,Le),Ze.add(En)}else gs(Ot,$e,Le),Ze.add(Ot)}),I=W.pop(),Ze},this.compileAsync=function(ie,Pe,$e=null){const Ze=this.compile(ie,Pe,$e);return new Promise(Le=>{function Ot(){if(Ze.forEach(function(cn){Pt.get(cn).currentProgram.isReady()&&Ze.delete(cn)}),Ze.size===0){Le(ie);return}setTimeout(Ot,10)}gt.get("KHR_parallel_shader_compile")!==null?Ot():setTimeout(Ot,10)})};let ji=null;function Ul(ie){ji&&ji(ie)}function tl(){Hu.stop()}function IC(){Hu.start()}const Hu=new nC;Hu.setAnimationLoop(Ul),typeof self<"u"&&Hu.setContext(self),this.setAnimationLoop=function(ie){ji=ie,zt.setAnimationLoop(ie),ie===null?Hu.stop():Hu.start()},zt.addEventListener("sessionstart",tl),zt.addEventListener("sessionend",IC),this.render=function(ie,Pe){if(Pe!==void 0&&Pe.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(ae===!0)return;if(ie.matrixWorldAutoUpdate===!0&&ie.updateMatrixWorld(),Pe.parent===null&&Pe.matrixWorldAutoUpdate===!0&&Pe.updateMatrixWorld(),zt.enabled===!0&&zt.isPresenting===!0&&(zt.cameraAutoUpdate===!0&&zt.updateCamera(Pe),Pe=zt.getCamera()),ie.isScene===!0&&ie.onBeforeRender(G,ie,Pe,me),I=Dn.get(ie,W.length),I.init(Pe),W.push(I),$t.multiplyMatrices(Pe.projectionMatrix,Pe.matrixWorldInverse),Hi.setFromProjectionMatrix($t,Po,Pe.reversedDepth),sn=this.localClippingEnabled,dt=Wt.init(this.clippingPlanes,sn),U=at.get(ie,Z.length),U.init(),Z.push(U),zt.enabled===!0&&zt.isPresenting===!0){const Ot=G.xr.getDepthSensingMesh();Ot!==null&&Nb(Ot,Pe,-1/0,G.sortObjects)}Nb(ie,Pe,0,G.sortObjects),U.finish(),G.sortObjects===!0&&U.sort(jt,hn),As=zt.enabled===!1||zt.isPresenting===!1||zt.hasDepthSensing()===!1,As&&Cn.addToRenderList(U,ie),this.info.render.frame++,dt===!0&&Wt.beginShadows();const $e=I.state.shadowsArray;Rn.render($e,ie,Pe),dt===!0&&Wt.endShadows(),this.info.autoReset===!0&&this.info.reset();const Ze=U.opaque,Le=U.transmissive;if(I.setupLights(),Pe.isArrayCamera){const Ot=Pe.cameras;if(Le.length>0)for(let cn=0,En=Ot.length;cn<En;cn++){const Sn=Ot[cn];DC(Ze,Le,ie,Sn)}As&&Cn.render(ie);for(let cn=0,En=Ot.length;cn<En;cn++){const Sn=Ot[cn];LC(U,ie,Sn,Sn.viewport)}}else Le.length>0&&DC(Ze,Le,ie,Pe),As&&Cn.render(ie),LC(U,ie,Pe);me!==null&&he===0&&(Yt.updateMultisampleRenderTarget(me),Yt.updateRenderTargetMipmap(me)),ie.isScene===!0&&ie.onAfterRender(G,ie,Pe),an.resetDefaultState(),j=-1,J=null,W.pop(),W.length>0?(I=W[W.length-1],dt===!0&&Wt.setGlobalState(G.clippingPlanes,I.state.camera)):I=null,Z.pop(),Z.length>0?U=Z[Z.length-1]:U=null};function Nb(ie,Pe,$e,Ze){if(ie.visible===!1)return;if(ie.layers.test(Pe.layers)){if(ie.isGroup)$e=ie.renderOrder;else if(ie.isLOD)ie.autoUpdate===!0&&ie.update(Pe);else if(ie.isLight)I.pushLight(ie),ie.castShadow&&I.pushShadow(ie);else if(ie.isSprite){if(!ie.frustumCulled||Hi.intersectsSprite(ie)){Ze&&Ln.setFromMatrixPosition(ie.matrixWorld).applyMatrix4($t);const cn=Fe.update(ie),En=ie.material;En.visible&&U.push(ie,cn,En,$e,Ln.z,null)}}else if((ie.isMesh||ie.isLine||ie.isPoints)&&(!ie.frustumCulled||Hi.intersectsObject(ie))){const cn=Fe.update(ie),En=ie.material;if(Ze&&(ie.boundingSphere!==void 0?(ie.boundingSphere===null&&ie.computeBoundingSphere(),Ln.copy(ie.boundingSphere.center)):(cn.boundingSphere===null&&cn.computeBoundingSphere(),Ln.copy(cn.boundingSphere.center)),Ln.applyMatrix4(ie.matrixWorld).applyMatrix4($t)),Array.isArray(En)){const Sn=cn.groups;for(let Jn=0,si=Sn.length;Jn<si;Jn++){const Hn=Sn[Jn],Ei=En[Hn.materialIndex];Ei&&Ei.visible&&U.push(ie,cn,Ei,$e,Ln.z,Hn)}}else En.visible&&U.push(ie,cn,En,$e,Ln.z,null)}}const Ot=ie.children;for(let cn=0,En=Ot.length;cn<En;cn++)Nb(Ot[cn],Pe,$e,Ze)}function LC(ie,Pe,$e,Ze){const Le=ie.opaque,Ot=ie.transmissive,cn=ie.transparent;I.setupLightsView($e),dt===!0&&Wt.setGlobalState(G.clippingPlanes,$e),Ze&&_t.viewport(fe.copy(Ze)),Le.length>0&&Ix(Le,Pe,$e),Ot.length>0&&Ix(Ot,Pe,$e),cn.length>0&&Ix(cn,Pe,$e),_t.buffers.depth.setTest(!0),_t.buffers.depth.setMask(!0),_t.buffers.color.setMask(!0),_t.setPolygonOffset(!1)}function DC(ie,Pe,$e,Ze){if(($e.isScene===!0?$e.overrideMaterial:null)!==null)return;I.state.transmissionRenderTarget[Ze.id]===void 0&&(I.state.transmissionRenderTarget[Ze.id]=new Za(1,1,{generateMipmaps:!0,type:gt.has("EXT_color_buffer_half_float")||gt.has("EXT_color_buffer_float")?Sl:ut,minFilter:Qt,samples:4,stencilBuffer:p,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:Li.workingColorSpace}));const Ot=I.state.transmissionRenderTarget[Ze.id],cn=Ze.viewport||fe;Ot.setSize(cn.z*G.transmissionResolutionScale,cn.w*G.transmissionResolutionScale);const En=G.getRenderTarget(),Sn=G.getActiveCubeFace(),Jn=G.getActiveMipmapLevel();G.setRenderTarget(Ot),G.getClearColor(ot),pt=G.getClearAlpha(),pt<1&&G.setClearColor(16777215,.5),G.clear(),As&&Cn.render($e);const si=G.toneMapping;G.toneMapping=de;const Hn=Ze.viewport;if(Ze.viewport!==void 0&&(Ze.viewport=void 0),I.setupLightsView(Ze),dt===!0&&Wt.setGlobalState(G.clippingPlanes,Ze),Ix(ie,$e,Ze),Yt.updateMultisampleRenderTarget(Ot),Yt.updateRenderTargetMipmap(Ot),gt.has("WEBGL_multisampled_render_to_texture")===!1){let Ei=!1;for(let us=0,Ls=Pe.length;us<Ls;us++){const Ss=Pe[us],ps=Ss.object,Zn=Ss.geometry,Es=Ss.material,Wi=Ss.group;if(Es.side===S&&ps.layers.test(Ze.layers)){const Fo=Es.side;Es.side=v,Es.needsUpdate=!0,UC(ps,$e,Ze,Zn,Es,Wi),Es.side=Fo,Es.needsUpdate=!0,Ei=!0}}Ei===!0&&(Yt.updateMultisampleRenderTarget(Ot),Yt.updateRenderTargetMipmap(Ot))}G.setRenderTarget(En,Sn,Jn),G.setClearColor(ot,pt),Hn!==void 0&&(Ze.viewport=Hn),G.toneMapping=si}function Ix(ie,Pe,$e){const Ze=Pe.isScene===!0?Pe.overrideMaterial:null;for(let Le=0,Ot=ie.length;Le<Ot;Le++){const cn=ie[Le],En=cn.object,Sn=cn.geometry,Jn=cn.group;let si=cn.material;si.allowOverride===!0&&Ze!==null&&(si=Ze),En.layers.test($e.layers)&&UC(En,Pe,$e,Sn,si,Jn)}}function UC(ie,Pe,$e,Ze,Le,Ot){ie.onBeforeRender(G,Pe,$e,Ze,Le,Ot),ie.modelViewMatrix.multiplyMatrices($e.matrixWorldInverse,ie.matrixWorld),ie.normalMatrix.getNormalMatrix(ie.modelViewMatrix),Le.onBeforeRender(G,Pe,$e,Ze,ie,Ot),Le.transparent===!0&&Le.side===S&&Le.forceSinglePass===!1?(Le.side=v,Le.needsUpdate=!0,G.renderBufferDirect($e,Pe,Ze,Le,ie,Ot),Le.side=x,Le.needsUpdate=!0,G.renderBufferDirect($e,Pe,Ze,Le,ie,Ot),Le.side=S):G.renderBufferDirect($e,Pe,Ze,Le,ie,Ot),ie.onAfterRender(G,Pe,$e,Ze,Le,Ot)}function Lx(ie,Pe,$e){Pe.isScene!==!0&&(Pe=ei);const Ze=Pt.get(ie),Le=I.state.lights,Ot=I.state.shadowsArray,cn=Le.state.version,En=tt.getParameters(ie,Le.state,Ot,Pe,$e),Sn=tt.getProgramCacheKey(En);let Jn=Ze.programs;Ze.environment=ie.isMeshStandardMaterial?Pe.environment:null,Ze.fog=Pe.fog,Ze.envMap=(ie.isMeshStandardMaterial?oi:hi).get(ie.envMap||Ze.environment),Ze.envMapRotation=Ze.environment!==null&&ie.envMap===null?Pe.environmentRotation:ie.envMapRotation,Jn===void 0&&(ie.addEventListener("dispose",xt),Jn=new Map,Ze.programs=Jn);let si=Jn.get(Sn);if(si!==void 0){if(Ze.currentProgram===si&&Ze.lightsStateVersion===cn)return BC(ie,En),si}else En.uniforms=tt.getUniforms(ie),ie.onBeforeCompile(En,G),si=tt.acquireProgram(En,Sn),Jn.set(Sn,si),Ze.uniforms=En.uniforms;const Hn=Ze.uniforms;return(!ie.isShaderMaterial&&!ie.isRawShaderMaterial||ie.clipping===!0)&&(Hn.clippingPlanes=Wt.uniform),BC(ie,En),Ze.needsLights=HW(ie),Ze.lightsStateVersion=cn,Ze.needsLights&&(Hn.ambientLightColor.value=Le.state.ambient,Hn.lightProbe.value=Le.state.probe,Hn.directionalLights.value=Le.state.directional,Hn.directionalLightShadows.value=Le.state.directionalShadow,Hn.spotLights.value=Le.state.spot,Hn.spotLightShadows.value=Le.state.spotShadow,Hn.rectAreaLights.value=Le.state.rectArea,Hn.ltc_1.value=Le.state.rectAreaLTC1,Hn.ltc_2.value=Le.state.rectAreaLTC2,Hn.pointLights.value=Le.state.point,Hn.pointLightShadows.value=Le.state.pointShadow,Hn.hemisphereLights.value=Le.state.hemi,Hn.directionalShadowMap.value=Le.state.directionalShadowMap,Hn.directionalShadowMatrix.value=Le.state.directionalShadowMatrix,Hn.spotShadowMap.value=Le.state.spotShadowMap,Hn.spotLightMatrix.value=Le.state.spotLightMatrix,Hn.spotLightMap.value=Le.state.spotLightMap,Hn.pointShadowMap.value=Le.state.pointShadowMap,Hn.pointShadowMatrix.value=Le.state.pointShadowMatrix),Ze.currentProgram=si,Ze.uniformsList=null,si}function FC(ie){if(ie.uniformsList===null){const Pe=ie.currentProgram.getUniforms();ie.uniformsList=Nx.seqWithValue(Pe.seq,ie.uniforms)}return ie.uniformsList}function BC(ie,Pe){const $e=Pt.get(ie);$e.outputColorSpace=Pe.outputColorSpace,$e.batching=Pe.batching,$e.batchingColor=Pe.batchingColor,$e.instancing=Pe.instancing,$e.instancingColor=Pe.instancingColor,$e.instancingMorph=Pe.instancingMorph,$e.skinning=Pe.skinning,$e.morphTargets=Pe.morphTargets,$e.morphNormals=Pe.morphNormals,$e.morphColors=Pe.morphColors,$e.morphTargetsCount=Pe.morphTargetsCount,$e.numClippingPlanes=Pe.numClippingPlanes,$e.numIntersection=Pe.numClipIntersection,$e.vertexAlphas=Pe.vertexAlphas,$e.vertexTangents=Pe.vertexTangents,$e.toneMapping=Pe.toneMapping}function kW(ie,Pe,$e,Ze,Le){Pe.isScene!==!0&&(Pe=ei),Yt.resetTextureUnits();const Ot=Pe.fog,cn=Ze.isMeshStandardMaterial?Pe.environment:null,En=me===null?G.outputColorSpace:me.isXRRenderTarget===!0?me.texture.colorSpace:_u,Sn=(Ze.isMeshStandardMaterial?oi:hi).get(Ze.envMap||cn),Jn=Ze.vertexColors===!0&&!!$e.attributes.color&&$e.attributes.color.itemSize===4,si=!!$e.attributes.tangent&&(!!Ze.normalMap||Ze.anisotropy>0),Hn=!!$e.morphAttributes.position,Ei=!!$e.morphAttributes.normal,us=!!$e.morphAttributes.color;let Ls=de;Ze.toneMapped&&(me===null||me.isXRRenderTarget===!0)&&(Ls=G.toneMapping);const Ss=$e.morphAttributes.position||$e.morphAttributes.normal||$e.morphAttributes.color,ps=Ss!==void 0?Ss.length:0,Zn=Pt.get(Ze),Es=I.state.lights;if(dt===!0&&(sn===!0||ie!==J)){const Jr=ie===J&&Ze.id===j;Wt.setState(Ze,ie,Jr)}let Wi=!1;Ze.version===Zn.__version?(Zn.needsLights&&Zn.lightsStateVersion!==Es.state.version||Zn.outputColorSpace!==En||Le.isBatchedMesh&&Zn.batching===!1||!Le.isBatchedMesh&&Zn.batching===!0||Le.isBatchedMesh&&Zn.batchingColor===!0&&Le.colorTexture===null||Le.isBatchedMesh&&Zn.batchingColor===!1&&Le.colorTexture!==null||Le.isInstancedMesh&&Zn.instancing===!1||!Le.isInstancedMesh&&Zn.instancing===!0||Le.isSkinnedMesh&&Zn.skinning===!1||!Le.isSkinnedMesh&&Zn.skinning===!0||Le.isInstancedMesh&&Zn.instancingColor===!0&&Le.instanceColor===null||Le.isInstancedMesh&&Zn.instancingColor===!1&&Le.instanceColor!==null||Le.isInstancedMesh&&Zn.instancingMorph===!0&&Le.morphTexture===null||Le.isInstancedMesh&&Zn.instancingMorph===!1&&Le.morphTexture!==null||Zn.envMap!==Sn||Ze.fog===!0&&Zn.fog!==Ot||Zn.numClippingPlanes!==void 0&&(Zn.numClippingPlanes!==Wt.numPlanes||Zn.numIntersection!==Wt.numIntersection)||Zn.vertexAlphas!==Jn||Zn.vertexTangents!==si||Zn.morphTargets!==Hn||Zn.morphNormals!==Ei||Zn.morphColors!==us||Zn.toneMapping!==Ls||Zn.morphTargetsCount!==ps)&&(Wi=!0):(Wi=!0,Zn.__version=Ze.version);let Fo=Zn.currentProgram;Wi===!0&&(Fo=Lx(Ze,Pe,Le));let Kd=!1,Bo=!1,um=!1;const Rs=Fo.getUniforms(),ia=Zn.uniforms;if(_t.useProgram(Fo.program)&&(Kd=!0,Bo=!0,um=!0),Ze.id!==j&&(j=Ze.id,Bo=!0),Kd||J!==ie){_t.buffers.depth.getReversed()&&ie.reversedDepth!==!0&&(ie._reversedDepth=!0,ie.updateProjectionMatrix()),Rs.setValue(_e,"projectionMatrix",ie.projectionMatrix),Rs.setValue(_e,"viewMatrix",ie.matrixWorldInverse);const _o=Rs.map.cameraPosition;_o!==void 0&&_o.setValue(_e,Xn.setFromMatrixPosition(ie.matrixWorld)),Rt.logarithmicDepthBuffer&&Rs.setValue(_e,"logDepthBufFC",2/(Math.log(ie.far+1)/Math.LN2)),(Ze.isMeshPhongMaterial||Ze.isMeshToonMaterial||Ze.isMeshLambertMaterial||Ze.isMeshBasicMaterial||Ze.isMeshStandardMaterial||Ze.isShaderMaterial)&&Rs.setValue(_e,"isOrthographic",ie.isOrthographicCamera===!0),J!==ie&&(J=ie,Bo=!0,um=!0)}if(Le.isSkinnedMesh){Rs.setOptional(_e,Le,"bindMatrix"),Rs.setOptional(_e,Le,"bindMatrixInverse");const Jr=Le.skeleton;Jr&&(Jr.boneTexture===null&&Jr.computeBoneTexture(),Rs.setValue(_e,"boneTexture",Jr.boneTexture,Yt))}Le.isBatchedMesh&&(Rs.setOptional(_e,Le,"batchingTexture"),Rs.setValue(_e,"batchingTexture",Le._matricesTexture,Yt),Rs.setOptional(_e,Le,"batchingIdTexture"),Rs.setValue(_e,"batchingIdTexture",Le._indirectTexture,Yt),Rs.setOptional(_e,Le,"batchingColorTexture"),Le._colorsTexture!==null&&Rs.setValue(_e,"batchingColorTexture",Le._colorsTexture,Yt));const sa=$e.morphAttributes;if((sa.position!==void 0||sa.normal!==void 0||sa.color!==void 0)&&Dt.update(Le,$e,Fo),(Bo||Zn.receiveShadow!==Le.receiveShadow)&&(Zn.receiveShadow=Le.receiveShadow,Rs.setValue(_e,"receiveShadow",Le.receiveShadow)),Ze.isMeshGouraudMaterial&&Ze.envMap!==null&&(ia.envMap.value=Sn,ia.flipEnvMap.value=Sn.isCubeTexture&&Sn.isRenderTargetTexture===!1?-1:1),Ze.isMeshStandardMaterial&&Ze.envMap===null&&Pe.environment!==null&&(ia.envMapIntensity.value=Pe.environmentIntensity),Bo&&(Rs.setValue(_e,"toneMappingExposure",G.toneMappingExposure),Zn.needsLights&&GW(ia,um),Ot&&Ze.fog===!0&&Mt.refreshFogUniforms(ia,Ot),Mt.refreshMaterialUniforms(ia,Ze,st,St,I.state.transmissionRenderTarget[ie.id]),Nx.upload(_e,FC(Zn),ia,Yt)),Ze.isShaderMaterial&&Ze.uniformsNeedUpdate===!0&&(Nx.upload(_e,FC(Zn),ia,Yt),Ze.uniformsNeedUpdate=!1),Ze.isSpriteMaterial&&Rs.setValue(_e,"center",Le.center),Rs.setValue(_e,"modelViewMatrix",Le.modelViewMatrix),Rs.setValue(_e,"normalMatrix",Le.normalMatrix),Rs.setValue(_e,"modelMatrix",Le.matrixWorld),Ze.isShaderMaterial||Ze.isRawShaderMaterial){const Jr=Ze.uniformsGroups;for(let _o=0,Pb=Jr.length;_o<Pb;_o++){const Wu=Jr[_o];xi.update(Wu,Fo),xi.bind(Wu,Fo)}}return Fo}function GW(ie,Pe){ie.ambientLightColor.needsUpdate=Pe,ie.lightProbe.needsUpdate=Pe,ie.directionalLights.needsUpdate=Pe,ie.directionalLightShadows.needsUpdate=Pe,ie.pointLights.needsUpdate=Pe,ie.pointLightShadows.needsUpdate=Pe,ie.spotLights.needsUpdate=Pe,ie.spotLightShadows.needsUpdate=Pe,ie.rectAreaLights.needsUpdate=Pe,ie.hemisphereLights.needsUpdate=Pe}function HW(ie){return ie.isMeshLambertMaterial||ie.isMeshToonMaterial||ie.isMeshPhongMaterial||ie.isMeshStandardMaterial||ie.isShadowMaterial||ie.isShaderMaterial&&ie.lights===!0}this.getActiveCubeFace=function(){return le},this.getActiveMipmapLevel=function(){return he},this.getRenderTarget=function(){return me},this.setRenderTargetTextures=function(ie,Pe,$e){const Ze=Pt.get(ie);Ze.__autoAllocateDepthBuffer=ie.resolveDepthBuffer===!1,Ze.__autoAllocateDepthBuffer===!1&&(Ze.__useRenderToTexture=!1),Pt.get(ie.texture).__webglTexture=Pe,Pt.get(ie.depthTexture).__webglTexture=Ze.__autoAllocateDepthBuffer?void 0:$e,Ze.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(ie,Pe){const $e=Pt.get(ie);$e.__webglFramebuffer=Pe,$e.__useDefaultFramebuffer=Pe===void 0};const WW=_e.createFramebuffer();this.setRenderTarget=function(ie,Pe=0,$e=0){me=ie,le=Pe,he=$e;let Ze=!0,Le=null,Ot=!1,cn=!1;if(ie){const Sn=Pt.get(ie);if(Sn.__useDefaultFramebuffer!==void 0)_t.bindFramebuffer(_e.FRAMEBUFFER,null),Ze=!1;else if(Sn.__webglFramebuffer===void 0)Yt.setupRenderTarget(ie);else if(Sn.__hasExternalTextures)Yt.rebindTextures(ie,Pt.get(ie.texture).__webglTexture,Pt.get(ie.depthTexture).__webglTexture);else if(ie.depthBuffer){const Hn=ie.depthTexture;if(Sn.__boundDepthTexture!==Hn){if(Hn!==null&&Pt.has(Hn)&&(ie.width!==Hn.image.width||ie.height!==Hn.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");Yt.setupDepthRenderbuffer(ie)}}const Jn=ie.texture;(Jn.isData3DTexture||Jn.isDataArrayTexture||Jn.isCompressedArrayTexture)&&(cn=!0);const si=Pt.get(ie).__webglFramebuffer;ie.isWebGLCubeRenderTarget?(Array.isArray(si[Pe])?Le=si[Pe][$e]:Le=si[Pe],Ot=!0):ie.samples>0&&Yt.useMultisampledRTT(ie)===!1?Le=Pt.get(ie).__webglMultisampledFramebuffer:Array.isArray(si)?Le=si[$e]:Le=si,fe.copy(ie.viewport),We.copy(ie.scissor),Ke=ie.scissorTest}else fe.copy(An).multiplyScalar(st).floor(),We.copy(ai).multiplyScalar(st).floor(),Ke=Gi;if($e!==0&&(Le=WW),_t.bindFramebuffer(_e.FRAMEBUFFER,Le)&&Ze&&_t.drawBuffers(ie,Le),_t.viewport(fe),_t.scissor(We),_t.setScissorTest(Ke),Ot){const Sn=Pt.get(ie.texture);_e.framebufferTexture2D(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT0,_e.TEXTURE_CUBE_MAP_POSITIVE_X+Pe,Sn.__webglTexture,$e)}else if(cn){const Sn=Pe;for(let Jn=0;Jn<ie.textures.length;Jn++){const si=Pt.get(ie.textures[Jn]);_e.framebufferTextureLayer(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT0+Jn,si.__webglTexture,$e,Sn)}}else if(ie!==null&&$e!==0){const Sn=Pt.get(ie.texture);_e.framebufferTexture2D(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT0,_e.TEXTURE_2D,Sn.__webglTexture,$e)}j=-1},this.readRenderTargetPixels=function(ie,Pe,$e,Ze,Le,Ot,cn,En=0){if(!(ie&&ie.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Sn=Pt.get(ie).__webglFramebuffer;if(ie.isWebGLCubeRenderTarget&&cn!==void 0&&(Sn=Sn[cn]),Sn){_t.bindFramebuffer(_e.FRAMEBUFFER,Sn);try{const Jn=ie.textures[En],si=Jn.format,Hn=Jn.type;if(!Rt.textureFormatReadable(si)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!Rt.textureTypeReadable(Hn)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}Pe>=0&&Pe<=ie.width-Ze&&$e>=0&&$e<=ie.height-Le&&(ie.textures.length>1&&_e.readBuffer(_e.COLOR_ATTACHMENT0+En),_e.readPixels(Pe,$e,Ze,Le,Bn.convert(si),Bn.convert(Hn),Ot))}finally{const Jn=me!==null?Pt.get(me).__webglFramebuffer:null;_t.bindFramebuffer(_e.FRAMEBUFFER,Jn)}}},this.readRenderTargetPixelsAsync=async function(ie,Pe,$e,Ze,Le,Ot,cn,En=0){if(!(ie&&ie.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let Sn=Pt.get(ie).__webglFramebuffer;if(ie.isWebGLCubeRenderTarget&&cn!==void 0&&(Sn=Sn[cn]),Sn)if(Pe>=0&&Pe<=ie.width-Ze&&$e>=0&&$e<=ie.height-Le){_t.bindFramebuffer(_e.FRAMEBUFFER,Sn);const Jn=ie.textures[En],si=Jn.format,Hn=Jn.type;if(!Rt.textureFormatReadable(si))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!Rt.textureTypeReadable(Hn))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const Ei=_e.createBuffer();_e.bindBuffer(_e.PIXEL_PACK_BUFFER,Ei),_e.bufferData(_e.PIXEL_PACK_BUFFER,Ot.byteLength,_e.STREAM_READ),ie.textures.length>1&&_e.readBuffer(_e.COLOR_ATTACHMENT0+En),_e.readPixels(Pe,$e,Ze,Le,Bn.convert(si),Bn.convert(Hn),0);const us=me!==null?Pt.get(me).__webglFramebuffer:null;_t.bindFramebuffer(_e.FRAMEBUFFER,us);const Ls=_e.fenceSync(_e.SYNC_GPU_COMMANDS_COMPLETE,0);return _e.flush(),await nV(_e,Ls,4),_e.bindBuffer(_e.PIXEL_PACK_BUFFER,Ei),_e.getBufferSubData(_e.PIXEL_PACK_BUFFER,0,Ot),_e.deleteBuffer(Ei),_e.deleteSync(Ls),Ot}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")},this.copyFramebufferToTexture=function(ie,Pe=null,$e=0){const Ze=Math.pow(2,-$e),Le=Math.floor(ie.image.width*Ze),Ot=Math.floor(ie.image.height*Ze),cn=Pe!==null?Pe.x:0,En=Pe!==null?Pe.y:0;Yt.setTexture2D(ie,0),_e.copyTexSubImage2D(_e.TEXTURE_2D,$e,0,0,cn,En,Le,Ot),_t.unbindTexture()};const $W=_e.createFramebuffer(),XW=_e.createFramebuffer();this.copyTextureToTexture=function(ie,Pe,$e=null,Ze=null,Le=0,Ot=null){Ot===null&&(Le!==0?(xd("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),Ot=Le,Le=0):Ot=0);let cn,En,Sn,Jn,si,Hn,Ei,us,Ls;const Ss=ie.isCompressedTexture?ie.mipmaps[Ot]:ie.image;if($e!==null)cn=$e.max.x-$e.min.x,En=$e.max.y-$e.min.y,Sn=$e.isBox3?$e.max.z-$e.min.z:1,Jn=$e.min.x,si=$e.min.y,Hn=$e.isBox3?$e.min.z:0;else{const sa=Math.pow(2,-Le);cn=Math.floor(Ss.width*sa),En=Math.floor(Ss.height*sa),ie.isDataArrayTexture?Sn=Ss.depth:ie.isData3DTexture?Sn=Math.floor(Ss.depth*sa):Sn=1,Jn=0,si=0,Hn=0}Ze!==null?(Ei=Ze.x,us=Ze.y,Ls=Ze.z):(Ei=0,us=0,Ls=0);const ps=Bn.convert(Pe.format),Zn=Bn.convert(Pe.type);let Es;Pe.isData3DTexture?(Yt.setTexture3D(Pe,0),Es=_e.TEXTURE_3D):Pe.isDataArrayTexture||Pe.isCompressedArrayTexture?(Yt.setTexture2DArray(Pe,0),Es=_e.TEXTURE_2D_ARRAY):(Yt.setTexture2D(Pe,0),Es=_e.TEXTURE_2D),_e.pixelStorei(_e.UNPACK_FLIP_Y_WEBGL,Pe.flipY),_e.pixelStorei(_e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,Pe.premultiplyAlpha),_e.pixelStorei(_e.UNPACK_ALIGNMENT,Pe.unpackAlignment);const Wi=_e.getParameter(_e.UNPACK_ROW_LENGTH),Fo=_e.getParameter(_e.UNPACK_IMAGE_HEIGHT),Kd=_e.getParameter(_e.UNPACK_SKIP_PIXELS),Bo=_e.getParameter(_e.UNPACK_SKIP_ROWS),um=_e.getParameter(_e.UNPACK_SKIP_IMAGES);_e.pixelStorei(_e.UNPACK_ROW_LENGTH,Ss.width),_e.pixelStorei(_e.UNPACK_IMAGE_HEIGHT,Ss.height),_e.pixelStorei(_e.UNPACK_SKIP_PIXELS,Jn),_e.pixelStorei(_e.UNPACK_SKIP_ROWS,si),_e.pixelStorei(_e.UNPACK_SKIP_IMAGES,Hn);const Rs=ie.isDataArrayTexture||ie.isData3DTexture,ia=Pe.isDataArrayTexture||Pe.isData3DTexture;if(ie.isDepthTexture){const sa=Pt.get(ie),Jr=Pt.get(Pe),_o=Pt.get(sa.__renderTarget),Pb=Pt.get(Jr.__renderTarget);_t.bindFramebuffer(_e.READ_FRAMEBUFFER,_o.__webglFramebuffer),_t.bindFramebuffer(_e.DRAW_FRAMEBUFFER,Pb.__webglFramebuffer);for(let Wu=0;Wu<Sn;Wu++)Rs&&(_e.framebufferTextureLayer(_e.READ_FRAMEBUFFER,_e.COLOR_ATTACHMENT0,Pt.get(ie).__webglTexture,Le,Hn+Wu),_e.framebufferTextureLayer(_e.DRAW_FRAMEBUFFER,_e.COLOR_ATTACHMENT0,Pt.get(Pe).__webglTexture,Ot,Ls+Wu)),_e.blitFramebuffer(Jn,si,cn,En,Ei,us,cn,En,_e.DEPTH_BUFFER_BIT,_e.NEAREST);_t.bindFramebuffer(_e.READ_FRAMEBUFFER,null),_t.bindFramebuffer(_e.DRAW_FRAMEBUFFER,null)}else if(Le!==0||ie.isRenderTargetTexture||Pt.has(ie)){const sa=Pt.get(ie),Jr=Pt.get(Pe);_t.bindFramebuffer(_e.READ_FRAMEBUFFER,$W),_t.bindFramebuffer(_e.DRAW_FRAMEBUFFER,XW);for(let _o=0;_o<Sn;_o++)Rs?_e.framebufferTextureLayer(_e.READ_FRAMEBUFFER,_e.COLOR_ATTACHMENT0,sa.__webglTexture,Le,Hn+_o):_e.framebufferTexture2D(_e.READ_FRAMEBUFFER,_e.COLOR_ATTACHMENT0,_e.TEXTURE_2D,sa.__webglTexture,Le),ia?_e.framebufferTextureLayer(_e.DRAW_FRAMEBUFFER,_e.COLOR_ATTACHMENT0,Jr.__webglTexture,Ot,Ls+_o):_e.framebufferTexture2D(_e.DRAW_FRAMEBUFFER,_e.COLOR_ATTACHMENT0,_e.TEXTURE_2D,Jr.__webglTexture,Ot),Le!==0?_e.blitFramebuffer(Jn,si,cn,En,Ei,us,cn,En,_e.COLOR_BUFFER_BIT,_e.NEAREST):ia?_e.copyTexSubImage3D(Es,Ot,Ei,us,Ls+_o,Jn,si,cn,En):_e.copyTexSubImage2D(Es,Ot,Ei,us,Jn,si,cn,En);_t.bindFramebuffer(_e.READ_FRAMEBUFFER,null),_t.bindFramebuffer(_e.DRAW_FRAMEBUFFER,null)}else ia?ie.isDataTexture||ie.isData3DTexture?_e.texSubImage3D(Es,Ot,Ei,us,Ls,cn,En,Sn,ps,Zn,Ss.data):Pe.isCompressedArrayTexture?_e.compressedTexSubImage3D(Es,Ot,Ei,us,Ls,cn,En,Sn,ps,Ss.data):_e.texSubImage3D(Es,Ot,Ei,us,Ls,cn,En,Sn,ps,Zn,Ss):ie.isDataTexture?_e.texSubImage2D(_e.TEXTURE_2D,Ot,Ei,us,cn,En,ps,Zn,Ss.data):ie.isCompressedTexture?_e.compressedTexSubImage2D(_e.TEXTURE_2D,Ot,Ei,us,Ss.width,Ss.height,ps,Ss.data):_e.texSubImage2D(_e.TEXTURE_2D,Ot,Ei,us,cn,En,ps,Zn,Ss);_e.pixelStorei(_e.UNPACK_ROW_LENGTH,Wi),_e.pixelStorei(_e.UNPACK_IMAGE_HEIGHT,Fo),_e.pixelStorei(_e.UNPACK_SKIP_PIXELS,Kd),_e.pixelStorei(_e.UNPACK_SKIP_ROWS,Bo),_e.pixelStorei(_e.UNPACK_SKIP_IMAGES,um),Ot===0&&Pe.generateMipmaps&&_e.generateMipmap(Es),_t.unbindTexture()},this.copyTextureToTexture3D=function(ie,Pe,$e=null,Ze=null,Le=0){return xd('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(ie,Pe,$e,Ze,Le)},this.initRenderTarget=function(ie){Pt.get(ie).__webglFramebuffer===void 0&&Yt.setupRenderTarget(ie)},this.initTexture=function(ie){ie.isCubeTexture?Yt.setTextureCube(ie,0):ie.isData3DTexture?Yt.setTexture3D(ie,0):ie.isDataArrayTexture||ie.isCompressedArrayTexture?Yt.setTexture2DArray(ie,0):Yt.setTexture2D(ie,0),_t.unbindTexture()},this.resetState=function(){le=0,he=0,me=null,_t.reset(),an.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Po}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(n){this._outputColorSpace=n;const o=this.getContext();o.drawingBufferColorSpace=Li._getDrawingBufferColorSpace(n),o.unpackColorSpace=Li._getUnpackColorSpace()}}return H.ACESFilmicToneMapping=Xe,H.AddEquation=B,H.AddOperation=ve,H.AdditiveAnimationBlendMode=Q0,H.AdditiveBlending=A,H.AgXToneMapping=Ft,H.AlphaFormat=dc,H.AlwaysCompare=GE,H.AlwaysDepth=rt,H.AlwaysStencilFunc=eS,H.AmbientLight=CR,H.AnimationAction=WR,H.AnimationClip=om,H.AnimationLoader=Cz,H.AnimationMixer=sk,H.AnimationObjectGroup=nk,H.AnimationUtils=wz,H.ArcCurve=$1,H.ArrayCamera=VR,H.ArrowHelper=Pk,H.AttachedBindMode=se,H.Audio=kR,H.AudioAnalyser=Xz,H.AudioContext=ub,H.AudioListener=Hz,H.AudioLoader=zz,H.AxesHelper=Ik,H.BackSide=v,H.BasicDepthPacking=LE,H.BasicShadowMap=u,H.BatchedMesh=D1,H.Bone=PS,H.BooleanKeyframeTrack=Pu,H.Box2=mk,H.Box3=Lr,H.Box3Helper=Ck,H.BoxGeometry=Tu,H.BoxHelper=Rk,H.BufferAttribute=cs,H.BufferGeometry=pi,H.BufferGeometryLoader=DR,H.ByteType=ln,H.Cache=el,H.Camera=R_,H.CameraHelper=Ek,H.CanvasTexture=YV,H.CapsuleGeometry=J_,H.CatmullRomCurve3=X1,H.CineonToneMapping=lt,H.CircleGeometry=j_,H.ClampToEdgeWrapping=It,H.Clock=zR,H.Color=mn,H.ColorKeyframeTrack=ib,H.ColorManagement=Li,H.CompressedArrayTexture=XV,H.CompressedCubeTexture=qV,H.CompressedTexture=K_,H.CompressedTextureLoader=Nz,H.ConeGeometry=qp,H.ConstantAlphaFactor=qn,H.ConstantColorFactor=Gt,H.Controls=Dk,H.CubeCamera=f1,H.CubeReflectionMapping=Me,H.CubeRefractionMapping=Ge,H.CubeTexture=Op,H.CubeTextureLoader=Pz,H.CubeUVReflectionMapping=et,H.CubicBezierCurve=WS,H.CubicBezierCurve3=Y1,H.CubicInterpolant=xR,H.CullFaceBack=s,H.CullFaceFront=r,H.CullFaceFrontBack=l,H.CullFaceNone=i,H.Curve=Ra,H.CurvePath=K1,H.CustomBlending=F,H.CustomToneMapping=qe,H.CylinderGeometry=Xp,H.Cylindrical=pk,H.Data3DTexture=u_,H.DataArrayTexture=c_,H.DataTexture=Ka,H.DataTextureLoader=Iz,H.DataUtils=_V,H.DecrementStencilOp=mO,H.DecrementWrapStencilOp=_O,H.DefaultLoadingManager=SR,H.DepthFormat=Tl,H.DepthStencilFormat=Ml,H.DepthTexture=OS,H.DetachedBindMode=X,H.DirectionalLight=RR,H.DirectionalLightHelper=Ak,H.DiscreteInterpolant=yR,H.DodecahedronGeometry=Q_,H.DoubleSide=S,H.DstAlphaFactor=Be,H.DstColorFactor=ct,H.DynamicCopyUsage=IO,H.DynamicDrawUsage=AO,H.DynamicReadUsage=CO,H.EdgesGeometry=W1,H.EllipseCurve=ix,H.EqualCompare=OE,H.EqualDepth=In,H.EqualStencilFunc=SO,H.EquirectangularReflectionMapping=De,H.EquirectangularRefractionMapping=Et,H.Euler=Do,H.EventDispatcher=Ya,H.ExtrudeGeometry=cx,H.FileLoader=Dl,H.Float16BufferAttribute=MV,H.Float32BufferAttribute=Tn,H.FloatType=vs,H.Fog=P_,H.FogExp2=N_,H.FramebufferTexture=$V,H.FrontSide=x,H.Frustum=kd,H.FrustumArray=k_,H.GLBufferAttribute=ck,H.GLSL1=DO,H.GLSL3=nS,H.GreaterCompare=VE,H.GreaterDepth=kn,H.GreaterEqualCompare=kE,H.GreaterEqualDepth=gn,H.GreaterEqualStencilFunc=wO,H.GreaterStencilFunc=TO,H.GridHelper=Mk,H.Group=Dd,H.HalfFloatType=Sl,H.HemisphereLight=bR,H.HemisphereLightHelper=Tk,H.IcosahedronGeometry=ux,H.ImageBitmapLoader=Vz,H.ImageLoader=am,H.ImageUtils=KE,H.IncrementStencilOp=pO,H.IncrementWrapStencilOp=gO,H.InstancedBufferAttribute=Vd,H.InstancedBufferGeometry=LR,H.InstancedInterleavedBuffer=lk,H.InstancedMesh=P1,H.Int16BufferAttribute=bV,H.Int32BufferAttribute=TV,H.Int8BufferAttribute=yV,H.IntType=Ii,H.InterleavedBuffer=I_,H.InterleavedBufferAttribute=Mu,H.Interpolant=nm,H.InterpolateDiscrete=Ep,H.InterpolateLinear=o_,H.InterpolateSmooth=a_,H.InterpolationSamplingMode=BO,H.InterpolationSamplingType=FO,H.InvertStencilOp=xO,H.KeepStencilOp=xu,H.KeyframeTrack=na,H.LOD=S1,H.LatheGeometry=hx,H.Layers=__,H.LessCompare=BE,H.LessDepth=Xt,H.LessEqualCompare=tS,H.LessEqualDepth=At,H.LessEqualStencilFunc=bO,H.LessStencilFunc=vO,H.Light=Ac,H.LightProbe=IR,H.Line=Mc,H.Line3=xk,H.LineBasicMaterial=Kr,H.LineCurve=$S,H.LineCurve3=Z1,H.LineDashedMaterial=mR,H.LineLoop=V1,H.LineSegments=Qa,H.LinearFilter=ge,H.LinearInterpolant=nb,H.LinearMipMapLinearFilter=wt,H.LinearMipMapNearestFilter=Ht,H.LinearMipmapLinearFilter=Qt,H.LinearMipmapNearestFilter=bt,H.LinearSRGBColorSpace=_u,H.LinearToneMapping=we,H.LinearTransfer=Cp,H.Loader=go,H.LoaderUtils=lb,H.LoadingManager=sb,H.LoopOnce=NE,H.LoopPingPong=IE,H.LoopRepeat=PE,H.MOUSE=e,H.Material=Ur,H.MaterialLoader=yx,H.MathUtils=eV,H.Matrix2=gb,H.Matrix3=ci,H.Matrix4=Qn,H.MaxEquation=Q,H.Mesh=Zs,H.MeshBasicMaterial=Sc,H.MeshDepthMaterial=jS,H.MeshDistanceMaterial=QS,H.MeshLambertMaterial=fR,H.MeshMatcapMaterial=pR,H.MeshNormalMaterial=dR,H.MeshPhongMaterial=uR,H.MeshPhysicalMaterial=cR,H.MeshStandardMaterial=JS,H.MeshToonMaterial=hR,H.MinEquation=$,H.MirroredRepeatWrapping=Ye,H.MixOperation=ee,H.MultiplyBlending=O,H.MultiplyOperation=Ue,H.NearestFilter=mt,H.NearestMipMapLinearFilter=bn,H.NearestMipMapNearestFilter=Lt,H.NearestMipmapLinearFilter=yt,H.NearestMipmapNearestFilter=ft,H.NeutralToneMapping=Bt,H.NeverCompare=FE,H.NeverDepth=bi,H.NeverStencilFunc=yO,H.NoBlending=T,H.NoColorSpace=wl,H.NoToneMapping=de,H.NormalAnimationBlendMode=l_,H.NormalBlending=E,H.NotEqualCompare=zE,H.NotEqualDepth=Ki,H.NotEqualStencilFunc=MO,H.NumberKeyframeTrack=im,H.Object3D=Bi,H.ObjectLoader=Bz,H.ObjectSpaceNormalMap=UE,H.OctahedronGeometry=em,H.OneFactor=q,H.OneMinusConstantAlphaFactor=yi,H.OneMinusConstantColorFactor=pn,H.OneMinusDstAlphaFactor=He,H.OneMinusDstColorFactor=Ve,H.OneMinusSrcAlphaFactor=Oe,H.OneMinusSrcColorFactor=Ce,H.OrthographicCamera=xx,H.PCFShadowMap=d,H.PCFSoftShadowMap=f,H.PMREMGenerator=Ab,H.Path=ox,H.PerspectiveCamera=wr,H.Plane=Tc,H.PlaneGeometry=Hd,H.PlaneHelper=Nk,H.PointLight=ER,H.PointLightHelper=Sk,H.Points=k1,H.PointsMaterial=FS,H.PolarGridHelper=wk,H.PolyhedronGeometry=wc,H.PositionalAudio=$z,H.PropertyBinding=Oi,H.PropertyMixer=HR,H.QuadraticBezierCurve=XS,H.QuadraticBezierCurve3=qS,H.Quaternion=ho,H.QuaternionKeyframeTrack=sm,H.QuaternionLinearInterpolant=vR,H.RED_GREEN_RGTC2_Format=ea,H.RED_RGTC1_Format=fr,H.REVISION=a,H.RGBADepthPacking=DE,H.RGBAFormat=Xs,H.RGBAIntegerFormat=pd,H.RGBA_ASTC_10x10_Format=hr,H.RGBA_ASTC_10x5_Format=wi,H.RGBA_ASTC_10x6_Format=ur,H.RGBA_ASTC_10x8_Format=Ta,H.RGBA_ASTC_12x10_Format=qa,H.RGBA_ASTC_12x12_Format=ls,H.RGBA_ASTC_4x4_Format=Fn,H.RGBA_ASTC_5x4_Format=gi,H.RGBA_ASTC_5x5_Format=Ui,H.RGBA_ASTC_6x5_Format=fs,H.RGBA_ASTC_6x6_Format=Ji,H.RGBA_ASTC_8x5_Format=ki,H.RGBA_ASTC_8x6_Format=Vn,H.RGBA_ASTC_8x8_Format=as,H.RGBA_BPTC_Format=dr,H.RGBA_ETC2_EAC_Format=$n,H.RGBA_PVRTC_2BPPV1_Format=_n,H.RGBA_PVRTC_4BPPV1_Format=en,H.RGBA_S3TC_DXT1_Format=Ee,H.RGBA_S3TC_DXT3_Format=ze,H.RGBA_S3TC_DXT5_Format=ke,H.RGBDepthPacking=uO,H.RGBFormat=hd,H.RGBIntegerFormat=j0,H.RGB_BPTC_SIGNED_Format=Tr,H.RGB_BPTC_UNSIGNED_Format=qs,H.RGB_ETC1_Format=fn,H.RGB_ETC2_Format=Gn,H.RGB_PVRTC_2BPPV1_Format=Nt,H.RGB_PVRTC_4BPPV1_Format=Re,H.RGB_S3TC_DXT1_Format=ne,H.RGDepthPacking=hO,H.RGFormat=Ap,H.RGIntegerFormat=fd,H.RawShaderMaterial=lR,H.Ray=Md,H.Raycaster=uk,H.RectAreaLight=NR,H.RedFormat=dd,H.RedIntegerFormat=pu,H.ReinhardToneMapping=Ie,H.RenderTarget=lS,H.RenderTarget3D=rk,H.RepeatWrapping=kt,H.ReplaceStencilOp=fO,H.ReverseSubtractEquation=Y,H.RingGeometry=dx,H.SIGNED_RED_GREEN_RGTC2_Format=r_,H.SIGNED_RED_RGTC1_Format=fc,H.SRGBColorSpace=uo,H.SRGBTransfer=ss,H.Scene=m1,H.ShaderChunk=_i,H.ShaderLib=Na,H.ShaderMaterial=Ea,H.ShadowMaterial=aR,H.Shape=Ru,H.ShapeGeometry=fx,H.ShapePath=Lk,H.ShapeUtils=Ca,H.ShortType=Yn,H.Skeleton=O_,H.SkeletonHelper=vk,H.SkinnedMesh=E1,H.Source=mc,H.Sphere=Mr,H.SphereGeometry=tm,H.Spherical=fk,H.SphericalHarmonics3=PR,H.SplineCurve=YS,H.SpotLight=wR,H.SpotLightHelper=yk,H.Sprite=y1,H.SpriteMaterial=ES,H.SrcAlphaFactor=Ne,H.SrcAlphaSaturateFactor=Ct,H.SrcColorFactor=oe,H.StaticCopyUsage=PO,H.StaticDrawUsage=Np,H.StaticReadUsage=RO,H.StereoCamera=kz,H.StreamCopyUsage=LO,H.StreamDrawUsage=EO,H.StreamReadUsage=NO,H.StringKeyframeTrack=Iu,H.SubtractEquation=k,H.SubtractiveBlending=w,H.TOUCH=t,H.TangentSpaceNormalMap=pc,H.TetrahedronGeometry=px,H.Texture=Ps,H.TextureLoader=Lz,H.TextureUtils=Vk,H.Timer=hk,H.TimestampQuery=UO,H.TorusGeometry=mx,H.TorusKnotGeometry=gx,H.Triangle=fo,H.TriangleFanDrawMode=cO,H.TriangleStripDrawMode=lO,H.TrianglesDrawMode=aO,H.TubeGeometry=_x,H.UVMapping=Se,H.Uint16BufferAttribute=TS,H.Uint32BufferAttribute=MS,H.Uint8BufferAttribute=vV,H.Uint8ClampedBufferAttribute=SV,H.Uniform=pb,H.UniformsGroup=ak,H.UniformsLib=nn,H.UniformsUtils=u1,H.UnsignedByteType=ut,H.UnsignedInt248Type=bl,H.UnsignedInt5999Type=ud,H.UnsignedIntType=nr,H.UnsignedShort4444Type=Qo,H.UnsignedShort5551Type=hc,H.UnsignedShortType=Pi,H.VSMShadowMap=g,H.Vector2=vt,H.Vector3=ce,H.Vector4=Fi,H.VectorKeyframeTrack=rm,H.VideoFrameTexture=WV,H.VideoTexture=H1,H.WebGL3DRenderTarget=aV,H.WebGLArrayRenderTarget=oV,H.WebGLCoordinateSystem=Po,H.WebGLCubeRenderTarget=p1,H.WebGLRenderTarget=Za,H.WebGLRenderer=zW,H.WebGLUtils=NC,H.WebGPUCoordinateSystem=md,H.WebXRController=C_,H.WireframeGeometry=sR,H.WrapAroundEnding=Rp,H.ZeroCurvatureEnding=mu,H.ZeroFactor=z,H.ZeroSlopeEnding=gu,H.ZeroStencilOp=dO,H.createCanvasElement=XE,H}/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const a7=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","aoMapIntensity","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveIntensity","emissiveMap","envMap","envMapIntensity","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","lightMapIntensity","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"],bT=new WeakMap;class sD{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=e.object.isSkinnedMesh===!0,this.refreshUniforms=a7,this.renderId=0}firstInitialization(e){return this.renderObjects.has(e)===!1?(this.getRenderObjectData(e),!0):!1}needsVelocity(e){const t=e.getMRT();return t!==null&&t.has("velocity")}getRenderObjectData(e){let t=this.renderObjects.get(e);if(t===void 0){const{geometry:i,material:s,object:r}=e;if(t={material:this.getMaterialData(s),geometry:{id:i.id,attributes:this.getAttributesData(i.attributes),indexVersion:i.index?i.index.version:null,drawRange:{start:i.drawRange.start,count:i.drawRange.count}},worldMatrix:r.matrixWorld.clone()},r.center&&(t.center=r.center.clone()),r.morphTargetInfluences&&(t.morphTargetInfluences=r.morphTargetInfluences.slice()),e.bundle!==null&&(t.version=e.bundle.version),t.material.transmission>0){const{width:l,height:u}=e.context;t.bufferWidth=l,t.bufferHeight=u}t.lights=this.getLightsData(e.lightsNode.getLights()),this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const i in e){const s=e[i];t[i]={version:s.version}}return t}containsNode(e){const t=e.material;for(const i in t)if(t[i]&&t[i].isNode)return!0;return e.renderer.overrideNodes.modelViewMatrix!==null||e.renderer.overrideNodes.modelNormalViewMatrix!==null}getMaterialData(e){const t={};for(const i of this.refreshUniforms){const s=e[i];s!=null&&(typeof s=="object"&&s.clone!==void 0?s.isTexture===!0?t[i]={id:s.id,version:s.version}:t[i]=s.clone():t[i]=s)}return t}equals(e,t){const{object:i,material:s,geometry:r}=e,l=this.getRenderObjectData(e);if(l.worldMatrix.equals(i.matrixWorld)!==!0)return l.worldMatrix.copy(i.matrixWorld),!1;const u=l.material;for(const A in u){const w=u[A],O=s[A];if(w.equals!==void 0){if(w.equals(O)===!1)return w.copy(O),!1}else if(O.isTexture===!0){if(w.id!==O.id||w.version!==O.version)return w.id=O.id,w.version=O.version,!1}else if(w!==O)return u[A]=O,!1}if(u.transmission>0){const{width:A,height:w}=e.context;if(l.bufferWidth!==A||l.bufferHeight!==w)return l.bufferWidth=A,l.bufferHeight=w,!1}const d=l.geometry,f=r.attributes,g=d.attributes,x=Object.keys(g),v=Object.keys(f);if(d.id!==r.id)return d.id=r.id,!1;if(x.length!==v.length)return l.geometry.attributes=this.getAttributesData(f),!1;for(const A of x){const w=g[A],O=f[A];if(O===void 0)return delete g[A],!1;if(w.version!==O.version)return w.version=O.version,!1}const S=r.index,T=d.indexVersion,E=S?S.version:null;if(T!==E)return d.indexVersion=E,!1;if(d.drawRange.start!==r.drawRange.start||d.drawRange.count!==r.drawRange.count)return d.drawRange.start=r.drawRange.start,d.drawRange.count=r.drawRange.count,!1;if(l.morphTargetInfluences){let A=!1;for(let w=0;w<l.morphTargetInfluences.length;w++)l.morphTargetInfluences[w]!==i.morphTargetInfluences[w]&&(A=!0);if(A)return!0}if(l.lights){for(let A=0;A<t.length;A++)if(l.lights[A].map!==t[A].map)return!1}return l.center&&l.center.equals(i.center)===!1?(l.center.copy(i.center),!0):(e.bundle!==null&&(l.version=e.bundle.version),!0)}getLightsData(e){const t=[];for(const i of e)i.isSpotLight===!0&&i.map!==null&&t.push({map:i.map.version});return t}getLights(e,t){if(bT.has(e)){const s=bT.get(e);if(s.renderId===t)return s.lightsData}const i=this.getLightsData(e.getLights());return bT.set(e,{renderId:t,lightsData:i}),i}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e)||this.needsVelocity(t.renderer))return!0;const{renderId:i}=t;if(this.renderId!==i)return this.renderId=i,!0;const s=e.object.static===!0,r=e.bundle!==null&&e.bundle.static===!0&&this.getRenderObjectData(e).version===e.bundle.version;if(s||r)return!1;const l=this.getLights(e.lightsNode,i);return this.equals(e,l)!==!0}}function pg(a,e=0){let t=3735928559^e,i=1103547991^e;if(a instanceof Array)for(let s=0,r;s<a.length;s++)r=a[s],t=Math.imul(t^r,2654435761),i=Math.imul(i^r,1597334677);else for(let s=0,r;s<a.length;s++)r=a.charCodeAt(s),t=Math.imul(t^r,2654435761),i=Math.imul(i^r,1597334677);return t=Math.imul(t^t>>>16,2246822507),t^=Math.imul(i^i>>>13,3266489909),i=Math.imul(i^i>>>16,2246822507),i^=Math.imul(t^t>>>13,3266489909),4294967296*(2097151&i)+(t>>>0)}const zw=a=>pg(a),$g=a=>pg(a),mg=(...a)=>pg(a);function kw(a,e=!1){const t=[];a.isNode===!0&&(t.push(a.id),a=a.getSelf());for(const{property:i,childNode:s}of gg(a))t.push(pg(i.slice(0,-4)),s.getCacheKey(e));return pg(t)}function*gg(a,e=!1){for(const t in a){if(t.startsWith("_")===!0)continue;const i=a[t];if(Array.isArray(i)===!0)for(let s=0;s<i.length;s++){const r=i[s];r&&(r.isNode===!0||e&&typeof r.toJSON=="function")&&(yield{property:t,index:s,childNode:r})}else if(i&&i.isNode===!0)yield{property:t,childNode:i};else if(i&&Object.getPrototypeOf(i)===Object.prototype)for(const s in i){if(s.startsWith("_")===!0)continue;const r=i[s];r&&(r.isNode===!0||e&&typeof r.toJSON=="function")&&(yield{property:t,index:s,childNode:r})}}}const l7=new Map([[1,"float"],[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),gP=new WeakMap;function Gw(a){return l7.get(a)}function _g(a){if(/[iu]?vec\d/.test(a))return a.startsWith("ivec")?Int32Array:a.startsWith("uvec")?Uint32Array:Float32Array;if(/mat\d/.test(a)||/float/.test(a))return Float32Array;if(/uint/.test(a))return Uint32Array;if(/int/.test(a))return Int32Array;throw new Error(`THREE.NodeUtils: Unsupported type: ${a}`)}function Hw(a){if(/float|int|uint/.test(a))return 1;if(/vec2/.test(a))return 2;if(/vec3/.test(a))return 3;if(/vec4/.test(a)||/mat2/.test(a))return 4;if(/mat3/.test(a))return 9;if(/mat4/.test(a))return 16;console.error("THREE.TSL: Unsupported type:",a)}function rD(a){if(/float|int|uint/.test(a))return 1;if(/vec2/.test(a))return 2;if(/vec3/.test(a))return 3;if(/vec4/.test(a)||/mat2/.test(a))return 4;if(/mat3/.test(a))return 12;if(/mat4/.test(a))return 16;console.error("THREE.TSL: Unsupported type:",a)}function oD(a){if(/float|int|uint/.test(a))return 4;if(/vec2/.test(a))return 8;if(/vec3/.test(a)||/vec4/.test(a))return 16;if(/mat2/.test(a))return 8;if(/mat3/.test(a))return 48;if(/mat4/.test(a))return 64;console.error("THREE.TSL: Unsupported type:",a)}function Yl(a){if(a==null)return null;const e=typeof a;return a.isNode===!0?"node":e==="number"?"float":e==="boolean"?"bool":e==="string"?"string":e==="function"?"shader":a.isVector2===!0?"vec2":a.isVector3===!0?"vec3":a.isVector4===!0?"vec4":a.isMatrix2===!0?"mat2":a.isMatrix3===!0?"mat3":a.isMatrix4===!0?"mat4":a.isColor===!0?"color":a instanceof ArrayBuffer?"ArrayBuffer":null}function Ww(a,...e){const t=a?a.slice(-4):void 0;return e.length===1&&(t==="vec2"?e=[e[0],e[0]]:t==="vec3"?e=[e[0],e[0],e[0]]:t==="vec4"&&(e=[e[0],e[0],e[0],e[0]])),a==="color"?new Jt(...e):t==="vec2"?new it(...e):t==="vec3"?new re(...e):t==="vec4"?new Un(...e):t==="mat2"?new Wg(...e):t==="mat3"?new ni(...e):t==="mat4"?new xn(...e):a==="bool"?e[0]||!1:a==="float"||a==="int"||a==="uint"?e[0]||0:a==="string"?e[0]||"":a==="ArrayBuffer"?qw(e[0]):null}function $w(a){let e=gP.get(a);return e===void 0&&(e={},gP.set(a,e)),e}function Xw(a){let e="";const t=new Uint8Array(a);for(let i=0;i<t.length;i++)e+=String.fromCharCode(t[i]);return btoa(e)}function qw(a){return Uint8Array.from(atob(a),e=>e.charCodeAt(0)).buffer}var c7=Object.freeze({__proto__:null,arrayBufferToBase64:Xw,base64ToArrayBuffer:qw,getByteBoundaryFromType:oD,getCacheKey:kw,getDataFromObject:$w,getLengthFromType:Hw,getMemoryLengthFromType:rD,getNodeChildren:gg,getTypeFromLength:Gw,getTypedArrayFromType:_g,getValueFromType:Ww,getValueType:Yl,hash:mg,hashArray:$g,hashString:zw});const If={VERTEX:"vertex",FRAGMENT:"fragment"},ii={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},aD={BOOLEAN:"bool",INTEGER:"int",FLOAT:"float",VECTOR2:"vec2",VECTOR3:"vec3",VECTOR4:"vec4",MATRIX2:"mat2",MATRIX3:"mat3",MATRIX4:"mat4"},yr={READ_ONLY:"readOnly",WRITE_ONLY:"writeOnly",READ_WRITE:"readWrite"},Yw=["fragment","vertex"],lv=["setup","analyze","generate"],cv=[...Yw,"compute"],ou=["x","y","z","w"],u7={analyze:"setup",generate:"analyze"};let h7=0;class Pn extends Jo{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=ii.NONE,this.updateBeforeType=ii.NONE,this.updateAfterType=ii.NONE,this.uuid=QM.generateUUID(),this.version=0,this.global=!1,this.parents=!1,this.isNode=!0,this._cacheKey=null,this._cacheKeyVersion=0,Object.defineProperty(this,"id",{value:h7++})}set needsUpdate(e){e===!0&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this.getSelf()),this}onFrameUpdate(e){return this.onUpdate(e,ii.FRAME)}onRenderUpdate(e){return this.onUpdate(e,ii.RENDER)}onObjectUpdate(e){return this.onUpdate(e,ii.OBJECT)}onReference(e){return this.updateReference=e.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of gg(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return e=e||this.version!==this._cacheKeyVersion,(e===!0||this._cacheKey===null)&&(this._cacheKey=mg(kw(this,e),this.customCacheKey()),this._cacheKeyVersion=this.version),this._cacheKey}customCacheKey(){return 0}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e);return e.getElementType(t)}getMemberType(){return"void"}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e);return e.getNodeFromHash(t)||this}getArrayCount(){return null}setup(e){const t=e.getNodeProperties(this);let i=0;for(const s of this.getChildren())t["node"+i++]=s;return t.outputNode||null}analyze(e,t=null){const i=e.increaseUsage(this);if(this.parents===!0){const s=e.getDataFromNode(this,"any");s.stages=s.stages||{},s.stages[e.shaderStage]=s.stages[e.shaderStage]||[],s.stages[e.shaderStage].push(t)}if(i===1){const s=e.getNodeProperties(this);for(const r of Object.values(s))r&&r.isNode===!0&&r.build(e,this)}}generate(e,t){const{outputNode:i}=e.getNodeProperties(this);if(i&&i.isNode===!0)return i.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const i=this.getShared(e);if(this!==i)return i.build(e,t);const s=e.getDataFromNode(this);s.buildStages=s.buildStages||{},s.buildStages[e.buildStage]=!0;const r=u7[e.buildStage];if(r&&s.buildStages[r]!==!0){const d=e.getBuildStage();e.setBuildStage(r),this.build(e),e.setBuildStage(d)}e.addNode(this),e.addChain(this);let l=null;const u=e.getBuildStage();if(u==="setup"){this.updateReference(e);const d=e.getNodeProperties(this);if(d.initialized!==!0){d.initialized=!0,d.outputNode=this.setup(e)||d.outputNode||null;for(const f of Object.values(d))if(f&&f.isNode===!0){if(f.parents===!0){const g=e.getNodeProperties(f);g.parents=g.parents||[],g.parents.push(this)}f.build(e)}}l=d.outputNode}else if(u==="analyze")this.analyze(e,t);else if(u==="generate")if(this.generate.length===1){const f=this.getNodeType(e),g=e.getDataFromNode(this);l=g.snippet,l===void 0?g.generated===void 0?(g.generated=!0,l=this.generate(e)||"",g.snippet=l):(console.warn("THREE.Node: Recursion detected.",this),l="/* Recursion detected. */"):g.flowCodes!==void 0&&e.context.nodeBlock!==void 0&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),l=e.format(l,f,t)}else l=this.generate(e,t)||"";return e.removeChain(this),e.addSequentialNode(this),l}getSerializeChildren(){return gg(this)}serialize(e){const t=this.getSerializeChildren(),i={};for(const{property:s,index:r,childNode:l}of t)r!==void 0?(i[s]===void 0&&(i[s]=Number.isInteger(r)?[]:{}),i[s][r]=l.toJSON(e.meta).uuid):i[s]=l.toJSON(e.meta).uuid;Object.keys(i).length>0&&(e.inputNodes=i)}deserialize(e){if(e.inputNodes!==void 0){const t=e.meta.nodes;for(const i in e.inputNodes)if(Array.isArray(e.inputNodes[i])){const s=[];for(const r of e.inputNodes[i])s.push(t[r]);this[i]=s}else if(typeof e.inputNodes[i]=="object"){const s={};for(const r in e.inputNodes[i]){const l=e.inputNodes[i][r];s[r]=t[l]}this[i]=s}else{const s=e.inputNodes[i];this[i]=t[s]}}}toJSON(e){const{uuid:t,type:i}=this,s=e===void 0||typeof e=="string";s&&(e={textures:{},images:{},nodes:{}});let r=e.nodes[t];r===void 0&&(r={uuid:t,type:i,meta:e,metadata:{version:4.7,type:"Node",generator:"Node.toJSON"}},s!==!0&&(e.nodes[r.uuid]=r),this.serialize(r),delete r.meta);function l(u){const d=[];for(const f in u){const g=u[f];delete g.metadata,d.push(g)}return d}if(s){const u=l(e.textures),d=l(e.images),f=l(e.nodes);u.length>0&&(r.textures=u),d.length>0&&(r.images=d),f.length>0&&(r.nodes=f)}return r}}class au extends Pn{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){const t=this.indexNode.getNodeType(e),i=this.node.build(e),s=this.indexNode.build(e,!e.isVector(t)&&e.isInteger(t)?t:"uint");return`${i}[ ${s} ]`}}class Zw extends Pn{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const t=this.node.getNodeType(e);let i=null;for(const s of this.convertTo.split("|"))(i===null||e.getTypeLength(t)===e.getTypeLength(s))&&(i=s);return i}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const i=this.node,s=this.getNodeType(e),r=i.build(e,s);return e.format(r,s,t)}}class $s extends Pn{static get type(){return"TempNode"}constructor(e=null){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){if(e.getBuildStage()==="generate"){const s=e.getVectorType(this.getNodeType(e,t)),r=e.getDataFromNode(this);if(r.propertyName!==void 0)return e.format(r.propertyName,s,t);if(s!=="void"&&t!=="void"&&this.hasDependencies(e)){const l=super.build(e,s),u=e.getVarFromNode(this,null,s),d=e.getPropertyName(u);return e.addLineFlowCode(`${d} = ${l}`,this),r.snippet=l,r.propertyName=d,e.format(r.propertyName,s,t)}}return super.build(e,t)}}class lD extends $s{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return this.nodeType!==null?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce((t,i)=>t+e.getTypeLength(i.getNodeType(e)),0))}generate(e,t){const i=this.getNodeType(e),s=e.getTypeLength(i),r=this.nodes,l=e.getComponentType(i),u=[];let d=0;for(const g of r){if(d>=s){console.error(`THREE.TSL: Length of parameters exceeds maximum length of function '${i}()' type.`);break}let x=g.getNodeType(e),v=e.getTypeLength(x),S;d+v>s&&(console.error(`THREE.TSL: Length of '${i}()' data exceeds maximum length of output type.`),v=s-d,x=e.getTypeFromLength(v)),d+=v,S=g.build(e,x);const T=e.getComponentType(x);T!==l&&(S=e.format(S,T,l)),u.push(S)}const f=`${e.getType(i)}( ${u.join(", ")} )`;return e.format(f,i,t)}}const d7=ou.join("");class uv extends Pn{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max(ou.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}generate(e,t){const i=this.node,s=e.getTypeLength(i.getNodeType(e));let r=null;if(s>1){let l=null;this.getVectorLength()>=s&&(l=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const d=i.build(e,l);this.components.length===s&&this.components===d7.slice(0,this.components.length)?r=e.format(d,l,t):r=e.format(`${d}.${this.components}`,this.getNodeType(e),t)}else r=i.build(e,t);return r}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}}class cD extends $s{static get type(){return"SetNode"}constructor(e,t,i){super(),this.sourceNode=e,this.components=t,this.targetNode=i}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:t,components:i,targetNode:s}=this,r=this.getNodeType(e),l=e.getComponentType(s.getNodeType(e)),u=e.getTypeFromLength(i.length,l),d=s.build(e,u),f=t.build(e,r),g=e.getTypeLength(r),x=[];for(let v=0;v<g;v++){const S=ou[v];S===i[0]?(x.push(d),v+=i.length-1):x.push(f+"."+S)}return`${e.getType(r)}( ${x.join(", ")} )`}}class f7 extends $s{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:t,sourceNode:i}=this,s=this.getNodeType(e),r=i.build(e),l=e.getVarFromNode(this),u=e.getPropertyName(l);e.addLineFlowCode(u+" = "+r,this);const d=e.getTypeLength(s),f=[];let g=0;for(let x=0;x<d;x++){const v=ou[x];v===t[g]?(f.push("1.0 - "+(u+"."+v)),g++):f.push(u+"."+v)}return`${e.getType(s)}( ${f.join(", ")} )`}}class Kw extends Pn{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return this.nodeType===null?Yl(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=Yl(this.value),e.nodeType=this.nodeType,e.valueType==="ArrayBuffer"&&(e.value=Xw(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?Ww(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}}const _P=/float|u?int/;class ba extends Kw{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const i=this.getNodeType(e);return _P.test(i)&&_P.test(t)?e.generateConst(t,this.value):e.format(this.generateConst(e),i,t)}}class uD extends Pn{static get type(){return"MemberNode"}constructor(e,t){super(),this.node=e,this.property=t,this.isMemberNode=!0}getNodeType(e){return this.node.getMemberType(e,this.property)}generate(e){return this.node.build(e)+"."+this.property}}let ed=null;const Lf=new Map;function Je(a,e){if(Lf.has(a)){console.warn(`THREE.TSL: Redefinition of method chaining '${a}'.`);return}if(typeof e!="function")throw new Error(`THREE.TSL: Node element ${a} is not a function`);Lf.set(a,e)}const hD=a=>a.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),xP=a=>hD(a).split("").sort().join(""),dD={setup(a,e){const t=e.shift();return a(Xg(t),...e)},get(a,e,t){if(typeof e=="string"&&a[e]===void 0){if(a.isStackNode!==!0&&e==="assign")return(...i)=>(ed.assign(t,...i),t);if(Lf.has(e)){const i=Lf.get(e);return a.isStackNode?(...s)=>t.add(i(...s)):(...s)=>i(t,...s)}else{if(e==="toVarIntent")return()=>t;if(e==="self")return a;if(e.endsWith("Assign")&&Lf.has(e.slice(0,e.length-6))){const i=Lf.get(e.slice(0,e.length-6));return a.isStackNode?(...s)=>t.assign(s[0],i(...s)):(...s)=>t.assign(i(t,...s))}else{if(/^[xyzwrgbastpq]{1,4}$/.test(e)===!0)return e=hD(e),Qe(new uv(t,e));if(/^set[XYZWRGBASTPQ]{1,4}$/.test(e)===!0)return e=xP(e.slice(3).toLowerCase()),i=>Qe(new cD(a,e,Qe(i)));if(/^flip[XYZWRGBASTPQ]{1,4}$/.test(e)===!0)return e=xP(e.slice(4).toLowerCase()),()=>Qe(new f7(Qe(a),e));if(e==="width"||e==="height"||e==="depth")return e==="width"?e="x":e==="height"?e="y":e==="depth"&&(e="z"),Qe(new uv(a,e));if(/^\d+$/.test(e)===!0)return Qe(new au(t,new ba(Number(e),"uint")));if(/^get$/.test(e)===!0)return i=>Qe(new uD(t,i))}}}return Reflect.get(a,e,t)},set(a,e,t,i){return typeof e=="string"&&a[e]===void 0&&(/^[xyzwrgbastpq]{1,4}$/.test(e)===!0||e==="width"||e==="height"||e==="depth"||/^\d+$/.test(e)===!0)?(i[e].assign(t),!0):Reflect.set(a,e,t,i)}},TT=new WeakMap,yP=new WeakMap,p7=function(a,e=null){const t=Yl(a);if(t==="node"){let i=TT.get(a);return i===void 0&&(i=new Proxy(a,dD),TT.set(a,i),TT.set(i,i)),i}else{if(e===null&&(t==="float"||t==="boolean")||t&&t!=="shader"&&t!=="string")return Qe(pM(a,e));if(t==="shader")return a.isFn?a:be(a)}return a},m7=function(a,e=null){for(const t in a)a[t]=Qe(a[t],e);return a},g7=function(a,e=null){const t=a.length;for(let i=0;i<t;i++)a[i]=Qe(a[i],e);return a},fD=function(a,e=null,t=null,i=null){function s(g){return i!==null?(g=Qe(Object.assign(g,i)),i.intent===!0&&(g=g.toVarIntent())):g=Qe(g),g}let r,l=e,u,d;function f(g){let x;return l?x=/[a-z]/i.test(l)?l+"()":l:x=a.type,u!==void 0&&g.length<u?(console.error(`THREE.TSL: "${x}" parameter length is less than minimum required.`),g.concat(new Array(u-g.length).fill(0))):d!==void 0&&g.length>d?(console.error(`THREE.TSL: "${x}" parameter length exceeds limit.`),g.slice(0,d)):g}return e===null?r=(...g)=>s(new a(...Eh(f(g)))):t!==null?(t=Qe(t),r=(...g)=>s(new a(e,...Eh(f(g)),t))):r=(...g)=>s(new a(e,...Eh(f(g)))),r.setParameterLength=(...g)=>(g.length===1?u=d=g[0]:g.length===2&&([u,d]=g),r),r.setName=g=>(l=g,r),r},_7=function(a,...e){return Qe(new a(...Eh(e)))};class x7 extends Pn{constructor(e,t){super(),this.shaderNode=e,this.inputNodes=t,this.isShaderCallNodeInternal=!0}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}getMemberType(e,t){return this.getOutputNode(e).getMemberType(e,t)}call(e){const{shaderNode:t,inputNodes:i}=this,s=e.getNodeProperties(t),r=e.getClosestSubBuild(t.subBuilds)||"",l=r||"default";if(s[l])return s[l];const u=e.subBuildFn;e.subBuildFn=r;let d=null;if(t.layout){let f=yP.get(e.constructor);f===void 0&&(f=new WeakMap,yP.set(e.constructor,f));let g=f.get(t);g===void 0&&(g=Qe(e.buildFunctionNode(t)),f.set(t,g)),e.addInclude(g),d=Qe(g.call(i))}else{let f=i;if(Array.isArray(f)){let v=0;f=new Proxy(f,{get:(S,T,E)=>S[T]===void 0?S[v++]:Reflect.get(S,T,E)})}const g=t.jsFunc,x=f!==null||g.length>1?g(f||[],e):g(e);d=Qe(x)}return e.subBuildFn=u,t.once&&(s[l]=d),d}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}getOutputNode(e){const t=e.getNodeProperties(this),i=e.getSubBuildOutput(this);return t[i]=t[i]||this.setupOutput(e),t[i].subBuild=e.getClosestSubBuild(this),t[i]}build(e,t=null){let i=null;const s=e.getBuildStage(),r=e.getNodeProperties(this),l=e.getSubBuildOutput(this),u=this.getOutputNode(e);if(s==="setup"){const d=e.getSubBuildProperty("initialized",this);if(r[d]!==!0&&(r[d]=!0,r[l]=this.getOutputNode(e),r[l].build(e),this.shaderNode.subBuilds))for(const f of e.chaining){const g=e.getDataFromNode(f,"any");g.subBuilds=g.subBuilds||new Set;for(const x of this.shaderNode.subBuilds)g.subBuilds.add(x)}i=r[l]}else s==="analyze"?u.build(e,t):s==="generate"&&(i=u.build(e,t)||"");return i}}class y7 extends Pn{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return Xg(e),Qe(new x7(this,e))}setup(){return this.call()}}const v7=[!1,!0],S7=[0,1,2,3],b7=[-1,-2],pD=[.5,1.5,1/3,1e-6,1e6,Math.PI,Math.PI*2,1/Math.PI,2/Math.PI,1/(Math.PI*2),Math.PI/2],Jw=new Map;for(const a of v7)Jw.set(a,new ba(a));const jw=new Map;for(const a of S7)jw.set(a,new ba(a,"uint"));const Qw=new Map([...jw].map(a=>new ba(a.value,"int")));for(const a of b7)Qw.set(a,new ba(a,"int"));const m0=new Map([...Qw].map(a=>new ba(a.value)));for(const a of pD)m0.set(a,new ba(a));for(const a of pD)m0.set(-a,new ba(-a));const g0={bool:Jw,uint:jw,ints:Qw,float:m0},vP=new Map([...Jw,...m0]),pM=(a,e)=>vP.has(a)?vP.get(a):a.isNode===!0?a:new ba(a,e),tr=function(a,e=null){return(...t)=>{if((t.length===0||!["bool","float","int","uint"].includes(a)&&t.every(s=>typeof s!="object"))&&(t=[Ww(a,...t)]),t.length===1&&e!==null&&e.has(t[0]))return Gm(e.get(t[0]));if(t.length===1){const s=pM(t[0],a);return s.nodeType===a?Gm(s):Gm(new Zw(s,a))}const i=t.map(s=>pM(s));return Gm(new lD(i,a))}},xg=a=>typeof a=="object"&&a!==null?a.value:a,mD=a=>a!=null?a.nodeType||a.convertTo||(typeof a=="string"?a:null):null;function Df(a,e){return new Proxy(new y7(a,e),dD)}const Qe=(a,e=null)=>p7(a,e),Gm=(a,e=null)=>Qe(a,e).toVarIntent(),Xg=(a,e=null)=>new m7(a,e),Eh=(a,e=null)=>new g7(a,e),Wn=(a,e=null,t=null,i=null)=>new fD(a,e,t,i),Vt=(a,...e)=>new _7(a,...e),on=(a,e=null,t=null,i={})=>new fD(a,e,t,{intent:!0,...i});let T7=0;const be=(a,e=null)=>{let t=null;e!==null&&(typeof e=="object"?t=e.return:(typeof e=="string"?t=e:console.error("THREE.TSL: Invalid layout type."),e=null));const i=new Df(a,t),s=(...r)=>{let l;Xg(r),r[0]&&(r[0].isNode||Object.getPrototypeOf(r[0])!==Object.prototype)?l=[...r]:l=r[0];const d=i.call(l);return t==="void"&&d.toStack(),d.toVarIntent()};if(s.shaderNode=i,s.id=i.id,s.isFn=!0,s.getNodeType=(...r)=>i.getNodeType(...r),s.getCacheKey=(...r)=>i.getCacheKey(...r),s.setLayout=r=>(i.setLayout(r),s),s.once=(r=null)=>(i.once=!0,i.subBuilds=r,s),e!==null){if(typeof e.inputs!="object"){const r={name:"fn"+T7++,type:t,inputs:[]};for(const l in e)l!=="return"&&r.inputs.push({name:l,type:e[l]});e=r}s.setLayout(e)}return s},yg=a=>{ed=a},_0=()=>ed,yn=(...a)=>ed.If(...a),M7=(...a)=>ed.Switch(...a);function x0(a){return ed&&ed.add(a),a}Je("toStack",x0);const gD=new tr("color"),te=new tr("float",g0.float),pe=new tr("int",g0.ints),Kt=new tr("uint",g0.uint),xa=new tr("bool",g0.bool),nt=new tr("vec2"),rr=new tr("ivec2"),_D=new tr("uvec2"),xD=new tr("bvec2"),xe=new tr("vec3"),yD=new tr("ivec3"),vp=new tr("uvec3"),eA=new tr("bvec3"),tn=new tr("vec4"),vD=new tr("ivec4"),SD=new tr("uvec4"),bD=new tr("bvec4"),y0=new tr("mat2"),Wr=new tr("mat3"),Rh=new tr("mat4"),w7=(a="")=>Qe(new ba(a,"string")),A7=a=>Qe(new ba(a,"ArrayBuffer"));Je("toColor",gD);Je("toFloat",te);Je("toInt",pe);Je("toUint",Kt);Je("toBool",xa);Je("toVec2",nt);Je("toIVec2",rr);Je("toUVec2",_D);Je("toBVec2",xD);Je("toVec3",xe);Je("toIVec3",yD);Je("toUVec3",vp);Je("toBVec3",eA);Je("toVec4",tn);Je("toIVec4",vD);Je("toUVec4",SD);Je("toBVec4",bD);Je("toMat2",y0);Je("toMat3",Wr);Je("toMat4",Rh);const TD=Wn(au).setParameterLength(2),MD=(a,e)=>Qe(new Zw(Qe(a),e)),E7=(a,e)=>Qe(new uv(Qe(a),e));Je("element",TD);Je("convert",MD);const R7=a=>(console.warn("THREE.TSL: append() has been renamed to Stack()."),x0(a));Je("append",a=>(console.warn("THREE.TSL: .append() has been renamed to .toStack()."),x0(a)));class Xi extends Pn{static get type(){return"PropertyNode"}constructor(e,t=null,i=!1){super(e),this.name=t,this.varying=i,this.isPropertyNode=!0,this.global=!0}getHash(e){return this.name||super.getHash(e)}generate(e){let t;return this.varying===!0?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}}const Va=(a,e)=>Qe(new Xi(a,e)),ko=(a,e)=>Qe(new Xi(a,e,!0)),zi=Vt(Xi,"vec4","DiffuseColor"),mM=Vt(Xi,"vec3","EmissiveColor"),cl=Vt(Xi,"float","Roughness"),vg=Vt(Xi,"float","Metalness"),hv=Vt(Xi,"float","Clearcoat"),Sg=Vt(Xi,"float","ClearcoatRoughness"),Sh=Vt(Xi,"vec3","Sheen"),v0=Vt(Xi,"float","SheenRoughness"),S0=Vt(Xi,"float","Iridescence"),tA=Vt(Xi,"float","IridescenceIOR"),nA=Vt(Xi,"float","IridescenceThickness"),dv=Vt(Xi,"float","AlphaT"),Oc=Vt(Xi,"float","Anisotropy"),Zm=Vt(Xi,"vec3","AnisotropyT"),Ch=Vt(Xi,"vec3","AnisotropyB"),vo=Vt(Xi,"color","SpecularColor"),bg=Vt(Xi,"float","SpecularF90"),fv=Vt(Xi,"float","Shininess"),Of=Vt(Xi,"vec4","Output"),Nh=Vt(Xi,"float","dashSize"),Tg=Vt(Xi,"float","gapSize"),C7=Vt(Xi,"float","pointWidth"),Km=Vt(Xi,"float","IOR"),pv=Vt(Xi,"float","Transmission"),iA=Vt(Xi,"float","Thickness"),sA=Vt(Xi,"float","AttenuationDistance"),rA=Vt(Xi,"color","AttenuationColor"),oA=Vt(Xi,"float","Dispersion");class aA extends Pn{static get type(){return"UniformGroupNode"}constructor(e,t=!1,i=1){super("string"),this.name=e,this.shared=t,this.order=i,this.isUniformGroup=!0}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}}const wD=a=>new aA(a),b0=(a,e=0)=>new aA(a,!0,e),AD=b0("frame"),On=b0("render"),lA=wD("object");class Sp extends Kw{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=lA}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const i=this.getSelf();return e=e.bind(i),super.onUpdate(s=>{const r=e(s,i);r!==void 0&&(this.value=r)},t)}getInputType(e){let t=super.getInputType(e);return t==="bool"&&(t="uint"),t}generate(e,t){const i=this.getNodeType(e),s=this.getUniformHash(e);let r=e.getNodeFromHash(s);r===void 0&&(e.setHashNode(this,s),r=this);const l=r.getInputType(e),u=e.getUniformFromNode(r,l,e.shaderStage,this.name||e.context.nodeName),d=e.getPropertyName(u);e.context.nodeName!==void 0&&delete e.context.nodeName;let f=d;if(i==="bool"){const g=e.getDataFromNode(this);let x=g.propertyName;if(x===void 0){const v=e.getVarFromNode(this,null,"bool");x=e.getPropertyName(v),g.propertyName=x,f=e.format(d,l,i),e.addLineFlowCode(`${x} = ${f}`,this)}f=x}return e.format(f,i,t)}}const wn=(a,e)=>{const t=mD(e||a),i=a&&a.isNode===!0?a.node&&a.node.value||a.value:a;return Qe(new Sp(i,t))};class gM extends $s{static get type(){return"ArrayNode"}constructor(e,t,i=null){super(e),this.count=t,this.values=i,this.isArrayNode=!0}getArrayCount(){return this.count}getNodeType(e){return this.nodeType===null&&(this.nodeType=this.values[0].getNodeType(e)),this.nodeType}getElementType(e){return this.getNodeType(e)}generate(e){const t=this.getNodeType(e);return e.generateArray(t,this.count,this.values)}}const ED=(...a)=>{let e;if(a.length===1){const t=a[0];e=new gM(null,t.length,t)}else{const t=a[0],i=a[1];e=new gM(t,i)}return Qe(e)};Je("toArray",(a,e)=>ED(Array(e).fill(a)));class RD extends $s{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t,this.isAssignNode=!0}hasDependencies(){return!1}getNodeType(e,t){return t!=="void"?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(e.isAvailable("swizzleAssign")===!1&&t.isSplitNode&&t.components.length>1){const i=e.getTypeLength(t.node.getNodeType(e));return ou.join("").slice(0,i)!==t.components}return!1}setup(e){const{targetNode:t,sourceNode:i}=this,s=e.getNodeProperties(t);s.assign=!0;const r=e.getNodeProperties(this);r.sourceNode=i,r.targetNode=t.context({assign:!0})}generate(e,t){const{targetNode:i,sourceNode:s}=e.getNodeProperties(this),r=this.needsSplitAssign(e),l=i.getNodeType(e),u=i.build(e),d=s.build(e,l),f=s.getNodeType(e),g=e.getDataFromNode(this);let x;if(g.initialized===!0)t!=="void"&&(x=u);else if(r){const v=e.getVarFromNode(this,null,l),S=e.getPropertyName(v);e.addLineFlowCode(`${S} = ${d}`,this);const T=i.node,A=T.node.context({assign:!0}).build(e);for(let w=0;w<T.components.length;w++){const O=T.components[w];e.addLineFlowCode(`${A}.${O} = ${S}[ ${w} ]`,this)}t!=="void"&&(x=u)}else x=`${u} = ${d}`,(t==="void"||f==="void")&&(e.addLineFlowCode(x,this),t!=="void"&&(x=u));return g.initialized=!0,e.format(x,l,t)}}const CD=Wn(RD).setParameterLength(2);Je("assign",CD);class ND extends $s{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}generate(e){const t=[],i=this.functionNode,s=i.getInputs(e),r=this.parameters,l=(d,f)=>{const g=f.type,x=g==="pointer";let v;return x?v="&"+d.build(e):v=d.build(e,g),v};if(Array.isArray(r)){if(r.length>s.length)console.error("THREE.TSL: The number of provided parameters exceeds the expected number of inputs in 'Fn()'."),r.length=s.length;else if(r.length<s.length)for(console.error("THREE.TSL: The number of provided parameters is less than the expected number of inputs in 'Fn()'.");r.length<s.length;)r.push(te(0));for(let d=0;d<r.length;d++)t.push(l(r[d],s[d]))}else for(const d of s){const f=r[d.name];f!==void 0?t.push(l(f,d)):(console.error(`THREE.TSL: Input '${d.name}' not found in 'Fn()'.`),t.push(l(te(0),d)))}return`${i.build(e,"property")}( ${t.join(", ")} )`}}const PD=(a,...e)=>(e=e.length>1||e[0]&&e[0].isNode===!0?Eh(e):Xg(e[0]),Qe(new ND(Qe(a),e)));Je("call",PD);const N7={"==":"equal","!=":"notEqual","<":"lessThan",">":"greaterThan","<=":"lessThanEqual",">=":"greaterThanEqual","%":"mod"};class Ms extends $s{static get type(){return"OperatorNode"}constructor(e,t,i,...s){if(super(),s.length>0){let r=new Ms(e,t,i);for(let l=0;l<s.length-1;l++)r=new Ms(e,r,s[l]);t=r,i=s[s.length-1]}this.op=e,this.aNode=t,this.bNode=i,this.isOperatorNode=!0}getOperatorMethod(e,t){return e.getMethod(N7[this.op],t)}getNodeType(e){const t=this.op,i=this.aNode,s=this.bNode,r=i.getNodeType(e),l=s?s.getNodeType(e):null;if(r==="void"||l==="void")return"void";if(t==="%")return r;if(t==="~"||t==="&"||t==="|"||t==="^"||t===">>"||t==="<<")return e.getIntegerType(r);if(t==="!"||t==="&&"||t==="||"||t==="^^")return"bool";if(t==="=="||t==="!="||t==="<"||t===">"||t==="<="||t===">="){const u=Math.max(e.getTypeLength(r),e.getTypeLength(l));return u>1?`bvec${u}`:"bool"}else{if(e.isMatrix(r)){if(l==="float")return r;if(e.isVector(l))return e.getVectorFromMatrix(r);if(e.isMatrix(l))return r}else if(e.isMatrix(l)){if(r==="float")return l;if(e.isVector(r))return e.getVectorFromMatrix(l)}return e.getTypeLength(l)>e.getTypeLength(r)?l:r}}generate(e,t){const i=this.op,{aNode:s,bNode:r}=this,l=this.getNodeType(e);let u=null,d=null;l!=="void"?(u=s.getNodeType(e),d=r?r.getNodeType(e):null,i==="<"||i===">"||i==="<="||i===">="||i==="=="||i==="!="?e.isVector(u)?d=u:e.isVector(d)?u=d:u!==d&&(u=d="float"):i===">>"||i==="<<"?(u=l,d=e.changeComponentType(d,"uint")):i==="%"?(u=l,d=e.isInteger(u)&&e.isInteger(d)?d:u):e.isMatrix(u)?d==="float"?d="float":e.isVector(d)?d=e.getVectorFromMatrix(u):e.isMatrix(d)||(u=d=l):e.isMatrix(d)?u==="float"?u="float":e.isVector(u)?u=e.getVectorFromMatrix(d):u=d=l:u=d=l):u=d=l;const f=s.build(e,u),g=r?r.build(e,d):null,x=e.getFunctionOperator(i);if(t!=="void"){const v=e.renderer.coordinateSystem===xr;if(i==="=="||i==="!="||i==="<"||i===">"||i==="<="||i===">=")return v?e.isVector(u)?e.format(`${this.getOperatorMethod(e,t)}( ${f}, ${g} )`,l,t):e.format(`( ${f} ${i} ${g} )`,l,t):e.format(`( ${f} ${i} ${g} )`,l,t);if(i==="%")return e.isInteger(d)?e.format(`( ${f} % ${g} )`,l,t):e.format(`${this.getOperatorMethod(e,l)}( ${f}, ${g} )`,l,t);if(i==="!"||i==="~")return e.format(`(${i}${f})`,u,t);if(x)return e.format(`${x}( ${f}, ${g} )`,l,t);if(e.isMatrix(u)&&d==="float")return e.format(`( ${g} ${i} ${f} )`,l,t);if(u==="float"&&e.isMatrix(d))return e.format(`${f} ${i} ${g}`,l,t);{let S=`( ${f} ${i} ${g} )`;return!v&&l==="bool"&&e.isVector(u)&&e.isVector(d)&&(S=`all${S}`),e.format(S,l,t)}}else if(u!=="void")return x?e.format(`${x}( ${f}, ${g} )`,l,t):e.isMatrix(u)&&d==="float"?e.format(`${g} ${i} ${f}`,l,t):e.format(`${f} ${i} ${g}`,l,t)}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}const Ws=on(Ms,"+").setParameterLength(2,1/0).setName("add"),Mi=on(Ms,"-").setParameterLength(2,1/0).setName("sub"),ri=on(Ms,"*").setParameterLength(2,1/0).setName("mul"),Zo=on(Ms,"/").setParameterLength(2,1/0).setName("div"),qg=on(Ms,"%").setParameterLength(2).setName("mod"),cA=on(Ms,"==").setParameterLength(2).setName("equal"),ID=on(Ms,"!=").setParameterLength(2).setName("notEqual"),LD=on(Ms,"<").setParameterLength(2).setName("lessThan"),uA=on(Ms,">").setParameterLength(2).setName("greaterThan"),DD=on(Ms,"<=").setParameterLength(2).setName("lessThanEqual"),UD=on(Ms,">=").setParameterLength(2).setName("greaterThanEqual"),FD=on(Ms,"&&").setParameterLength(2,1/0).setName("and"),BD=on(Ms,"||").setParameterLength(2,1/0).setName("or"),OD=on(Ms,"!").setParameterLength(1).setName("not"),VD=on(Ms,"^^").setParameterLength(2).setName("xor"),zD=on(Ms,"&").setParameterLength(2).setName("bitAnd"),kD=on(Ms,"~").setParameterLength(2).setName("bitNot"),GD=on(Ms,"|").setParameterLength(2).setName("bitOr"),HD=on(Ms,"^").setParameterLength(2).setName("bitXor"),WD=on(Ms,"<<").setParameterLength(2).setName("shiftLeft"),$D=on(Ms,">>").setParameterLength(2).setName("shiftRight"),XD=be(([a])=>(a.addAssign(1),a)),qD=be(([a])=>(a.subAssign(1),a)),YD=be(([a])=>{const e=pe(a).toConst();return a.addAssign(1),e}),ZD=be(([a])=>{const e=pe(a).toConst();return a.subAssign(1),e});Je("add",Ws);Je("sub",Mi);Je("mul",ri);Je("div",Zo);Je("mod",qg);Je("equal",cA);Je("notEqual",ID);Je("lessThan",LD);Je("greaterThan",uA);Je("lessThanEqual",DD);Je("greaterThanEqual",UD);Je("and",FD);Je("or",BD);Je("not",OD);Je("xor",VD);Je("bitAnd",zD);Je("bitNot",kD);Je("bitOr",GD);Je("bitXor",HD);Je("shiftLeft",WD);Je("shiftRight",$D);Je("incrementBefore",XD);Je("decrementBefore",qD);Je("increment",YD);Je("decrement",ZD);const KD=(a,e)=>(console.warn('THREE.TSL: "modInt()" is deprecated. Use "mod( int( ... ) )" instead.'),qg(pe(a),pe(e)));Je("modInt",KD);class Ae extends $s{static get type(){return"MathNode"}constructor(e,t,i=null,s=null){if(super(),(e===Ae.MAX||e===Ae.MIN)&&arguments.length>3){let r=new Ae(e,t,i);for(let l=2;l<arguments.length-1;l++)r=new Ae(e,r,arguments[l]);t=r,i=arguments[arguments.length-1],s=null}this.method=e,this.aNode=t,this.bNode=i,this.cNode=s,this.isMathNode=!0}getInputType(e){const t=this.aNode.getNodeType(e),i=this.bNode?this.bNode.getNodeType(e):null,s=this.cNode?this.cNode.getNodeType(e):null,r=e.isMatrix(t)?0:e.getTypeLength(t),l=e.isMatrix(i)?0:e.getTypeLength(i),u=e.isMatrix(s)?0:e.getTypeLength(s);return r>l&&r>u?t:l>u?i:u>r?s:t}getNodeType(e){const t=this.method;return t===Ae.LENGTH||t===Ae.DISTANCE||t===Ae.DOT?"float":t===Ae.CROSS?"vec3":t===Ae.ALL||t===Ae.ANY?"bool":t===Ae.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):this.getInputType(e)}setup(e){const{aNode:t,bNode:i,method:s}=this;let r=null;if(s===Ae.ONE_MINUS)r=Mi(1,t);else if(s===Ae.RECIPROCAL)r=Zo(1,t);else if(s===Ae.DIFFERENCE)r=ms(Mi(t,i));else if(s===Ae.TRANSFORM_DIRECTION){let l=t,u=i;e.isMatrix(l.getNodeType(e))?u=tn(xe(u),0):l=tn(xe(l),0);const d=ri(l,u).xyz;r=rc(d)}return r!==null?r:super.setup(e)}generate(e,t){if(e.getNodeProperties(this).outputNode)return super.generate(e,t);let s=this.method;const r=this.getNodeType(e),l=this.getInputType(e),u=this.aNode,d=this.bNode,f=this.cNode,g=e.renderer.coordinateSystem;if(s===Ae.NEGATE)return e.format("( - "+u.build(e,l)+" )",r,t);{const x=[];return s===Ae.CROSS?x.push(u.build(e,r),d.build(e,r)):g===xr&&s===Ae.STEP?x.push(u.build(e,e.getTypeLength(u.getNodeType(e))===1?"float":l),d.build(e,l)):g===xr&&(s===Ae.MIN||s===Ae.MAX)?x.push(u.build(e,l),d.build(e,e.getTypeLength(d.getNodeType(e))===1?"float":l)):s===Ae.REFRACT?x.push(u.build(e,l),d.build(e,l),f.build(e,"float")):s===Ae.MIX?x.push(u.build(e,l),d.build(e,l),f.build(e,e.getTypeLength(f.getNodeType(e))===1?"float":l)):(g===_a&&s===Ae.ATAN&&d!==null&&(s="atan2"),e.shaderStage!=="fragment"&&(s===Ae.DFDX||s===Ae.DFDY)&&(console.warn(`THREE.TSL: '${s}' is not supported in the ${e.shaderStage} stage.`),s="/*"+s+"*/"),x.push(u.build(e,l)),d!==null&&x.push(d.build(e,l)),f!==null&&x.push(f.build(e,l))),e.format(`${e.getMethod(s,r)}( ${x.join(", ")} )`,r,t)}}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}}Ae.ALL="all";Ae.ANY="any";Ae.RADIANS="radians";Ae.DEGREES="degrees";Ae.EXP="exp";Ae.EXP2="exp2";Ae.LOG="log";Ae.LOG2="log2";Ae.SQRT="sqrt";Ae.INVERSE_SQRT="inversesqrt";Ae.FLOOR="floor";Ae.CEIL="ceil";Ae.NORMALIZE="normalize";Ae.FRACT="fract";Ae.SIN="sin";Ae.COS="cos";Ae.TAN="tan";Ae.ASIN="asin";Ae.ACOS="acos";Ae.ATAN="atan";Ae.ABS="abs";Ae.SIGN="sign";Ae.LENGTH="length";Ae.NEGATE="negate";Ae.ONE_MINUS="oneMinus";Ae.DFDX="dFdx";Ae.DFDY="dFdy";Ae.ROUND="round";Ae.RECIPROCAL="reciprocal";Ae.TRUNC="trunc";Ae.FWIDTH="fwidth";Ae.TRANSPOSE="transpose";Ae.DETERMINANT="determinant";Ae.INVERSE="inverse";Ae.BITCAST="bitcast";Ae.EQUALS="equals";Ae.MIN="min";Ae.MAX="max";Ae.STEP="step";Ae.REFLECT="reflect";Ae.DISTANCE="distance";Ae.DIFFERENCE="difference";Ae.DOT="dot";Ae.CROSS="cross";Ae.POW="pow";Ae.TRANSFORM_DIRECTION="transformDirection";Ae.MIX="mix";Ae.CLAMP="clamp";Ae.REFRACT="refract";Ae.SMOOTHSTEP="smoothstep";Ae.FACEFORWARD="faceforward";const JD=te(1e-6),P7=te(1e6),mv=te(Math.PI),I7=te(Math.PI*2),jD=on(Ae,Ae.ALL).setParameterLength(1),QD=on(Ae,Ae.ANY).setParameterLength(1),e2=on(Ae,Ae.RADIANS).setParameterLength(1),t2=on(Ae,Ae.DEGREES).setParameterLength(1),hA=on(Ae,Ae.EXP).setParameterLength(1),ap=on(Ae,Ae.EXP2).setParameterLength(1),T0=on(Ae,Ae.LOG).setParameterLength(1),dl=on(Ae,Ae.LOG2).setParameterLength(1),xl=on(Ae,Ae.SQRT).setParameterLength(1),dA=on(Ae,Ae.INVERSE_SQRT).setParameterLength(1),fl=on(Ae,Ae.FLOOR).setParameterLength(1),M0=on(Ae,Ae.CEIL).setParameterLength(1),rc=on(Ae,Ae.NORMALIZE).setParameterLength(1),uc=on(Ae,Ae.FRACT).setParameterLength(1),Ho=on(Ae,Ae.SIN).setParameterLength(1),Gl=on(Ae,Ae.COS).setParameterLength(1),n2=on(Ae,Ae.TAN).setParameterLength(1),i2=on(Ae,Ae.ASIN).setParameterLength(1),fA=on(Ae,Ae.ACOS).setParameterLength(1),w0=on(Ae,Ae.ATAN).setParameterLength(1,2),ms=on(Ae,Ae.ABS).setParameterLength(1),Mg=on(Ae,Ae.SIGN).setParameterLength(1),pl=on(Ae,Ae.LENGTH).setParameterLength(1),s2=on(Ae,Ae.NEGATE).setParameterLength(1),r2=on(Ae,Ae.ONE_MINUS).setParameterLength(1),pA=on(Ae,Ae.DFDX).setParameterLength(1),mA=on(Ae,Ae.DFDY).setParameterLength(1),o2=on(Ae,Ae.ROUND).setParameterLength(1),a2=on(Ae,Ae.RECIPROCAL).setParameterLength(1),gA=on(Ae,Ae.TRUNC).setParameterLength(1),l2=on(Ae,Ae.FWIDTH).setParameterLength(1),c2=on(Ae,Ae.TRANSPOSE).setParameterLength(1),u2=on(Ae,Ae.DETERMINANT).setParameterLength(1),h2=on(Ae,Ae.INVERSE).setParameterLength(1),L7=on(Ae,Ae.BITCAST).setParameterLength(2),d2=(a,e)=>(console.warn('THREE.TSL: "equals" is deprecated. Use "equal" inside a vector instead, like: "bvec*( equal( ... ) )"'),cA(a,e)),Co=on(Ae,Ae.MIN).setParameterLength(2,1/0),Ns=on(Ae,Ae.MAX).setParameterLength(2,1/0),A0=on(Ae,Ae.STEP).setParameterLength(2),f2=on(Ae,Ae.REFLECT).setParameterLength(2),p2=on(Ae,Ae.DISTANCE).setParameterLength(2),m2=on(Ae,Ae.DIFFERENCE).setParameterLength(2),lu=on(Ae,Ae.DOT).setParameterLength(2),E0=on(Ae,Ae.CROSS).setParameterLength(2),ha=on(Ae,Ae.POW).setParameterLength(2),_A=on(Ae,Ae.POW,2).setParameterLength(1),g2=on(Ae,Ae.POW,3).setParameterLength(1),_2=on(Ae,Ae.POW,4).setParameterLength(1),x2=on(Ae,Ae.TRANSFORM_DIRECTION).setParameterLength(2),y2=a=>ri(Mg(a),ha(ms(a),1/3)),xA=a=>lu(a,a),Ri=on(Ae,Ae.MIX).setParameterLength(3),ya=(a,e=0,t=1)=>Qe(new Ae(Ae.CLAMP,Qe(a),Qe(e),Qe(t))),yA=a=>ya(a),vA=on(Ae,Ae.REFRACT).setParameterLength(3),va=on(Ae,Ae.SMOOTHSTEP).setParameterLength(3),SA=on(Ae,Ae.FACEFORWARD).setParameterLength(3),v2=be(([a])=>{const i=43758.5453,s=lu(a.xy,nt(12.9898,78.233)),r=qg(s,mv);return uc(Ho(r).mul(i))}),S2=(a,e,t)=>Ri(e,t,a),b2=(a,e,t)=>va(e,t,a),T2=(a,e)=>A0(e,a),M2=(a,e)=>(console.warn('THREE.TSL: "atan2" is overloaded. Use "atan" instead.'),w0(a,e)),D7=SA,U7=dA;Je("all",jD);Je("any",QD);Je("equals",d2);Je("radians",e2);Je("degrees",t2);Je("exp",hA);Je("exp2",ap);Je("log",T0);Je("log2",dl);Je("sqrt",xl);Je("inverseSqrt",dA);Je("floor",fl);Je("ceil",M0);Je("normalize",rc);Je("fract",uc);Je("sin",Ho);Je("cos",Gl);Je("tan",n2);Je("asin",i2);Je("acos",fA);Je("atan",w0);Je("abs",ms);Je("sign",Mg);Je("length",pl);Je("lengthSq",xA);Je("negate",s2);Je("oneMinus",r2);Je("dFdx",pA);Je("dFdy",mA);Je("round",o2);Je("reciprocal",a2);Je("trunc",gA);Je("fwidth",l2);Je("atan2",M2);Je("min",Co);Je("max",Ns);Je("step",T2);Je("reflect",f2);Je("distance",p2);Je("dot",lu);Je("cross",E0);Je("pow",ha);Je("pow2",_A);Je("pow3",g2);Je("pow4",_2);Je("transformDirection",x2);Je("mix",S2);Je("clamp",ya);Je("refract",vA);Je("smoothstep",b2);Je("faceForward",SA);Je("difference",m2);Je("saturate",yA);Je("cbrt",y2);Je("transpose",c2);Je("determinant",u2);Je("inverse",h2);Je("rand",v2);class F7 extends Pn{static get type(){return"ConditionalNode"}constructor(e,t,i=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=i}getNodeType(e){const{ifNode:t,elseNode:i}=e.getNodeProperties(this);if(t===void 0)return e.flowBuildStage(this,"setup"),this.getNodeType(e);const s=t.getNodeType(e);if(i!==null){const r=i.getNodeType(e);if(e.getTypeLength(r)>e.getTypeLength(s))return r}return s}setup(e){const t=this.condNode.cache(),i=this.ifNode.cache(),s=this.elseNode?this.elseNode.cache():null,r=e.context.nodeBlock;e.getDataFromNode(i).parentNodeBlock=r,s!==null&&(e.getDataFromNode(s).parentNodeBlock=r);const l=e.getNodeProperties(this);l.condNode=t,l.ifNode=i.context({nodeBlock:i}),l.elseNode=s?s.context({nodeBlock:s}):null}generate(e,t){const i=this.getNodeType(e),s=e.getDataFromNode(this);if(s.nodeProperty!==void 0)return s.nodeProperty;const{condNode:r,ifNode:l,elseNode:u}=e.getNodeProperties(this),d=e.currentFunctionNode,f=t!=="void",g=f?Va(i).build(e):"";s.nodeProperty=g;const x=r.build(e,"bool");e.addFlowCode(`
${e.tab}if ( ${x} ) {

`).addFlowTab();let v=l.build(e,i);if(v&&(f?v=g+" = "+v+";":(v="return "+v+";",d===null&&(console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values."),v="// "+v))),e.removeFlowTab().addFlowCode(e.tab+"	"+v+`

`+e.tab+"}"),u!==null){e.addFlowCode(` else {

`).addFlowTab();let S=u.build(e,i);S&&(f?S=g+" = "+S+";":(S="return "+S+";",d===null&&(console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values."),S="// "+S))),e.removeFlowTab().addFlowCode(e.tab+"	"+S+`

`+e.tab+`}

`)}else e.addFlowCode(`

`);return e.format(g,i,t)}}const vr=Wn(F7).setParameterLength(2,3);Je("select",vr);class bA extends Pn{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}analyze(e){const t=e.getContext();e.setContext({...e.context,...this.value}),this.node.build(e),e.setContext(t)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value}),this.node.build(e),e.setContext(t)}generate(e,t){const i=e.getContext();e.setContext({...e.context,...this.value});const s=this.node.build(e,t);return e.setContext(i),s}}const R0=Wn(bA).setParameterLength(1,2),TA=(a,e)=>R0(a,{nodeName:e});function w2(a,e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),TA(a,e)}Je("context",R0);Je("label",w2);Je("setName",TA);class Jm extends Pn{static get type(){return"VarNode"}constructor(e,t=null,i=!1){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0,this.readOnly=i,this.parents=!0,this.intent=!1}setIntent(e){return this.intent=e,this}getIntent(){return this.intent}getMemberType(e,t){return this.node.getMemberType(e,t)}getElementType(e){return this.node.getElementType(e)}getNodeType(e){return this.node.getNodeType(e)}getArrayCount(e){return this.node.getArrayCount(e)}build(...e){return this.intent===!0&&e[0].getNodeProperties(this).assign!==!0?this.node.build(...e):super.build(...e)}generate(e){const{node:t,name:i,readOnly:s}=this,{renderer:r}=e,l=r.backend.isWebGPUBackend===!0;let u=!1,d=!1;s&&(u=e.isDeterministic(t),d=l?s:u);const f=e.getVectorType(this.getNodeType(e)),g=t.build(e,f),x=e.getVarFromNode(this,i,f,void 0,d),v=e.getPropertyName(x);let S=v;if(d)if(l)S=u?`const ${v}`:`let ${v}`;else{const T=t.getArrayCount(e);S=`const ${e.getVar(x.type,v,T)}`}return e.addLineFlowCode(`${S} = ${g}`,this),v}}const C0=Wn(Jm),A2=(a,e=null)=>C0(a,e).toStack(),E2=(a,e=null)=>C0(a,e,!0).toStack(),R2=a=>_0()===null?a:C0(a).setIntent(!0).toStack();Je("toVar",A2);Je("toConst",E2);Je("toVarIntent",R2);const C2=a=>(console.warn('TSL: "temp( node )" is deprecated. Use "Var( node )" or "node.toVar()" instead.'),C0(a));Je("temp",C2);class N2 extends Pn{static get type(){return"SubBuild"}constructor(e,t,i=null){super(i),this.node=e,this.name=t,this.isSubBuildNode=!0}getNodeType(e){if(this.nodeType!==null)return this.nodeType;e.addSubBuild(this.name);const t=this.node.getNodeType(e);return e.removeSubBuild(),t}build(e,...t){e.addSubBuild(this.name);const i=this.node.build(e,...t);return e.removeSubBuild(),i}}const Vf=(a,e,t=null)=>Qe(new N2(Qe(a),e,t));class P2 extends Pn{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0,this.interpolationType=null,this.interpolationSampling=null,this.global=!0}setInterpolation(e,t=null){return this.interpolationType=e,this.interpolationSampling=t,this}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const t=e.getNodeProperties(this);let i=t.varying;if(i===void 0){const s=this.name,r=this.getNodeType(e),l=this.interpolationType,u=this.interpolationSampling;t.varying=i=e.getVaryingFromNode(this,s,r,l,u),t.node=Vf(this.node,"VERTEX")}return i.needsInterpolation||(i.needsInterpolation=e.shaderStage==="fragment"),i}setup(e){this.setupVarying(e),e.flowNodeFromShaderStage(If.VERTEX,this.node)}analyze(e){this.setupVarying(e),e.flowNodeFromShaderStage(If.VERTEX,this.node)}generate(e){const t=e.getSubBuildProperty("property",e.currentStack),i=e.getNodeProperties(this),s=this.setupVarying(e);if(i[t]===void 0){const r=this.getNodeType(e),l=e.getPropertyName(s,If.VERTEX);e.flowNodeFromShaderStage(If.VERTEX,i.node,r,l),i[t]=l}return e.getPropertyName(s)}}const yl=Wn(P2).setParameterLength(1,2),I2=a=>yl(a);Je("toVarying",yl);Je("toVertexStage",I2);Je("varying",(...a)=>(console.warn("THREE.TSL: .varying() has been renamed to .toVarying()."),yl(...a)));Je("vertexStage",(...a)=>(console.warn("THREE.TSL: .vertexStage() has been renamed to .toVertexStage()."),yl(...a)));const L2=be(([a])=>{const e=a.mul(.9478672986).add(.0521327014).pow(2.4),t=a.mul(.0773993808),i=a.lessThanEqual(.04045);return Ri(e,t,i)}).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),D2=be(([a])=>{const e=a.pow(.41666).mul(1.055).sub(.055),t=a.mul(12.92),i=a.lessThanEqual(.0031308);return Ri(e,t,i)}).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),MA="WorkingColorSpace",B7="OutputColorSpace";class N0 extends $s{static get type(){return"ColorSpaceNode"}constructor(e,t,i){super("vec4"),this.colorNode=e,this.source=t,this.target=i}resolveColorSpace(e,t){return t===MA?zn.workingColorSpace:t===B7?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:t}=this,i=this.resolveColorSpace(e,this.source),s=this.resolveColorSpace(e,this.target);let r=t;return zn.enabled===!1||i===s||!i||!s||(zn.getTransfer(i)===un&&(r=tn(L2(r.rgb),r.a)),zn.getPrimaries(i)!==zn.getPrimaries(s)&&(r=tn(Wr(zn._getMatrix(new ni,i,s)).mul(r.rgb),r.a)),zn.getTransfer(s)===un&&(r=tn(D2(r.rgb),r.a))),r}}const U2=(a,e)=>Qe(new N0(Qe(a),MA,e)),P0=(a,e)=>Qe(new N0(Qe(a),e,MA)),O7=(a,e,t)=>Qe(new N0(Qe(a),e,t));Je("workingToColorSpace",U2);Je("colorSpaceToWorking",P0);let V7=class extends au{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),i=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,i,s)}};class F2 extends Pn{static get type(){return"ReferenceBaseNode"}constructor(e,t,i=null,s=null){super(),this.property=e,this.uniformType=t,this.object=i,this.count=s,this.properties=e.split("."),this.reference=i,this.node=null,this.group=null,this.updateType=ii.OBJECT}setGroup(e){return this.group=e,this}element(e){return Qe(new V7(this,Qe(e)))}setNodeType(e){const t=wn(null,e).getSelf();this.group!==null&&t.setGroup(this.group),this.node=t}getNodeType(e){return this.node===null&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let i=e[t[0]];for(let s=1;s<t.length;s++)i=i[t[s]];return i}updateReference(e){return this.reference=this.object!==null?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const z7=(a,e,t)=>Qe(new F2(a,e,t));class B2 extends F2{static get type(){return"RendererReferenceNode"}constructor(e,t,i=null){super(e,t,i),this.renderer=i,this.setGroup(On)}updateReference(e){return this.reference=this.renderer!==null?this.renderer:e.renderer,this.reference}}const O2=(a,e,t=null)=>Qe(new B2(a,e,t));class V2 extends $s{static get type(){return"ToneMappingNode"}constructor(e,t=k2,i=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=i}customCacheKey(){return mg(this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,i=this.toneMapping;if(i===Nr)return t;let s=null;const r=e.renderer.library.getToneMappingFunction(i);return r!==null?s=tn(r(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",i),s=t),s}}const z2=(a,e,t)=>Qe(new V2(a,Qe(e),Qe(t))),k2=O2("toneMappingExposure","float");Je("toneMapping",(a,e,t)=>z2(e,t,a));class G2 extends Kw{static get type(){return"BufferAttributeNode"}constructor(e,t=null,i=0,s=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=i,this.bufferOffset=s,this.usage=sp,this.instanced=!1,this.attribute=null,this.global=!0,e&&e.isBufferAttribute===!0&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(this.bufferStride===0&&this.bufferOffset===0){let t=e.globalCache.getData(this.value);return t===void 0&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return this.bufferType===null&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(this.attribute!==null)return;const t=this.getNodeType(e),i=this.value,s=e.getTypeLength(t),r=this.bufferStride||s,l=this.bufferOffset,u=i.isInterleavedBuffer===!0?i:new Fg(i,r),d=new jc(u,s,l);u.setUsage(this.usage),this.attribute=d,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const t=this.getNodeType(e),i=e.getBufferAttributeFromNode(this,t),s=e.getPropertyName(i);let r=null;return e.shaderStage==="vertex"||e.shaderStage==="compute"?(this.name=s,r=s):r=yl(this).build(e,t),r}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&this.attribute.isBufferAttribute===!0&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}}const Yg=(a,e=null,t=0,i=0)=>Qe(new G2(a,e,t,i)),H2=(a,e=null,t=0,i=0)=>Yg(a,e,t,i).setUsage(yh),gv=(a,e=null,t=0,i=0)=>Yg(a,e,t,i).setInstanced(!0),_M=(a,e=null,t=0,i=0)=>H2(a,e,t,i).setInstanced(!0);Je("toAttribute",a=>Yg(a.value));class W2 extends Pn{static get type(){return"ComputeNode"}constructor(e,t){super("void"),this.isComputeNode=!0,this.computeNode=e,this.workgroupSize=t,this.count=null,this.version=1,this.name="",this.updateBeforeType=ii.OBJECT,this.onInitFunction=null}setCount(e){return this.count=e,this}getCount(){return this.count}dispose(){this.dispatchEvent({type:"dispose"})}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}setup(e){const t=this.computeNode.build(e);if(t){const i=e.getNodeProperties(this);i.outputComputeNode=t.outputNode,t.outputNode=null}return t}generate(e,t){const{shaderStage:i}=e;if(i==="compute"){const s=this.computeNode.build(e,"void");s!==""&&e.addLineFlowCode(s,this)}else{const r=e.getNodeProperties(this).outputComputeNode;if(r)return r.build(e,t)}}}const wA=(a,e=[64])=>{(e.length===0||e.length>3)&&console.error("THREE.TSL: compute() workgroupSize must have 1, 2, or 3 elements");for(let t=0;t<e.length;t++){const i=e[t];(typeof i!="number"||i<=0||!Number.isInteger(i))&&console.error(`THREE.TSL: compute() workgroupSize element at index [ ${t} ] must be a positive integer`)}for(;e.length<3;)e.push(1);return Qe(new W2(Qe(a),e))},$2=(a,e,t)=>wA(a,t).setCount(e);Je("compute",$2);Je("computeKernel",wA);class X2 extends Pn{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){const t=e.getCache(),i=e.getCacheFromNode(this,this.parent);e.setCache(i);const s=this.node.getNodeType(e);return e.setCache(t),s}build(e,...t){const i=e.getCache(),s=e.getCacheFromNode(this,this.parent);e.setCache(s);const r=this.node.build(e,...t);return e.setCache(i),r}}const jm=(a,e)=>Qe(new X2(Qe(a),e));Je("cache",jm);class q2 extends Pn{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return t!==""&&e.addLineFlowCode(t,this),this.outputNode.build(e)}}const Y2=Wn(q2).setParameterLength(2);Je("bypass",Y2);class AA extends Pn{static get type(){return"RemapNode"}constructor(e,t,i,s=te(0),r=te(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=i,this.outLowNode=s,this.outHighNode=r,this.doClamp=!0}setup(){const{node:e,inLowNode:t,inHighNode:i,outLowNode:s,outHighNode:r,doClamp:l}=this;let u=e.sub(t).div(i.sub(t));return l===!0&&(u=u.clamp()),u.mul(r.sub(s)).add(s)}}const Z2=Wn(AA,null,null,{doClamp:!1}).setParameterLength(3,5),K2=Wn(AA).setParameterLength(3,5);Je("remap",Z2);Je("remapClamp",K2);class Qm extends Pn{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const i=this.getNodeType(e),s=this.snippet;if(i==="void")e.addLineFlowCode(s,this);else return e.format(s,i,t)}}const oc=Wn(Qm).setParameterLength(1,2),J2=a=>(a?vr(a,oc("discard")):oc("discard")).toStack(),k7=()=>oc("return").toStack();Je("discard",J2);class j2 extends $s{static get type(){return"RenderOutputNode"}constructor(e,t,i){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=i,this.isRenderOutputNode=!0}setup({context:e}){let t=this.colorNode||e.color;const i=(this.toneMapping!==null?this.toneMapping:e.toneMapping)||Nr,s=(this.outputColorSpace!==null?this.outputColorSpace:e.outputColorSpace)||no;return i!==Nr&&(t=t.toneMapping(i)),s!==no&&s!==zn.workingColorSpace&&(t=t.workingToColorSpace(s)),t}}const EA=(a,e=null,t=null)=>Qe(new j2(Qe(a),e,t));Je("renderOutput",EA);class Q2 extends $s{static get type(){return"DebugNode"}constructor(e,t=null){super(),this.node=e,this.callback=t}getNodeType(e){return this.node.getNodeType(e)}setup(e){return this.node.build(e)}analyze(e){return this.node.build(e)}generate(e){const t=this.callback,i=this.node.build(e),s="--- TSL debug - "+e.shaderStage+" shader ---",r="-".repeat(s.length);let l="";return l+="// #"+s+`#
`,l+=e.flow.code.replace(/^\t/mg,"")+`
`,l+="/* ... */ "+i+` /* ... */
`,l+="// #"+r+`#
`,t!==null?t(e,l):console.log(l),i}}const eU=(a,e=null)=>Qe(new Q2(Qe(a),e)).toStack();Je("debug",eU);function G7(a){console.warn("THREE.TSL: AddNodeElement has been removed in favor of tree-shaking. Trying add",a)}class RA extends Pn{static get type(){return"AttributeNode"}constructor(e,t=null){super(t),this.global=!0,this._attributeName=e}getHash(e){return this.getAttributeName(e)}getNodeType(e){let t=this.nodeType;if(t===null){const i=this.getAttributeName(e);if(e.hasGeometryAttribute(i)){const s=e.geometry.getAttribute(i);t=e.getTypeFromAttribute(s)}else t="float"}return t}setAttributeName(e){return this._attributeName=e,this}getAttributeName(){return this._attributeName}generate(e){const t=this.getAttributeName(e),i=this.getNodeType(e);if(e.hasGeometryAttribute(t)===!0){const r=e.geometry.getAttribute(t),l=e.getTypeFromAttribute(r),u=e.getAttribute(t,l);return e.shaderStage==="vertex"?e.format(u.name,l,i):yl(this).build(e,i)}else return console.warn(`AttributeNode: Vertex attribute "${t}" not found on geometry.`),e.generateConst(i)}serialize(e){super.serialize(e),e.global=this.global,e._attributeName=this._attributeName}deserialize(e){super.deserialize(e),this.global=e.global,this._attributeName=e._attributeName}}const to=(a,e=null)=>Qe(new RA(a,e)),is=(a=0)=>to("uv"+(a>0?a:""),"vec2");class tU extends Pn{static get type(){return"TextureSizeNode"}constructor(e,t=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=e,this.levelNode=t}generate(e,t){const i=this.textureNode.build(e,"property"),s=this.levelNode===null?"0":this.levelNode.build(e,"int");return e.format(`${e.getMethod("textureDimensions")}( ${i}, ${s} )`,this.getNodeType(e),t)}}const Yc=Wn(tU).setParameterLength(1,2);class nU extends Sp{static get type(){return"MaxMipLevelNode"}constructor(e){super(0),this._textureNode=e,this.updateType=ii.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const e=this.texture,t=e.images,i=t&&t.length>0?t[0]&&t[0].image||t[0]:e.image;if(i&&i.width!==void 0){const{width:s,height:r}=i;this.value=Math.log2(Math.max(s,r))}}}const CA=Wn(nU).setParameterLength(1),NA=new ds;class Ga extends Sp{static get type(){return"TextureNode"}constructor(e=NA,t=null,i=null,s=null){super(e),this.isTextureNode=!0,this.uvNode=t,this.levelNode=i,this.biasNode=s,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=ii.NONE,this.referenceNode=null,this._value=e,this._matrixUniform=null,this.setUpdateMatrix(t===null)}set value(e){this.referenceNode?this.referenceNode.value=e:this._value=e}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return this.value.isDepthTexture===!0?"float":this.value.type===rs?"uvec4":this.value.type===or?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return is(this.value.channel)}updateReference(){return this.value}getTransformedUV(e){return this._matrixUniform===null&&(this._matrixUniform=wn(this.value.matrix)),this._matrixUniform.mul(xe(e,1)).xy}setUpdateMatrix(e){return this.updateMatrix=e,this.updateType=e?ii.OBJECT:ii.NONE,this}setupUV(e,t){const i=this.value;return e.isFlipY()&&(i.image instanceof ImageBitmap&&i.flipY===!0||i.isRenderTargetTexture===!0||i.isFramebufferTexture===!0||i.isDepthTexture===!0)&&(this.sampler?t=t.flipY():t=t.setY(pe(Yc(this,this.levelNode).y).sub(t.y).sub(1))),t}setup(e){const t=e.getNodeProperties(this);t.referenceNode=this.referenceNode;const i=this.value;if(!i||i.isTexture!==!0)throw new Error("THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().");let s=this.uvNode;(s===null||e.context.forceUVContext===!0)&&e.context.getUV&&(s=e.context.getUV(this,e)),s||(s=this.getDefaultUV()),this.updateMatrix===!0&&(s=this.getTransformedUV(s)),s=this.setupUV(e,s);let r=this.levelNode;r===null&&e.context.getTextureLevel&&(r=e.context.getTextureLevel(this)),t.uvNode=s,t.levelNode=r,t.biasNode=this.biasNode,t.compareNode=this.compareNode,t.gradNode=this.gradNode,t.depthNode=this.depthNode}generateUV(e,t){return t.build(e,this.sampler===!0?"vec2":"ivec2")}generateSnippet(e,t,i,s,r,l,u,d){const f=this.value;let g;return s?g=e.generateTextureLevel(f,t,i,s,l):r?g=e.generateTextureBias(f,t,i,r,l):d?g=e.generateTextureGrad(f,t,i,d,l):u?g=e.generateTextureCompare(f,t,i,u,l):this.sampler===!1?g=e.generateTextureLoad(f,t,i,l):g=e.generateTexture(f,t,i,l),g}generate(e,t){const i=this.value,s=e.getNodeProperties(this),r=super.generate(e,"property");if(/^sampler/.test(t))return r+"_sampler";if(e.isReference(t))return r;{const l=e.getDataFromNode(this);let u=l.propertyName;if(u===void 0){const{uvNode:g,levelNode:x,biasNode:v,compareNode:S,depthNode:T,gradNode:E}=s,A=this.generateUV(e,g),w=x?x.build(e,"float"):null,O=v?v.build(e,"float"):null,F=T?T.build(e,"int"):null,B=S?S.build(e,"float"):null,k=E?[E[0].build(e,"vec2"),E[1].build(e,"vec2")]:null,Y=e.getVarFromNode(this);u=e.getPropertyName(Y);const $=this.generateSnippet(e,r,A,w,O,F,B,k);e.addLineFlowCode(`${u} = ${$}`,this),l.snippet=$,l.propertyName=u}let d=u;const f=this.getNodeType(e);return e.needsToWorkingColorSpace(i)&&(d=P0(oc(d,f),i.colorSpace).setup(e).build(e,f)),e.format(d,f,t)}}setSampler(e){return this.sampler=e,this}getSampler(){return this.sampler}uv(e){return console.warn("THREE.TextureNode: .uv() has been renamed. Use .sample() instead."),this.sample(e)}sample(e){const t=this.clone();return t.uvNode=Qe(e),t.referenceNode=this.getSelf(),Qe(t)}load(e){return this.sample(e).setSampler(!1)}blur(e){const t=this.clone();t.biasNode=Qe(e).mul(CA(t)),t.referenceNode=this.getSelf();const i=t.value;return t.generateMipmaps===!1&&(i&&i.generateMipmaps===!1||i.minFilter===Ci||i.magFilter===Ci)&&(console.warn("THREE.TSL: texture().blur() requires mipmaps and sampling. Use .generateMipmaps=true and .minFilter/.magFilter=THREE.LinearFilter in the Texture."),t.biasNode=null),Qe(t)}level(e){const t=this.clone();return t.levelNode=Qe(e),t.referenceNode=this.getSelf(),Qe(t)}size(e){return Yc(this,e)}bias(e){const t=this.clone();return t.biasNode=Qe(e),t.referenceNode=this.getSelf(),Qe(t)}compare(e){const t=this.clone();return t.compareNode=Qe(e),t.referenceNode=this.getSelf(),Qe(t)}grad(e,t){const i=this.clone();return i.gradNode=[Qe(e),Qe(t)],i.referenceNode=this.getSelf(),Qe(i)}depth(e){const t=this.clone();return t.depthNode=Qe(e),t.referenceNode=this.getSelf(),Qe(t)}serialize(e){super.serialize(e),e.value=this.value.toJSON(e.meta).uuid,e.sampler=this.sampler,e.updateMatrix=this.updateMatrix,e.updateType=this.updateType}deserialize(e){super.deserialize(e),this.value=e.meta.textures[e.value],this.sampler=e.sampler,this.updateMatrix=e.updateMatrix,this.updateType=e.updateType}update(){const e=this.value,t=this._matrixUniform;t!==null&&(t.value=e.matrix),e.matrixAutoUpdate===!0&&e.updateMatrix()}clone(){const e=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return e.sampler=this.sampler,e.depthNode=this.depthNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e}}const H7=Wn(Ga).setParameterLength(1,4).setName("texture"),Si=(a=NA,e=null,t=null,i=null)=>{let s;return a&&a.isTextureNode===!0?(s=Qe(a.clone()),s.referenceNode=a.getSelf(),e!==null&&(s.uvNode=Qe(e)),t!==null&&(s.levelNode=Qe(t)),i!==null&&(s.biasNode=Qe(i))):s=H7(a,e,t,i),s},W7=(a=NA)=>Si(a),Us=(...a)=>Si(...a).setSampler(!1),$7=a=>(a.isNode===!0?a:Si(a)).convert("sampler"),X7=a=>(a.isNode===!0?a:Si(a)).convert("samplerComparison");class I0 extends Sp{static get type(){return"BufferNode"}constructor(e,t,i=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferCount=i}getElementType(e){return this.getNodeType(e)}getInputType(){return"buffer"}}const Zg=(a,e,t)=>Qe(new I0(a,e,t));class q7 extends au{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),i=this.getNodeType(),s=this.node.getPaddedType();return e.format(t,s,i)}}class iU extends I0{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null),this.array=e,this.elementType=t===null?Yl(e[0]):t,this.paddedType=this.getPaddedType(),this.updateType=ii.RENDER,this.isArrayBufferNode=!0}getNodeType(){return this.paddedType}getElementType(){return this.elementType}getPaddedType(){const e=this.elementType;let t="vec4";return e==="mat2"?t="mat2":/mat/.test(e)===!0?t="mat4":e.charAt(0)==="i"?t="ivec4":e.charAt(0)==="u"&&(t="uvec4"),t}update(){const{array:e,value:t}=this,i=this.elementType;if(i==="float"||i==="int"||i==="uint")for(let s=0;s<e.length;s++){const r=s*4;t[r]=e[s]}else if(i==="color")for(let s=0;s<e.length;s++){const r=s*4,l=e[s];t[r]=l.r,t[r+1]=l.g,t[r+2]=l.b||0}else if(i==="mat2")for(let s=0;s<e.length;s++){const r=s*4,l=e[s];t[r]=l.elements[0],t[r+1]=l.elements[1],t[r+2]=l.elements[2],t[r+3]=l.elements[3]}else if(i==="mat3")for(let s=0;s<e.length;s++){const r=s*16,l=e[s];t[r]=l.elements[0],t[r+1]=l.elements[1],t[r+2]=l.elements[2],t[r+4]=l.elements[3],t[r+5]=l.elements[4],t[r+6]=l.elements[5],t[r+8]=l.elements[6],t[r+9]=l.elements[7],t[r+10]=l.elements[8],t[r+15]=1}else if(i==="mat4")for(let s=0;s<e.length;s++){const r=s*16,l=e[s];for(let u=0;u<l.elements.length;u++)t[r+u]=l.elements[u]}else for(let s=0;s<e.length;s++){const r=s*4,l=e[s];t[r]=l.x,t[r+1]=l.y,t[r+2]=l.z||0,t[r+3]=l.w||0}}setup(e){const t=this.array.length,i=this.elementType;let s=Float32Array;const r=this.paddedType,l=e.getTypeLength(r);return i.charAt(0)==="i"&&(s=Int32Array),i.charAt(0)==="u"&&(s=Uint32Array),this.value=new s(t*l),this.bufferCount=t,this.bufferType=r,super.setup(e)}element(e){return Qe(new q7(this,Qe(e)))}}const ca=(a,e)=>Qe(new iU(a,e));class Y7 extends Pn{constructor(e){super("float"),this.name=e,this.isBuiltinNode=!0}generate(){return this.name}}const Kg=Wn(Y7).setParameterLength(1),L0=wn(0,"uint").setName("u_cameraIndex").setGroup(b0("cameraIndex")).toVarying("v_cameraIndex"),$l=wn("float").setName("cameraNear").setGroup(On).onRenderUpdate(({camera:a})=>a.near),Xl=wn("float").setName("cameraFar").setGroup(On).onRenderUpdate(({camera:a})=>a.far),Wo=be(({camera:a})=>{let e;if(a.isArrayCamera&&a.cameras.length>0){const t=[];for(const s of a.cameras)t.push(s.projectionMatrix);e=ca(t).setGroup(On).setName("cameraProjectionMatrices").element(a.isMultiViewCamera?Kg("gl_ViewID_OVR"):L0).toVar("cameraProjectionMatrix")}else e=wn("mat4").setName("cameraProjectionMatrix").setGroup(On).onRenderUpdate(({camera:t})=>t.projectionMatrix);return e}).once()(),Z7=be(({camera:a})=>{let e;if(a.isArrayCamera&&a.cameras.length>0){const t=[];for(const s of a.cameras)t.push(s.projectionMatrixInverse);e=ca(t).setGroup(On).setName("cameraProjectionMatricesInverse").element(a.isMultiViewCamera?Kg("gl_ViewID_OVR"):L0).toVar("cameraProjectionMatrixInverse")}else e=wn("mat4").setName("cameraProjectionMatrixInverse").setGroup(On).onRenderUpdate(({camera:t})=>t.projectionMatrixInverse);return e}).once()(),jo=be(({camera:a})=>{let e;if(a.isArrayCamera&&a.cameras.length>0){const t=[];for(const s of a.cameras)t.push(s.matrixWorldInverse);e=ca(t).setGroup(On).setName("cameraViewMatrices").element(a.isMultiViewCamera?Kg("gl_ViewID_OVR"):L0).toVar("cameraViewMatrix")}else e=wn("mat4").setName("cameraViewMatrix").setGroup(On).onRenderUpdate(({camera:t})=>t.matrixWorldInverse);return e}).once()(),K7=wn("mat4").setName("cameraWorldMatrix").setGroup(On).onRenderUpdate(({camera:a})=>a.matrixWorld),J7=wn("mat3").setName("cameraNormalMatrix").setGroup(On).onRenderUpdate(({camera:a})=>a.normalMatrix),eg=wn(new re).setName("cameraPosition").setGroup(On).onRenderUpdate(({camera:a},e)=>e.value.setFromMatrixPosition(a.matrixWorld)),SP=new Sr;class Ti extends Pn{static get type(){return"Object3DNode"}constructor(e,t=null){super(),this.scope=e,this.object3d=t,this.updateType=ii.OBJECT,this.uniformNode=new Sp(null)}getNodeType(){const e=this.scope;if(e===Ti.WORLD_MATRIX)return"mat4";if(e===Ti.POSITION||e===Ti.VIEW_POSITION||e===Ti.DIRECTION||e===Ti.SCALE)return"vec3";if(e===Ti.RADIUS)return"float"}update(e){const t=this.object3d,i=this.uniformNode,s=this.scope;if(s===Ti.WORLD_MATRIX)i.value=t.matrixWorld;else if(s===Ti.POSITION)i.value=i.value||new re,i.value.setFromMatrixPosition(t.matrixWorld);else if(s===Ti.SCALE)i.value=i.value||new re,i.value.setFromMatrixScale(t.matrixWorld);else if(s===Ti.DIRECTION)i.value=i.value||new re,t.getWorldDirection(i.value);else if(s===Ti.VIEW_POSITION){const r=e.camera;i.value=i.value||new re,i.value.setFromMatrixPosition(t.matrixWorld),i.value.applyMatrix4(r.matrixWorldInverse)}else if(s===Ti.RADIUS){const r=e.object.geometry;r.boundingSphere===null&&r.computeBoundingSphere(),SP.copy(r.boundingSphere).applyMatrix4(t.matrixWorld),i.value=SP.radius}}generate(e){const t=this.scope;return t===Ti.WORLD_MATRIX?this.uniformNode.nodeType="mat4":t===Ti.POSITION||t===Ti.VIEW_POSITION||t===Ti.DIRECTION||t===Ti.SCALE?this.uniformNode.nodeType="vec3":t===Ti.RADIUS&&(this.uniformNode.nodeType="float"),this.uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}Ti.WORLD_MATRIX="worldMatrix";Ti.POSITION="position";Ti.SCALE="scale";Ti.VIEW_POSITION="viewPosition";Ti.DIRECTION="direction";Ti.RADIUS="radius";const j7=Wn(Ti,Ti.DIRECTION).setParameterLength(1),Q7=Wn(Ti,Ti.WORLD_MATRIX).setParameterLength(1),sU=Wn(Ti,Ti.POSITION).setParameterLength(1),eZ=Wn(Ti,Ti.SCALE).setParameterLength(1),tZ=Wn(Ti,Ti.VIEW_POSITION).setParameterLength(1),nZ=Wn(Ti,Ti.RADIUS).setParameterLength(1);class Ko extends Ti{static get type(){return"ModelNode"}constructor(e){super(e)}update(e){this.object3d=e.object,super.update(e)}}const iZ=Vt(Ko,Ko.DIRECTION),da=Vt(Ko,Ko.WORLD_MATRIX),sZ=Vt(Ko,Ko.POSITION),rZ=Vt(Ko,Ko.SCALE),oZ=Vt(Ko,Ko.VIEW_POSITION),rU=Vt(Ko,Ko.RADIUS),oU=wn(new ni).onObjectUpdate(({object:a},e)=>e.value.getNormalMatrix(a.matrixWorld)),aZ=wn(new xn).onObjectUpdate(({object:a},e)=>e.value.copy(a.matrixWorld).invert()),ac=be(a=>a.renderer.overrideNodes.modelViewMatrix||aU).once()().toVar("modelViewMatrix"),aU=jo.mul(da),xM=be(a=>(a.context.isHighPrecisionModelViewMatrix=!0,wn("mat4").onObjectUpdate(({object:e,camera:t})=>e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld)))).once()().toVar("highpModelViewMatrix"),yM=be(a=>{const e=a.context.isHighPrecisionModelViewMatrix;return wn("mat3").onObjectUpdate(({object:t,camera:i})=>(e!==!0&&t.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix)))}).once()().toVar("highpModelNormalViewMatrix"),Er=to("position","vec3"),Fs=Er.toVarying("positionLocal"),_v=Er.toVarying("positionPrevious"),Xo=be(a=>da.mul(Fs).xyz.toVarying(a.getSubBuildProperty("v_positionWorld")),"vec3").once(["POSITION"])(),PA=be(()=>Fs.transformDirection(da).toVarying("v_positionWorldDirection").normalize().toVar("positionWorldDirection"),"vec3").once(["POSITION"])(),Bs=be(a=>a.context.setupPositionView().toVarying("v_positionView"),"vec3").once(["POSITION"])(),_s=Bs.negate().toVarying("v_positionViewDirection").normalize().toVar("positionViewDirection");class lU extends Pn{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(e){if(e.shaderStage!=="fragment")return"true";const{renderer:t,material:i}=e;return t.coordinateSystem===xr&&i.side===ns?"false":e.getFrontFacing()}}const cU=Vt(lU),IA=te(cU).mul(2).sub(1),bp=be(([a],{material:e})=>{const t=e.side;return t===ns?a=a.mul(-1):t===_r&&(a=a.mul(IA)),a}),D0=to("normal","vec3"),No=be(a=>a.geometry.hasAttribute("normal")===!1?(console.warn('THREE.TSL: Vertex attribute "normal" not found on geometry.'),xe(0,1,0)):D0,"vec3").once()().toVar("normalLocal"),uU=Bs.dFdx().cross(Bs.dFdy()).normalize().toVar("normalFlat"),lp=be(a=>{let e;return a.material.flatShading===!0?e=uU:e=LA(No).toVarying("v_normalViewGeometry").normalize(),e},"vec3").once()().toVar("normalViewGeometry"),hU=be(a=>{let e=lp.transformDirection(jo);return a.material.flatShading!==!0&&(e=e.toVarying("v_normalWorldGeometry")),e.normalize().toVar("normalWorldGeometry")},"vec3").once()(),Yi=be(({subBuildFn:a,material:e,context:t})=>{let i;return a==="NORMAL"||a==="VERTEX"?(i=lp,e.flatShading!==!0&&(i=bp(i))):i=t.setupNormal().context({getUV:null}),i},"vec3").once(["NORMAL","VERTEX"])().toVar("normalView"),cu=Yi.transformDirection(jo).toVar("normalWorld"),bh=be(({subBuildFn:a,context:e})=>{let t;return a==="NORMAL"||a==="VERTEX"?t=Yi:t=e.setupClearcoatNormal().context({getUV:null}),t},"vec3").once(["NORMAL","VERTEX"])().toVar("clearcoatNormalView"),dU=be(([a,e=da])=>{const t=Wr(e),i=a.div(xe(t[0].dot(t[0]),t[1].dot(t[1]),t[2].dot(t[2])));return t.mul(i).xyz}),LA=be(([a],e)=>{const t=e.renderer.overrideNodes.modelNormalViewMatrix;if(t!==null)return t.transformDirection(a);const i=oU.mul(a);return jo.transformDirection(i)}),lZ=be(()=>(console.warn('THREE.TSL: "transformedNormalView" is deprecated. Use "normalView" instead.'),Yi)).once(["NORMAL","VERTEX"])(),cZ=be(()=>(console.warn('THREE.TSL: "transformedNormalWorld" is deprecated. Use "normalWorld" instead.'),cu)).once(["NORMAL","VERTEX"])(),uZ=be(()=>(console.warn('THREE.TSL: "transformedClearcoatNormalView" is deprecated. Use "clearcoatNormalView" instead.'),bh)).once(["NORMAL","VERTEX"])(),bP=new co,MT=new xn,fU=wn(0).onReference(({material:a})=>a).onObjectUpdate(({material:a})=>a.refractionRatio),Xy=wn(1).onReference(({material:a})=>a).onObjectUpdate(function({material:a,scene:e}){return a.envMap?a.envMapIntensity:e.environmentIntensity}),DA=wn(new xn).onReference(function(a){return a.material}).onObjectUpdate(function({material:a,scene:e}){const t=e.environment!==null&&a.envMap===null?e.environmentRotation:a.envMapRotation;return t?(bP.copy(t),MT.makeRotationFromEuler(bP)):MT.identity(),MT}),pU=_s.negate().reflect(Yi),mU=_s.negate().refract(Yi,fU),gU=pU.transformDirection(jo).toVar("reflectVector"),_U=mU.transformDirection(jo).toVar("reflectVector"),xU=new tu;class yU extends Ga{static get type(){return"CubeTextureNode"}constructor(e,t=null,i=null,s=null){super(e,t,i,s),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const e=this.value;return e.mapping===qo?gU:e.mapping===ga?_U:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',e.mapping),xe(0,0,0))}setUpdateMatrix(){}setupUV(e,t){const i=this.value;return(e.renderer.coordinateSystem===_a||!i.isRenderTargetTexture)&&(t=xe(t.x.negate(),t.yz)),DA.mul(t)}generateUV(e,t){return t.build(e,"vec3")}}const UA=Wn(yU).setParameterLength(1,4).setName("cubeTexture"),cp=(a=xU,e=null,t=null,i=null)=>{let s;return a&&a.isCubeTextureNode===!0?(s=Qe(a.clone()),s.referenceNode=a.getSelf(),e!==null&&(s.uvNode=Qe(e)),t!==null&&(s.levelNode=Qe(t)),i!==null&&(s.biasNode=Qe(i))):s=UA(a,e,t,i),s},hZ=(a=xU)=>UA(a);class dZ extends au{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),i=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,i,s)}}class Jg extends Pn{static get type(){return"ReferenceNode"}constructor(e,t,i=null,s=null){super(),this.property=e,this.uniformType=t,this.object=i,this.count=s,this.properties=e.split("."),this.reference=i,this.node=null,this.group=null,this.name=null,this.updateType=ii.OBJECT}element(e){return Qe(new dZ(this,Qe(e)))}setGroup(e){return this.group=e,this}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}setNodeType(e){let t=null;this.count!==null?t=Zg(null,e,this.count):Array.isArray(this.getValueFromReference())?t=ca(null,e):e==="texture"?t=Si(null):e==="cubeTexture"?t=cp(null):t=wn(null,e),this.group!==null&&t.setGroup(this.group),this.name!==null&&t.setName(this.name),this.node=t.getSelf()}getNodeType(e){return this.node===null&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let i=e[t[0]];for(let s=1;s<t.length;s++)i=i[t[s]];return i}updateReference(e){return this.reference=this.object!==null?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const hs=(a,e,t)=>Qe(new Jg(a,e,t)),vM=(a,e,t,i)=>Qe(new Jg(a,e,i,t));class vU extends Jg{static get type(){return"MaterialReferenceNode"}constructor(e,t,i=null){super(e,t,i),this.material=i,this.isMaterialReferenceNode=!0}updateReference(e){return this.reference=this.material!==null?this.material:e.material,this.reference}}const ql=(a,e,t=null)=>Qe(new vU(a,e,t)),SU=is(),fZ=Bs.dFdx(),pZ=Bs.dFdy(),bU=SU.dFdx(),TU=SU.dFdy(),MU=Yi,wU=pZ.cross(MU),AU=MU.cross(fZ),SM=wU.mul(bU.x).add(AU.mul(TU.x)),bM=wU.mul(bU.y).add(AU.mul(TU.y)),TP=SM.dot(SM).max(bM.dot(bM)),EU=TP.equal(0).select(0,TP.inverseSqrt()),mZ=SM.mul(EU).toVar("tangentViewFrame"),gZ=bM.mul(EU).toVar("bitangentViewFrame"),U0=be(a=>(a.geometry.hasAttribute("tangent")===!1&&a.geometry.computeTangents(),to("tangent","vec4")))(),jg=U0.xyz.toVar("tangentLocal"),F0=be(({subBuildFn:a,geometry:e,material:t})=>{let i;return a==="VERTEX"||e.hasAttribute("tangent")?i=ac.mul(tn(jg,0)).xyz.toVarying("v_tangentView").normalize():i=mZ,t.flatShading!==!0&&(i=bp(i)),i},"vec3").once(["NORMAL","VERTEX"])().toVar("tangentView"),RU=F0.transformDirection(jo).toVarying("v_tangentWorld").normalize().toVar("tangentWorld"),B0=be(([a,e],{subBuildFn:t,material:i})=>{let s=a.mul(U0.w).xyz;return t==="NORMAL"&&i.flatShading!==!0&&(s=s.toVarying(e)),s}).once(["NORMAL"]),_Z=B0(D0.cross(U0),"v_bitangentGeometry").normalize().toVar("bitangentGeometry"),xZ=B0(No.cross(jg),"v_bitangentLocal").normalize().toVar("bitangentLocal"),CU=be(({subBuildFn:a,geometry:e,material:t})=>{let i;return a==="VERTEX"||e.hasAttribute("tangent")?i=B0(Yi.cross(F0),"v_bitangentView").normalize():i=gZ,t.flatShading!==!0&&(i=bp(i)),i},"vec3").once(["NORMAL","VERTEX"])().toVar("bitangentView"),yZ=B0(cu.cross(RU),"v_bitangentWorld").normalize().toVar("bitangentWorld"),Th=Wr(F0,CU,Yi).toVar("TBNViewMatrix"),NU=_s.mul(Th),vZ=(a,e)=>a.sub(NU.mul(e)),PU=be(()=>{let a=Ch.cross(_s);return a=a.cross(Ch).normalize(),a=Ri(a,Yi,Oc.mul(cl.oneMinus()).oneMinus().pow2().pow2()).normalize(),a}).once()();class IU extends $s{static get type(){return"NormalMapNode"}constructor(e,t=null){super("vec3"),this.node=e,this.scaleNode=t,this.normalMapType=gl}setup({material:e}){const{normalMapType:t,scaleNode:i}=this;let s=this.node.mul(2).sub(1);if(i!==null){let l=i;e.flatShading===!0&&(l=bp(l)),s=xe(s.xy.mul(l),s.z)}let r=null;return t===JM?r=LA(s):t===gl?r=Th.mul(s).normalize():(console.error(`THREE.NodeMaterial: Unsupported normal map type: ${t}`),r=Yi),r}}const TM=Wn(IU).setParameterLength(1,2),SZ=be(({textureNode:a,bumpScale:e})=>{const t=s=>a.cache().context({getUV:r=>s(r.uvNode||is()),forceUVContext:!0}),i=te(t(s=>s));return nt(te(t(s=>s.add(s.dFdx()))).sub(i),te(t(s=>s.add(s.dFdy()))).sub(i)).mul(e)}),bZ=be(a=>{const{surf_pos:e,surf_norm:t,dHdxy:i}=a,s=e.dFdx().normalize(),r=e.dFdy().normalize(),l=t,u=r.cross(l),d=l.cross(s),f=s.dot(u).mul(IA),g=f.sign().mul(i.x.mul(u).add(i.y.mul(d)));return f.abs().mul(t).sub(g).normalize()});class LU extends $s{static get type(){return"BumpMapNode"}constructor(e,t=null){super("vec3"),this.textureNode=e,this.scaleNode=t}setup(){const e=this.scaleNode!==null?this.scaleNode:1,t=SZ({textureNode:this.textureNode,bumpScale:e});return bZ({surf_pos:Bs,surf_norm:Yi,dHdxy:t})}}const FA=Wn(LU).setParameterLength(1,2),MP=new Map;class je extends Pn{static get type(){return"MaterialNode"}constructor(e){super(),this.scope=e}getCache(e,t){let i=MP.get(e);return i===void 0&&(i=ql(e,t),MP.set(e,i)),i}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache(e==="map"?"map":e+"Map","texture")}setup(e){const t=e.context.material,i=this.scope;let s=null;if(i===je.COLOR){const r=t.color!==void 0?this.getColor(i):xe();t.map&&t.map.isTexture===!0?s=r.mul(this.getTexture("map")):s=r}else if(i===je.OPACITY){const r=this.getFloat(i);t.alphaMap&&t.alphaMap.isTexture===!0?s=r.mul(this.getTexture("alpha")):s=r}else if(i===je.SPECULAR_STRENGTH)t.specularMap&&t.specularMap.isTexture===!0?s=this.getTexture("specular").r:s=te(1);else if(i===je.SPECULAR_INTENSITY){const r=this.getFloat(i);t.specularIntensityMap&&t.specularIntensityMap.isTexture===!0?s=r.mul(this.getTexture(i).a):s=r}else if(i===je.SPECULAR_COLOR){const r=this.getColor(i);t.specularColorMap&&t.specularColorMap.isTexture===!0?s=r.mul(this.getTexture(i).rgb):s=r}else if(i===je.ROUGHNESS){const r=this.getFloat(i);t.roughnessMap&&t.roughnessMap.isTexture===!0?s=r.mul(this.getTexture(i).g):s=r}else if(i===je.METALNESS){const r=this.getFloat(i);t.metalnessMap&&t.metalnessMap.isTexture===!0?s=r.mul(this.getTexture(i).b):s=r}else if(i===je.EMISSIVE){const r=this.getFloat("emissiveIntensity"),l=this.getColor(i).mul(r);t.emissiveMap&&t.emissiveMap.isTexture===!0?s=l.mul(this.getTexture(i)):s=l}else if(i===je.NORMAL)t.normalMap?(s=TM(this.getTexture("normal"),this.getCache("normalScale","vec2")),s.normalMapType=t.normalMapType):t.bumpMap?s=FA(this.getTexture("bump").r,this.getFloat("bumpScale")):s=Yi;else if(i===je.CLEARCOAT){const r=this.getFloat(i);t.clearcoatMap&&t.clearcoatMap.isTexture===!0?s=r.mul(this.getTexture(i).r):s=r}else if(i===je.CLEARCOAT_ROUGHNESS){const r=this.getFloat(i);t.clearcoatRoughnessMap&&t.clearcoatRoughnessMap.isTexture===!0?s=r.mul(this.getTexture(i).r):s=r}else if(i===je.CLEARCOAT_NORMAL)t.clearcoatNormalMap?s=TM(this.getTexture(i),this.getCache(i+"Scale","vec2")):s=Yi;else if(i===je.SHEEN){const r=this.getColor("sheenColor").mul(this.getFloat("sheen"));t.sheenColorMap&&t.sheenColorMap.isTexture===!0?s=r.mul(this.getTexture("sheenColor").rgb):s=r}else if(i===je.SHEEN_ROUGHNESS){const r=this.getFloat(i);t.sheenRoughnessMap&&t.sheenRoughnessMap.isTexture===!0?s=r.mul(this.getTexture(i).a):s=r,s=s.clamp(.07,1)}else if(i===je.ANISOTROPY)if(t.anisotropyMap&&t.anisotropyMap.isTexture===!0){const r=this.getTexture(i);s=y0(Rf.x,Rf.y,Rf.y.negate(),Rf.x).mul(r.rg.mul(2).sub(nt(1)).normalize().mul(r.b))}else s=Rf;else if(i===je.IRIDESCENCE_THICKNESS){const r=hs("1","float",t.iridescenceThicknessRange);if(t.iridescenceThicknessMap){const l=hs("0","float",t.iridescenceThicknessRange);s=r.sub(l).mul(this.getTexture(i).g).add(l)}else s=r}else if(i===je.TRANSMISSION){const r=this.getFloat(i);t.transmissionMap?s=r.mul(this.getTexture(i).r):s=r}else if(i===je.THICKNESS){const r=this.getFloat(i);t.thicknessMap?s=r.mul(this.getTexture(i).g):s=r}else if(i===je.IOR)s=this.getFloat(i);else if(i===je.LIGHT_MAP)s=this.getTexture(i).rgb.mul(this.getFloat("lightMapIntensity"));else if(i===je.AO)s=this.getTexture(i).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else if(i===je.LINE_DASH_OFFSET)s=t.dashOffset?this.getFloat(i):te(0);else{const r=this.getNodeType(e);s=this.getCache(i,r)}return s}}je.ALPHA_TEST="alphaTest";je.COLOR="color";je.OPACITY="opacity";je.SHININESS="shininess";je.SPECULAR="specular";je.SPECULAR_STRENGTH="specularStrength";je.SPECULAR_INTENSITY="specularIntensity";je.SPECULAR_COLOR="specularColor";je.REFLECTIVITY="reflectivity";je.ROUGHNESS="roughness";je.METALNESS="metalness";je.NORMAL="normal";je.CLEARCOAT="clearcoat";je.CLEARCOAT_ROUGHNESS="clearcoatRoughness";je.CLEARCOAT_NORMAL="clearcoatNormal";je.EMISSIVE="emissive";je.ROTATION="rotation";je.SHEEN="sheen";je.SHEEN_ROUGHNESS="sheenRoughness";je.ANISOTROPY="anisotropy";je.IRIDESCENCE="iridescence";je.IRIDESCENCE_IOR="iridescenceIOR";je.IRIDESCENCE_THICKNESS="iridescenceThickness";je.IOR="ior";je.TRANSMISSION="transmission";je.THICKNESS="thickness";je.ATTENUATION_DISTANCE="attenuationDistance";je.ATTENUATION_COLOR="attenuationColor";je.LINE_SCALE="scale";je.LINE_DASH_SIZE="dashSize";je.LINE_GAP_SIZE="gapSize";je.LINE_WIDTH="linewidth";je.LINE_DASH_OFFSET="dashOffset";je.POINT_SIZE="size";je.DISPERSION="dispersion";je.LIGHT_MAP="light";je.AO="ao";const DU=Vt(je,je.ALPHA_TEST),xv=Vt(je,je.COLOR),UU=Vt(je,je.SHININESS),FU=Vt(je,je.EMISSIVE),O0=Vt(je,je.OPACITY),BU=Vt(je,je.SPECULAR),MM=Vt(je,je.SPECULAR_INTENSITY),OU=Vt(je,je.SPECULAR_COLOR),tg=Vt(je,je.SPECULAR_STRENGTH),qy=Vt(je,je.REFLECTIVITY),VU=Vt(je,je.ROUGHNESS),zU=Vt(je,je.METALNESS),kU=Vt(je,je.NORMAL),GU=Vt(je,je.CLEARCOAT),HU=Vt(je,je.CLEARCOAT_ROUGHNESS),WU=Vt(je,je.CLEARCOAT_NORMAL),$U=Vt(je,je.ROTATION),XU=Vt(je,je.SHEEN),qU=Vt(je,je.SHEEN_ROUGHNESS),YU=Vt(je,je.ANISOTROPY),ZU=Vt(je,je.IRIDESCENCE),KU=Vt(je,je.IRIDESCENCE_IOR),JU=Vt(je,je.IRIDESCENCE_THICKNESS),jU=Vt(je,je.TRANSMISSION),QU=Vt(je,je.THICKNESS),eF=Vt(je,je.IOR),tF=Vt(je,je.ATTENUATION_DISTANCE),nF=Vt(je,je.ATTENUATION_COLOR),BA=Vt(je,je.LINE_SCALE),OA=Vt(je,je.LINE_DASH_SIZE),VA=Vt(je,je.LINE_GAP_SIZE),Yy=Vt(je,je.LINE_WIDTH),zA=Vt(je,je.LINE_DASH_OFFSET),iF=Vt(je,je.POINT_SIZE),sF=Vt(je,je.DISPERSION),kA=Vt(je,je.LIGHT_MAP),rF=Vt(je,je.AO),Rf=wn(new it).onReference(function(a){return a.material}).onRenderUpdate(function({material:a}){this.value.set(a.anisotropy*Math.cos(a.anisotropyRotation),a.anisotropy*Math.sin(a.anisotropyRotation))}),GA=be(a=>a.context.setupModelViewProjection(),"vec4").once()().toVarying("v_modelViewProjection");class xs extends Pn{static get type(){return"IndexNode"}constructor(e){super("uint"),this.scope=e,this.isIndexNode=!0}generate(e){const t=this.getNodeType(e),i=this.scope;let s;if(i===xs.VERTEX)s=e.getVertexIndex();else if(i===xs.INSTANCE)s=e.getInstanceIndex();else if(i===xs.DRAW)s=e.getDrawIndex();else if(i===xs.INVOCATION_LOCAL)s=e.getInvocationLocalIndex();else if(i===xs.INVOCATION_SUBGROUP)s=e.getInvocationSubgroupIndex();else if(i===xs.SUBGROUP)s=e.getSubgroupIndex();else throw new Error("THREE.IndexNode: Unknown scope: "+i);let r;return e.shaderStage==="vertex"||e.shaderStage==="compute"?r=s:r=yl(this).build(e,t),r}}xs.VERTEX="vertex";xs.INSTANCE="instance";xs.SUBGROUP="subgroup";xs.INVOCATION_LOCAL="invocationLocal";xs.INVOCATION_SUBGROUP="invocationSubgroup";xs.DRAW="draw";const oF=Vt(xs,xs.VERTEX),Zc=Vt(xs,xs.INSTANCE),TZ=Vt(xs,xs.SUBGROUP),MZ=Vt(xs,xs.INVOCATION_SUBGROUP),wZ=Vt(xs,xs.INVOCATION_LOCAL),aF=Vt(xs,xs.DRAW);class HA extends Pn{static get type(){return"InstanceNode"}constructor(e,t,i=null){super("void"),this.count=e,this.instanceMatrix=t,this.instanceColor=i,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=ii.FRAME,this.buffer=null,this.bufferColor=null}setup(e){const{count:t,instanceMatrix:i,instanceColor:s}=this;let{instanceMatrixNode:r,instanceColorNode:l}=this;if(r===null){if(t<=1e3)r=Zg(i.array,"mat4",Math.max(t,1)).element(Zc);else{const d=new XL(i.array,16,1);this.buffer=d;const f=i.usage===yh?_M:gv,g=[f(d,"vec4",16,0),f(d,"vec4",16,4),f(d,"vec4",16,8),f(d,"vec4",16,12)];r=Rh(...g)}this.instanceMatrixNode=r}if(s&&l===null){const d=new pa(s.array,3),f=s.usage===yh?_M:gv;this.bufferColor=d,l=xe(f(d,"vec3",3,0)),this.instanceColorNode=l}const u=r.mul(Fs).xyz;if(Fs.assign(u),e.hasGeometryAttribute("normal")){const d=dU(No,r);No.assign(d)}this.instanceColorNode!==null&&ko("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMatrix.usage!==yh&&this.buffer!==null&&this.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMatrix.version),this.instanceColor&&this.instanceColor.usage!==yh&&this.bufferColor!==null&&this.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceColor.version)}}const AZ=Wn(HA).setParameterLength(2,3);class lF extends HA{static get type(){return"InstancedMeshNode"}constructor(e){const{count:t,instanceMatrix:i,instanceColor:s}=e;super(t,i,s),this.instancedMesh=e}}const cF=Wn(lF).setParameterLength(1);class uF extends Pn{static get type(){return"BatchNode"}constructor(e){super("void"),this.batchMesh=e,this.batchingIdNode=null}setup(e){this.batchingIdNode===null&&(e.getDrawIndex()===null?this.batchingIdNode=Zc:this.batchingIdNode=aF);const i=be(([T])=>{const E=pe(Yc(Us(this.batchMesh._indirectTexture),0).x),A=pe(T).mod(E),w=pe(T).div(E);return Us(this.batchMesh._indirectTexture,rr(A,w)).x}).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]})(pe(this.batchingIdNode)),s=this.batchMesh._matricesTexture,r=pe(Yc(Us(s),0).x),l=te(i).mul(4).toInt().toVar(),u=l.mod(r),d=l.div(r),f=Rh(Us(s,rr(u,d)),Us(s,rr(u.add(1),d)),Us(s,rr(u.add(2),d)),Us(s,rr(u.add(3),d))),g=this.batchMesh._colorsTexture;if(g!==null){const E=be(([A])=>{const w=pe(Yc(Us(g),0).x),O=A,F=O.mod(w),B=O.div(w);return Us(g,rr(F,B)).rgb}).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]})(i);ko("vec3","vBatchColor").assign(E)}const x=Wr(f);Fs.assign(f.mul(Fs));const v=No.div(xe(x[0].dot(x[0]),x[1].dot(x[1]),x[2].dot(x[2]))),S=x.mul(v).xyz;No.assign(S),e.hasGeometryAttribute("tangent")&&jg.mulAssign(x)}}const hF=Wn(uF).setParameterLength(1);class dF extends au{static get type(){return"StorageArrayElementNode"}constructor(e,t){super(e,t),this.isStorageArrayElementNode=!0}set storageBufferNode(e){this.node=e}get storageBufferNode(){return this.node}getMemberType(e,t){const i=this.storageBufferNode.structTypeNode;return i?i.getMemberType(e,t):"void"}setup(e){return e.isAvailable("storageBuffer")===!1&&this.node.isPBO===!0&&e.setupPBO(this.node),super.setup(e)}generate(e,t){let i;const s=e.context.assign;if(e.isAvailable("storageBuffer")===!1?this.node.isPBO===!0&&s!==!0&&(this.node.value.isInstancedBufferAttribute||e.shaderStage!=="compute")?i=e.generatePBO(this):i=this.node.build(e):i=super.generate(e),s!==!0){const r=this.getNodeType(e);i=e.format(i,r,t)}return i}}const EZ=Wn(dF).setParameterLength(2);class fF extends I0{static get type(){return"StorageBufferNode"}constructor(e,t=null,i=0){let s,r=null;t&&t.isStruct?(s="struct",r=t.layout,(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)&&(i=e.count)):t===null&&(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)?(s=Gw(e.itemSize),i=e.count):s=t,super(e,s,i),this.isStorageBufferNode=!0,this.structTypeNode=r,this.access=yr.READ_WRITE,this.isAtomic=!1,this.isPBO=!1,this._attribute=null,this._varying=null,this.global=!0,e.isStorageBufferAttribute!==!0&&e.isStorageInstancedBufferAttribute!==!0&&(e.isInstancedBufferAttribute?e.isStorageInstancedBufferAttribute=!0:e.isStorageBufferAttribute=!0)}getHash(e){if(this.bufferCount===0){let t=e.globalCache.getData(this.value);return t===void 0&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getInputType(){return this.value.isIndirectStorageBufferAttribute?"indirectStorageBuffer":"storageBuffer"}element(e){return EZ(this,e)}setPBO(e){return this.isPBO=e,this}getPBO(){return this.isPBO}setAccess(e){return this.access=e,this}toReadOnly(){return this.setAccess(yr.READ_ONLY)}setAtomic(e){return this.isAtomic=e,this}toAtomic(){return this.setAtomic(!0)}getAttributeData(){return this._attribute===null&&(this._attribute=Yg(this.value),this._varying=yl(this._attribute)),{attribute:this._attribute,varying:this._varying}}getNodeType(e){if(this.structTypeNode!==null)return this.structTypeNode.getNodeType(e);if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.getNodeType(e);const{attribute:t}=this.getAttributeData();return t.getNodeType(e)}getMemberType(e,t){return this.structTypeNode!==null?this.structTypeNode.getMemberType(e,t):"void"}generate(e){if(this.structTypeNode!==null&&this.structTypeNode.build(e),e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.generate(e);const{attribute:t,varying:i}=this.getAttributeData(),s=i.build(e);return e.registerTransform(s,t),s}}const Ph=(a,e=null,t=0)=>Qe(new fF(a,e,t)),RZ=(a,e,t)=>(console.warn('THREE.TSL: "storageObject()" is deprecated. Use "storage().setPBO( true )" instead.'),Ph(a,e,t).setPBO(!0)),wP=new WeakMap;class WA extends Pn{static get type(){return"SkinningNode"}constructor(e){super("void"),this.skinnedMesh=e,this.updateType=ii.OBJECT,this.skinIndexNode=to("skinIndex","uvec4"),this.skinWeightNode=to("skinWeight","vec4"),this.bindMatrixNode=hs("bindMatrix","mat4"),this.bindMatrixInverseNode=hs("bindMatrixInverse","mat4"),this.boneMatricesNode=vM("skeleton.boneMatrices","mat4",e.skeleton.bones.length),this.positionNode=Fs,this.toPositionNode=Fs,this.previousBoneMatricesNode=null}getSkinnedPosition(e=this.boneMatricesNode,t=this.positionNode){const{skinIndexNode:i,skinWeightNode:s,bindMatrixNode:r,bindMatrixInverseNode:l}=this,u=e.element(i.x),d=e.element(i.y),f=e.element(i.z),g=e.element(i.w),x=r.mul(t),v=Ws(u.mul(s.x).mul(x),d.mul(s.y).mul(x),f.mul(s.z).mul(x),g.mul(s.w).mul(x));return l.mul(v).xyz}getSkinnedNormal(e=this.boneMatricesNode,t=No){const{skinIndexNode:i,skinWeightNode:s,bindMatrixNode:r,bindMatrixInverseNode:l}=this,u=e.element(i.x),d=e.element(i.y),f=e.element(i.z),g=e.element(i.w);let x=Ws(s.x.mul(u),s.y.mul(d),s.z.mul(f),s.w.mul(g));return x=l.mul(x).mul(r),x.transformDirection(t).xyz}getPreviousSkinnedPosition(e){const t=e.object;return this.previousBoneMatricesNode===null&&(t.skeleton.previousBoneMatrices=new Float32Array(t.skeleton.boneMatrices),this.previousBoneMatricesNode=vM("skeleton.previousBoneMatrices","mat4",t.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,_v)}needsPreviousBoneMatrices(e){const t=e.renderer.getMRT();return t&&t.has("velocity")||$w(e.object).useVelocity===!0}setup(e){this.needsPreviousBoneMatrices(e)&&_v.assign(this.getPreviousSkinnedPosition(e));const t=this.getSkinnedPosition();if(this.toPositionNode&&this.toPositionNode.assign(t),e.hasGeometryAttribute("normal")){const i=this.getSkinnedNormal();No.assign(i),e.hasGeometryAttribute("tangent")&&jg.assign(i)}return t}generate(e,t){if(t!=="void")return super.generate(e,t)}update(e){const t=e.object&&e.object.skeleton?e.object.skeleton:this.skinnedMesh.skeleton;wP.get(t)!==e.frameId&&(wP.set(t,e.frameId),this.previousBoneMatricesNode!==null&&t.previousBoneMatrices.set(t.boneMatrices),t.update())}}const pF=a=>Qe(new WA(a)),CZ=(a,e=null)=>{const t=new WA(a);return t.positionNode=Ph(new pa(a.geometry.getAttribute("position").array,3),"vec3").setPBO(!0).toReadOnly().element(Zc).toVar(),t.skinIndexNode=Ph(new pa(new Uint32Array(a.geometry.getAttribute("skinIndex").array),4),"uvec4").setPBO(!0).toReadOnly().element(Zc).toVar(),t.skinWeightNode=Ph(new pa(a.geometry.getAttribute("skinWeight").array,4),"vec4").setPBO(!0).toReadOnly().element(Zc).toVar(),t.bindMatrixNode=wn(a.bindMatrix,"mat4"),t.bindMatrixInverseNode=wn(a.bindMatrixInverse,"mat4"),t.boneMatricesNode=Zg(a.skeleton.boneMatrices,"mat4",a.skeleton.bones.length),t.toPositionNode=e,Qe(t)};class mF extends Pn{static get type(){return"LoopNode"}constructor(e=[]){super(),this.params=e}getVarName(e){return String.fromCharCode(105+e)}getProperties(e){const t=e.getNodeProperties(this);if(t.stackNode!==void 0)return t;const i={};for(let l=0,u=this.params.length-1;l<u;l++){const d=this.params[l],f=d.isNode!==!0&&d.name||this.getVarName(l),g=d.isNode!==!0&&d.type||"int";i[f]=oc(f,g)}const s=e.addStack();t.returnsNode=this.params[this.params.length-1](i,e),t.stackNode=s;const r=this.params[0];return r.isNode!==!0&&typeof r.update=="function"&&(t.updateNode=be(this.params[0].update)(i)),e.removeStack(),t}getNodeType(e){const{returnsNode:t}=this.getProperties(e);return t?t.getNodeType(e):"void"}setup(e){this.getProperties(e)}generate(e){const t=this.getProperties(e),i=this.params,s=t.stackNode;for(let u=0,d=i.length-1;u<d;u++){const f=i[u];let g=!1,x=null,v=null,S=null,T=null,E=null,A=null;f.isNode?f.getNodeType(e)==="bool"?(g=!0,T="bool",v=f.build(e,T)):(T="int",S=this.getVarName(u),x="0",v=f.build(e,T),E="<"):(T=f.type||"int",S=f.name||this.getVarName(u),x=f.start,v=f.end,E=f.condition,A=f.update,typeof x=="number"?x=e.generateConst(T,x):x&&x.isNode&&(x=x.build(e,T)),typeof v=="number"?v=e.generateConst(T,v):v&&v.isNode&&(v=v.build(e,T)),x!==void 0&&v===void 0?(x=x+" - 1",v="0",E=">="):v!==void 0&&x===void 0&&(x="0",E="<"),E===void 0&&(Number(x)>Number(v)?E=">=":E="<"));let w;if(g)w=`while ( ${v} )`;else{const O={start:x,end:v},F=O.start,B=O.end;let k;const Y=()=>E.includes("<")?"+=":"-=";if(A!=null)switch(typeof A){case"function":k=e.flowStagesNode(t.updateNode,"void").code.replace(/\t|;/g,"");break;case"number":k=S+" "+Y()+" "+e.generateConst(T,A);break;case"string":k=S+" "+A;break;default:A.isNode?k=S+" "+Y()+" "+A.build(e):(console.error("THREE.TSL: 'Loop( { update: ... } )' is not a function, string or number."),k="break /* invalid update */")}else T==="int"||T==="uint"?A=E.includes("<")?"++":"--":A=Y()+" 1.",k=S+" "+A;const $=e.getVar(T,S)+" = "+F,Q=S+" "+E+" "+B;w=`for ( ${$}; ${Q}; ${k} )`}e.addFlowCode((u===0?`
`:"")+e.tab+w+` {

`).addFlowTab()}const r=s.build(e,"void"),l=t.returnsNode?t.returnsNode.build(e):"";e.removeFlowTab().addFlowCode(`
`+e.tab+r);for(let u=0,d=this.params.length-1;u<d;u++)e.addFlowCode((u===0?"":e.tab)+`}

`).removeFlowTab();return e.addFlowTab(),l}}const Zi=(...a)=>Qe(new mF(Eh(a,"int"))).toStack(),NZ=()=>oc("continue").toStack(),gF=()=>oc("break").toStack(),wT=new WeakMap,zo=new Un,AP=be(({bufferMap:a,influence:e,stride:t,width:i,depth:s,offset:r})=>{const l=pe(oF).mul(t).add(r),u=l.div(i),d=l.sub(u.mul(i));return Us(a,rr(d,u)).depth(s).xyz.mul(e)});function PZ(a){const e=a.morphAttributes.position!==void 0,t=a.morphAttributes.normal!==void 0,i=a.morphAttributes.color!==void 0,s=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,r=s!==void 0?s.length:0;let l=wT.get(a);if(l===void 0||l.count!==r){let O=function(){A.dispose(),wT.delete(a),a.removeEventListener("dispose",O)};var u=O;l!==void 0&&l.texture.dispose();const d=a.morphAttributes.position||[],f=a.morphAttributes.normal||[],g=a.morphAttributes.color||[];let x=0;e===!0&&(x=1),t===!0&&(x=2),i===!0&&(x=3);let v=a.attributes.position.count*x,S=1;const T=4096;v>T&&(S=Math.ceil(v/T),v=T);const E=new Float32Array(v*S*4*r),A=new Dg(E,v,S,r);A.type=os,A.needsUpdate=!0;const w=x*4;for(let F=0;F<r;F++){const B=d[F],k=f[F],Y=g[F],$=v*S*4*F;for(let Q=0;Q<B.count;Q++){const z=Q*w;e===!0&&(zo.fromBufferAttribute(B,Q),E[$+z+0]=zo.x,E[$+z+1]=zo.y,E[$+z+2]=zo.z,E[$+z+3]=0),t===!0&&(zo.fromBufferAttribute(k,Q),E[$+z+4]=zo.x,E[$+z+5]=zo.y,E[$+z+6]=zo.z,E[$+z+7]=0),i===!0&&(zo.fromBufferAttribute(Y,Q),E[$+z+8]=zo.x,E[$+z+9]=zo.y,E[$+z+10]=zo.z,E[$+z+11]=Y.itemSize===4?zo.w:1)}}l={count:r,texture:A,stride:x,size:new it(v,S)},wT.set(a,l),a.addEventListener("dispose",O)}return l}class _F extends Pn{static get type(){return"MorphNode"}constructor(e){super("void"),this.mesh=e,this.morphBaseInfluence=wn(1),this.updateType=ii.OBJECT}setup(e){const{geometry:t}=e,i=t.morphAttributes.position!==void 0,s=t.hasAttribute("normal")&&t.morphAttributes.normal!==void 0,r=t.morphAttributes.position||t.morphAttributes.normal||t.morphAttributes.color,l=r!==void 0?r.length:0,{texture:u,stride:d,size:f}=PZ(t);i===!0&&Fs.mulAssign(this.morphBaseInfluence),s===!0&&No.mulAssign(this.morphBaseInfluence);const g=pe(f.width);Zi(l,({i:x})=>{const v=te(0).toVar();this.mesh.count>1&&this.mesh.morphTexture!==null&&this.mesh.morphTexture!==void 0?v.assign(Us(this.mesh.morphTexture,rr(pe(x).add(1),pe(Zc))).r):v.assign(hs("morphTargetInfluences","float").element(x).toVar()),yn(v.notEqual(0),()=>{i===!0&&Fs.addAssign(AP({bufferMap:u,influence:v,stride:d,width:g,depth:x,offset:pe(0)})),s===!0&&No.addAssign(AP({bufferMap:u,influence:v,stride:d,width:g,depth:x,offset:pe(1)}))})})}update(){const e=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?e.value=1:e.value=1-this.mesh.morphTargetInfluences.reduce((t,i)=>t+i,0)}}const xF=Wn(_F).setParameterLength(1);class cd extends Pn{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}}class yF extends cd{static get type(){return"AONode"}constructor(e=null){super(),this.aoNode=e}setup(e){e.context.ambientOcclusion.mulAssign(this.aoNode)}}class vF extends bA{static get type(){return"LightingContextNode"}constructor(e,t=null,i=null,s=null){super(e),this.lightingModel=t,this.backdropNode=i,this.backdropAlphaNode=s,this._value=null}getContext(){const{backdropNode:e,backdropAlphaNode:t}=this,i=xe().toVar("directDiffuse"),s=xe().toVar("directSpecular"),r=xe().toVar("indirectDiffuse"),l=xe().toVar("indirectSpecular"),u={directDiffuse:i,directSpecular:s,indirectDiffuse:r,indirectSpecular:l};return{radiance:xe().toVar("radiance"),irradiance:xe().toVar("irradiance"),iblIrradiance:xe().toVar("iblIrradiance"),ambientOcclusion:te(1).toVar("ambientOcclusion"),reflectedLight:u,backdrop:e,backdropAlpha:t}}setup(e){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||e.context.lightingModel,super.setup(e)}}const SF=Wn(vF);class bF extends cd{static get type(){return"IrradianceNode"}constructor(e){super(),this.node=e}setup(e){e.context.irradiance.addAssign(this.node)}}let Tm,Mm;class ks extends Pn{static get type(){return"ScreenNode"}constructor(e){super(),this.scope=e,this.isViewportNode=!0}getNodeType(){return this.scope===ks.VIEWPORT?"vec4":"vec2"}getUpdateType(){let e=ii.NONE;return(this.scope===ks.SIZE||this.scope===ks.VIEWPORT)&&(e=ii.RENDER),this.updateType=e,e}update({renderer:e}){const t=e.getRenderTarget();this.scope===ks.VIEWPORT?t!==null?Mm.copy(t.viewport):(e.getViewport(Mm),Mm.multiplyScalar(e.getPixelRatio())):t!==null?(Tm.width=t.width,Tm.height=t.height):e.getDrawingBufferSize(Tm)}setup(){const e=this.scope;let t=null;return e===ks.SIZE?t=wn(Tm||(Tm=new it)):e===ks.VIEWPORT?t=wn(Mm||(Mm=new Un)):t=nt(Qg.div(wg)),t}generate(e){if(this.scope===ks.COORDINATE){let t=e.getFragCoord();if(e.isFlipY()){const i=e.getNodeProperties(wg).outputNode.build(e);t=`${e.getType("vec2")}( ${t}.x, ${i}.y - ${t}.y )`}return t}return super.generate(e)}}ks.COORDINATE="coordinate";ks.VIEWPORT="viewport";ks.SIZE="size";ks.UV="uv";const Ql=Vt(ks,ks.UV),wg=Vt(ks,ks.SIZE),Qg=Vt(ks,ks.COORDINATE),ec=Vt(ks,ks.VIEWPORT),TF=ec.zw,MF=Qg.sub(ec.xy),IZ=MF.div(TF),LZ=be(()=>(console.warn('THREE.TSL: "viewportResolution" is deprecated. Use "screenSize" instead.'),wg),"vec2").once()(),yf=new it;class e_ extends Ga{static get type(){return"ViewportTextureNode"}constructor(e=Ql,t=null,i=null){let s=null;i===null?(s=new aw,s.minFilter=Cr,i=s):s=i,super(i,e,t),this.generateMipmaps=!1,this.defaultFramebuffer=s,this.isOutputTextureNode=!0,this.updateBeforeType=ii.RENDER,this._textures=new WeakMap}getFrameBufferTexture(e=null){const t=this.referenceNode?this.referenceNode.defaultFramebuffer:this.defaultFramebuffer;if(e===null)return t;if(this._textures.has(e)===!1){const i=t.clone();this._textures.set(e,i)}return this._textures.get(e)}updateBefore(e){const t=e.renderer,i=t.getRenderTarget();i===null?t.getDrawingBufferSize(yf):yf.set(i.width,i.height);const s=this.getFrameBufferTexture(i);(s.image.width!==yf.width||s.image.height!==yf.height)&&(s.image.width=yf.width,s.image.height=yf.height,s.needsUpdate=!0);const r=s.generateMipmaps;s.generateMipmaps=this.generateMipmaps,t.copyFramebufferToTexture(s),s.generateMipmaps=r,this.value=s}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}}const DZ=Wn(e_).setParameterLength(0,3),$A=Wn(e_,null,null,{generateMipmaps:!0}).setParameterLength(0,3);let AT=null;class wF extends e_{static get type(){return"ViewportDepthTextureNode"}constructor(e=Ql,t=null){AT===null&&(AT=new Ro),super(e,t,AT)}}const XA=Wn(wF).setParameterLength(0,2);class ro extends Pn{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===ro.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,i=this.valueNode;let s=null;if(t===ro.DEPTH_BASE)i!==null&&(s=AF().assign(i));else if(t===ro.DEPTH)e.isPerspectiveCamera?s=qA(Bs.z,$l,Xl):s=zf(Bs.z,$l,Xl);else if(t===ro.LINEAR_DEPTH)if(i!==null)if(e.isPerspectiveCamera){const r=YA(i,$l,Xl);s=zf(r,$l,Xl)}else s=i;else s=zf(Bs.z,$l,Xl);return s}}ro.DEPTH_BASE="depthBase";ro.DEPTH="depth";ro.LINEAR_DEPTH="linearDepth";const zf=(a,e,t)=>a.add(e).div(e.sub(t)),UZ=(a,e,t)=>e.sub(t).mul(a).sub(e),qA=(a,e,t)=>e.add(a).mul(t).div(t.sub(e).mul(a)),YA=(a,e,t)=>e.mul(t).div(t.sub(e).mul(a).sub(t)),ZA=(a,e,t)=>{e=e.max(1e-6).toVar();const i=dl(a.negate().div(e)),s=dl(t.div(e));return i.div(s)},FZ=(a,e,t)=>{const i=a.mul(T0(t.div(e)));return te(Math.E).pow(i).mul(e).negate()},AF=Wn(ro,ro.DEPTH_BASE),KA=Vt(ro,ro.DEPTH),up=Wn(ro,ro.LINEAR_DEPTH).setParameterLength(0,1),BZ=up(XA());KA.assign=a=>AF(a);class ma extends Pn{static get type(){return"ClippingNode"}constructor(e=ma.DEFAULT){super(),this.scope=e}setup(e){super.setup(e);const t=e.clippingContext,{intersectionPlanes:i,unionPlanes:s}=t;return this.hardwareClipping=e.material.hardwareClipping,this.scope===ma.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(i,s):this.scope===ma.HARDWARE?this.setupHardwareClipping(s,e):this.setupDefault(i,s)}setupAlphaToCoverage(e,t){return be(()=>{const i=te().toVar("distanceToPlane"),s=te().toVar("distanceToGradient"),r=te(1).toVar("clipOpacity"),l=t.length;if(this.hardwareClipping===!1&&l>0){const d=ca(t);Zi(l,({i:f})=>{const g=d.element(f);i.assign(Bs.dot(g.xyz).negate().add(g.w)),s.assign(i.fwidth().div(2)),r.mulAssign(va(s.negate(),s,i))})}const u=e.length;if(u>0){const d=ca(e),f=te(1).toVar("intersectionClipOpacity");Zi(u,({i:g})=>{const x=d.element(g);i.assign(Bs.dot(x.xyz).negate().add(x.w)),s.assign(i.fwidth().div(2)),f.mulAssign(va(s.negate(),s,i).oneMinus())}),r.mulAssign(f.oneMinus())}zi.a.mulAssign(r),zi.a.equal(0).discard()})()}setupDefault(e,t){return be(()=>{const i=t.length;if(this.hardwareClipping===!1&&i>0){const r=ca(t);Zi(i,({i:l})=>{const u=r.element(l);Bs.dot(u.xyz).greaterThan(u.w).discard()})}const s=e.length;if(s>0){const r=ca(e),l=xa(!0).toVar("clipped");Zi(s,({i:u})=>{const d=r.element(u);l.assign(Bs.dot(d.xyz).greaterThan(d.w).and(l))}),l.discard()}})()}setupHardwareClipping(e,t){const i=e.length;return t.enableHardwareClipping(i),be(()=>{const s=ca(e),r=Kg(t.getClipDistance());Zi(i,({i:l})=>{const u=s.element(l),d=Bs.dot(u.xyz).sub(u.w).negate();r.element(l).assign(d)})})()}}ma.ALPHA_TO_COVERAGE="alphaToCoverage";ma.DEFAULT="default";ma.HARDWARE="hardware";const OZ=()=>Qe(new ma),VZ=()=>Qe(new ma(ma.ALPHA_TO_COVERAGE)),zZ=()=>Qe(new ma(ma.HARDWARE)),kZ=.05,EP=be(([a])=>uc(ri(1e4,Ho(ri(17,a.x).add(ri(.1,a.y)))).mul(Ws(.1,ms(Ho(ri(13,a.y).add(a.x))))))),RP=be(([a])=>EP(nt(EP(a.xy),a.z))),GZ=be(([a])=>{const e=Ns(pl(pA(a.xyz)),pl(mA(a.xyz))),t=te(1).div(te(kZ).mul(e)).toVar("pixScale"),i=nt(ap(fl(dl(t))),ap(M0(dl(t)))),s=nt(RP(fl(i.x.mul(a.xyz))),RP(fl(i.y.mul(a.xyz)))),r=uc(dl(t)),l=Ws(ri(r.oneMinus(),s.x),ri(r,s.y)),u=Co(r,r.oneMinus()),d=xe(l.mul(l).div(ri(2,u).mul(Mi(1,u))),l.sub(ri(.5,u)).div(Mi(1,u)),Mi(1,Mi(1,l).mul(Mi(1,l)).div(ri(2,u).mul(Mi(1,u))))),f=l.lessThan(u.oneMinus()).select(l.lessThan(u).select(d.x,d.y),d.z);return ya(f,1e-6,1)}).setLayout({name:"getAlphaHashThreshold",type:"float",inputs:[{name:"position",type:"vec3"}]});class EF extends RA{static get type(){return"VertexColorNode"}constructor(e){super(null,"vec4"),this.isVertexColorNode=!0,this.index=e}getAttributeName(){const e=this.index;return"color"+(e>0?e:"")}generate(e){const t=this.getAttributeName(e),i=e.hasGeometryAttribute(t);let s;return i===!0?s=super.generate(e):s=e.generateConst(this.nodeType,new Un(1,1,1,1)),s}serialize(e){super.serialize(e),e.index=this.index}deserialize(e){super.deserialize(e),this.index=e.index}}const RF=(a=0)=>Qe(new EF(a)),CF=be(([a,e])=>Co(1,a.oneMinus().div(e)).oneMinus()).setLayout({name:"blendBurn",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),NF=be(([a,e])=>Co(a.div(e.oneMinus()),1)).setLayout({name:"blendDodge",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),PF=be(([a,e])=>a.oneMinus().mul(e.oneMinus()).oneMinus()).setLayout({name:"blendScreen",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),IF=be(([a,e])=>Ri(a.mul(2).mul(e),a.oneMinus().mul(2).mul(e.oneMinus()).oneMinus(),A0(.5,a))).setLayout({name:"blendOverlay",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),HZ=be(([a,e])=>{const t=e.a.add(a.a.mul(e.a.oneMinus()));return tn(e.rgb.mul(e.a).add(a.rgb.mul(a.a).mul(e.a.oneMinus())).div(t),t)}).setLayout({name:"blendColor",type:"vec4",inputs:[{name:"base",type:"vec4"},{name:"blend",type:"vec4"}]}),LF=be(([a])=>tn(a.rgb.mul(a.a),a.a),{color:"vec4",return:"vec4"}),WZ=be(([a])=>(yn(a.a.equal(0),()=>tn(0)),tn(a.rgb.div(a.a),a.a)),{color:"vec4",return:"vec4"}),$Z=(...a)=>(console.warn('THREE.TSL: "burn" has been renamed. Use "blendBurn" instead.'),CF(a)),XZ=(...a)=>(console.warn('THREE.TSL: "dodge" has been renamed. Use "blendDodge" instead.'),NF(a)),qZ=(...a)=>(console.warn('THREE.TSL: "screen" has been renamed. Use "blendScreen" instead.'),PF(a)),YZ=(...a)=>(console.warn('THREE.TSL: "overlay" has been renamed. Use "blendOverlay" instead.'),IF(a));class ys extends br{static get type(){return"NodeMaterial"}get type(){return this.constructor.type}set type(e){}constructor(){super(),this.isNodeMaterial=!0,this.fog=!0,this.lights=!1,this.hardwareClipping=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.maskNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.receivedShadowPositionNode=null,this.castShadowPositionNode=null,this.receivedShadowNode=null,this.castShadowNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null,Object.defineProperty(this,"shadowPositionNode",{get:()=>this.receivedShadowPositionNode,set:e=>{console.warn('THREE.NodeMaterial: ".shadowPositionNode" was renamed to ".receivedShadowPositionNode".'),this.receivedShadowPositionNode=e}})}customProgramCacheKey(){return this.type+kw(this)}build(e){this.setup(e)}setupObserver(e){return new sD(e)}setup(e){e.context.setupNormal=()=>Vf(this.setupNormal(e),"NORMAL","vec3"),e.context.setupPositionView=()=>this.setupPositionView(e),e.context.setupModelViewProjection=()=>this.setupModelViewProjection(e);const t=e.renderer,i=t.getRenderTarget();e.addStack();const s=Vf(this.setupVertex(e),"VERTEX"),r=this.vertexNode||s;e.stack.outputNode=r,this.setupHardwareClipping(e),this.geometryNode!==null&&(e.stack.outputNode=e.stack.outputNode.bypass(this.geometryNode)),e.addFlow("vertex",e.removeStack()),e.addStack();let l;const u=this.setupClipping(e);if((this.depthWrite===!0||this.depthTest===!0)&&(i!==null?i.depthBuffer===!0&&this.setupDepth(e):t.depth===!0&&this.setupDepth(e)),this.fragmentNode===null){this.setupDiffuseColor(e),this.setupVariants(e);const d=this.setupLighting(e);u!==null&&e.stack.add(u);const f=tn(d,zi.a).max(0);l=this.setupOutput(e,f),Of.assign(l);const g=this.outputNode!==null;if(g&&(l=this.outputNode),i!==null){const x=t.getMRT(),v=this.mrtNode;x!==null?(g&&Of.assign(l),l=x,v!==null&&(l=x.merge(v))):v!==null&&(l=v)}}else{let d=this.fragmentNode;d.isOutputStructNode!==!0&&(d=tn(d)),l=this.setupOutput(e,d)}e.stack.outputNode=l,e.addFlow("fragment",e.removeStack()),e.observer=this.setupObserver(e)}setupClipping(e){if(e.clippingContext===null)return null;const{unionPlanes:t,intersectionPlanes:i}=e.clippingContext;let s=null;if(t.length>0||i.length>0){const r=e.renderer.samples;this.alphaToCoverage&&r>1?s=VZ():e.stack.add(OZ())}return s}setupHardwareClipping(e){if(this.hardwareClipping=!1,e.clippingContext===null)return;const t=e.clippingContext.unionPlanes.length;t>0&&t<=8&&e.isAvailable("clipDistance")&&(e.stack.add(zZ()),this.hardwareClipping=!0)}setupDepth(e){const{renderer:t,camera:i}=e;let s=this.depthNode;if(s===null){const r=t.getMRT();r&&r.has("depth")?s=r.get("depth"):t.logarithmicDepthBuffer===!0&&(i.isPerspectiveCamera?s=ZA(Bs.z,$l,Xl):s=zf(Bs.z,$l,Xl))}s!==null&&KA.assign(s).toStack()}setupPositionView(){return ac.mul(Fs).xyz}setupModelViewProjection(){return Wo.mul(Bs)}setupVertex(e){return e.addStack(),this.setupPosition(e),e.context.vertex=e.removeStack(),GA}setupPosition(e){const{object:t,geometry:i}=e;if((i.morphAttributes.position||i.morphAttributes.normal||i.morphAttributes.color)&&xF(t).toStack(),t.isSkinnedMesh===!0&&pF(t).toStack(),this.displacementMap){const s=ql("displacementMap","texture"),r=ql("displacementScale","float"),l=ql("displacementBias","float");Fs.addAssign(No.normalize().mul(s.x.mul(r).add(l)))}return t.isBatchedMesh&&hF(t).toStack(),t.isInstancedMesh&&t.instanceMatrix&&t.instanceMatrix.isInstancedBufferAttribute===!0&&cF(t).toStack(),this.positionNode!==null&&Fs.assign(Vf(this.positionNode,"POSITION","vec3")),Fs}setupDiffuseColor({object:e,geometry:t}){this.maskNode!==null&&xa(this.maskNode).not().discard();let i=this.colorNode?tn(this.colorNode):xv;this.vertexColors===!0&&t.hasAttribute("color")&&(i=i.mul(RF())),e.instanceColor&&(i=ko("vec3","vInstanceColor").mul(i)),e.isBatchedMesh&&e._colorsTexture&&(i=ko("vec3","vBatchColor").mul(i)),zi.assign(i);const s=this.opacityNode?te(this.opacityNode):O0;zi.a.assign(zi.a.mul(s));let r=null;(this.alphaTestNode!==null||this.alphaTest>0)&&(r=this.alphaTestNode!==null?te(this.alphaTestNode):DU,zi.a.lessThanEqual(r).discard()),this.alphaHash===!0&&zi.a.lessThan(GZ(Fs)).discard(),this.transparent===!1&&this.blending===To&&this.alphaToCoverage===!1?zi.a.assign(1):r===null&&zi.a.lessThanEqual(0).discard()}setupVariants(){}setupOutgoingLight(){return this.lights===!0?xe(0):zi.rgb}setupNormal(){return this.normalNode?xe(this.normalNode):kU}setupEnvironment(){let e=null;return this.envNode?e=this.envNode:this.envMap&&(e=this.envMap.isCubeTexture?ql("envMap","cubeTexture"):ql("envMap","texture")),e}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new bF(kA)),t}setupLights(e){const t=[],i=this.setupEnvironment(e);i&&i.isLightingNode&&t.push(i);const s=this.setupLightMap(e);if(s&&s.isLightingNode&&t.push(s),this.aoNode!==null||e.material.aoMap){const l=this.aoNode!==null?this.aoNode:rF;t.push(new yF(l))}let r=this.lightsNode||e.lightsNode;return t.length>0&&(r=e.renderer.lighting.createNode([...r.getLights(),...t])),r}setupLightingModel(){}setupLighting(e){const{material:t}=e,{backdropNode:i,backdropAlphaNode:s,emissiveNode:r}=this,u=this.lights===!0||this.lightsNode!==null?this.setupLights(e):null;let d=this.setupOutgoingLight(e);if(u&&u.getScope().hasLights){const f=this.setupLightingModel(e)||null;d=SF(u,f,i,s)}else i!==null&&(d=xe(s!==null?Ri(d,i,s):i));return(r&&r.isNode===!0||t.emissive&&t.emissive.isColor===!0)&&(mM.assign(xe(r||FU)),d=d.add(mM)),d}setupFog(e,t){const i=e.fogNode;return i&&(Of.assign(t),t=tn(i.toVar())),t}setupPremultipliedAlpha(e,t){return LF(t)}setupOutput(e,t){return this.fog===!0&&(t=this.setupFog(e,t)),this.premultipliedAlpha===!0&&(t=this.setupPremultipliedAlpha(e,t)),t}setDefaultValues(e){for(const i in e){const s=e[i];this[i]===void 0&&(this[i]=s,s&&s.clone&&(this[i]=s.clone()))}const t=Object.getOwnPropertyDescriptors(e.constructor.prototype);for(const i in t)Object.getOwnPropertyDescriptor(this.constructor.prototype,i)===void 0&&t[i].get!==void 0&&Object.defineProperty(this.constructor.prototype,i,t[i])}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{},nodes:{}});const i=br.prototype.toJSON.call(this,e),s=gg(this);i.inputNodes={};for(const{property:l,childNode:u}of s)i.inputNodes[l]=u.toJSON(e).uuid;function r(l){const u=[];for(const d in l){const f=l[d];delete f.metadata,u.push(f)}return u}if(t){const l=r(e.textures),u=r(e.images),d=r(e.nodes);l.length>0&&(i.textures=l),u.length>0&&(i.images=u),d.length>0&&(i.nodes=d)}return i}copy(e){return this.lightsNode=e.lightsNode,this.envNode=e.envNode,this.colorNode=e.colorNode,this.normalNode=e.normalNode,this.opacityNode=e.opacityNode,this.backdropNode=e.backdropNode,this.backdropAlphaNode=e.backdropAlphaNode,this.alphaTestNode=e.alphaTestNode,this.maskNode=e.maskNode,this.positionNode=e.positionNode,this.geometryNode=e.geometryNode,this.depthNode=e.depthNode,this.receivedShadowPositionNode=e.receivedShadowPositionNode,this.castShadowPositionNode=e.castShadowPositionNode,this.receivedShadowNode=e.receivedShadowNode,this.castShadowNode=e.castShadowNode,this.outputNode=e.outputNode,this.mrtNode=e.mrtNode,this.fragmentNode=e.fragmentNode,this.vertexNode=e.vertexNode,super.copy(e)}}const ZZ=new $r;class DF extends ys{static get type(){return"LineBasicNodeMaterial"}constructor(e){super(),this.isLineBasicNodeMaterial=!0,this.setDefaultValues(ZZ),this.setValues(e)}}const KZ=new f0;class UF extends ys{static get type(){return"LineDashedNodeMaterial"}constructor(e){super(),this.isLineDashedNodeMaterial=!0,this.setDefaultValues(KZ),this.dashOffset=0,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setupVariants(){const e=this.offsetNode?te(this.offsetNode):zA,t=this.dashScaleNode?te(this.dashScaleNode):BA,i=this.dashSizeNode?te(this.dashSizeNode):OA,s=this.gapSizeNode?te(this.gapSizeNode):VA;Nh.assign(i),Tg.assign(s);const r=yl(to("lineDistance").mul(t));(e?r.add(e):r).mod(Nh.add(Tg)).greaterThan(Nh).discard()}}let ET=null;class FF extends e_{static get type(){return"ViewportSharedTextureNode"}constructor(e=Ql,t=null){ET===null&&(ET=new aw),super(e,t,ET)}updateReference(){return this}}const BF=Wn(FF).setParameterLength(0,2),JZ=new f0;class jZ extends ys{static get type(){return"Line2NodeMaterial"}constructor(e={}){super(),this.isLine2NodeMaterial=!0,this.setDefaultValues(JZ),this.useColor=e.vertexColors,this.dashOffset=0,this.lineColorNode=null,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.blending=kr,this._useDash=e.dashed,this._useAlphaToCoverage=!0,this._useWorldUnits=!1,this.setValues(e)}setup(e){const{renderer:t}=e,i=this._useAlphaToCoverage,s=this.useColor,r=this._useDash,l=this._useWorldUnits,u=be(({start:f,end:g})=>{const x=Wo.element(2).element(2),T=Wo.element(3).element(2).mul(-.5).div(x).sub(f.z).div(g.z.sub(f.z));return tn(Ri(f.xyz,g.xyz,T),g.w)}).setLayout({name:"trimSegment",type:"vec4",inputs:[{name:"start",type:"vec4"},{name:"end",type:"vec4"}]});this.vertexNode=be(()=>{const f=to("instanceStart"),g=to("instanceEnd"),x=tn(ac.mul(tn(f,1))).toVar("start"),v=tn(ac.mul(tn(g,1))).toVar("end");if(r){const k=this.dashScaleNode?te(this.dashScaleNode):BA,Y=this.offsetNode?te(this.offsetNode):zA,$=to("instanceDistanceStart"),Q=to("instanceDistanceEnd");let z=Er.y.lessThan(.5).select(k.mul($),k.mul(Q));z=z.add(Y),ko("float","lineDistance").assign(z)}l&&(ko("vec3","worldStart").assign(x.xyz),ko("vec3","worldEnd").assign(v.xyz));const S=ec.z.div(ec.w),T=Wo.element(2).element(3).equal(-1);yn(T,()=>{yn(x.z.lessThan(0).and(v.z.greaterThan(0)),()=>{v.assign(u({start:x,end:v}))}).ElseIf(v.z.lessThan(0).and(x.z.greaterThanEqual(0)),()=>{x.assign(u({start:v,end:x}))})});const E=Wo.mul(x),A=Wo.mul(v),w=E.xyz.div(E.w),O=A.xyz.div(A.w),F=O.xy.sub(w.xy).toVar();F.x.assign(F.x.mul(S)),F.assign(F.normalize());const B=tn().toVar();if(l){const k=v.xyz.sub(x.xyz).normalize(),Y=Ri(x.xyz,v.xyz,.5).normalize(),$=k.cross(Y).normalize(),Q=k.cross($),z=ko("vec4","worldPos");z.assign(Er.y.lessThan(.5).select(x,v));const q=Yy.mul(.5);z.addAssign(tn(Er.x.lessThan(0).select($.mul(q),$.mul(q).negate()),0)),r||(z.addAssign(tn(Er.y.lessThan(.5).select(k.mul(q).negate(),k.mul(q)),0)),z.addAssign(tn(Q.mul(q),0)),yn(Er.y.greaterThan(1).or(Er.y.lessThan(0)),()=>{z.subAssign(tn(Q.mul(2).mul(q),0))})),B.assign(Wo.mul(z));const oe=xe().toVar();oe.assign(Er.y.lessThan(.5).select(w,O)),B.z.assign(oe.z.mul(B.w))}else{const k=nt(F.y,F.x.negate()).toVar("offset");F.x.assign(F.x.div(S)),k.x.assign(k.x.div(S)),k.assign(Er.x.lessThan(0).select(k.negate(),k)),yn(Er.y.lessThan(0),()=>{k.assign(k.sub(F))}).ElseIf(Er.y.greaterThan(1),()=>{k.assign(k.add(F))}),k.assign(k.mul(Yy)),k.assign(k.div(ec.w)),B.assign(Er.y.lessThan(.5).select(E,A)),k.assign(k.mul(B.w)),B.assign(B.add(tn(k,0,0)))}return B})();const d=be(({p1:f,p2:g,p3:x,p4:v})=>{const S=f.sub(x),T=v.sub(x),E=g.sub(f),A=S.dot(T),w=T.dot(E),O=S.dot(E),F=T.dot(T),k=E.dot(E).mul(F).sub(w.mul(w)),$=A.mul(w).sub(O.mul(F)).div(k).clamp(),Q=A.add(w.mul($)).div(F).clamp();return nt($,Q)});if(this.colorNode=be(()=>{const f=is();if(r){const v=this.dashSizeNode?te(this.dashSizeNode):OA,S=this.gapSizeNode?te(this.gapSizeNode):VA;Nh.assign(v),Tg.assign(S);const T=ko("float","lineDistance");f.y.lessThan(-1).or(f.y.greaterThan(1)).discard(),T.mod(Nh.add(Tg)).greaterThan(Nh).discard()}const g=te(1).toVar("alpha");if(l){const v=ko("vec3","worldStart"),S=ko("vec3","worldEnd"),T=ko("vec4","worldPos").xyz.normalize().mul(1e5),E=S.sub(v),A=d({p1:v,p2:S,p3:xe(0,0,0),p4:T}),w=v.add(E.mul(A.x)),O=T.mul(A.y),k=w.sub(O).length().div(Yy);if(!r)if(i&&t.samples>1){const Y=k.fwidth();g.assign(va(Y.negate().add(.5),Y.add(.5),k).oneMinus())}else k.greaterThan(.5).discard()}else if(i&&t.samples>1){const v=f.x,S=f.y.greaterThan(0).select(f.y.sub(1),f.y.add(1)),T=v.mul(v).add(S.mul(S)),E=te(T.fwidth()).toVar("dlen");yn(f.y.abs().greaterThan(1),()=>{g.assign(va(E.oneMinus(),E.add(1),T).oneMinus())})}else yn(f.y.abs().greaterThan(1),()=>{const v=f.x,S=f.y.greaterThan(0).select(f.y.sub(1),f.y.add(1));v.mul(v).add(S.mul(S)).greaterThan(1).discard()});let x;if(this.lineColorNode)x=this.lineColorNode;else if(s){const v=to("instanceColorStart"),S=to("instanceColorEnd");x=Er.y.lessThan(.5).select(v,S).mul(xv)}else x=xv;return tn(x,g)})(),this.transparent){const f=this.opacityNode?te(this.opacityNode):O0;this.outputNode=tn(this.colorNode.rgb.mul(f).add(BF().rgb.mul(f.oneMinus())),this.colorNode.a)}super.setup(e)}get worldUnits(){return this._useWorldUnits}set worldUnits(e){this._useWorldUnits!==e&&(this._useWorldUnits=e,this.needsUpdate=!0)}get dashed(){return this._useDash}set dashed(e){this._useDash!==e&&(this._useDash=e,this.needsUpdate=!0)}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}const OF=a=>Qe(a).mul(.5).add(.5),QZ=a=>Qe(a).mul(2).sub(1),eK=new xw;class VF extends ys{static get type(){return"MeshNormalNodeMaterial"}constructor(e){super(),this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(eK),this.setValues(e)}setupDiffuseColor(){const e=this.opacityNode?te(this.opacityNode):O0;zi.assign(P0(tn(OF(Yi),e),zr))}}const JA=be(([a=PA])=>{const e=a.z.atan(a.x).mul(1/(Math.PI*2)).add(.5),t=a.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return nt(e,t)});class zF extends sw{constructor(e=1,t={}){super(e,t),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,t){const i=t.minFilter,s=t.generateMipmaps;t.generateMipmaps=!0,this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const r=new cc(5,5,5),l=JA(PA),u=new ys;u.colorNode=Si(t,l,0),u.side=ns,u.blending=kr;const d=new ts(r,u),f=new rd;f.add(d),t.minFilter===Cr&&(t.minFilter=Ni);const g=new iw(1,10,this),x=e.getMRT();return e.setMRT(null),g.update(e,f),e.setMRT(x),t.minFilter=i,t.currentGenerateMipmaps=s,d.geometry.dispose(),d.material.dispose(),this}}const ng=new WeakMap;class tK extends $s{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=cp(null);const t=new tu;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=ii.RENDER}updateBefore(e){const{renderer:t,material:i}=e,s=this.envNode;if(s.isTextureNode||s.isMaterialReferenceNode){const r=s.isTextureNode?s.value:i[s.property];if(r&&r.isTexture){const l=r.mapping;if(l===Kc||l===Jc){if(ng.has(r)){const u=ng.get(r);CP(u,r.mapping),this._cubeTexture=u}else{const u=r.image;if(nK(u)){const d=new zF(u.height);d.fromEquirectangularTexture(t,r),CP(d.texture,r.mapping),this._cubeTexture=d.texture,ng.set(r,d.texture),r.addEventListener("dispose",kF)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}}function nK(a){return a==null?!1:a.height>0}function kF(a){const e=a.target;e.removeEventListener("dispose",kF);const t=ng.get(e);t!==void 0&&(ng.delete(e),t.dispose())}function CP(a,e){e===Kc?a.mapping=qo:e===Jc&&(a.mapping=ga)}const GF=Wn(tK).setParameterLength(1);class V0 extends cd{static get type(){return"BasicEnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){e.context.environment=GF(this.envNode)}}class iK extends cd{static get type(){return"BasicLightMapNode"}constructor(e=null){super(),this.lightMapNode=e}setup(e){const t=te(1/Math.PI);e.context.irradianceLightMap=this.lightMapNode.mul(t)}}class Tp{start(e){e.lightsNode.setupLights(e,e.lightsNode.getLightNodes(e)),this.indirect(e)}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class HF extends Tp{constructor(){super()}indirect({context:e}){const t=e.ambientOcclusion,i=e.reflectedLight,s=e.irradianceLightMap;i.indirectDiffuse.assign(tn(0)),s?i.indirectDiffuse.addAssign(s):i.indirectDiffuse.addAssign(tn(1,1,1,0)),i.indirectDiffuse.mulAssign(t),i.indirectDiffuse.mulAssign(zi.rgb)}finish(e){const{material:t,context:i}=e,s=i.outgoingLight,r=e.context.environment;if(r)switch(t.combine){case pp:s.rgb.assign(Ri(s.rgb,s.rgb.mul(r.rgb),tg.mul(qy)));break;case GM:s.rgb.assign(Ri(s.rgb,r.rgb,tg.mul(qy)));break;case HM:s.rgb.addAssign(r.rgb.mul(tg.mul(qy)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",t.combine);break}}}const sK=new so;class WF extends ys{static get type(){return"MeshBasicNodeMaterial"}constructor(e){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(sK),this.setValues(e)}setupNormal(){return bp(lp)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new V0(t):null}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new iK(kA)),t}setupOutgoingLight(){return zi.rgb}setupLightingModel(){return new HF}}const hp=be(({f0:a,f90:e,dotVH:t})=>{const i=t.mul(-5.55473).sub(6.98316).mul(t).exp2();return a.mul(i.oneMinus()).add(e.mul(i))}),td=be(a=>a.diffuseColor.mul(1/Math.PI)),rK=()=>te(.25),oK=be(({dotNH:a})=>fv.mul(te(.5)).add(1).mul(te(1/Math.PI)).mul(a.pow(fv))),aK=be(({lightDirection:a})=>{const e=a.add(_s).normalize(),t=Yi.dot(e).clamp(),i=_s.dot(e).clamp(),s=hp({f0:vo,f90:1,dotVH:i}),r=rK(),l=oK({dotNH:t});return s.mul(r).mul(l)});class jA extends HF{constructor(e=!0){super(),this.specular=e}direct({lightDirection:e,lightColor:t,reflectedLight:i}){const r=Yi.dot(e).clamp().mul(t);i.directDiffuse.addAssign(r.mul(td({diffuseColor:zi.rgb}))),this.specular===!0&&i.directSpecular.addAssign(r.mul(aK({lightDirection:e})).mul(tg))}indirect(e){const{ambientOcclusion:t,irradiance:i,reflectedLight:s}=e.context;s.indirectDiffuse.addAssign(i.mul(td({diffuseColor:zi}))),s.indirectDiffuse.mulAssign(t)}}const lK=new yw;class $F extends ys{static get type(){return"MeshLambertNodeMaterial"}constructor(e){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(lK),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new V0(t):null}setupLightingModel(){return new jA(!1)}}const cK=new gw;class XF extends ys{static get type(){return"MeshPhongNodeMaterial"}constructor(e){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues(cK),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new V0(t):null}setupLightingModel(){return new jA}setupVariants(){const e=(this.shininessNode?te(this.shininessNode):UU).max(1e-4);fv.assign(e);const t=this.specularNode||BU;vo.assign(t)}copy(e){return this.shininessNode=e.shininessNode,this.specularNode=e.specularNode,super.copy(e)}}const qF=be(a=>{if(a.geometry.hasAttribute("normal")===!1)return te(0);const e=lp.dFdx().abs().max(lp.dFdy().abs());return e.x.max(e.y).max(e.z)}),QA=be(a=>{const{roughness:e}=a,t=qF();let i=e.max(.0525);return i=i.add(t),i=i.min(1),i}),YF=be(({alpha:a,dotNL:e,dotNV:t})=>{const i=a.pow2(),s=e.mul(i.add(i.oneMinus().mul(t.pow2())).sqrt()),r=t.mul(i.add(i.oneMinus().mul(e.pow2())).sqrt());return Zo(.5,s.add(r).max(JD))}).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),uK=be(({alphaT:a,alphaB:e,dotTV:t,dotBV:i,dotTL:s,dotBL:r,dotNV:l,dotNL:u})=>{const d=u.mul(xe(a.mul(t),e.mul(i),l).length()),f=l.mul(xe(a.mul(s),e.mul(r),u).length());return Zo(.5,d.add(f)).saturate()}).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),ZF=be(({alpha:a,dotNH:e})=>{const t=a.pow2(),i=e.pow2().mul(t.oneMinus()).oneMinus();return t.div(i.pow2()).mul(1/Math.PI)}).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),hK=te(1/Math.PI),dK=be(({alphaT:a,alphaB:e,dotNH:t,dotTH:i,dotBH:s})=>{const r=a.mul(e),l=xe(e.mul(i),a.mul(s),r.mul(t)),u=l.dot(l),d=r.div(u);return hK.mul(r.mul(d.pow2()))}).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),wM=be(({lightDirection:a,f0:e,f90:t,roughness:i,f:s,normalView:r=Yi,USE_IRIDESCENCE:l,USE_ANISOTROPY:u})=>{const d=i.pow2(),f=a.add(_s).normalize(),g=r.dot(a).clamp(),x=r.dot(_s).clamp(),v=r.dot(f).clamp(),S=_s.dot(f).clamp();let T=hp({f0:e,f90:t,dotVH:S}),E,A;if(xg(l)&&(T=S0.mix(T,s)),xg(u)){const w=Zm.dot(a),O=Zm.dot(_s),F=Zm.dot(f),B=Ch.dot(a),k=Ch.dot(_s),Y=Ch.dot(f);E=uK({alphaT:dv,alphaB:d,dotTV:O,dotBV:k,dotTL:w,dotBL:B,dotNV:x,dotNL:g}),A=dK({alphaT:dv,alphaB:d,dotNH:v,dotTH:F,dotBH:Y})}else E=YF({alpha:d,dotNL:g,dotNV:x}),A=ZF({alpha:d,dotNH:v});return T.mul(E).mul(A)}),eE=be(({roughness:a,dotNV:e})=>{const t=tn(-1,-.0275,-.572,.022),i=tn(1,.0425,1.04,-.04),s=a.mul(t).add(i),r=s.x.mul(s.x).min(e.mul(-9.28).exp2()).mul(s.x).add(s.y);return nt(-1.04,1.04).mul(r).add(s.zw)}).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),KF=be(a=>{const{dotNV:e,specularColor:t,specularF90:i,roughness:s}=a,r=eE({dotNV:e,roughness:s});return t.mul(r.x).add(i.mul(r.y))}),JF=be(({f:a,f90:e,dotVH:t})=>{const i=t.oneMinus().saturate(),s=i.mul(i),r=i.mul(s,s).clamp(0,.9999);return a.sub(xe(e).mul(r)).div(r.oneMinus())}).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),fK=be(({roughness:a,dotNH:e})=>{const t=a.pow2(),i=te(1).div(t),r=e.pow2().oneMinus().max(.0078125);return te(2).add(i).mul(r.pow(i.mul(.5))).div(2*Math.PI)}).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),pK=be(({dotNV:a,dotNL:e})=>te(1).div(te(4).mul(e.add(a).sub(e.mul(a))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),mK=be(({lightDirection:a})=>{const e=a.add(_s).normalize(),t=Yi.dot(a).clamp(),i=Yi.dot(_s).clamp(),s=Yi.dot(e).clamp(),r=fK({roughness:v0,dotNH:s}),l=pK({dotNV:i,dotNL:t});return Sh.mul(r).mul(l)}),gK=be(({N:a,V:e,roughness:t})=>{const r=.0078125,l=a.dot(e).saturate(),u=nt(t,l.oneMinus().sqrt());return u.assign(u.mul(.984375).add(r)),u}).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),jF=be(({f:a})=>{const e=a.length();return Ns(e.mul(e).add(a.z).div(e.add(1)),0)}).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),Gc=be(({v1:a,v2:e})=>{const t=a.dot(e),i=t.abs().toVar(),s=i.mul(.0145206).add(.4965155).mul(i).add(.8543985).toVar(),r=i.add(4.1616724).mul(i).add(3.417594).toVar(),l=s.div(r),u=t.greaterThan(0).select(l,Ns(t.mul(t).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(l));return a.cross(e).mul(u)}).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),NP=be(({N:a,V:e,P:t,mInv:i,p0:s,p1:r,p2:l,p3:u})=>{const d=r.sub(s).toVar(),f=u.sub(s).toVar(),g=d.cross(f),x=xe().toVar();return yn(g.dot(t.sub(s)).greaterThanEqual(0),()=>{const v=e.sub(a.mul(e.dot(a))).normalize(),S=a.cross(v).negate(),T=i.mul(Wr(v,S,a).transpose()).toVar(),E=T.mul(s.sub(t)).normalize().toVar(),A=T.mul(r.sub(t)).normalize().toVar(),w=T.mul(l.sub(t)).normalize().toVar(),O=T.mul(u.sub(t)).normalize().toVar(),F=xe(0).toVar();F.addAssign(Gc({v1:E,v2:A})),F.addAssign(Gc({v1:A,v2:w})),F.addAssign(Gc({v1:w,v2:O})),F.addAssign(Gc({v1:O,v2:E})),x.assign(xe(jF({f:F})))}),x}).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),_K=be(({P:a,p0:e,p1:t,p2:i,p3:s})=>{const r=t.sub(e).toVar(),l=s.sub(e).toVar(),u=r.cross(l),d=xe().toVar();return yn(u.dot(a.sub(e)).greaterThanEqual(0),()=>{const f=e.sub(a).normalize().toVar(),g=t.sub(a).normalize().toVar(),x=i.sub(a).normalize().toVar(),v=s.sub(a).normalize().toVar(),S=xe(0).toVar();S.addAssign(Gc({v1:f,v2:g})),S.addAssign(Gc({v1:g,v2:x})),S.addAssign(Gc({v1:x,v2:v})),S.addAssign(Gc({v1:v,v2:f})),d.assign(xe(jF({f:S.abs()})))}),d}).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"P",type:"vec3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),z0=1/6,QF=a=>ri(z0,ri(a,ri(a,a.negate().add(3)).sub(3)).add(1)),AM=a=>ri(z0,ri(a,ri(a,ri(3,a).sub(6))).add(4)),eB=a=>ri(z0,ri(a,ri(a,ri(-3,a).add(3)).add(3)).add(1)),EM=a=>ri(z0,ha(a,3)),PP=a=>QF(a).add(AM(a)),IP=a=>eB(a).add(EM(a)),LP=a=>Ws(-1,AM(a).div(QF(a).add(AM(a)))),DP=a=>Ws(1,EM(a).div(eB(a).add(EM(a)))),UP=(a,e,t)=>{const i=a.uvNode,s=ri(i,e.zw).add(.5),r=fl(s),l=uc(s),u=PP(l.x),d=IP(l.x),f=LP(l.x),g=DP(l.x),x=LP(l.y),v=DP(l.y),S=nt(r.x.add(f),r.y.add(x)).sub(.5).mul(e.xy),T=nt(r.x.add(g),r.y.add(x)).sub(.5).mul(e.xy),E=nt(r.x.add(f),r.y.add(v)).sub(.5).mul(e.xy),A=nt(r.x.add(g),r.y.add(v)).sub(.5).mul(e.xy),w=PP(l.y).mul(Ws(u.mul(a.sample(S).level(t)),d.mul(a.sample(T).level(t)))),O=IP(l.y).mul(Ws(u.mul(a.sample(E).level(t)),d.mul(a.sample(A).level(t))));return w.add(O)},tE=be(([a,e])=>{const t=nt(a.size(pe(e))),i=nt(a.size(pe(e.add(1)))),s=Zo(1,t),r=Zo(1,i),l=UP(a,tn(s,t),fl(e)),u=UP(a,tn(r,i),M0(e));return uc(e).mix(l,u)}),xK=be(([a,e])=>{const t=e.mul(CA(a));return tE(a,t)}),FP=be(([a,e,t,i,s])=>{const r=xe(vA(e.negate(),rc(a),Zo(1,i))),l=xe(pl(s[0].xyz),pl(s[1].xyz),pl(s[2].xyz));return rc(r).mul(t.mul(l))}).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),yK=be(([a,e])=>a.mul(ya(e.mul(2).sub(2),0,1))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),vK=$A(),SK=$A(),BP=be(([a,e,t],{material:i})=>{const r=(i.side===ns?vK:SK).sample(a),l=dl(wg.x).mul(yK(e,t));return tE(r,l)}),OP=be(([a,e,t])=>(yn(t.notEqual(0),()=>{const i=T0(e).negate().div(t);return hA(i.negate().mul(a))}),xe(1))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),bK=be(([a,e,t,i,s,r,l,u,d,f,g,x,v,S,T])=>{let E,A;if(T){E=tn().toVar(),A=xe().toVar();const k=g.sub(1).mul(T.mul(.025)),Y=xe(g.sub(k),g,g.add(k));Zi({start:0,end:3},({i:$})=>{const Q=Y.element($),z=FP(a,e,x,Q,u),q=l.add(z),oe=f.mul(d.mul(tn(q,1))),Ce=nt(oe.xy.div(oe.w)).toVar();Ce.addAssign(1),Ce.divAssign(2),Ce.assign(nt(Ce.x,Ce.y.oneMinus()));const Ne=BP(Ce,t,Q);E.element($).assign(Ne.element($)),E.a.addAssign(Ne.a),A.element($).assign(i.element($).mul(OP(pl(z),v,S).element($)))}),E.a.divAssign(3)}else{const k=FP(a,e,x,g,u),Y=l.add(k),$=f.mul(d.mul(tn(Y,1))),Q=nt($.xy.div($.w)).toVar();Q.addAssign(1),Q.divAssign(2),Q.assign(nt(Q.x,Q.y.oneMinus())),E=BP(Q,t,g),A=i.mul(OP(pl(k),v,S))}const w=A.rgb.mul(E.rgb),O=a.dot(e).clamp(),F=xe(KF({dotNV:O,specularColor:s,specularF90:r,roughness:t})),B=A.r.add(A.g,A.b).div(3);return tn(F.oneMinus().mul(w),E.a.oneMinus().mul(B).oneMinus())}),TK=Wr(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),MK=a=>{const e=a.sqrt();return xe(1).add(e).div(xe(1).sub(e))},VP=(a,e)=>a.sub(e).div(a.add(e)).pow2(),wK=(a,e)=>{const t=a.mul(2*Math.PI*1e-9),i=xe(54856e-17,44201e-17,52481e-17),s=xe(1681e3,1795300,2208400),r=xe(43278e5,93046e5,66121e5),l=te(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(t.mul(2239900).add(e.x).cos()).mul(t.pow2().mul(-45282e5).exp());let u=i.mul(r.mul(2*Math.PI).sqrt()).mul(s.mul(t).add(e).cos()).mul(t.pow2().negate().mul(r).exp());return u=xe(u.x.add(l),u.y,u.z).div(10685e-11),TK.mul(u)},AK=be(({outsideIOR:a,eta2:e,cosTheta1:t,thinFilmThickness:i,baseF0:s})=>{const r=Ri(a,e,va(0,.03,i)),u=a.div(r).pow2().mul(t.pow2().oneMinus()).oneMinus();yn(u.lessThan(0),()=>xe(1));const d=u.sqrt(),f=VP(r,a),g=hp({f0:f,f90:1,dotVH:t}),x=g.oneMinus(),v=r.lessThan(a).select(Math.PI,0),S=te(Math.PI).sub(v),T=MK(s.clamp(0,.9999)),E=VP(T,r.toVec3()),A=hp({f0:E,f90:1,dotVH:d}),w=xe(T.x.lessThan(r).select(Math.PI,0),T.y.lessThan(r).select(Math.PI,0),T.z.lessThan(r).select(Math.PI,0)),O=r.mul(i,d,2),F=xe(S).add(w),B=g.mul(A).clamp(1e-5,.9999),k=B.sqrt(),Y=x.pow2().mul(A).div(xe(1).sub(B)),Q=g.add(Y).toVar(),z=Y.sub(x).toVar();return Zi({start:1,end:2,condition:"<=",name:"m"},({m:q})=>{z.mulAssign(k);const oe=wK(te(q).mul(O),te(q).mul(F)).mul(2);Q.addAssign(z.mul(oe))}),Q.max(xe(0))}).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),EK=be(({normal:a,viewDir:e,roughness:t})=>{const i=a.dot(e).saturate(),s=t.pow2(),r=vr(t.lessThan(.25),te(-339.2).mul(s).add(te(161.4).mul(t)).sub(25.9),te(-8.48).mul(s).add(te(14.3).mul(t)).sub(9.95)),l=vr(t.lessThan(.25),te(44).mul(s).sub(te(23.7).mul(t)).add(3.26),te(1.97).mul(s).sub(te(3.27).mul(t)).add(.72));return vr(t.lessThan(.25),0,te(.1).mul(t).sub(.025)).add(r.mul(i).add(l).exp()).mul(1/Math.PI).saturate()}),RT=xe(.04),CT=te(1);class k0 extends Tp{constructor(e=!1,t=!1,i=!1,s=!1,r=!1,l=!1){super(),this.clearcoat=e,this.sheen=t,this.iridescence=i,this.anisotropy=s,this.transmission=r,this.dispersion=l,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(e){if(this.clearcoat===!0&&(this.clearcoatRadiance=xe().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=xe().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=xe().toVar("clearcoatSpecularIndirect")),this.sheen===!0&&(this.sheenSpecularDirect=xe().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=xe().toVar("sheenSpecularIndirect")),this.iridescence===!0){const t=Yi.dot(_s).clamp();this.iridescenceFresnel=AK({outsideIOR:te(1),eta2:tA,cosTheta1:t,thinFilmThickness:nA,baseF0:vo}),this.iridescenceF0=JF({f:this.iridescenceFresnel,f90:1,dotVH:t})}if(this.transmission===!0){const t=Xo,i=eg.sub(Xo).normalize(),s=cu,r=e.context;r.backdrop=bK(s,i,cl,zi,vo,bg,t,da,jo,Wo,Km,iA,rA,sA,this.dispersion?oA:null),r.backdropAlpha=pv,zi.a.mulAssign(Ri(1,r.backdrop.a,pv))}super.start(e)}computeMultiscattering(e,t,i){const s=Yi.dot(_s).clamp(),r=eE({roughness:cl,dotNV:s}),u=(this.iridescenceF0?S0.mix(vo,this.iridescenceF0):vo).mul(r.x).add(i.mul(r.y)),f=r.x.add(r.y).oneMinus(),g=vo.add(vo.oneMinus().mul(.047619)),x=u.mul(g).div(f.mul(g).oneMinus());e.addAssign(u),t.addAssign(x.mul(f))}direct({lightDirection:e,lightColor:t,reflectedLight:i}){const r=Yi.dot(e).clamp().mul(t);if(this.sheen===!0&&this.sheenSpecularDirect.addAssign(r.mul(mK({lightDirection:e}))),this.clearcoat===!0){const u=bh.dot(e).clamp().mul(t);this.clearcoatSpecularDirect.addAssign(u.mul(wM({lightDirection:e,f0:RT,f90:CT,roughness:Sg,normalView:bh})))}i.directDiffuse.addAssign(r.mul(td({diffuseColor:zi.rgb}))),i.directSpecular.addAssign(r.mul(wM({lightDirection:e,f0:vo,f90:1,roughness:cl,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:e,lightPosition:t,halfWidth:i,halfHeight:s,reflectedLight:r,ltc_1:l,ltc_2:u}){const d=t.add(i).sub(s),f=t.sub(i).sub(s),g=t.sub(i).add(s),x=t.add(i).add(s),v=Yi,S=_s,T=Bs.toVar(),E=gK({N:v,V:S,roughness:cl}),A=l.sample(E).toVar(),w=u.sample(E).toVar(),O=Wr(xe(A.x,0,A.y),xe(0,1,0),xe(A.z,0,A.w)).toVar(),F=vo.mul(w.x).add(vo.oneMinus().mul(w.y)).toVar();r.directSpecular.addAssign(e.mul(F).mul(NP({N:v,V:S,P:T,mInv:O,p0:d,p1:f,p2:g,p3:x}))),r.directDiffuse.addAssign(e.mul(zi).mul(NP({N:v,V:S,P:T,mInv:Wr(1,0,0,0,1,0,0,0,1),p0:d,p1:f,p2:g,p3:x})))}indirect(e){this.indirectDiffuse(e),this.indirectSpecular(e),this.ambientOcclusion(e)}indirectDiffuse(e){const{irradiance:t,reflectedLight:i}=e.context;i.indirectDiffuse.addAssign(t.mul(td({diffuseColor:zi})))}indirectSpecular(e){const{radiance:t,iblIrradiance:i,reflectedLight:s}=e.context;if(this.sheen===!0&&this.sheenSpecularIndirect.addAssign(i.mul(Sh,EK({normal:Yi,viewDir:_s,roughness:v0}))),this.clearcoat===!0){const g=bh.dot(_s).clamp(),x=KF({dotNV:g,specularColor:RT,specularF90:CT,roughness:Sg});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(x))}const r=xe().toVar("singleScattering"),l=xe().toVar("multiScattering"),u=i.mul(1/Math.PI);this.computeMultiscattering(r,l,bg);const d=r.add(l),f=zi.mul(d.r.max(d.g).max(d.b).oneMinus());s.indirectSpecular.addAssign(t.mul(r)),s.indirectSpecular.addAssign(l.mul(u)),s.indirectDiffuse.addAssign(f.mul(u))}ambientOcclusion(e){const{ambientOcclusion:t,reflectedLight:i}=e.context,r=Yi.dot(_s).clamp().add(t),l=cl.mul(-16).oneMinus().negate().exp2(),u=t.sub(r.pow(l).oneMinus()).clamp();this.clearcoat===!0&&this.clearcoatSpecularIndirect.mulAssign(t),this.sheen===!0&&this.sheenSpecularIndirect.mulAssign(t),i.indirectDiffuse.mulAssign(t),i.indirectSpecular.mulAssign(u)}finish({context:e}){const{outgoingLight:t}=e;if(this.clearcoat===!0){const i=bh.dot(_s).clamp(),s=hp({dotVH:i,f0:RT,f90:CT}),r=t.mul(hv.mul(s).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(hv));t.assign(r)}if(this.sheen===!0){const i=Sh.r.max(Sh.g).max(Sh.b).mul(.157).oneMinus(),s=t.mul(i).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);t.assign(s)}}}const zP=te(1),RM=te(-2),wy=te(.8),NT=te(-1),Ay=te(.4),PT=te(2),Ey=te(.305),IT=te(3),kP=te(.21),RK=te(4),GP=te(4),CK=te(16),NK=be(([a])=>{const e=xe(ms(a)).toVar(),t=te(-1).toVar();return yn(e.x.greaterThan(e.z),()=>{yn(e.x.greaterThan(e.y),()=>{t.assign(vr(a.x.greaterThan(0),0,3))}).Else(()=>{t.assign(vr(a.y.greaterThan(0),1,4))})}).Else(()=>{yn(e.z.greaterThan(e.y),()=>{t.assign(vr(a.z.greaterThan(0),2,5))}).Else(()=>{t.assign(vr(a.y.greaterThan(0),1,4))})}),t}).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),PK=be(([a,e])=>{const t=nt().toVar();return yn(e.equal(0),()=>{t.assign(nt(a.z,a.y).div(ms(a.x)))}).ElseIf(e.equal(1),()=>{t.assign(nt(a.x.negate(),a.z.negate()).div(ms(a.y)))}).ElseIf(e.equal(2),()=>{t.assign(nt(a.x.negate(),a.y).div(ms(a.z)))}).ElseIf(e.equal(3),()=>{t.assign(nt(a.z.negate(),a.y).div(ms(a.x)))}).ElseIf(e.equal(4),()=>{t.assign(nt(a.x.negate(),a.z).div(ms(a.y)))}).Else(()=>{t.assign(nt(a.x,a.y).div(ms(a.z)))}),ri(.5,t.add(1))}).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),IK=be(([a])=>{const e=te(0).toVar();return yn(a.greaterThanEqual(wy),()=>{e.assign(zP.sub(a).mul(NT.sub(RM)).div(zP.sub(wy)).add(RM))}).ElseIf(a.greaterThanEqual(Ay),()=>{e.assign(wy.sub(a).mul(PT.sub(NT)).div(wy.sub(Ay)).add(NT))}).ElseIf(a.greaterThanEqual(Ey),()=>{e.assign(Ay.sub(a).mul(IT.sub(PT)).div(Ay.sub(Ey)).add(PT))}).ElseIf(a.greaterThanEqual(kP),()=>{e.assign(Ey.sub(a).mul(RK.sub(IT)).div(Ey.sub(kP)).add(IT))}).Else(()=>{e.assign(te(-2).mul(dl(ri(1.16,a))))}),e}).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),tB=be(([a,e])=>{const t=a.toVar();t.assign(ri(2,t).sub(1));const i=xe(t,1).toVar();return yn(e.equal(0),()=>{i.assign(i.zyx)}).ElseIf(e.equal(1),()=>{i.assign(i.xzy),i.xz.mulAssign(-1)}).ElseIf(e.equal(2),()=>{i.x.mulAssign(-1)}).ElseIf(e.equal(3),()=>{i.assign(i.zyx),i.xz.mulAssign(-1)}).ElseIf(e.equal(4),()=>{i.assign(i.xzy),i.xy.mulAssign(-1)}).ElseIf(e.equal(5),()=>{i.z.mulAssign(-1)}),i}).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),nB=be(([a,e,t,i,s,r])=>{const l=te(t),u=xe(e),d=ya(IK(l),RM,r),f=uc(d),g=fl(d),x=xe(CM(a,u,g,i,s,r)).toVar();return yn(f.notEqual(0),()=>{const v=xe(CM(a,u,g.add(1),i,s,r)).toVar();x.assign(Ri(x,v,f))}),x}),CM=be(([a,e,t,i,s,r])=>{const l=te(t).toVar(),u=xe(e),d=te(NK(u)).toVar(),f=te(Ns(GP.sub(l),0)).toVar();l.assign(Ns(l,GP));const g=te(ap(l)).toVar(),x=nt(PK(u,d).mul(g.sub(2)).add(1)).toVar();return yn(d.greaterThan(2),()=>{x.y.addAssign(g),d.subAssign(3)}),x.x.addAssign(d.mul(g)),x.x.addAssign(f.mul(ri(3,CK))),x.y.addAssign(ri(4,ap(r).sub(g))),x.x.mulAssign(i),x.y.mulAssign(s),a.sample(x).grad(nt(),nt())}),LT=be(({envMap:a,mipInt:e,outputDirection:t,theta:i,axis:s,CUBEUV_TEXEL_WIDTH:r,CUBEUV_TEXEL_HEIGHT:l,CUBEUV_MAX_MIP:u})=>{const d=Gl(i),f=t.mul(d).add(s.cross(t).mul(Ho(i))).add(s.mul(s.dot(t).mul(d.oneMinus())));return CM(a,f,e,r,l,u)}),iB=be(({n:a,latitudinal:e,poleAxis:t,outputDirection:i,weights:s,samples:r,dTheta:l,mipInt:u,envMap:d,CUBEUV_TEXEL_WIDTH:f,CUBEUV_TEXEL_HEIGHT:g,CUBEUV_MAX_MIP:x})=>{const v=xe(vr(e,t,E0(t,i))).toVar();yn(v.equal(xe(0)),()=>{v.assign(xe(i.z,0,i.x.negate()))}),v.assign(rc(v));const S=xe().toVar();return S.addAssign(s.element(0).mul(LT({theta:0,axis:v,outputDirection:i,mipInt:u,envMap:d,CUBEUV_TEXEL_WIDTH:f,CUBEUV_TEXEL_HEIGHT:g,CUBEUV_MAX_MIP:x}))),Zi({start:pe(1),end:a},({i:T})=>{yn(T.greaterThanEqual(r),()=>{gF()});const E=te(l.mul(te(T))).toVar();S.addAssign(s.element(T).mul(LT({theta:E.mul(-1),axis:v,outputDirection:i,mipInt:u,envMap:d,CUBEUV_TEXEL_WIDTH:f,CUBEUV_TEXEL_HEIGHT:g,CUBEUV_MAX_MIP:x}))),S.addAssign(s.element(T).mul(LT({theta:E,axis:v,outputDirection:i,mipInt:u,envMap:d,CUBEUV_TEXEL_WIDTH:f,CUBEUV_TEXEL_HEIGHT:g,CUBEUV_MAX_MIP:x})))}),tn(S,1)}),Uf=4,HP=[.125,.215,.35,.446,.526,.582],mh=20,DT=new ru(-1,1,1,-1,0,1),LK=new Gs(90,1),WP=new Jt;let UT=null,FT=0,BT=0;const fh=(1+Math.sqrt(5))/2,vf=1/fh,$P=[new re(-fh,vf,0),new re(fh,vf,0),new re(-vf,0,fh),new re(vf,0,fh),new re(0,fh,-vf),new re(0,fh,vf),new re(-1,1,-1),new re(1,1,-1),new re(-1,1,1),new re(1,1,1)],DK=new re,sB=new WeakMap,UK=[3,1,5,0,4,2],OT=tB(is(),to("faceIndex")).normalize(),nE=xe(OT.x,OT.y,OT.z);class rB{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}get _hasInitialized(){return this._renderer.hasInitialized()}fromScene(e,t=0,i=.1,s=100,r={}){const{size:l=256,position:u=DK,renderTarget:d=null}=r;if(this._setSize(l),this._hasInitialized===!1){console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.");const g=d||this._allocateTarget();return r.renderTarget=g,this.fromSceneAsync(e,t,i,s,r),g}UT=this._renderer.getRenderTarget(),FT=this._renderer.getActiveCubeFace(),BT=this._renderer.getActiveMipmapLevel();const f=d||this._allocateTarget();return f.depthBuffer=!0,this._init(f),this._sceneToCubeUV(e,i,s,f,u),t>0&&this._blur(f,0,0,t),this._applyPMREM(f),this._cleanup(f),f}async fromSceneAsync(e,t=0,i=.1,s=100,r={}){return this._hasInitialized===!1&&await this._renderer.init(),this.fromScene(e,t,i,s,r)}fromEquirectangular(e,t=null){if(this._hasInitialized===!1){console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead."),this._setSizeFromTexture(e);const i=t||this._allocateTarget();return this.fromEquirectangularAsync(e,i),i}return this._fromTexture(e,t)}async fromEquirectangularAsync(e,t=null){return this._hasInitialized===!1&&await this._renderer.init(),this._fromTexture(e,t)}fromCubemap(e,t=null){if(this._hasInitialized===!1){console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead."),this._setSizeFromTexture(e);const i=t||this._allocateTarget();return this.fromCubemapAsync(e,t),i}return this._fromTexture(e,t)}async fromCubemapAsync(e,t=null){return this._hasInitialized===!1&&await this._renderer.init(),this._fromTexture(e,t)}async compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=qP(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=YP(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose(),this._backgroundBox!==null&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSizeFromTexture(e){e.mapping===qo||e.mapping===ga?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4)}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(UT,FT,BT),e.scissorTest=!1,Ry(e,0,0,e.width,e.height)}_fromTexture(e,t){this._setSizeFromTexture(e),UT=this._renderer.getRenderTarget(),FT=this._renderer.getActiveCubeFace(),BT=this._renderer.getActiveMipmapLevel();const i=t||this._allocateTarget();return this._init(i),this._textureToCubeUV(e,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTarget(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize;return XP(e,t)}_init(e){if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e.width||this._pingPongRenderTarget.height!==e.height){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=XP(e.width,e.height);const{_lodMax:t}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=FK(t)),this._blurMaterial=BK(t,e.width,e.height)}}async _compileMaterial(e){const t=new ts(this._lodPlanes[0],e);await this._renderer.compile(t,DT)}_sceneToCubeUV(e,t,i,s,r){const l=LK;l.near=t,l.far=i;const u=[1,1,1,1,-1,1],d=[1,-1,1,-1,1,-1],f=this._renderer,g=f.autoClear;f.getClearColor(WP),f.autoClear=!1;let x=this._backgroundBox;if(x===null){const T=new so({name:"PMREM.Background",side:ns,depthWrite:!1,depthTest:!1});x=new ts(new cc,T)}let v=!1;const S=e.background;S?S.isColor&&(x.material.color.copy(S),e.background=null,v=!0):(x.material.color.copy(WP),v=!0),f.setRenderTarget(s),f.clear(),v&&f.render(x,l);for(let T=0;T<6;T++){const E=T%3;E===0?(l.up.set(0,u[T],0),l.position.set(r.x,r.y,r.z),l.lookAt(r.x+d[T],r.y,r.z)):E===1?(l.up.set(0,0,u[T]),l.position.set(r.x,r.y,r.z),l.lookAt(r.x,r.y+d[T],r.z)):(l.up.set(0,u[T],0),l.position.set(r.x,r.y,r.z),l.lookAt(r.x,r.y,r.z+d[T]));const A=this._cubeSize;Ry(s,E*A,T>2?A:0,A,A),f.render(e,l)}f.autoClear=g,e.background=S}_textureToCubeUV(e,t){const i=this._renderer,s=e.mapping===qo||e.mapping===ga;s?this._cubemapMaterial===null&&(this._cubemapMaterial=qP(e)):this._equirectMaterial===null&&(this._equirectMaterial=YP(e));const r=s?this._cubemapMaterial:this._equirectMaterial;r.fragmentNode.value=e;const l=this._lodMeshes[0];l.material=r;const u=this._cubeSize;Ry(t,0,0,3*u,2*u),i.setRenderTarget(t),i.render(l,DT)}_applyPMREM(e){const t=this._renderer,i=t.autoClear;t.autoClear=!1;const s=this._lodPlanes.length;for(let r=1;r<s;r++){const l=Math.sqrt(this._sigmas[r]*this._sigmas[r]-this._sigmas[r-1]*this._sigmas[r-1]),u=$P[(s-r-1)%$P.length];this._blur(e,r-1,r,l,u)}t.autoClear=i}_blur(e,t,i,s,r){const l=this._pingPongRenderTarget;this._halfBlur(e,l,t,i,s,"latitudinal",r),this._halfBlur(l,e,i,i,s,"longitudinal",r)}_halfBlur(e,t,i,s,r,l,u){const d=this._renderer,f=this._blurMaterial;l!=="latitudinal"&&l!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const g=3,x=this._lodMeshes[s];x.material=f;const v=sB.get(f),S=this._sizeLods[i]-1,T=isFinite(r)?Math.PI/(2*S):2*Math.PI/(2*mh-1),E=r/T,A=isFinite(r)?1+Math.floor(g*E):mh;A>mh&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${A} samples when the maximum is set to ${mh}`);const w=[];let O=0;for(let $=0;$<mh;++$){const Q=$/E,z=Math.exp(-Q*Q/2);w.push(z),$===0?O+=z:$<A&&(O+=2*z)}for(let $=0;$<w.length;$++)w[$]=w[$]/O;e.texture.frame=(e.texture.frame||0)+1,v.envMap.value=e.texture,v.samples.value=A,v.weights.array=w,v.latitudinal.value=l==="latitudinal"?1:0,u&&(v.poleAxis.value=u);const{_lodMax:F}=this;v.dTheta.value=T,v.mipInt.value=F-i;const B=this._sizeLods[s],k=3*B*(s>F-Uf?s-F+Uf:0),Y=4*(this._cubeSize-B);Ry(t,k,Y,3*B,2*B),d.setRenderTarget(t),d.render(x,DT)}}function FK(a){const e=[],t=[],i=[],s=[];let r=a;const l=a-Uf+1+HP.length;for(let u=0;u<l;u++){const d=Math.pow(2,r);t.push(d);let f=1/d;u>a-Uf?f=HP[u-a+Uf-1]:u===0&&(f=0),i.push(f);const g=1/(d-2),x=-g,v=1+g,S=[x,x,v,x,v,v,x,x,v,v,x,v],T=6,E=6,A=3,w=2,O=1,F=new Float32Array(A*E*T),B=new Float32Array(w*E*T),k=new Float32Array(O*E*T);for(let $=0;$<T;$++){const Q=$%3*2/3-1,z=$>2?0:-1,q=[Q,z,0,Q+2/3,z,0,Q+2/3,z+1,0,Q,z,0,Q+2/3,z+1,0,Q,z+1,0],oe=UK[$];F.set(q,A*E*oe),B.set(S,w*E*oe);const Ce=[oe,oe,oe,oe,oe,oe];k.set(Ce,O*E*oe)}const Y=new li;Y.setAttribute("position",new $i(F,A)),Y.setAttribute("uv",new $i(B,w)),Y.setAttribute("faceIndex",new $i(k,O)),e.push(Y),s.push(new ts(Y,null)),r>Uf&&r--}return{lodPlanes:e,sizeLods:t,sigmas:i,lodMeshes:s}}function XP(a,e){const t={magFilter:Ni,minFilter:Ni,generateMipmaps:!1,type:Qs,format:es,colorSpace:sc},i=new $a(a,e,t);return i.texture.mapping=nc,i.texture.name="PMREM.cubeUv",i.texture.isPMREMTexture=!0,i.scissorTest=!0,i}function Ry(a,e,t,i,s){a.viewport.set(e,t,i,s),a.scissor.set(e,t,i,s)}function iE(a){const e=new ys;return e.depthTest=!1,e.depthWrite=!1,e.blending=kr,e.name=`PMREM_${a}`,e}function BK(a,e,t){const i=ca(new Array(mh).fill(0)),s=wn(new re(0,1,0)),r=wn(0),l=te(mh),u=wn(0),d=wn(1),f=Si(null),g=wn(0),x=te(1/e),v=te(1/t),S=te(a),T={n:l,latitudinal:u,weights:i,poleAxis:s,outputDirection:nE,dTheta:r,samples:d,envMap:f,mipInt:g,CUBEUV_TEXEL_WIDTH:x,CUBEUV_TEXEL_HEIGHT:v,CUBEUV_MAX_MIP:S},E=iE("blur");return E.fragmentNode=iB({...T,latitudinal:u.equal(1)}),sB.set(E,T),E}function qP(a){const e=iE("cubemap");return e.fragmentNode=cp(a,nE),e}function YP(a){const e=iE("equirect");return e.fragmentNode=Si(a,JA(nE),0),e}const ZP=new WeakMap;function OK(a){const e=Math.log2(a)-2,t=1/a;return{texelWidth:1/(3*Math.max(Math.pow(2,e),112)),texelHeight:t,maxMip:e}}function VK(a,e,t){const i=zK(e);let s=i.get(a);if((s!==void 0?s.pmremVersion:-1)!==a.pmremVersion){const l=a.image;if(a.isCubeTexture)if(kK(l))s=t.fromCubemap(a,s);else return null;else if(GK(l))s=t.fromEquirectangular(a,s);else return null;s.pmremVersion=a.pmremVersion,i.set(a,s)}return s.texture}function zK(a){let e=ZP.get(a);return e===void 0&&(e=new WeakMap,ZP.set(a,e)),e}class oB extends $s{static get type(){return"PMREMNode"}constructor(e,t=null,i=null){super("vec3"),this._value=e,this._pmrem=null,this.uvNode=t,this.levelNode=i,this._generator=null;const s=new ds;s.isRenderTargetTexture=!0,this._texture=Si(s),this._width=wn(0),this._height=wn(0),this._maxMip=wn(0),this.updateBeforeType=ii.RENDER}set value(e){this._value=e,this._pmrem=null}get value(){return this._value}updateFromTexture(e){const t=OK(e.image.height);this._texture.value=e,this._width.value=t.texelWidth,this._height.value=t.texelHeight,this._maxMip.value=t.maxMip}updateBefore(e){let t=this._pmrem;const i=t?t.pmremVersion:-1,s=this._value;i!==s.pmremVersion&&(s.isPMREMTexture===!0?t=s:t=VK(s,e.renderer,this._generator),t!==null&&(this._pmrem=t,this.updateFromTexture(t)))}setup(e){this._generator===null&&(this._generator=new rB(e.renderer)),this.updateBefore(e);let t=this.uvNode;t===null&&e.context.getUV&&(t=e.context.getUV(this)),t=DA.mul(xe(t.x,t.y.negate(),t.z));let i=this.levelNode;return i===null&&e.context.getTextureLevel&&(i=e.context.getTextureLevel(this)),nB(this._texture,t,i,this._width,this._height,this._maxMip)}dispose(){super.dispose(),this._generator!==null&&this._generator.dispose()}}function kK(a){if(a==null)return!1;let e=0;const t=6;for(let i=0;i<t;i++)a[i]!==void 0&&e++;return e===t}function GK(a){return a==null?!1:a.height>0}const sE=Wn(oB).setParameterLength(1,3),KP=new WeakMap;class aB extends cd{static get type(){return"EnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){const{material:t}=e;let i=this.envNode;if(i.isTextureNode||i.isMaterialReferenceNode){const x=i.isTextureNode?i.value:t[i.property];let v=KP.get(x);v===void 0&&(v=sE(x),KP.set(x,v)),i=v}const r=t.useAnisotropy===!0||t.anisotropy>0?PU:Yi,l=i.context(JP(cl,r)).mul(Xy),u=i.context(HK(cu)).mul(Math.PI).mul(Xy),d=jm(l),f=jm(u);e.context.radiance.addAssign(d),e.context.iblIrradiance.addAssign(f);const g=e.context.lightingModel.clearcoatRadiance;if(g){const x=i.context(JP(Sg,bh)).mul(Xy),v=jm(x);g.addAssign(v)}}}const JP=(a,e)=>{let t=null;return{getUV:()=>(t===null&&(t=_s.negate().reflect(e),t=a.mul(a).mix(t,e).normalize(),t=t.transformDirection(jo)),t),getTextureLevel:()=>a}},HK=a=>({getUV:()=>a,getTextureLevel:()=>te(1)}),WK=new d0;class rE extends ys{static get type(){return"MeshStandardNodeMaterial"}constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(WK),this.setValues(e)}setupEnvironment(e){let t=super.setupEnvironment(e);return t===null&&e.environmentNode&&(t=e.environmentNode),t?new aB(t):null}setupLightingModel(){return new k0}setupSpecular(){const e=Ri(xe(.04),zi.rgb,vg);vo.assign(e),bg.assign(1)}setupVariants(){const e=this.metalnessNode?te(this.metalnessNode):zU;vg.assign(e);let t=this.roughnessNode?te(this.roughnessNode):VU;t=QA({roughness:t}),cl.assign(t),this.setupSpecular(),zi.assign(tn(zi.rgb.mul(e.oneMinus()),zi.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}const $K=new mw;class oE extends rE{static get type(){return"MeshPhysicalNodeMaterial"}constructor(e){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues($K),this.setValues(e)}get useClearcoat(){return this.clearcoat>0||this.clearcoatNode!==null}get useIridescence(){return this.iridescence>0||this.iridescenceNode!==null}get useSheen(){return this.sheen>0||this.sheenNode!==null}get useAnisotropy(){return this.anisotropy>0||this.anisotropyNode!==null}get useTransmission(){return this.transmission>0||this.transmissionNode!==null}get useDispersion(){return this.dispersion>0||this.dispersionNode!==null}setupSpecular(){const e=this.iorNode?te(this.iorNode):eF;Km.assign(e),vo.assign(Ri(Co(_A(Km.sub(1).div(Km.add(1))).mul(OU),xe(1)).mul(MM),zi.rgb,vg)),bg.assign(Ri(MM,1,vg))}setupLightingModel(){return new k0(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(e){if(super.setupVariants(e),this.useClearcoat){const t=this.clearcoatNode?te(this.clearcoatNode):GU,i=this.clearcoatRoughnessNode?te(this.clearcoatRoughnessNode):HU;hv.assign(t),Sg.assign(QA({roughness:i}))}if(this.useSheen){const t=this.sheenNode?xe(this.sheenNode):XU,i=this.sheenRoughnessNode?te(this.sheenRoughnessNode):qU;Sh.assign(t),v0.assign(i)}if(this.useIridescence){const t=this.iridescenceNode?te(this.iridescenceNode):ZU,i=this.iridescenceIORNode?te(this.iridescenceIORNode):KU,s=this.iridescenceThicknessNode?te(this.iridescenceThicknessNode):JU;S0.assign(t),tA.assign(i),nA.assign(s)}if(this.useAnisotropy){const t=(this.anisotropyNode?nt(this.anisotropyNode):YU).toVar();Oc.assign(t.length()),yn(Oc.equal(0),()=>{t.assign(nt(1,0))}).Else(()=>{t.divAssign(nt(Oc)),Oc.assign(Oc.saturate())}),dv.assign(Oc.pow2().mix(cl.pow2(),1)),Zm.assign(Th[0].mul(t.x).add(Th[1].mul(t.y))),Ch.assign(Th[1].mul(t.x).sub(Th[0].mul(t.y)))}if(this.useTransmission){const t=this.transmissionNode?te(this.transmissionNode):jU,i=this.thicknessNode?te(this.thicknessNode):QU,s=this.attenuationDistanceNode?te(this.attenuationDistanceNode):tF,r=this.attenuationColorNode?xe(this.attenuationColorNode):nF;if(pv.assign(t),iA.assign(i),sA.assign(s),rA.assign(r),this.useDispersion){const l=this.dispersionNode?te(this.dispersionNode):sF;oA.assign(l)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?xe(this.clearcoatNormalNode):WU}setup(e){e.context.setupClearcoatNormal=()=>Vf(this.setupClearcoatNormal(e),"NORMAL","vec3"),super.setup(e)}copy(e){return this.clearcoatNode=e.clearcoatNode,this.clearcoatRoughnessNode=e.clearcoatRoughnessNode,this.clearcoatNormalNode=e.clearcoatNormalNode,this.sheenNode=e.sheenNode,this.sheenRoughnessNode=e.sheenRoughnessNode,this.iridescenceNode=e.iridescenceNode,this.iridescenceIORNode=e.iridescenceIORNode,this.iridescenceThicknessNode=e.iridescenceThicknessNode,this.specularIntensityNode=e.specularIntensityNode,this.specularColorNode=e.specularColorNode,this.transmissionNode=e.transmissionNode,this.thicknessNode=e.thicknessNode,this.attenuationDistanceNode=e.attenuationDistanceNode,this.attenuationColorNode=e.attenuationColorNode,this.dispersionNode=e.dispersionNode,this.anisotropyNode=e.anisotropyNode,super.copy(e)}}class XK extends k0{constructor(e=!1,t=!1,i=!1,s=!1,r=!1,l=!1,u=!1){super(e,t,i,s,r,l),this.useSSS=u}direct({lightDirection:e,lightColor:t,reflectedLight:i},s){if(this.useSSS===!0){const r=s.material,{thicknessColorNode:l,thicknessDistortionNode:u,thicknessAmbientNode:d,thicknessAttenuationNode:f,thicknessPowerNode:g,thicknessScaleNode:x}=r,v=e.add(Yi.mul(u)).normalize(),S=te(_s.dot(v.negate()).saturate().pow(g).mul(x)),T=xe(S.add(d).mul(l));i.directDiffuse.addAssign(T.mul(f.mul(t)))}super.direct({lightDirection:e,lightColor:t,reflectedLight:i},s)}}class qK extends oE{static get type(){return"MeshSSSNodeMaterial"}constructor(e){super(e),this.thicknessColorNode=null,this.thicknessDistortionNode=te(.1),this.thicknessAmbientNode=te(0),this.thicknessAttenuationNode=te(.1),this.thicknessPowerNode=te(2),this.thicknessScaleNode=te(10)}get useSSS(){return this.thicknessColorNode!==null}setupLightingModel(){return new XK(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion,this.useSSS)}copy(e){return this.thicknessColorNode=e.thicknessColorNode,this.thicknessDistortionNode=e.thicknessDistortionNode,this.thicknessAmbientNode=e.thicknessAmbientNode,this.thicknessAttenuationNode=e.thicknessAttenuationNode,this.thicknessPowerNode=e.thicknessPowerNode,this.thicknessScaleNode=e.thicknessScaleNode,super.copy(e)}}const YK=be(({normal:a,lightDirection:e,builder:t})=>{const i=a.dot(e),s=nt(i.mul(.5).add(.5),0);if(t.material.gradientMap){const r=ql("gradientMap","texture").context({getUV:()=>s});return xe(r.r)}else{const r=s.fwidth().mul(.5);return Ri(xe(.7),xe(1),va(te(.7).sub(r.x),te(.7).add(r.x),s.x))}});class ZK extends Tp{direct({lightDirection:e,lightColor:t,reflectedLight:i},s){const r=YK({normal:D0,lightDirection:e,builder:s}).mul(t);i.directDiffuse.addAssign(r.mul(td({diffuseColor:zi.rgb})))}indirect(e){const{ambientOcclusion:t,irradiance:i,reflectedLight:s}=e.context;s.indirectDiffuse.addAssign(i.mul(td({diffuseColor:zi}))),s.indirectDiffuse.mulAssign(t)}}const KK=new _w;class lB extends ys{static get type(){return"MeshToonNodeMaterial"}constructor(e){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(KK),this.setValues(e)}setupLightingModel(){return new ZK}}const cB=be(()=>{const a=xe(_s.z,0,_s.x.negate()).normalize(),e=_s.cross(a);return nt(a.dot(Yi),e.dot(Yi)).mul(.495).add(.5)}).once(["NORMAL","VERTEX"])().toVar("matcapUV"),JK=new bw;class uB extends ys{static get type(){return"MeshMatcapNodeMaterial"}constructor(e){super(),this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(JK),this.setValues(e)}setupVariants(e){const t=cB;let i;e.material.matcap?i=ql("matcap","texture").context({getUV:()=>t}):i=xe(Ri(.2,.8,t.y)),zi.rgb.mulAssign(i.rgb)}}class hB extends $s{static get type(){return"RotateNode"}constructor(e,t){super(),this.positionNode=e,this.rotationNode=t}getNodeType(e){return this.positionNode.getNodeType(e)}setup(e){const{rotationNode:t,positionNode:i}=this;if(this.getNodeType(e)==="vec2"){const r=t.cos(),l=t.sin();return y0(r,l,l.negate(),r).mul(i)}else{const r=t,l=Rh(tn(1,0,0,0),tn(0,Gl(r.x),Ho(r.x).negate(),0),tn(0,Ho(r.x),Gl(r.x),0),tn(0,0,0,1)),u=Rh(tn(Gl(r.y),0,Ho(r.y),0),tn(0,1,0,0),tn(Ho(r.y).negate(),0,Gl(r.y),0),tn(0,0,0,1)),d=Rh(tn(Gl(r.z),Ho(r.z).negate(),0,0),tn(Ho(r.z),Gl(r.z),0,0),tn(0,0,1,0),tn(0,0,0,1));return l.mul(u).mul(d).mul(tn(i,1)).xyz}}}const t_=Wn(hB).setParameterLength(2),jK=new Zv;class aE extends ys{static get type(){return"SpriteNodeMaterial"}constructor(e){super(),this.isSpriteNodeMaterial=!0,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.transparent=!0,this.setDefaultValues(jK),this.setValues(e)}setupPositionView(e){const{object:t,camera:i}=e,s=this.sizeAttenuation,{positionNode:r,rotationNode:l,scaleNode:u}=this,d=ac.mul(xe(r||0));let f=nt(da[0].xyz.length(),da[1].xyz.length());if(u!==null&&(f=f.mul(nt(u))),s===!1)if(i.isPerspectiveCamera)f=f.mul(d.z.negate());else{const S=te(2).div(Wo.element(1).element(1));f=f.mul(S.mul(2))}let g=Er.xy;if(t.center&&t.center.isVector2===!0){const S=z7("center","vec2",t);g=g.sub(S.sub(.5))}g=g.mul(f);const x=te(l||$U),v=t_(g,x);return tn(d.xy.add(v),d.zw)}copy(e){return this.positionNode=e.positionNode,this.rotationNode=e.rotationNode,this.scaleNode=e.scaleNode,super.copy(e)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(e){this._useSizeAttenuation!==e&&(this._useSizeAttenuation=e,this.needsUpdate=!0)}}const QK=new Jv;class dB extends aE{static get type(){return"PointsNodeMaterial"}constructor(e){super(),this.sizeNode=null,this.isPointsNodeMaterial=!0,this.setDefaultValues(QK),this.setValues(e)}setupPositionView(){const{positionNode:e}=this;return ac.mul(xe(e||Fs)).xyz}setupVertex(e){const t=super.setupVertex(e);if(e.material.isNodeMaterial!==!0)return t;const{rotationNode:i,scaleNode:s,sizeNode:r}=this,l=Er.xy.toVar(),u=ec.z.div(ec.w);if(i&&i.isNode){const f=te(i);l.assign(t_(l,f))}let d=r!==null?nt(r):iF;return this.sizeAttenuation===!0&&(d=d.mul(d.div(Bs.z.negate()))),s&&s.isNode&&(d=d.mul(nt(s))),l.mulAssign(d.mul(2)),l.assign(l.div(ec.z)),l.y.assign(l.y.mul(u)),l.assign(l.mul(t.w)),t.addAssign(tn(l,0,0)),t}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}class eJ extends Tp{constructor(){super(),this.shadowNode=te(1).toVar("shadowMask")}direct({lightNode:e}){e.shadowNode!==null&&this.shadowNode.mulAssign(e.shadowNode)}finish({context:e}){zi.a.mulAssign(this.shadowNode.oneMinus()),e.outgoingLight.rgb.assign(zi.rgb)}}const tJ=new pw;class fB extends ys{static get type(){return"ShadowNodeMaterial"}constructor(e){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.transparent=!0,this.setDefaultValues(tJ),this.setValues(e)}setupLightingModel(){return new eJ}}const wm=Va("vec3"),jP=Va("vec3"),QP=Va("vec3");class nJ extends Tp{constructor(){super()}start(e){const{material:t,context:i}=e,s=Va("vec3"),r=Va("vec3");yn(eg.sub(Xo).length().greaterThan(rU.mul(2)),()=>{s.assign(eg),r.assign(Xo)}).Else(()=>{s.assign(Xo),r.assign(eg)});const l=r.sub(s),u=wn("int").onRenderUpdate(({material:v})=>v.steps),d=l.length().div(u).toVar(),f=l.normalize().toVar(),g=te(0).toVar(),x=xe(1).toVar();t.offsetNode&&g.addAssign(t.offsetNode.mul(d)),Zi(u,()=>{const v=s.add(f.mul(g)),S=jo.mul(tn(v,1)).xyz;t.depthNode!==null&&(jP.assign(up(qA(S.z,$l,Xl))),i.sceneDepthNode=up(t.depthNode).toVar()),i.positionWorld=v,i.shadowPositionWorld=v,i.positionView=S,wm.assign(0);let T;t.scatteringNode&&(T=t.scatteringNode({positionRay:v})),super.start(e),T&&wm.mulAssign(T);const E=wm.mul(.01).negate().mul(d).exp();x.mulAssign(E),g.addAssign(d)}),QP.addAssign(x.saturate().oneMinus())}scatteringLight(e,t){const i=t.context.sceneDepthNode;i?yn(i.greaterThanEqual(jP),()=>{wm.addAssign(e)}):wm.addAssign(e)}direct({lightNode:e,lightColor:t},i){if(e.light.distance===void 0)return;const s=t.xyz.toVar();s.mulAssign(e.shadowNode),this.scatteringLight(s,i)}directRectArea({lightColor:e,lightPosition:t,halfWidth:i,halfHeight:s},r){const l=t.add(i).sub(s),u=t.sub(i).sub(s),d=t.sub(i).add(s),f=t.add(i).add(s),g=r.context.positionView,x=e.xyz.mul(_K({P:g,p0:l,p1:u,p2:d,p3:f})).pow(1.5);this.scatteringLight(x,r)}finish(e){e.context.outgoingLight.assign(QP)}}class iJ extends ys{static get type(){return"VolumeNodeMaterial"}constructor(e){super(),this.isVolumeNodeMaterial=!0,this.steps=25,this.offsetNode=null,this.scatteringNode=null,this.lights=!0,this.transparent=!0,this.side=ns,this.depthTest=!1,this.depthWrite=!1,this.setValues(e)}setupLightingModel(){return new nJ}}class sJ{constructor(e,t){this.nodes=e,this.info=t,this._context=typeof self<"u"?self:null,this._animationLoop=null,this._requestId=null}start(){const e=(t,i)=>{this._requestId=this._context.requestAnimationFrame(e),this.info.autoReset===!0&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,this._animationLoop!==null&&this._animationLoop(t,i)};e()}stop(){this._context.cancelAnimationFrame(this._requestId),this._requestId=null}getAnimationLoop(){return this._animationLoop}setAnimationLoop(e){this._animationLoop=e}getContext(){return this._context}setContext(e){this._context=e}dispose(){this.stop()}}class Ha{constructor(){this.weakMap=new WeakMap}get(e){let t=this.weakMap;for(let i=0;i<e.length-1;i++)if(t=t.get(e[i]),t===void 0)return;return t.get(e[e.length-1])}set(e,t){let i=this.weakMap;for(let s=0;s<e.length-1;s++){const r=e[s];i.has(r)===!1&&i.set(r,new WeakMap),i=i.get(r)}return i.set(e[e.length-1],t),this}delete(e){let t=this.weakMap;for(let i=0;i<e.length-1;i++)if(t=t.get(e[i]),t===void 0)return!1;return t.delete(e[e.length-1])}}let rJ=0;function oJ(a){const e=Object.keys(a);let t=Object.getPrototypeOf(a);for(;t;){const i=Object.getOwnPropertyDescriptors(t);for(const s in i)if(i[s]!==void 0){const r=i[s];r&&typeof r.get=="function"&&e.push(s)}t=Object.getPrototypeOf(t)}return e}class aJ{constructor(e,t,i,s,r,l,u,d,f,g){this.id=rJ++,this._nodes=e,this._geometries=t,this.renderer=i,this.object=s,this.material=r,this.scene=l,this.camera=u,this.lightsNode=d,this.context=f,this.geometry=s.geometry,this.version=r.version,this.drawRange=null,this.attributes=null,this.attributesId=null,this.pipeline=null,this.group=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.clippingContext=g,this.clippingContextCacheKey=g!==null?g.cacheKey:"",this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.onGeometryDispose=()=>{this.attributes=null,this.attributesId=null},this.material.addEventListener("dispose",this.onMaterialDispose),this.geometry.addEventListener("dispose",this.onGeometryDispose)}updateClipping(e){this.clippingContext=e}get clippingNeedsUpdate(){return this.clippingContext===null||this.clippingContext.cacheKey===this.clippingContextCacheKey?!1:(this.clippingContextCacheKey=this.clippingContext.cacheKey,!0)}get hardwareClippingPlanes(){return this.material.hardwareClipping===!0?this.clippingContext.unionClippingCount:0}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().observer)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getBindingGroup(e){for(const t of this.getBindings())if(t.name===e)return t}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}setGeometry(e){this.geometry=e,this.attributes=null,this.attributesId=null}getAttributes(){if(this.attributes!==null)return this.attributes;const e=this.getNodeBuilderState().nodeAttributes,t=this.geometry,i=[],s=new Set,r={};for(const l of e){let u;if(l.node&&l.node.attribute?u=l.node.attribute:(u=t.getAttribute(l.name),r[l.name]=u.version),u===void 0)continue;i.push(u);const d=u.isInterleavedBufferAttribute?u.data:u;s.add(d)}return this.attributes=i,this.attributesId=r,this.vertexBuffers=Array.from(s.values()),i}getVertexBuffers(){return this.vertexBuffers===null&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:e,material:t,geometry:i,group:s,drawRange:r}=this,l=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),u=this.getIndex(),d=u!==null;let f=1;if(i.isInstancedBufferGeometry===!0?f=i.instanceCount:e.count!==void 0&&(f=Math.max(0,e.count)),f===0)return null;if(l.instanceCount=f,e.isBatchedMesh===!0)return l;let g=1;t.wireframe===!0&&!e.isPoints&&!e.isLineSegments&&!e.isLine&&!e.isLineLoop&&(g=2);let x=r.start*g,v=(r.start+r.count)*g;s!==null&&(x=Math.max(x,s.start*g),v=Math.min(v,(s.start+s.count)*g));const S=i.attributes.position;let T=1/0;d?T=u.count:S!=null&&(T=S.count),x=Math.max(x,0),v=Math.min(v,T);const E=v-x;return E<0||E===1/0?null:(l.vertexCount=E,l.firstVertex=x,l)}getGeometryCacheKey(){const{geometry:e}=this;let t="";for(const i of Object.keys(e.attributes).sort()){const s=e.attributes[i];t+=i+",",s.data&&(t+=s.data.stride+","),s.offset&&(t+=s.offset+","),s.itemSize&&(t+=s.itemSize+","),s.normalized&&(t+="n,")}for(const i of Object.keys(e.morphAttributes).sort()){const s=e.morphAttributes[i];t+="morph-"+i+",";for(let r=0,l=s.length;r<l;r++){const u=s[r];t+=u.id+","}}return e.index&&(t+="index,"),t}getMaterialCacheKey(){const{object:e,material:t}=this;let i=t.customProgramCacheKey();for(const s of oJ(t)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(s))continue;const r=t[s];let l;if(r!==null){const u=typeof r;u==="number"?l=r!==0?"1":"0":u==="object"?(l="{",r.isTexture&&(l+=r.mapping),l+="}"):l=String(r)}else l=String(r);i+=l+","}return i+=this.clippingContextCacheKey+",",e.geometry&&(i+=this.getGeometryCacheKey()),e.skeleton&&(i+=e.skeleton.bones.length+","),e.isBatchedMesh&&(i+=e._matricesTexture.uuid+",",e._colorsTexture!==null&&(i+=e._colorsTexture.uuid+",")),e.count>1&&(i+=e.uuid+","),i+=e.receiveShadow+",",zw(i)}get needsGeometryUpdate(){if(this.geometry.id!==this.object.geometry.id)return!0;if(this.attributes!==null){const e=this.attributesId;for(const t in e){const i=this.geometry.getAttribute(t);if(i===void 0||e[t]!==i.id)return!0}}return!1}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let e=0;return this.material.isShadowPassMaterial!==!0&&(e=this._nodes.getCacheKey(this.scene,this.lightsNode)),this.camera.isArrayCamera&&(e=mg(e,this.camera.cameras.length)),this.object.receiveShadow&&(e=mg(e,1)),e}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.geometry.removeEventListener("dispose",this.onGeometryDispose),this.onDispose()}}const rh=[];class lJ{constructor(e,t,i,s,r,l){this.renderer=e,this.nodes=t,this.geometries=i,this.pipelines=s,this.bindings=r,this.info=l,this.chainMaps={}}get(e,t,i,s,r,l,u,d){const f=this.getChainMap(d);rh[0]=e,rh[1]=t,rh[2]=l,rh[3]=r;let g=f.get(rh);return g===void 0?(g=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,i,s,r,l,u,d),f.set(rh,g)):(g.updateClipping(u),g.needsGeometryUpdate&&g.setGeometry(e.geometry),(g.version!==t.version||g.needsUpdate)&&(g.initialCacheKey!==g.getCacheKey()?(g.dispose(),g=this.get(e,t,i,s,r,l,u,d)):g.version=t.version)),rh.length=0,g}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new Ha)}dispose(){this.chainMaps={}}createRenderObject(e,t,i,s,r,l,u,d,f,g,x){const v=this.getChainMap(x),S=new aJ(e,t,i,s,r,l,u,d,f,g);return S.onDispose=()=>{this.pipelines.delete(S),this.bindings.delete(S),this.nodes.delete(S),v.delete(S.getChainArray())},S}}class uu{constructor(){this.data=new WeakMap}get(e){let t=this.data.get(e);return t===void 0&&(t={},this.data.set(e,t)),t}delete(e){let t=null;return this.data.has(e)&&(t=this.data.get(e),this.data.delete(e)),t}has(e){return this.data.has(e)}dispose(){this.data=new WeakMap}}const fa={VERTEX:1,INDEX:2,STORAGE:3,INDIRECT:4},Vc=16,cJ=211,uJ=212;class hJ extends uu{constructor(e){super(),this.backend=e}delete(e){const t=super.delete(e);return t!==null&&this.backend.destroyAttribute(e),t}update(e,t){const i=this.get(e);if(i.version===void 0)t===fa.VERTEX?this.backend.createAttribute(e):t===fa.INDEX?this.backend.createIndexAttribute(e):t===fa.STORAGE?this.backend.createStorageAttribute(e):t===fa.INDIRECT&&this.backend.createIndirectStorageAttribute(e),i.version=this._getBufferAttribute(e).version;else{const s=this._getBufferAttribute(e);(i.version<s.version||s.usage===yh)&&(this.backend.updateAttribute(e),i.version=s.version)}}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}function pB(a){return a.index!==null?a.index.version:a.attributes.position.version}function eI(a){const e=[],t=a.index,i=a.attributes.position;if(t!==null){const r=t.array;for(let l=0,u=r.length;l<u;l+=3){const d=r[l+0],f=r[l+1],g=r[l+2];e.push(d,f,f,g,g,d)}}else{const r=i.array;for(let l=0,u=r.length/3-1;l<u;l+=3){const d=l+0,f=l+1,g=l+2;e.push(d,f,f,g,g,d)}}const s=new(ew(e)?Xv:$v)(e,1);return s.version=pB(a),s}class dJ extends uu{constructor(e,t){super(),this.attributes=e,this.info=t,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(e){const t=e.geometry;return super.has(t)&&this.get(t).initialized===!0}updateForRender(e){this.has(e)===!1&&this.initGeometry(e),this.updateAttributes(e)}initGeometry(e){const t=e.geometry,i=this.get(t);i.initialized=!0,this.info.memory.geometries++;const s=()=>{this.info.memory.geometries--;const r=t.index,l=e.getAttributes();r!==null&&this.attributes.delete(r);for(const d of l)this.attributes.delete(d);const u=this.wireframes.get(t);u!==void 0&&this.attributes.delete(u),t.removeEventListener("dispose",s)};t.addEventListener("dispose",s)}updateAttributes(e){const t=e.getAttributes();for(const r of t)r.isStorageBufferAttribute||r.isStorageInstancedBufferAttribute?this.updateAttribute(r,fa.STORAGE):this.updateAttribute(r,fa.VERTEX);const i=this.getIndex(e);i!==null&&this.updateAttribute(i,fa.INDEX);const s=e.geometry.indirect;s!==null&&this.updateAttribute(s,fa.INDIRECT)}updateAttribute(e,t){const i=this.info.render.calls;e.isInterleavedBufferAttribute?this.attributeCall.get(e)===void 0?(this.attributes.update(e,t),this.attributeCall.set(e,i)):this.attributeCall.get(e.data)!==i&&(this.attributes.update(e,t),this.attributeCall.set(e.data,i),this.attributeCall.set(e,i)):this.attributeCall.get(e)!==i&&(this.attributes.update(e,t),this.attributeCall.set(e,i))}getIndirect(e){return e.geometry.indirect}getIndex(e){const{geometry:t,material:i}=e;let s=t.index;if(i.wireframe===!0){const r=this.wireframes;let l=r.get(t);l===void 0?(l=eI(t),r.set(t,l)):l.version!==pB(t)&&(this.attributes.delete(l),l=eI(t),r.set(t,l)),s=l}return s}}class fJ{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0},this.compute={calls:0,frameCalls:0,timestamp:0},this.memory={geometries:0,textures:0}}update(e,t,i){this.render.drawCalls++,e.isMesh||e.isSprite?this.render.triangles+=i*(t/3):e.isPoints?this.render.points+=i*t:e.isLineSegments?this.render.lines+=i*(t/2):e.isLine?this.render.lines+=i*(t-1):console.error("THREE.WebGPUInfo: Unknown object type.")}reset(){this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class mB{constructor(e){this.cacheKey=e,this.usedTimes=0}}class pJ extends mB{constructor(e,t,i){super(e),this.vertexProgram=t,this.fragmentProgram=i}}class mJ extends mB{constructor(e,t){super(e),this.computeProgram=t,this.isComputePipeline=!0}}let gJ=0;class VT{constructor(e,t,i,s=null,r=null){this.id=gJ++,this.code=e,this.stage=t,this.name=i,this.transforms=s,this.attributes=r,this.usedTimes=0}}class _J extends uu{constructor(e,t){super(),this.backend=e,this.nodes=t,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(e,t){const{backend:i}=this,s=this.get(e);if(this._needsComputeUpdate(e)){const r=s.pipeline;r&&(r.usedTimes--,r.computeProgram.usedTimes--);const l=this.nodes.getForCompute(e);let u=this.programs.compute.get(l.computeShader);u===void 0&&(r&&r.computeProgram.usedTimes===0&&this._releaseProgram(r.computeProgram),u=new VT(l.computeShader,"compute",e.name,l.transforms,l.nodeAttributes),this.programs.compute.set(l.computeShader,u),i.createProgram(u));const d=this._getComputeCacheKey(e,u);let f=this.caches.get(d);f===void 0&&(r&&r.usedTimes===0&&this._releasePipeline(r),f=this._getComputePipeline(e,u,d,t)),f.usedTimes++,u.usedTimes++,s.version=e.version,s.pipeline=f}return s.pipeline}getForRender(e,t=null){const{backend:i}=this,s=this.get(e);if(this._needsRenderUpdate(e)){const r=s.pipeline;r&&(r.usedTimes--,r.vertexProgram.usedTimes--,r.fragmentProgram.usedTimes--);const l=e.getNodeBuilderState(),u=e.material?e.material.name:"";let d=this.programs.vertex.get(l.vertexShader);d===void 0&&(r&&r.vertexProgram.usedTimes===0&&this._releaseProgram(r.vertexProgram),d=new VT(l.vertexShader,"vertex",u),this.programs.vertex.set(l.vertexShader,d),i.createProgram(d));let f=this.programs.fragment.get(l.fragmentShader);f===void 0&&(r&&r.fragmentProgram.usedTimes===0&&this._releaseProgram(r.fragmentProgram),f=new VT(l.fragmentShader,"fragment",u),this.programs.fragment.set(l.fragmentShader,f),i.createProgram(f));const g=this._getRenderCacheKey(e,d,f);let x=this.caches.get(g);x===void 0?(r&&r.usedTimes===0&&this._releasePipeline(r),x=this._getRenderPipeline(e,d,f,g,t)):e.pipeline=x,x.usedTimes++,d.usedTimes++,f.usedTimes++,s.pipeline=x}return s.pipeline}delete(e){const t=this.get(e).pipeline;return t&&(t.usedTimes--,t.usedTimes===0&&this._releasePipeline(t),t.isComputePipeline?(t.computeProgram.usedTimes--,t.computeProgram.usedTimes===0&&this._releaseProgram(t.computeProgram)):(t.fragmentProgram.usedTimes--,t.vertexProgram.usedTimes--,t.vertexProgram.usedTimes===0&&this._releaseProgram(t.vertexProgram),t.fragmentProgram.usedTimes===0&&this._releaseProgram(t.fragmentProgram))),super.delete(e)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(e){this.getForRender(e)}_getComputePipeline(e,t,i,s){i=i||this._getComputeCacheKey(e,t);let r=this.caches.get(i);return r===void 0&&(r=new mJ(i,t),this.caches.set(i,r),this.backend.createComputePipeline(r,s)),r}_getRenderPipeline(e,t,i,s,r){s=s||this._getRenderCacheKey(e,t,i);let l=this.caches.get(s);return l===void 0&&(l=new pJ(s,t,i),this.caches.set(s,l),e.pipeline=l,this.backend.createRenderPipeline(e,r)),l}_getComputeCacheKey(e,t){return e.id+","+t.id}_getRenderCacheKey(e,t,i){return t.id+","+i.id+","+this.backend.getRenderCacheKey(e)}_releasePipeline(e){this.caches.delete(e.cacheKey)}_releaseProgram(e){const t=e.code,i=e.stage;this.programs[i].delete(t)}_needsComputeUpdate(e){const t=this.get(e);return t.pipeline===void 0||t.version!==e.version}_needsRenderUpdate(e){return this.get(e).pipeline===void 0||this.backend.needsRenderUpdate(e)}}class xJ extends uu{constructor(e,t,i,s,r,l){super(),this.backend=e,this.textures=i,this.pipelines=r,this.attributes=s,this.nodes=t,this.info=l,this.pipelines.bindings=this}getForRender(e){const t=e.getBindings();for(const i of t){const s=this.get(i);s.bindGroup===void 0&&(this._init(i),this.backend.createBindings(i,t,0),s.bindGroup=i)}return t}getForCompute(e){const t=this.nodes.getForCompute(e).bindings;for(const i of t){const s=this.get(i);s.bindGroup===void 0&&(this._init(i),this.backend.createBindings(i,t,0),s.bindGroup=i)}return t}updateForCompute(e){this._updateBindings(this.getForCompute(e))}updateForRender(e){this._updateBindings(this.getForRender(e))}_updateBindings(e){for(const t of e)this._update(t,e)}_init(e){for(const t of e.bindings)if(t.isSampledTexture)this.textures.updateTexture(t.texture);else if(t.isStorageBuffer){const i=t.attribute,s=i.isIndirectStorageBufferAttribute?fa.INDIRECT:fa.STORAGE;this.attributes.update(i,s)}}_update(e,t){const{backend:i}=this;let s=!1,r=!0,l=0,u=0;for(const d of e.bindings)if(!(d.isNodeUniformsGroup&&this.nodes.updateGroup(d)===!1)){if(d.isStorageBuffer){const f=d.attribute,g=f.isIndirectStorageBufferAttribute?fa.INDIRECT:fa.STORAGE;this.attributes.update(f,g)}if(d.isUniformBuffer)d.update()&&i.updateBinding(d);else if(d.isSampledTexture){const f=d.update(),g=d.texture,x=this.textures.get(g);if(f&&(this.textures.updateTexture(g),d.generation!==x.generation&&(d.generation=x.generation,s=!0)),i.get(g).externalTexture!==void 0||x.isDefaultTexture?r=!1:(l=l*10+g.id,u+=g.version),g.isStorageTexture===!0){const S=this.get(g);d.store===!0?S.needsMipmap=!0:this.textures.needsMipmaps(g)&&S.needsMipmap===!0&&(this.backend.generateMipmaps(g),S.needsMipmap=!1)}}else d.isSampler&&d.update()}s===!0&&this.backend.updateBindings(e,t,r?l:0,u)}}function yJ(a,e){return a.groupOrder!==e.groupOrder?a.groupOrder-e.groupOrder:a.renderOrder!==e.renderOrder?a.renderOrder-e.renderOrder:a.z!==e.z?a.z-e.z:a.id-e.id}function tI(a,e){return a.groupOrder!==e.groupOrder?a.groupOrder-e.groupOrder:a.renderOrder!==e.renderOrder?a.renderOrder-e.renderOrder:a.z!==e.z?e.z-a.z:a.id-e.id}function nI(a){return(a.transmission>0||a.transmissionNode)&&a.side===_r&&a.forceSinglePass===!1}class vJ{constructor(e,t,i){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=e.getNode(t,i),this.lightsArray=[],this.scene=t,this.camera=i,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(e,t,i,s,r,l,u){let d=this.renderItems[this.renderItemsIndex];return d===void 0?(d={id:e.id,object:e,geometry:t,material:i,groupOrder:s,renderOrder:e.renderOrder,z:r,group:l,clippingContext:u},this.renderItems[this.renderItemsIndex]=d):(d.id=e.id,d.object=e,d.geometry=t,d.material=i,d.groupOrder=s,d.renderOrder=e.renderOrder,d.z=r,d.group=l,d.clippingContext=u),this.renderItemsIndex++,d}push(e,t,i,s,r,l,u){const d=this.getNextRenderItem(e,t,i,s,r,l,u);e.occlusionTest===!0&&this.occlusionQueryCount++,i.transparent===!0||i.transmission>0?(nI(i)&&this.transparentDoublePass.push(d),this.transparent.push(d)):this.opaque.push(d)}unshift(e,t,i,s,r,l,u){const d=this.getNextRenderItem(e,t,i,s,r,l,u);i.transparent===!0||i.transmission>0?(nI(i)&&this.transparentDoublePass.unshift(d),this.transparent.unshift(d)):this.opaque.unshift(d)}pushBundle(e){this.bundles.push(e)}pushLight(e){this.lightsArray.push(e)}sort(e,t){this.opaque.length>1&&this.opaque.sort(e||yJ),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(t||tI),this.transparent.length>1&&this.transparent.sort(t||tI)}finish(){this.lightsNode.setLights(this.lightsArray);for(let e=this.renderItemsIndex,t=this.renderItems.length;e<t;e++){const i=this.renderItems[e];if(i.id===null)break;i.id=null,i.object=null,i.geometry=null,i.material=null,i.groupOrder=null,i.renderOrder=null,i.z=null,i.group=null,i.clippingContext=null}}}const Am=[];class SJ{constructor(e){this.lighting=e,this.lists=new Ha}get(e,t){const i=this.lists;Am[0]=e,Am[1]=t;let s=i.get(Am);return s===void 0&&(s=new vJ(this.lighting,e,t),i.set(Am,s)),Am.length=0,s}dispose(){this.lists=new Ha}}let bJ=0;class TJ{constructor(){this.id=bJ++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new Un,this.scissor=!1,this.scissorValue=new Un,this.renderTarget=null,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.activeMipmapLevel=0,this.sampleCount=1,this.width=0,this.height=0,this.occlusionQueryCount=0,this.clippingContext=null,this.isRenderContext=!0}getCacheKey(){return gB(this)}}function gB(a){const{textures:e,activeCubeFace:t}=a,i=[t];for(const s of e)i.push(s.id);return $g(i)}const Em=[],MJ=new rd,wJ=new Ug;class AJ{constructor(){this.chainMaps={}}get(e,t,i=null){Em[0]=e,Em[1]=t;let s;if(i===null)s="default";else{const u=i.texture.format;s=`${i.textures.length}:${u}:${i.samples}:${i.depthBuffer}:${i.stencilBuffer}`}const r=this._getChainMap(s);let l=r.get(Em);return l===void 0&&(l=new TJ,r.set(Em,l)),Em.length=0,i!==null&&(l.sampleCount=i.samples===0?1:i.samples),l}getForClear(e=null){return this.get(MJ,wJ,e)}_getChainMap(e){return this.chainMaps[e]||(this.chainMaps[e]=new Ha)}dispose(){this.chainMaps={}}}const EJ=new re;class RJ extends uu{constructor(e,t,i){super(),this.renderer=e,this.backend=t,this.info=i}updateRenderTarget(e,t=0){const i=this.get(e),s=e.samples===0?1:e.samples,r=i.depthTextureMips||(i.depthTextureMips={}),l=e.textures,u=this.getSize(l[0]),d=u.width>>t,f=u.height>>t;let g=e.depthTexture||r[t];const x=e.depthBuffer===!0||e.stencilBuffer===!0;let v=!1;g===void 0&&x&&(g=new Ro,g.format=e.stencilBuffer?Ao:wo,g.type=e.stencilBuffer?Mo:rs,g.image.width=d,g.image.height=f,g.image.depth=u.depth,g.isArrayTexture=e.multiview===!0&&u.depth>1,r[t]=g),(i.width!==u.width||u.height!==i.height)&&(v=!0,g&&(g.needsUpdate=!0,g.image.width=d,g.image.height=f,g.image.depth=g.isArrayTexture?g.image.depth:1)),i.width=u.width,i.height=u.height,i.textures=l,i.depthTexture=g||null,i.depth=e.depthBuffer,i.stencil=e.stencilBuffer,i.renderTarget=e,i.sampleCount!==s&&(v=!0,g&&(g.needsUpdate=!0),i.sampleCount=s);const S={sampleCount:s};if(e.isXRRenderTarget!==!0){for(let T=0;T<l.length;T++){const E=l[T];v&&(E.needsUpdate=!0),this.updateTexture(E,S)}g&&this.updateTexture(g,S)}if(i.initialized!==!0){i.initialized=!0;const T=()=>{e.removeEventListener("dispose",T);for(let E=0;E<l.length;E++)this._destroyTexture(l[E]);g&&this._destroyTexture(g),this.delete(e)};e.addEventListener("dispose",T)}}updateTexture(e,t={}){const i=this.get(e);if(i.initialized===!0&&i.version===e.version)return;const s=e.isRenderTargetTexture||e.isDepthTexture||e.isFramebufferTexture,r=this.backend;if(s&&i.initialized===!0&&(r.destroySampler(e),r.destroyTexture(e)),e.isFramebufferTexture){const f=this.renderer.getRenderTarget();f?e.type=f.texture.type:e.type=Ts}const{width:l,height:u,depth:d}=this.getSize(e);if(t.width=l,t.height=u,t.depth=d,t.needsMipmaps=this.needsMipmaps(e),t.levels=t.needsMipmaps?this.getMipLevels(e,l,u):1,s||e.isStorageTexture===!0)r.createSampler(e),r.createTexture(e,t),i.generation=e.version;else if(i.initialized!==!0&&r.createSampler(e),e.version>0){const g=e.image;if(g===void 0)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(g.complete===!1)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(e.images){const x=[];for(const v of e.images)x.push(v);t.images=x}else t.image=g;(i.isDefaultTexture===void 0||i.isDefaultTexture===!0)&&(r.createTexture(e,t),i.isDefaultTexture=!1,i.generation=e.version),e.source.dataReady===!0&&r.updateTexture(e,t),t.needsMipmaps&&e.mipmaps.length===0&&r.generateMipmaps(e)}}else r.createDefaultTexture(e),i.isDefaultTexture=!0,i.generation=e.version;if(i.initialized!==!0){i.initialized=!0,i.generation=e.version,this.info.memory.textures++;const f=()=>{e.removeEventListener("dispose",f),this._destroyTexture(e)};e.addEventListener("dispose",f)}i.version=e.version}getSize(e,t=EJ){let i=e.images?e.images[0]:e.image;return i?(i.image!==void 0&&(i=i.image),i instanceof HTMLVideoElement?(t.width=i.videoWidth||1,t.height=i.videoHeight||1,t.depth=1):i instanceof VideoFrame?(t.width=i.displayWidth||1,t.height=i.displayHeight||1,t.depth=1):(t.width=i.width||1,t.height=i.height||1,t.depth=e.isCubeTexture?6:i.depth||1)):t.width=t.height=t.depth=1,t}getMipLevels(e,t,i){let s;return e.isCompressedTexture?e.mipmaps?s=e.mipmaps.length:s=1:s=Math.floor(Math.log2(Math.max(t,i)))+1,s}needsMipmaps(e){return e.isCompressedTexture===!0||e.generateMipmaps}_destroyTexture(e){this.has(e)===!0&&(this.backend.destroySampler(e),this.backend.destroyTexture(e),this.delete(e),this.info.memory.textures--)}}class lE extends Jt{constructor(e,t,i,s=1){super(e,t,i),this.a=s}set(e,t,i,s=1){return this.a=s,super.set(e,t,i)}copy(e){return e.a!==void 0&&(this.a=e.a),super.copy(e)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class cE extends Xi{static get type(){return"ParameterNode"}constructor(e,t=null){super(e,t),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}const CJ=(a,e)=>Qe(new cE(a,e));class _B extends Pn{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this._expressionNode=null,this.isStackNode=!0}getNodeType(e){return this.outputNode?this.outputNode.getNodeType(e):"void"}getMemberType(e,t){return this.outputNode?this.outputNode.getMemberType(e,t):"void"}add(e){return this.nodes.push(e),this}If(e,t){const i=new Df(t);return this._currentCond=vr(e,i),this.add(this._currentCond)}ElseIf(e,t){const i=new Df(t),s=vr(e,i);return this._currentCond.elseNode=s,this._currentCond=s,this}Else(e){return this._currentCond.elseNode=new Df(e),this}Switch(e){return this._expressionNode=Qe(e),this}Case(...e){const t=[];if(e.length>=2)for(let u=0;u<e.length-1;u++)t.push(this._expressionNode.equal(Qe(e[u])));else throw new Error("TSL: Invalid parameter length. Case() requires at least two parameters.");const i=e[e.length-1],s=new Df(i);let r=t[0];for(let u=1;u<t.length;u++)r=r.or(t[u]);const l=vr(r,s);return this._currentCond===null?(this._currentCond=l,this.add(this._currentCond)):(this._currentCond.elseNode=l,this._currentCond=l,this)}Default(e){return this.Else(e),this}setup(e){const t=e.getNodeProperties(this);let i=0;for(const s of this.getChildren())s.isVarNode&&s.intent===!0&&e.getNodeProperties(s).assign!==!0||(t["node"+i++]=s);return t.outputNode||null}build(e,...t){const i=e.currentStack,s=_0();yg(this),e.currentStack=this;const r=e.buildStage;for(const u of this.nodes)if(!(u.isVarNode&&u.intent===!0&&e.getNodeProperties(u).assign!==!0)){if(r==="setup")u.build(e);else if(r==="analyze")u.build(e,this);else if(r==="generate"){const d=e.getDataFromNode(u,"any").stages,f=d&&d[e.shaderStage];if(u.isVarNode&&f&&f.length===1&&f[0]&&f[0].isStackNode)continue;u.build(e,"void")}}const l=this.outputNode?this.outputNode.build(e,...t):super.build(e,...t);return yg(s),e.currentStack=i,l}}const Zy=Wn(_B).setParameterLength(0,1);function NJ(a){return Object.entries(a).map(([e,t])=>typeof t=="string"?{name:e,type:t,atomic:!1}:{name:e,type:t.type,atomic:t.atomic||!1})}class xB extends Pn{static get type(){return"StructTypeNode"}constructor(e,t=null){super("struct"),this.membersLayout=NJ(e),this.name=t,this.isStructLayoutNode=!0}getLength(){const t=Float32Array.BYTES_PER_ELEMENT;let i=0;for(const s of this.membersLayout){const r=s.type,l=rD(r)*t,u=oD(r),d=i%8,f=d%u,g=d+f;i+=f,g!==0&&8-g<l&&(i+=8-g),i+=l}return Math.ceil(i/8)*8/t}getMemberType(e,t){const i=this.membersLayout.find(s=>s.name===t);return i?i.type:"void"}getNodeType(e){return e.getStructTypeFromNode(this,this.membersLayout,this.name).name}setup(e){e.addInclude(this)}generate(e){return this.getNodeType(e)}}class yB extends Pn{static get type(){return"StructNode"}constructor(e,t){super("vec3"),this.structLayoutNode=e,this.values=t,this.isStructNode=!0}getNodeType(e){return this.structLayoutNode.getNodeType(e)}getMemberType(e,t){return this.structLayoutNode.getMemberType(e,t)}generate(e){const t=e.getVarFromNode(this),i=t.type,s=e.getPropertyName(t);return e.addLineFlowCode(`${s} = ${e.generateStruct(i,this.structLayoutNode.membersLayout,this.values)}`,this),t.name}}const PJ=(a,e=null)=>{const t=new xB(a,e),i=(...s)=>{let r=null;if(s.length>0)if(s[0].isNode){r={};const l=Object.keys(a);for(let u=0;u<s.length;u++)r[l[u]]=s[u]}else r=s[0];return Qe(new yB(t,r))};return i.layout=t,i.isStruct=!0,i};class uE extends Pn{static get type(){return"OutputStructNode"}constructor(...e){super(),this.members=e,this.isOutputStructNode=!0}getNodeType(e){const t=e.getNodeProperties(this);if(t.membersLayout===void 0){const i=this.members,s=[];for(let r=0;r<i.length;r++){const l="m"+r,u=i[r].getNodeType(e);s.push({name:l,type:u,index:r})}t.membersLayout=s,t.structType=e.getOutputStructTypeFromNode(this,t.membersLayout)}return t.structType.name}generate(e){const t=e.getOutputStructName(),i=this.members,s=t!==""?t+".":"";for(let r=0;r<i.length;r++){const l=i[r].build(e);e.addLineFlowCode(`${s}m${r} = ${l}`,this)}return t}}const IJ=Wn(uE);function vB(a,e){for(let t=0;t<a.length;t++)if(a[t].name===e)return t;return-1}class SB extends uE{static get type(){return"MRTNode"}constructor(e){super(),this.outputNodes=e,this.isMRTNode=!0}has(e){return this.outputNodes[e]!==void 0}get(e){return this.outputNodes[e]}merge(e){const t={...this.outputNodes,...e.outputNodes};return bB(t)}setup(e){const t=this.outputNodes,i=e.renderer.getRenderTarget(),s=[],r=i.textures;for(const l in t){const u=vB(r,l);s[u]=tn(t[l])}return this.members=s,super.setup(e)}}const bB=Wn(SB),LJ=be(([a])=>{const e=a.toUint().mul(747796405).add(2891336453),t=e.shiftRight(e.shiftRight(28).add(4)).bitXor(e).mul(277803737);return t.shiftRight(22).bitXor(t).toFloat().mul(1/2**32)}),NM=(a,e)=>ha(ri(4,a.mul(Mi(1,a))),e),DJ=(a,e)=>a.lessThan(.5)?NM(a.mul(2),e).div(2):Mi(1,NM(ri(Mi(1,a),2),e).div(2)),UJ=(a,e,t)=>ha(Zo(ha(a,e),Ws(ha(a,e),ha(Mi(1,a),t))),1/e),FJ=(a,e)=>Ho(mv.mul(e.mul(a).sub(1))).div(mv.mul(e.mul(a).sub(1))),Hl=be(([a])=>a.fract().sub(.5).abs()).setLayout({name:"tri",type:"float",inputs:[{name:"x",type:"float"}]}),BJ=be(([a])=>xe(Hl(a.z.add(Hl(a.y.mul(1)))),Hl(a.z.add(Hl(a.x.mul(1)))),Hl(a.y.add(Hl(a.x.mul(1)))))).setLayout({name:"tri3",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),OJ=be(([a,e,t])=>{const i=xe(a).toVar(),s=te(1.4).toVar(),r=te(0).toVar(),l=xe(i).toVar();return Zi({start:te(0),end:te(3),type:"float",condition:"<="},()=>{const u=xe(BJ(l.mul(2))).toVar();i.addAssign(u.add(t.mul(te(.1).mul(e)))),l.mulAssign(1.8),s.mulAssign(1.5),i.mulAssign(1.2);const d=te(Hl(i.z.add(Hl(i.x.add(Hl(i.y)))))).toVar();r.addAssign(d.div(s)),l.addAssign(.14)}),r}).setLayout({name:"triNoise3D",type:"float",inputs:[{name:"position",type:"vec3"},{name:"speed",type:"float"},{name:"time",type:"float"}]});class TB extends Pn{static get type(){return"FunctionOverloadingNode"}constructor(e=[],...t){super(),this.functionNodes=e,this.parametersNodes=t,this._candidateFnCall=null,this.global=!0}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(e){const t=this.parametersNodes;let i=this._candidateFnCall;if(i===null){let s=null,r=-1;for(const l of this.functionNodes){const d=l.shaderNode.layout;if(d===null)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const f=d.inputs;if(t.length===f.length){let g=0;for(let x=0;x<t.length;x++){const v=t[x],S=f[x];v.getNodeType(e)===S.type?g++:g=0}g>r&&(s=l,r=g)}}this._candidateFnCall=i=s(...t)}return i}}const VJ=Wn(TB),Pr=a=>(...e)=>VJ(a,...e),hu=wn(0).setGroup(On).onRenderUpdate(a=>a.time),MB=wn(0).setGroup(On).onRenderUpdate(a=>a.deltaTime),wB=wn(0,"uint").setGroup(On).onRenderUpdate(a=>a.frameId),zJ=(a=1)=>(console.warn('TSL: timerLocal() is deprecated. Use "time" instead.'),hu.mul(a)),kJ=(a=1)=>(console.warn('TSL: timerGlobal() is deprecated. Use "time" instead.'),hu.mul(a)),GJ=(a=1)=>(console.warn('TSL: timerDelta() is deprecated. Use "deltaTime" instead.'),MB.mul(a)),HJ=(a=hu)=>a.add(.75).mul(Math.PI*2).sin().mul(.5).add(.5),WJ=(a=hu)=>a.fract().round(),$J=(a=hu)=>a.add(.5).fract().mul(2).sub(1).abs(),XJ=(a=hu)=>a.fract(),qJ=be(([a,e,t=nt(.5)])=>t_(a.sub(t),e).add(t)),YJ=be(([a,e,t=nt(.5)])=>{const i=a.sub(t),s=i.dot(i),l=s.mul(s).mul(e);return a.add(i.mul(l))}),ZJ=be(({position:a=null,horizontal:e=!0,vertical:t=!1})=>{let i;a!==null?(i=da.toVar(),i[3][0]=a.x,i[3][1]=a.y,i[3][2]=a.z):i=da;const s=jo.mul(i);return xg(e)&&(s[0][0]=da[0].length(),s[0][1]=0,s[0][2]=0),xg(t)&&(s[1][0]=0,s[1][1]=da[1].length(),s[1][2]=0),s[2][0]=0,s[2][1]=0,s[2][2]=1,Wo.mul(s).mul(Fs)}),KJ=be(([a=null])=>{const e=up();return up(XA(a)).sub(e).lessThan(0).select(Ql,a)});class AB extends Pn{static get type(){return"SpriteSheetUVNode"}constructor(e,t=is(),i=te(0)){super("vec2"),this.countNode=e,this.uvNode=t,this.frameNode=i}setup(){const{frameNode:e,uvNode:t,countNode:i}=this,{width:s,height:r}=i,l=e.mod(s.mul(r)).floor(),u=l.mod(s),d=r.sub(l.add(1).div(s).ceil()),f=i.reciprocal(),g=nt(u,d);return t.add(g).mul(f)}}const JJ=Wn(AB).setParameterLength(3),EB=be(([a,e=null,t=null,i=te(1),s=Fs,r=No])=>{let l=r.abs().normalize();l=l.div(l.dot(xe(1)));const u=s.yz.mul(i),d=s.zx.mul(i),f=s.xy.mul(i),g=a.value,x=e!==null?e.value:g,v=t!==null?t.value:g,S=Si(g,u).mul(l.x),T=Si(x,d).mul(l.y),E=Si(v,f).mul(l.z);return Ws(S,T,E)}),jJ=(...a)=>EB(...a),Sf=new al,oh=new re,bf=new re,zT=new re,Rm=new xn,Cy=new re(0,0,-1),sl=new Un,Cm=new re,Ny=new re,Nm=new Un,Py=new it,yv=new $a,QJ=Ql.flipX();yv.depthTexture=new Ro(1,1);let Iy=!1;class G0 extends Ga{static get type(){return"ReflectorNode"}constructor(e={}){super(e.defaultTexture||yv.texture,QJ),this._reflectorBaseNode=e.reflector||new ej(this,e),this._depthNode=null,this.setUpdateMatrix(!1)}get reflector(){return this._reflectorBaseNode}get target(){return this._reflectorBaseNode.target}getDepthNode(){if(this._depthNode===null){if(this._reflectorBaseNode.depth!==!0)throw new Error("THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ");this._depthNode=Qe(new G0({defaultTexture:yv.depthTexture,reflector:this._reflectorBaseNode}))}return this._depthNode}setup(e){return e.object.isQuadMesh||this._reflectorBaseNode.build(e),super.setup(e)}clone(){const e=new this.constructor(this.reflectorNode);return e.uvNode=this.uvNode,e.levelNode=this.levelNode,e.biasNode=this.biasNode,e.sampler=this.sampler,e.depthNode=this.depthNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e._reflectorBaseNode=this._reflectorBaseNode,e}dispose(){super.dispose(),this._reflectorBaseNode.dispose()}}class ej extends Pn{static get type(){return"ReflectorBaseNode"}constructor(e,t={}){super();const{target:i=new Di,resolution:s=1,generateMipmaps:r=!1,bounces:l=!0,depth:u=!1}=t;this.textureNode=e,this.target=i,this.resolution=s,this.generateMipmaps=r,this.bounces=l,this.depth=u,this.updateBeforeType=l?ii.RENDER:ii.FRAME,this.virtualCameras=new WeakMap,this.renderTargets=new Map,this.forceUpdate=!1,this.hasOutput=!1}_updateResolution(e,t){const i=this.resolution;t.getDrawingBufferSize(Py),e.setSize(Math.round(Py.width*i),Math.round(Py.height*i))}setup(e){return this._updateResolution(yv,e.renderer),super.setup(e)}dispose(){super.dispose();for(const e of this.renderTargets.values())e.dispose()}getVirtualCamera(e){let t=this.virtualCameras.get(e);return t===void 0&&(t=e.clone(),this.virtualCameras.set(e,t)),t}getRenderTarget(e){let t=this.renderTargets.get(e);return t===void 0&&(t=new $a(0,0,{type:Qs}),this.generateMipmaps===!0&&(t.texture.minFilter=kI,t.texture.generateMipmaps=!0),this.depth===!0&&(t.depthTexture=new Ro),this.renderTargets.set(e,t)),t}updateBefore(e){if(this.bounces===!1&&Iy)return!1;Iy=!0;const{scene:t,camera:i,renderer:s,material:r}=e,{target:l}=this,u=this.getVirtualCamera(i),d=this.getRenderTarget(u);s.getDrawingBufferSize(Py),this._updateResolution(d,s),bf.setFromMatrixPosition(l.matrixWorld),zT.setFromMatrixPosition(i.matrixWorld),Rm.extractRotation(l.matrixWorld),oh.set(0,0,1),oh.applyMatrix4(Rm),Cm.subVectors(bf,zT);const f=Cm.dot(oh)>0;let g=!1;if(f===!0&&this.forceUpdate===!1){if(this.hasOutput===!1){Iy=!1;return}g=!0}Cm.reflect(oh).negate(),Cm.add(bf),Rm.extractRotation(i.matrixWorld),Cy.set(0,0,-1),Cy.applyMatrix4(Rm),Cy.add(zT),Ny.subVectors(bf,Cy),Ny.reflect(oh).negate(),Ny.add(bf),u.coordinateSystem=i.coordinateSystem,u.position.copy(Cm),u.up.set(0,1,0),u.up.applyMatrix4(Rm),u.up.reflect(oh),u.lookAt(Ny),u.near=i.near,u.far=i.far,u.updateMatrixWorld(),u.projectionMatrix.copy(i.projectionMatrix),Sf.setFromNormalAndCoplanarPoint(oh,bf),Sf.applyMatrix4(u.matrixWorldInverse),sl.set(Sf.normal.x,Sf.normal.y,Sf.normal.z,Sf.constant);const x=u.projectionMatrix;Nm.x=(Math.sign(sl.x)+x.elements[8])/x.elements[0],Nm.y=(Math.sign(sl.y)+x.elements[9])/x.elements[5],Nm.z=-1,Nm.w=(1+x.elements[10])/x.elements[14],sl.multiplyScalar(1/sl.dot(Nm));const v=0;x.elements[2]=sl.x,x.elements[6]=sl.y,x.elements[10]=s.coordinateSystem===_a?sl.z-v:sl.z+1-v,x.elements[14]=sl.w,this.textureNode.value=d.texture,this.depth===!0&&(this.textureNode.getDepthNode().value=d.depthTexture),r.visible=!1;const S=s.getRenderTarget(),T=s.getMRT(),E=s.autoClear;s.setMRT(null),s.setRenderTarget(d),s.autoClear=!0,g?(s.clear(),this.hasOutput=!1):(s.render(t,u),this.hasOutput=!0),s.setMRT(T),s.setRenderTarget(S),s.autoClear=E,r.visible=!0,Iy=!1,this.forceUpdate=!1}}const tj=a=>Qe(new G0(a)),kT=new ru(-1,1,1,-1,0,1);class nj extends li{constructor(e=!1){super();const t=e===!1?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new vn([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new vn(t,2))}}const ij=new nj;class Mp extends ts{constructor(e=null){super(ij,e),this.camera=kT,this.isQuadMesh=!0}async renderAsync(e){return e.renderAsync(this,kT)}render(e){e.render(this,kT)}}const sj=new it;class RB extends Ga{static get type(){return"RTTNode"}constructor(e,t=null,i=null,s={type:Qs}){const r=new $a(t,i,s);super(r.texture,is()),this.isRTTNode=!0,this.node=e,this.width=t,this.height=i,this.pixelRatio=1,this.renderTarget=r,this.textureNeedsUpdate=!0,this.autoUpdate=!0,this._rttNode=null,this._quadMesh=new Mp(new ys),this.updateBeforeType=ii.RENDER}get autoResize(){return this.width===null}setup(e){return this._rttNode=this.node.context(e.getSharedContext()),this._quadMesh.material.name="RTT",this._quadMesh.material.needsUpdate=!0,super.setup(e)}setSize(e,t){this.width=e,this.height=t;const i=e*this.pixelRatio,s=t*this.pixelRatio;this.renderTarget.setSize(i,s),this.textureNeedsUpdate=!0}setPixelRatio(e){this.pixelRatio=e,this.setSize(this.width,this.height)}updateBefore({renderer:e}){if(this.textureNeedsUpdate===!1&&this.autoUpdate===!1)return;if(this.textureNeedsUpdate=!1,this.autoResize===!0){const i=e.getPixelRatio(),s=e.getSize(sj),r=s.width*i,l=s.height*i;(r!==this.renderTarget.width||l!==this.renderTarget.height)&&(this.renderTarget.setSize(r,l),this.textureNeedsUpdate=!0)}this._quadMesh.material.fragmentNode=this._rttNode;const t=e.getRenderTarget();e.setRenderTarget(this.renderTarget),this._quadMesh.render(e),e.setRenderTarget(t)}clone(){const e=new Ga(this.value,this.uvNode,this.levelNode);return e.sampler=this.sampler,e.referenceNode=this,e}}const CB=(a,...e)=>Qe(new RB(Qe(a),...e)),rj=(a,...e)=>a.isTextureNode?a:a.isPassNode?a.getTextureNode():CB(a,...e),Cf=be(([a,e,t],i)=>{let s;i.renderer.coordinateSystem===_a?(a=nt(a.x,a.y.oneMinus()).mul(2).sub(1),s=tn(xe(a,e),1)):s=tn(xe(a.x,a.y.oneMinus(),e).mul(2).sub(1),1);const r=tn(t.mul(s));return r.xyz.div(r.w)}),oj=be(([a,e])=>{const t=e.mul(tn(a,1)),i=t.xy.div(t.w).mul(.5).add(.5).toVar();return nt(i.x,i.y.oneMinus())}),aj=be(([a,e,t])=>{const i=Yc(Us(e)),s=rr(a.mul(i)).toVar(),r=Us(e,s).toVar(),l=Us(e,s.sub(rr(2,0))).toVar(),u=Us(e,s.sub(rr(1,0))).toVar(),d=Us(e,s.add(rr(1,0))).toVar(),f=Us(e,s.add(rr(2,0))).toVar(),g=Us(e,s.add(rr(0,2))).toVar(),x=Us(e,s.add(rr(0,1))).toVar(),v=Us(e,s.sub(rr(0,1))).toVar(),S=Us(e,s.sub(rr(0,2))).toVar(),T=ms(Mi(te(2).mul(u).sub(l),r)).toVar(),E=ms(Mi(te(2).mul(d).sub(f),r)).toVar(),A=ms(Mi(te(2).mul(x).sub(g),r)).toVar(),w=ms(Mi(te(2).mul(v).sub(S),r)).toVar(),O=Cf(a,r,t).toVar(),F=T.lessThan(E).select(O.sub(Cf(a.sub(nt(te(1).div(i.x),0)),u,t)),O.negate().add(Cf(a.add(nt(te(1).div(i.x),0)),d,t))),B=A.lessThan(w).select(O.sub(Cf(a.add(nt(0,te(1).div(i.y))),x,t)),O.negate().add(Cf(a.sub(nt(0,te(1).div(i.y))),v,t)));return rc(E0(F,B))});class lj extends Pn{static get type(){return"SampleNode"}constructor(e){super(),this.callback=e,this.isSampleNode=!0}setup(){return this.sample(is())}sample(e){return this.callback(e)}}const cj=a=>Qe(new lj(a));class lc extends Pn{static get type(){return"EventNode"}constructor(e,t){super("void"),this.eventType=e,this.callback=t,e===lc.OBJECT?this.updateType=ii.OBJECT:e===lc.MATERIAL&&(this.updateType=ii.RENDER)}update(e){this.callback(e)}}lc.OBJECT="object";lc.MATERIAL="material";const NB=(a,e)=>Qe(new lc(a,e)).toStack(),uj=a=>NB(lc.OBJECT,a),hj=a=>NB(lc.MATERIAL,a);class PB extends pa{constructor(e,t,i=Float32Array){const s=ArrayBuffer.isView(e)?e:new i(e*t);super(s,t),this.isStorageInstancedBufferAttribute=!0}}class hE extends $i{constructor(e,t,i=Float32Array){const s=ArrayBuffer.isView(e)?e:new i(e*t);super(s,t),this.isStorageBufferAttribute=!0}}const dj=(a,e="float")=>{let t,i;e.isStruct===!0?(t=e.layout.getLength(),i=_g("float")):(t=Hw(e),i=_g(e));const s=new hE(a,t,i);return Ph(s,e,a)},fj=(a,e="float")=>{let t,i;e.isStruct===!0?(t=e.layout.getLength(),i=_g("float")):(t=Hw(e),i=_g(e));const s=new PB(a,t,i);return Ph(s,e,a)};class IB extends Pn{static get type(){return"PointUVNode"}constructor(){super("vec2"),this.isPointUVNode=!0}generate(){return"vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )"}}const pj=Vt(IB),Pm=new co,GT=new xn;class oo extends Pn{static get type(){return"SceneNode"}constructor(e=oo.BACKGROUND_BLURRINESS,t=null){super(),this.scope=e,this.scene=t}setup(e){const t=this.scope,i=this.scene!==null?this.scene:e.scene;let s;return t===oo.BACKGROUND_BLURRINESS?s=hs("backgroundBlurriness","float",i):t===oo.BACKGROUND_INTENSITY?s=hs("backgroundIntensity","float",i):t===oo.BACKGROUND_ROTATION?s=wn("mat4").setName("backgroundRotation").setGroup(On).onRenderUpdate(()=>{const r=i.background;return r!==null&&r.isTexture&&r.mapping!==Eg?(Pm.copy(i.backgroundRotation),Pm.x*=-1,Pm.y*=-1,Pm.z*=-1,GT.makeRotationFromEuler(Pm)):GT.identity(),GT}):console.error("THREE.SceneNode: Unknown scope:",t),s}}oo.BACKGROUND_BLURRINESS="backgroundBlurriness";oo.BACKGROUND_INTENSITY="backgroundIntensity";oo.BACKGROUND_ROTATION="backgroundRotation";const LB=Vt(oo,oo.BACKGROUND_BLURRINESS),PM=Vt(oo,oo.BACKGROUND_INTENSITY),DB=Vt(oo,oo.BACKGROUND_ROTATION);class UB extends Ga{static get type(){return"StorageTextureNode"}constructor(e,t,i=null){super(e,t),this.storeNode=i,this.isStorageTextureNode=!0,this.access=yr.WRITE_ONLY}getInputType(){return"storageTexture"}setup(e){super.setup(e);const t=e.getNodeProperties(this);return t.storeNode=this.storeNode,t}setAccess(e){return this.access=e,this}generate(e,t){let i;return this.storeNode!==null?i=this.generateStore(e):i=super.generate(e,t),i}toReadWrite(){return this.setAccess(yr.READ_WRITE)}toReadOnly(){return this.setAccess(yr.READ_ONLY)}toWriteOnly(){return this.setAccess(yr.WRITE_ONLY)}generateStore(e){const t=e.getNodeProperties(this),{uvNode:i,storeNode:s,depthNode:r}=t,l=super.generate(e,"property"),u=i.build(e,this.value.is3DTexture===!0?"uvec3":"uvec2"),d=s.build(e,"vec4"),f=r?r.build(e,"int"):null,g=e.generateTextureStore(e,l,u,f,d);e.addLineFlowCode(g,this)}clone(){const e=super.clone();return e.storeNode=this.storeNode,e}}const FB=Wn(UB).setParameterLength(1,3),mj=(a,e,t)=>{const i=FB(a,e,t);return t!==null&&i.toStack(),i},gj=be(({texture:a,uv:e})=>{const i=xe().toVar();return yn(e.x.lessThan(1e-4),()=>{i.assign(xe(1,0,0))}).ElseIf(e.y.lessThan(1e-4),()=>{i.assign(xe(0,1,0))}).ElseIf(e.z.lessThan(1e-4),()=>{i.assign(xe(0,0,1))}).ElseIf(e.x.greaterThan(1-1e-4),()=>{i.assign(xe(-1,0,0))}).ElseIf(e.y.greaterThan(1-1e-4),()=>{i.assign(xe(0,-1,0))}).ElseIf(e.z.greaterThan(1-1e-4),()=>{i.assign(xe(0,0,-1))}).Else(()=>{const r=a.sample(e.add(xe(-.01,0,0))).r.sub(a.sample(e.add(xe(.01,0,0))).r),l=a.sample(e.add(xe(0,-.01,0))).r.sub(a.sample(e.add(xe(0,.01,0))).r),u=a.sample(e.add(xe(0,0,-.01))).r.sub(a.sample(e.add(xe(0,0,.01))).r);i.assign(xe(r,l,u))}),i.normalize()});class BB extends Ga{static get type(){return"Texture3DNode"}constructor(e,t=null,i=null){super(e,t,i),this.isTexture3DNode=!0}getInputType(){return"texture3D"}getDefaultUV(){return xe(.5,.5,.5)}setUpdateMatrix(){}setupUV(e,t){const i=this.value;return e.isFlipY()&&(i.isRenderTargetTexture===!0||i.isFramebufferTexture===!0)&&(this.sampler?t=t.flipY():t=t.setY(pe(Yc(this,this.levelNode).y).sub(t.y).sub(1))),t}generateUV(e,t){return t.build(e,"vec3")}normal(e){return gj({texture:this,uv:e})}}const OB=Wn(BB).setParameterLength(1,3);class VB extends Jg{static get type(){return"UserDataNode"}constructor(e,t,i=null){super(e,t,i),this.userData=i}updateReference(e){return this.reference=this.userData!==null?this.userData:e.object.userData,this.reference}}const _j=(a,e,t)=>Qe(new VB(a,e,t)),iI=new WeakMap;class xj extends $s{static get type(){return"VelocityNode"}constructor(){super("vec2"),this.projectionMatrix=null,this.updateType=ii.OBJECT,this.updateAfterType=ii.OBJECT,this.previousModelWorldMatrix=wn(new xn),this.previousProjectionMatrix=wn(new xn).setGroup(On),this.previousCameraViewMatrix=wn(new xn)}setProjectionMatrix(e){this.projectionMatrix=e}update({frameId:e,camera:t,object:i}){const s=sI(i);this.previousModelWorldMatrix.value.copy(s);const r=zB(t);r.frameId!==e&&(r.frameId=e,r.previousProjectionMatrix===void 0?(r.previousProjectionMatrix=new xn,r.previousCameraViewMatrix=new xn,r.currentProjectionMatrix=new xn,r.currentCameraViewMatrix=new xn,r.previousProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),r.previousCameraViewMatrix.copy(t.matrixWorldInverse)):(r.previousProjectionMatrix.copy(r.currentProjectionMatrix),r.previousCameraViewMatrix.copy(r.currentCameraViewMatrix)),r.currentProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),r.currentCameraViewMatrix.copy(t.matrixWorldInverse),this.previousProjectionMatrix.value.copy(r.previousProjectionMatrix),this.previousCameraViewMatrix.value.copy(r.previousCameraViewMatrix))}updateAfter({object:e}){sI(e).copy(e.matrixWorld)}setup(){const e=this.projectionMatrix===null?Wo:wn(this.projectionMatrix),t=this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix),i=e.mul(ac).mul(Fs),s=this.previousProjectionMatrix.mul(t).mul(_v),r=i.xy.div(i.w),l=s.xy.div(s.w);return Mi(r,l)}}function zB(a){let e=iI.get(a);return e===void 0&&(e={},iI.set(a,e)),e}function sI(a,e=0){const t=zB(a);let i=t[e];return i===void 0&&(t[e]=i=new xn,t[e].copy(a.matrixWorld)),i}const yj=Vt(xj),vj=be(([a])=>dE(a.rgb)),Sj=be(([a,e=te(1)])=>e.mix(dE(a.rgb),a.rgb)),bj=be(([a,e=te(1)])=>{const t=Ws(a.r,a.g,a.b).div(3),i=a.r.max(a.g.max(a.b)),s=i.sub(t).mul(e).mul(-3);return Ri(a.rgb,i,s)}),Tj=be(([a,e=te(1)])=>{const t=xe(.57735,.57735,.57735),i=e.cos();return xe(a.rgb.mul(i).add(t.cross(a.rgb).mul(e.sin()).add(t.mul(lu(t,a.rgb).mul(i.oneMinus())))))}),dE=(a,e=xe(zn.getLuminanceCoefficients(new re)))=>lu(a,e),Mj=be(([a,e=xe(1),t=xe(0),i=xe(1),s=te(1),r=xe(zn.getLuminanceCoefficients(new re,sc))])=>{const l=a.rgb.dot(xe(r)),u=Ns(a.rgb.mul(e).add(t),0).toVar(),d=u.pow(i).toVar();return yn(u.r.greaterThan(0),()=>{u.r.assign(d.r)}),yn(u.g.greaterThan(0),()=>{u.g.assign(d.g)}),yn(u.b.greaterThan(0),()=>{u.b.assign(d.b)}),u.assign(l.add(u.sub(l).mul(s))),tn(u.rgb,a.a)});class kB extends $s{static get type(){return"PosterizeNode"}constructor(e,t){super(),this.sourceNode=e,this.stepsNode=t}setup(){const{sourceNode:e,stepsNode:t}=this;return e.mul(t).floor().div(t)}}const wj=Wn(kB).setParameterLength(2),Ly=new it;class GB extends Ga{static get type(){return"PassTextureNode"}constructor(e,t){super(t),this.passNode=e,this.setUpdateMatrix(!1)}setup(e){return this.passNode.build(e),super.setup(e)}clone(){return new this.constructor(this.passNode,this.value)}}class rI extends GB{static get type(){return"PassMultipleTextureNode"}constructor(e,t,i=!1){super(e,null),this.textureName=t,this.previousTexture=i}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(e){return this.updateTexture(),super.setup(e)}clone(){const e=new this.constructor(this.passNode,this.textureName,this.previousTexture);return e.uvNode=this.uvNode,e.levelNode=this.levelNode,e.biasNode=this.biasNode,e.sampler=this.sampler,e.depthNode=this.depthNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e}}class Wa extends $s{static get type(){return"PassNode"}constructor(e,t,i,s={}){super("vec4"),this.scope=e,this.scene=t,this.camera=i,this.options=s,this._pixelRatio=1,this._width=1,this._height=1;const r=new Ro;r.isRenderTargetTexture=!0,r.name="depth";const l=new $a(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:Qs,...s});l.texture.name="output",l.depthTexture=r,this.renderTarget=l,this._textures={output:l.texture,depth:r},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=wn(0),this._cameraFar=wn(0),this._mrt=null,this._layers=null,this._resolution=1,this._viewport=null,this._scissor=null,this.isPassNode=!0,this.updateBeforeType=ii.FRAME,this.global=!0}setResolution(e){return this._resolution=e,this}getResolution(){return this._resolution}setLayers(e){return this._layers=e,this}getLayers(){return this._layers}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}getTexture(e){let t=this._textures[e];return t===void 0&&(t=this.renderTarget.texture.clone(),t.name=e,this._textures[e]=t,this.renderTarget.textures.push(t)),t}getPreviousTexture(e){let t=this._previousTextures[e];return t===void 0&&(t=this.getTexture(e).clone(),this._previousTextures[e]=t),t}toggleTexture(e){const t=this._previousTextures[e];if(t!==void 0){const i=this._textures[e],s=this.renderTarget.textures.indexOf(i);this.renderTarget.textures[s]=t,this._textures[e]=t,this._previousTextures[e]=i,this._textureNodes[e].updateTexture(),this._previousTextureNodes[e].updateTexture()}}getTextureNode(e="output"){let t=this._textureNodes[e];return t===void 0&&(t=Qe(new rI(this,e)),t.updateTexture(),this._textureNodes[e]=t),t}getPreviousTextureNode(e="output"){let t=this._previousTextureNodes[e];return t===void 0&&(this._textureNodes[e]===void 0&&this.getTextureNode(e),t=Qe(new rI(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}getViewZNode(e="depth"){let t=this._viewZNodes[e];if(t===void 0){const i=this._cameraNear,s=this._cameraFar;this._viewZNodes[e]=t=YA(this.getTextureNode(e),i,s)}return t}getLinearDepthNode(e="depth"){let t=this._linearDepthNodes[e];if(t===void 0){const i=this._cameraNear,s=this._cameraFar,r=this.getViewZNode(e);this._linearDepthNodes[e]=t=zf(r,i,s)}return t}async compileAsync(e){const t=e.getRenderTarget(),i=e.getMRT();e.setRenderTarget(this.renderTarget),e.setMRT(this._mrt),await e.compileAsync(this.scene,this.camera),e.setRenderTarget(t),e.setMRT(i)}setup({renderer:e}){return this.renderTarget.samples=this.options.samples===void 0?e.samples:this.options.samples,this.renderTarget.texture.type=e.getColorBufferType(),this.scope===Wa.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(e){const{renderer:t}=e,{scene:i}=this;let s,r;const l=t.getOutputRenderTarget();l&&l.isXRRenderTarget===!0?(r=1,s=t.xr.getCamera(),t.xr.updateCamera(s),Ly.set(l.width,l.height)):(s=this.camera,r=t.getPixelRatio(),t.getSize(Ly)),this._pixelRatio=r,this.setSize(Ly.width,Ly.height);const u=t.getRenderTarget(),d=t.getMRT(),f=s.layers.mask;this._cameraNear.value=s.near,this._cameraFar.value=s.far,this._layers!==null&&(s.layers.mask=this._layers.mask);for(const g in this._previousTextures)this.toggleTexture(g);t.setRenderTarget(this.renderTarget),t.setMRT(this._mrt),t.render(i,s),t.setRenderTarget(u),t.setMRT(d),s.layers.mask=f}setSize(e,t){this._width=e,this._height=t;const i=this._width*this._pixelRatio*this._resolution,s=this._height*this._pixelRatio*this._resolution;this.renderTarget.setSize(i,s),this._scissor!==null&&this.renderTarget.scissor.copy(this._scissor),this._viewport!==null&&this.renderTarget.viewport.copy(this._viewport)}setScissor(e,t,i,s){e===null?this._scissor=null:(this._scissor===null&&(this._scissor=new Un),e.isVector4?this._scissor.copy(e):this._scissor.set(e,t,i,s),this._scissor.multiplyScalar(this._pixelRatio*this._resolution).floor())}setViewport(e,t,i,s){e===null?this._viewport=null:(this._viewport===null&&(this._viewport=new Un),e.isVector4?this._viewport.copy(e):this._viewport.set(e,t,i,s),this._viewport.multiplyScalar(this._pixelRatio*this._resolution).floor())}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}Wa.COLOR="color";Wa.DEPTH="depth";const Aj=(a,e,t)=>Qe(new Wa(Wa.COLOR,a,e,t)),Ej=(a,e)=>Qe(new GB(a,e)),Rj=(a,e,t)=>Qe(new Wa(Wa.DEPTH,a,e,t));class HB extends Wa{static get type(){return"ToonOutlinePassNode"}constructor(e,t,i,s,r){super(Wa.COLOR,e,t),this.colorNode=i,this.thicknessNode=s,this.alphaNode=r,this._materialCache=new WeakMap}updateBefore(e){const{renderer:t}=e,i=t.getRenderObjectFunction();t.setRenderObjectFunction((s,r,l,u,d,f,g,x)=>{if((d.isMeshToonMaterial||d.isMeshToonNodeMaterial)&&d.wireframe===!1){const v=this._getOutlineMaterial(d);t.renderObject(s,r,l,u,v,f,g,x)}t.renderObject(s,r,l,u,d,f,g,x)}),super.updateBefore(e),t.setRenderObjectFunction(i)}_createMaterial(){const e=new ys;e.isMeshToonOutlineMaterial=!0,e.name="Toon_Outline",e.side=ns;const t=No.negate(),i=Wo.mul(ac),s=te(1),r=i.mul(tn(Fs,1)),l=i.mul(tn(Fs.add(t),1)),u=rc(r.sub(l));return e.vertexNode=r.add(u.mul(this.thicknessNode).mul(r.w).mul(s)),e.colorNode=tn(this.colorNode,this.alphaNode),e}_getOutlineMaterial(e){let t=this._materialCache.get(e);return t===void 0&&(t=this._createMaterial(),this._materialCache.set(e,t)),t}}const Cj=(a,e,t=new Jt(0,0,0),i=.003,s=1)=>Qe(new HB(a,e,Qe(t),Qe(i),Qe(s))),WB=be(([a,e])=>a.mul(e).clamp()).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),$B=be(([a,e])=>(a=a.mul(e),a.div(a.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),XB=be(([a,e])=>{a=a.mul(e),a=a.sub(.004).max(0);const t=a.mul(a.mul(6.2).add(.5)),i=a.mul(a.mul(6.2).add(1.7)).add(.06);return t.div(i).pow(2.2)}).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Nj=be(([a])=>{const e=a.mul(a.add(.0245786)).sub(90537e-9),t=a.mul(a.add(.432951).mul(.983729)).add(.238081);return e.div(t)}),qB=be(([a,e])=>{const t=Wr(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),i=Wr(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return a=a.mul(e).div(.6),a=t.mul(a),a=Nj(a),a=i.mul(a),a.clamp()}).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Pj=Wr(xe(1.6605,-.1246,-.0182),xe(-.5876,1.1329,-.1006),xe(-.0728,-.0083,1.1187)),Ij=Wr(xe(.6274,.0691,.0164),xe(.3293,.9195,.088),xe(.0433,.0113,.8956)),Lj=be(([a])=>{const e=xe(a).toVar(),t=xe(e.mul(e)).toVar(),i=xe(t.mul(t)).toVar();return te(15.5).mul(i.mul(t)).sub(ri(40.14,i.mul(e))).add(ri(31.96,i).sub(ri(6.868,t.mul(e))).add(ri(.4298,t).add(ri(.1191,e).sub(.00232))))}),YB=be(([a,e])=>{const t=xe(a).toVar(),i=Wr(xe(.856627153315983,.137318972929847,.11189821299995),xe(.0951212405381588,.761241990602591,.0767994186031903),xe(.0482516061458583,.101439036467562,.811302368396859)),s=Wr(xe(1.1271005818144368,-.1413297634984383,-.14132976349843826),xe(-.11060664309660323,1.157823702216272,-.11060664309660294),xe(-.016493938717834573,-.016493938717834257,1.2519364065950405)),r=te(-12.47393),l=te(4.026069);return t.mulAssign(e),t.assign(Ij.mul(t)),t.assign(i.mul(t)),t.assign(Ns(t,1e-10)),t.assign(dl(t)),t.assign(t.sub(r).div(l.sub(r))),t.assign(ya(t,0,1)),t.assign(Lj(t)),t.assign(s.mul(t)),t.assign(ha(Ns(xe(0),t),xe(2.2))),t.assign(Pj.mul(t)),t.assign(ya(t,0,1)),t}).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),ZB=be(([a,e])=>{const t=te(.76),i=te(.15);a=a.mul(e);const s=Co(a.r,Co(a.g,a.b)),r=vr(s.lessThan(.08),s.sub(ri(6.25,s.mul(s))),.04);a.subAssign(r);const l=Ns(a.r,Ns(a.g,a.b));yn(l.lessThan(t),()=>a);const u=Mi(1,t),d=Mi(1,u.mul(u).div(l.add(u.sub(t))));a.mulAssign(d.div(l));const f=Mi(1,Zo(1,i.mul(l.sub(d)).add(1)));return Ri(a,xe(d),f)}).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class zs extends Pn{static get type(){return"CodeNode"}constructor(e="",t=[],i=""){super("code"),this.isCodeNode=!0,this.global=!0,this.code=e,this.includes=t,this.language=i}setIncludes(e){return this.includes=e,this}getIncludes(){return this.includes}generate(e){const t=this.getIncludes(e);for(const s of t)s.build(e);const i=e.getCodeFromNode(this,this.getNodeType(e));return i.code=this.code,i.code}serialize(e){super.serialize(e),e.code=this.code,e.language=this.language}deserialize(e){super.deserialize(e),this.code=e.code,this.language=e.language}}const H0=Wn(zs).setParameterLength(1,3),Dj=(a,e)=>H0(a,e,"js"),Uj=(a,e)=>H0(a,e,"wgsl"),Fj=(a,e)=>H0(a,e,"glsl");class fE extends zs{static get type(){return"FunctionNode"}constructor(e="",t=[],i=""){super(e,t,i)}getNodeType(e){return this.getNodeFunction(e).type}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const t=e.getDataFromNode(this);let i=t.nodeFunction;return i===void 0&&(i=e.parser.parseFunction(this.code),t.nodeFunction=i),i}generate(e,t){super.generate(e);const i=this.getNodeFunction(e),s=i.name,r=i.type,l=e.getCodeFromNode(this,r);s!==""&&(l.name=s);const u=e.getPropertyName(l),d=this.getNodeFunction(e).getCode(u);return l.code=d+`
`,t==="property"?u:e.format(`${u}()`,r,t)}}const KB=(a,e=[],t="")=>{for(let r=0;r<e.length;r++){const l=e[r];typeof l=="function"&&(e[r]=l.functionNode)}const i=Qe(new fE(a,e,t)),s=(...r)=>i.call(...r);return s.functionNode=i,s},Bj=(a,e)=>KB(a,e,"glsl"),Oj=(a,e)=>KB(a,e,"wgsl");class JB extends Pn{static get type(){return"ScriptableValueNode"}constructor(e=null){super(),this._value=e,this._cache=null,this.inputType=null,this.outputType=null,this.events=new Jo,this.isScriptableValueNode=!0}get isScriptableOutputNode(){return this.outputType!==null}set value(e){this._value!==e&&(this._cache&&this.inputType==="URL"&&this.value.value instanceof ArrayBuffer&&(URL.revokeObjectURL(this._cache),this._cache=null),this._value=e,this.events.dispatchEvent({type:"change"}),this.refresh())}get value(){return this._value}refresh(){this.events.dispatchEvent({type:"refresh"})}getValue(){const e=this.value;if(e&&this._cache===null&&this.inputType==="URL"&&e.value instanceof ArrayBuffer)this._cache=URL.createObjectURL(new Blob([e.value]));else if(e&&e.value!==null&&e.value!==void 0&&((this.inputType==="URL"||this.inputType==="String")&&typeof e.value=="string"||this.inputType==="Number"&&typeof e.value=="number"||this.inputType==="Vector2"&&e.value.isVector2||this.inputType==="Vector3"&&e.value.isVector3||this.inputType==="Vector4"&&e.value.isVector4||this.inputType==="Color"&&e.value.isColor||this.inputType==="Matrix3"&&e.value.isMatrix3||this.inputType==="Matrix4"&&e.value.isMatrix4))return e.value;return this._cache||e}getNodeType(e){return this.value&&this.value.isNode?this.value.getNodeType(e):"float"}setup(){return this.value&&this.value.isNode?this.value:te()}serialize(e){super.serialize(e),this.value!==null?this.inputType==="ArrayBuffer"?e.value=Xw(this.value):e.value=this.value?this.value.toJSON(e.meta).uuid:null:e.value=null,e.inputType=this.inputType,e.outputType=this.outputType}deserialize(e){super.deserialize(e);let t=null;e.value!==null&&(e.inputType==="ArrayBuffer"?t=qw(e.value):e.inputType==="Texture"?t=e.meta.textures[e.value]:t=e.meta.nodes[e.value]||null),this.value=t,this.inputType=e.inputType,this.outputType=e.outputType}}const Ky=Wn(JB).setParameterLength(1);class jB extends Map{get(e,t=null,...i){if(this.has(e))return super.get(e);if(t!==null){const s=t(...i);return this.set(e,s),s}}}class Vj{constructor(e){this.scriptableNode=e}get parameters(){return this.scriptableNode.parameters}get layout(){return this.scriptableNode.getLayout()}getInputLayout(e){return this.scriptableNode.getInputLayout(e)}get(e){const t=this.parameters[e];return t?t.getValue():null}}const Jy=new jB;class QB extends Pn{static get type(){return"ScriptableNode"}constructor(e=null,t={}){super(),this.codeNode=e,this.parameters=t,this._local=new jB,this._output=Ky(null),this._outputs={},this._source=this.source,this._method=null,this._object=null,this._value=null,this._needsOutputUpdate=!0,this.onRefresh=this.onRefresh.bind(this),this.isScriptableNode=!0}get source(){return this.codeNode?this.codeNode.code:""}setLocal(e,t){return this._local.set(e,t)}getLocal(e){return this._local.get(e)}onRefresh(){this._refresh()}getInputLayout(e){for(const t of this.getLayout())if(t.inputType&&(t.id===e||t.name===e))return t}getOutputLayout(e){for(const t of this.getLayout())if(t.outputType&&(t.id===e||t.name===e))return t}setOutput(e,t){const i=this._outputs;return i[e]===void 0?i[e]=Ky(t):i[e].value=t,this}getOutput(e){return this._outputs[e]}getParameter(e){return this.parameters[e]}setParameter(e,t){const i=this.parameters;return t&&t.isScriptableNode?(this.deleteParameter(e),i[e]=t,i[e].getDefaultOutput().events.addEventListener("refresh",this.onRefresh)):t&&t.isScriptableValueNode?(this.deleteParameter(e),i[e]=t,i[e].events.addEventListener("refresh",this.onRefresh)):i[e]===void 0?(i[e]=Ky(t),i[e].events.addEventListener("refresh",this.onRefresh)):i[e].value=t,this}getValue(){return this.getDefaultOutput().getValue()}deleteParameter(e){let t=this.parameters[e];return t&&(t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.removeEventListener("refresh",this.onRefresh)),this}clearParameters(){for(const e of Object.keys(this.parameters))this.deleteParameter(e);return this.needsUpdate=!0,this}call(e,...t){const s=this.getObject()[e];if(typeof s=="function")return s(...t)}async callAsync(e,...t){const s=this.getObject()[e];if(typeof s=="function")return s.constructor.name==="AsyncFunction"?await s(...t):s(...t)}getNodeType(e){return this.getDefaultOutputNode().getNodeType(e)}refresh(e=null){e!==null?this.getOutput(e).refresh():this._refresh()}getObject(){if(this.needsUpdate&&this.dispose(),this._object!==null)return this._object;const e=()=>this.refresh(),t=(f,g)=>this.setOutput(f,g),i=new Vj(this),s=Jy.get("THREE"),r=Jy.get("TSL"),l=this.getMethod(),u=[i,this._local,Jy,e,t,s,r];this._object=l(...u);const d=this._object.layout;if(d&&(d.cache===!1&&this._local.clear(),this._output.outputType=d.outputType||null,Array.isArray(d.elements)))for(const f of d.elements){const g=f.id||f.name;f.inputType&&(this.getParameter(g)===void 0&&this.setParameter(g,null),this.getParameter(g).inputType=f.inputType),f.outputType&&(this.getOutput(g)===void 0&&this.setOutput(g,null),this.getOutput(g).outputType=f.outputType)}return this._object}deserialize(e){super.deserialize(e);for(const t in this.parameters){let i=this.parameters[t];i.isScriptableNode&&(i=i.getDefaultOutput()),i.events.addEventListener("refresh",this.onRefresh)}}getLayout(){return this.getObject().layout}getDefaultOutputNode(){const e=this.getDefaultOutput().value;return e&&e.isNode?e:te()}getDefaultOutput(){return this._exec()._output}getMethod(){if(this.needsUpdate&&this.dispose(),this._method!==null)return this._method;const e=["parameters","local","global","refresh","setOutput","THREE","TSL"],i=["layout","init","main","dispose"].join(", "),s="var "+i+`; var output = {};
`,r=`
return { ...output, `+i+" };",l=s+this.codeNode.code+r;return this._method=new Function(...e,l),this._method}dispose(){this._method!==null&&(this._object&&typeof this._object.dispose=="function"&&this._object.dispose(),this._method=null,this._object=null,this._source=null,this._value=null,this._needsOutputUpdate=!0,this._output.value=null,this._outputs={})}setup(){return this.getDefaultOutputNode()}getCacheKey(e){const t=[zw(this.source),this.getDefaultOutputNode().getCacheKey(e)];for(const i in this.parameters)t.push(this.parameters[i].getCacheKey(e));return $g(t)}set needsUpdate(e){e===!0&&this.dispose()}get needsUpdate(){return this.source!==this._source}_exec(){return this.codeNode===null?this:(this._needsOutputUpdate===!0&&(this._value=this.call("main"),this._needsOutputUpdate=!1),this._output.value=this._value,this)}_refresh(){this.needsUpdate=!0,this._exec(),this._output.refresh()}}const zj=Wn(QB).setParameterLength(1,2);function e3(a){let e;const t=a.context.getViewZ;return t!==void 0&&(e=t(this)),(e||Bs.z).negate()}const pE=be(([a,e],t)=>{const i=e3(t);return va(a,e,i)}),mE=be(([a],e)=>{const t=e3(e);return a.mul(a,t,t).negate().exp().oneMinus()}),Ag=be(([a,e])=>tn(e.toFloat().mix(Of.rgb,a.toVec3()),Of.a));function kj(a,e,t){return console.warn('THREE.TSL: "rangeFog( color, near, far )" is deprecated. Use "fog( color, rangeFogFactor( near, far ) )" instead.'),Ag(a,pE(e,t))}function Gj(a,e){return console.warn('THREE.TSL: "densityFog( color, density )" is deprecated. Use "fog( color, densityFogFactor( density ) )" instead.'),Ag(a,mE(e))}let ah=null,lh=null;class t3 extends Pn{static get type(){return"RangeNode"}constructor(e=te(),t=te()){super(),this.minNode=e,this.maxNode=t}getVectorLength(e){const t=e.getTypeLength(Yl(this.minNode.value)),i=e.getTypeLength(Yl(this.maxNode.value));return t>i?t:i}getNodeType(e){return e.object.count>1?e.getTypeFromLength(this.getVectorLength(e)):"float"}setup(e){const t=e.object;let i=null;if(t.count>1){const s=this.minNode.value,r=this.maxNode.value,l=e.getTypeLength(Yl(s)),u=e.getTypeLength(Yl(r));ah=ah||new Un,lh=lh||new Un,ah.setScalar(0),lh.setScalar(0),l===1?ah.setScalar(s):s.isColor?ah.set(s.r,s.g,s.b,1):ah.set(s.x,s.y,s.z||0,s.w||0),u===1?lh.setScalar(r):r.isColor?lh.set(r.r,r.g,r.b,1):lh.set(r.x,r.y,r.z||0,r.w||0);const d=4,f=d*t.count,g=new Float32Array(f);for(let v=0;v<f;v++){const S=v%d,T=ah.getComponent(S),E=lh.getComponent(S);g[v]=QM.lerp(T,E,Math.random())}const x=this.getNodeType(e);if(t.count<=4096)i=Zg(g,"vec4",t.count).element(Zc).convert(x);else{const v=new pa(g,4);e.geometry.setAttribute("__range"+this.id,v),i=gv(v).convert(x)}}else i=te(0);return i}}const Hj=Wn(t3).setParameterLength(2);class Wj extends Pn{static get type(){return"ComputeBuiltinNode"}constructor(e,t){super(t),this._builtinName=e}getHash(e){return this.getBuiltinName(e)}getNodeType(){return this.nodeType}setBuiltinName(e){return this._builtinName=e,this}getBuiltinName(){return this._builtinName}hasBuiltin(e){return e.hasBuiltin(this._builtinName)}generate(e,t){const i=this.getBuiltinName(e),s=this.getNodeType(e);return e.shaderStage==="compute"?e.format(i,s,t):(console.warn(`ComputeBuiltinNode: Compute built-in value ${i} can not be accessed in the ${e.shaderStage} stage`),e.generateConst(s))}serialize(e){super.serialize(e),e.global=this.global,e._builtinName=this._builtinName}deserialize(e){super.deserialize(e),this.global=e.global,this._builtinName=e._builtinName}}const n_=(a,e)=>Qe(new Wj(a,e)),$j=n_("numWorkgroups","uvec3"),Xj=n_("workgroupId","uvec3"),qj=n_("globalId","uvec3"),Yj=n_("localId","uvec3"),Zj=n_("subgroupSize","uint");class Kj extends Pn{constructor(e){super(),this.scope=e}generate(e){const{scope:t}=this,{renderer:i}=e;i.backend.isWebGLBackend===!0?e.addFlowCode(`	// ${t}Barrier 
`):e.addLineFlowCode(`${t}Barrier()`,this)}}const gE=Wn(Kj),Jj=()=>gE("workgroup").toStack(),jj=()=>gE("storage").toStack(),Qj=()=>gE("texture").toStack();class eQ extends au{constructor(e,t){super(e,t),this.isWorkgroupInfoElementNode=!0}generate(e,t){let i;const s=e.context.assign;if(i=super.generate(e),s!==!0){const r=this.getNodeType(e);i=e.format(i,r,t)}return i}}class tQ extends Pn{constructor(e,t,i=0){super(t),this.bufferType=t,this.bufferCount=i,this.isWorkgroupInfoNode=!0,this.elementType=t,this.scope=e,this.name=""}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}setScope(e){return this.scope=e,this}getElementType(){return this.elementType}getInputType(){return`${this.scope}Array`}element(e){return Qe(new eQ(this,e))}generate(e){const t=this.name!==""?this.name:`${this.scope}Array_${this.id}`;return e.getScopedArray(t,this.scope.toLowerCase(),this.bufferType,this.bufferCount)}}const nQ=(a,e)=>Qe(new tQ("Workgroup",a,e));class cr extends Pn{static get type(){return"AtomicFunctionNode"}constructor(e,t,i){super("uint"),this.method=e,this.pointerNode=t,this.valueNode=i,this.parents=!0}getInputType(e){return this.pointerNode.getNodeType(e)}getNodeType(e){return this.getInputType(e)}generate(e){const t=e.getNodeProperties(this),i=t.parents,s=this.method,r=this.getNodeType(e),l=this.getInputType(e),u=this.pointerNode,d=this.valueNode,f=[];f.push(`&${u.build(e,l)}`),d!==null&&f.push(d.build(e,l));const g=`${e.getMethod(s,r)}( ${f.join(", ")} )`;if(i?i.length===1&&i[0].isStackNode===!0:!1)e.addLineFlowCode(g,this);else return t.constNode===void 0&&(t.constNode=oc(g,r).toConst()),t.constNode.build(e)}}cr.ATOMIC_LOAD="atomicLoad";cr.ATOMIC_STORE="atomicStore";cr.ATOMIC_ADD="atomicAdd";cr.ATOMIC_SUB="atomicSub";cr.ATOMIC_MAX="atomicMax";cr.ATOMIC_MIN="atomicMin";cr.ATOMIC_AND="atomicAnd";cr.ATOMIC_OR="atomicOr";cr.ATOMIC_XOR="atomicXor";const iQ=Wn(cr),vl=(a,e,t)=>iQ(a,e,t).toStack(),sQ=a=>vl(cr.ATOMIC_LOAD,a,null),rQ=(a,e)=>vl(cr.ATOMIC_STORE,a,e),oQ=(a,e)=>vl(cr.ATOMIC_ADD,a,e),aQ=(a,e)=>vl(cr.ATOMIC_SUB,a,e),lQ=(a,e)=>vl(cr.ATOMIC_MAX,a,e),cQ=(a,e)=>vl(cr.ATOMIC_MIN,a,e),uQ=(a,e)=>vl(cr.ATOMIC_AND,a,e),hQ=(a,e)=>vl(cr.ATOMIC_OR,a,e),dQ=(a,e)=>vl(cr.ATOMIC_XOR,a,e);let Dy;function W0(a){Dy=Dy||new WeakMap;let e=Dy.get(a);return e===void 0&&Dy.set(a,e={}),e}function $0(a){const e=W0(a);return e.shadowMatrix||(e.shadowMatrix=wn("mat4").setGroup(On).onRenderUpdate(t=>((a.castShadow!==!0||t.renderer.shadowMap.enabled===!1)&&a.shadow.updateMatrices(a),a.shadow.matrix)))}function n3(a,e=Xo){const t=$0(a).mul(e);return t.xyz.div(t.w)}function _E(a){const e=W0(a);return e.position||(e.position=wn(new re).setGroup(On).onRenderUpdate((t,i)=>i.value.setFromMatrixPosition(a.matrixWorld)))}function i3(a){const e=W0(a);return e.targetPosition||(e.targetPosition=wn(new re).setGroup(On).onRenderUpdate((t,i)=>i.value.setFromMatrixPosition(a.target.matrixWorld)))}function xE(a){const e=W0(a);return e.viewPosition||(e.viewPosition=wn(new re).setGroup(On).onRenderUpdate(({camera:t},i)=>{i.value=i.value||new re,i.value.setFromMatrixPosition(a.matrixWorld),i.value.applyMatrix4(t.matrixWorldInverse)}))}const yE=a=>jo.transformDirection(_E(a).sub(i3(a))),fQ=a=>a.sort((e,t)=>e.id-t.id),pQ=(a,e)=>{for(const t of e)if(t.isAnalyticLightNode&&t.light.id===a)return t;return null},HT=new WeakMap,Im=[];class X0 extends Pn{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=Va("vec3","totalDiffuse"),this.totalSpecularNode=Va("vec3","totalSpecular"),this.outgoingLightNode=Va("vec3","outgoingLight"),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}customCacheKey(){const e=this._lights;for(let i=0;i<e.length;i++){const s=e[i];if(Im.push(s.id),Im.push(s.castShadow?1:0),s.isSpotLight===!0){const r=s.map!==null?s.map.id:-1,l=s.colorNode?s.colorNode.getCacheKey():-1;Im.push(r,l)}}const t=$g(Im);return Im.length=0,t}getHash(e){if(this._lightNodesHash===null){this._lightNodes===null&&this.setupLightsNode(e);const t=[];for(const i of this._lightNodes)t.push(i.getSelf().getHash());this._lightNodesHash="lights-"+t.join(",")}return this._lightNodesHash}analyze(e){const t=e.getNodeProperties(this);for(const i of t.nodes)i.build(e);t.outputNode.build(e)}setupLightsNode(e){const t=[],i=this._lightNodes,s=fQ(this._lights),r=e.renderer.library;for(const l of s)if(l.isNode)t.push(Qe(l));else{let u=null;if(i!==null&&(u=pQ(l.id,i)),u===null){const d=r.getLightNodeClass(l.constructor);if(d===null){console.warn(`LightsNode.setupNodeLights: Light node not found for ${l.constructor.name}`);continue}let f=null;HT.has(l)?f=HT.get(l):(f=Qe(new d(l)),HT.set(l,f)),t.push(f)}}this._lightNodes=t}setupDirectLight(e,t,i){const{lightingModel:s,reflectedLight:r}=e.context;s.direct({...i,lightNode:t,reflectedLight:r},e)}setupDirectRectAreaLight(e,t,i){const{lightingModel:s,reflectedLight:r}=e.context;s.directRectArea({...i,lightNode:t,reflectedLight:r},e)}setupLights(e,t){for(const i of t)i.build(e)}getLightNodes(e){return this._lightNodes===null&&this.setupLightsNode(e),this._lightNodes}setup(e){const t=e.lightsNode;e.lightsNode=this;let i=this.outgoingLightNode;const s=e.context,r=s.lightingModel,l=e.getNodeProperties(this);if(r){const{totalDiffuseNode:u,totalSpecularNode:d}=this;s.outgoingLight=i;const f=e.addStack();l.nodes=f.nodes,r.start(e);const{backdrop:g,backdropAlpha:x}=s,{directDiffuse:v,directSpecular:S,indirectDiffuse:T,indirectSpecular:E}=s.reflectedLight;let A=v.add(T);g!==null&&(x!==null?A=xe(x.mix(A,g)):A=xe(g),s.material.transparent=!0),u.assign(A),d.assign(S.add(E)),i.assign(u.add(d)),r.finish(e),i=i.bypass(e.removeStack())}else l.nodes=[];return e.lightsNode=t,i}setLights(e){return this._lights=e,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}}const mQ=(a=[])=>Qe(new X0).setLights(a);class s3 extends Pn{static get type(){return"ShadowBaseNode"}constructor(e){super(),this.light=e,this.updateBeforeType=ii.RENDER,this.isShadowBaseNode=!0}setupShadowPosition({context:e,material:t}){vE.assign(t.receivedShadowPositionNode||e.shadowPositionWorld||Xo)}}const vE=Va("vec3","shadowPositionWorld");function SE(a,e={}){return e.toneMapping=a.toneMapping,e.toneMappingExposure=a.toneMappingExposure,e.outputColorSpace=a.outputColorSpace,e.renderTarget=a.getRenderTarget(),e.activeCubeFace=a.getActiveCubeFace(),e.activeMipmapLevel=a.getActiveMipmapLevel(),e.renderObjectFunction=a.getRenderObjectFunction(),e.pixelRatio=a.getPixelRatio(),e.mrt=a.getMRT(),e.clearColor=a.getClearColor(e.clearColor||new Jt),e.clearAlpha=a.getClearAlpha(),e.autoClear=a.autoClear,e.scissorTest=a.getScissorTest(),e}function r3(a,e){return e=SE(a,e),a.setMRT(null),a.setRenderObjectFunction(null),a.setClearColor(0,1),a.autoClear=!0,e}function o3(a,e){a.toneMapping=e.toneMapping,a.toneMappingExposure=e.toneMappingExposure,a.outputColorSpace=e.outputColorSpace,a.setRenderTarget(e.renderTarget,e.activeCubeFace,e.activeMipmapLevel),a.setRenderObjectFunction(e.renderObjectFunction),a.setPixelRatio(e.pixelRatio),a.setMRT(e.mrt),a.setClearColor(e.clearColor,e.clearAlpha),a.autoClear=e.autoClear,a.setScissorTest(e.scissorTest)}function bE(a,e={}){return e.background=a.background,e.backgroundNode=a.backgroundNode,e.overrideMaterial=a.overrideMaterial,e}function a3(a,e){return e=bE(a,e),a.background=null,a.backgroundNode=null,a.overrideMaterial=null,e}function l3(a,e){a.background=e.background,a.backgroundNode=e.backgroundNode,a.overrideMaterial=e.overrideMaterial}function gQ(a,e,t={}){return t=SE(a,t),t=bE(e,t),t}function c3(a,e,t){return t=r3(a,t),t=a3(e,t),t}function u3(a,e,t){o3(a,t),l3(e,t)}var _Q=Object.freeze({__proto__:null,resetRendererAndSceneState:c3,resetRendererState:r3,resetSceneState:a3,restoreRendererAndSceneState:u3,restoreRendererState:o3,restoreSceneState:l3,saveRendererAndSceneState:gQ,saveRendererState:SE,saveSceneState:bE});const oI=new WeakMap,h3=be(({depthTexture:a,shadowCoord:e,depthLayer:t})=>{let i=Si(a,e.xy).setName("t_basic");return a.isArrayTexture&&(i=i.depth(t)),i.compare(e.z)}),d3=be(({depthTexture:a,shadowCoord:e,shadow:t,depthLayer:i})=>{const s=(A,w)=>{let O=Si(a,A);return a.isArrayTexture&&(O=O.depth(i)),O.compare(w)},r=hs("mapSize","vec2",t).setGroup(On),l=hs("radius","float",t).setGroup(On),u=nt(1).div(r),d=u.x.negate().mul(l),f=u.y.negate().mul(l),g=u.x.mul(l),x=u.y.mul(l),v=d.div(2),S=f.div(2),T=g.div(2),E=x.div(2);return Ws(s(e.xy.add(nt(d,f)),e.z),s(e.xy.add(nt(0,f)),e.z),s(e.xy.add(nt(g,f)),e.z),s(e.xy.add(nt(v,S)),e.z),s(e.xy.add(nt(0,S)),e.z),s(e.xy.add(nt(T,S)),e.z),s(e.xy.add(nt(d,0)),e.z),s(e.xy.add(nt(v,0)),e.z),s(e.xy,e.z),s(e.xy.add(nt(T,0)),e.z),s(e.xy.add(nt(g,0)),e.z),s(e.xy.add(nt(v,E)),e.z),s(e.xy.add(nt(0,E)),e.z),s(e.xy.add(nt(T,E)),e.z),s(e.xy.add(nt(d,x)),e.z),s(e.xy.add(nt(0,x)),e.z),s(e.xy.add(nt(g,x)),e.z)).mul(1/17)}),f3=be(({depthTexture:a,shadowCoord:e,shadow:t,depthLayer:i})=>{const s=(x,v)=>{let S=Si(a,x);return a.isArrayTexture&&(S=S.depth(i)),S.compare(v)},r=hs("mapSize","vec2",t).setGroup(On),l=nt(1).div(r),u=l.x,d=l.y,f=e.xy,g=uc(f.mul(r).add(.5));return f.subAssign(g.mul(l)),Ws(s(f,e.z),s(f.add(nt(u,0)),e.z),s(f.add(nt(0,d)),e.z),s(f.add(l),e.z),Ri(s(f.add(nt(u.negate(),0)),e.z),s(f.add(nt(u.mul(2),0)),e.z),g.x),Ri(s(f.add(nt(u.negate(),d)),e.z),s(f.add(nt(u.mul(2),d)),e.z),g.x),Ri(s(f.add(nt(0,d.negate())),e.z),s(f.add(nt(0,d.mul(2))),e.z),g.y),Ri(s(f.add(nt(u,d.negate())),e.z),s(f.add(nt(u,d.mul(2))),e.z),g.y),Ri(Ri(s(f.add(nt(u.negate(),d.negate())),e.z),s(f.add(nt(u.mul(2),d.negate())),e.z),g.x),Ri(s(f.add(nt(u.negate(),d.mul(2))),e.z),s(f.add(nt(u.mul(2),d.mul(2))),e.z),g.x),g.y)).mul(1/9)}),p3=be(({depthTexture:a,shadowCoord:e,depthLayer:t})=>{const i=te(1).toVar();let s=Si(a).sample(e.xy);a.isArrayTexture&&(s=s.depth(t)),s=s.rg;const r=A0(e.z,s.x);return yn(r.notEqual(te(1)),()=>{const l=e.z.sub(s.x),u=Ns(0,s.y.mul(s.y));let d=u.div(u.add(l.mul(l)));d=ya(Mi(d,.3).div(.95-.3)),i.assign(ya(Ns(r,d)))}),i}),xQ=be(([a,e,t])=>{let i=Xo.sub(a).length();return i=i.sub(e).div(t.sub(e)),i=i.saturate(),i}),yQ=a=>{const e=a.shadow.camera,t=hs("near","float",e).setGroup(On),i=hs("far","float",e).setGroup(On),s=sU(a);return xQ(s,t,i)},m3=a=>{let e=oI.get(a);if(e===void 0){const t=a.isPointLight?yQ(a):null;e=new ys,e.colorNode=tn(0,0,0,1),e.depthNode=t,e.isShadowPassMaterial=!0,e.name="ShadowMaterial",e.fog=!1,oI.set(a,e)}return e},aI=new Ha,Tf=[],g3=(a,e,t,i)=>{Tf[0]=a,Tf[1]=e;let s=aI.get(Tf);return(s===void 0||s.shadowType!==t||s.useVelocity!==i)&&(s=(r,l,u,d,f,g,...x)=>{(r.castShadow===!0||r.receiveShadow&&t===So)&&(i&&($w(r).useVelocity=!0),r.onBeforeShadow(a,r,u,e.camera,d,l.overrideMaterial,g),a.renderObject(r,l,u,d,f,g,...x),r.onAfterShadow(a,r,u,e.camera,d,l.overrideMaterial,g))},s.shadowType=t,s.useVelocity=i,aI.set(Tf,s)),Tf[0]=null,Tf[1]=null,s},vQ=be(({samples:a,radius:e,size:t,shadowPass:i,depthLayer:s})=>{const r=te(0).toVar("meanVertical"),l=te(0).toVar("squareMeanVertical"),u=a.lessThanEqual(te(1)).select(te(0),te(2).div(a.sub(1))),d=a.lessThanEqual(te(1)).select(te(0),te(-1));Zi({start:pe(0),end:pe(a),type:"int",condition:"<"},({i:g})=>{const x=d.add(te(g).mul(u));let v=i.sample(Ws(Qg.xy,nt(0,x).mul(e)).div(t));i.value.isArrayTexture&&(v=v.depth(s)),v=v.x,r.addAssign(v),l.addAssign(v.mul(v))}),r.divAssign(a),l.divAssign(a);const f=xl(l.sub(r.mul(r)));return nt(r,f)}),SQ=be(({samples:a,radius:e,size:t,shadowPass:i,depthLayer:s})=>{const r=te(0).toVar("meanHorizontal"),l=te(0).toVar("squareMeanHorizontal"),u=a.lessThanEqual(te(1)).select(te(0),te(2).div(a.sub(1))),d=a.lessThanEqual(te(1)).select(te(0),te(-1));Zi({start:pe(0),end:pe(a),type:"int",condition:"<"},({i:g})=>{const x=d.add(te(g).mul(u));let v=i.sample(Ws(Qg.xy,nt(x,0).mul(e)).div(t));i.value.isArrayTexture&&(v=v.depth(s)),r.addAssign(v.x),l.addAssign(Ws(v.y.mul(v.y),v.x.mul(v.x)))}),r.divAssign(a),l.divAssign(a);const f=xl(l.sub(r.mul(r)));return nt(r,f)}),bQ=[h3,d3,f3,p3];let WT;const Uy=new Mp;class TE extends s3{static get type(){return"ShadowNode"}constructor(e,t=null){super(e),this.shadow=t||e.shadow,this.shadowMap=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this._node=null,this._cameraFrameId=new WeakMap,this.isShadowNode=!0,this.depthLayer=0}setupShadowFilter(e,{filterFn:t,depthTexture:i,shadowCoord:s,shadow:r,depthLayer:l}){const u=s.x.greaterThanEqual(0).and(s.x.lessThanEqual(1)).and(s.y.greaterThanEqual(0)).and(s.y.lessThanEqual(1)).and(s.z.lessThanEqual(1)),d=t({depthTexture:i,shadowCoord:s,shadow:r,depthLayer:l});return u.select(d,te(1))}setupShadowCoord(e,t){const{shadow:i}=this,{renderer:s}=e,r=hs("bias","float",i).setGroup(On);let l=t,u;if(i.camera.isOrthographicCamera||s.logarithmicDepthBuffer!==!0)l=l.xyz.div(l.w),u=l.z,s.coordinateSystem===_a&&(u=u.mul(2).sub(1));else{const d=l.w;l=l.xy.div(d);const f=hs("near","float",i.camera).setGroup(On),g=hs("far","float",i.camera).setGroup(On);u=ZA(d.negate(),f,g)}return l=xe(l.x,l.y.oneMinus(),u.add(r)),l}getShadowFilterFn(e){return bQ[e]}setupRenderTarget(e,t){const i=new Ro(e.mapSize.width,e.mapSize.height);i.name="ShadowDepthTexture",i.compareFunction=Ig;const s=t.createRenderTarget(e.mapSize.width,e.mapSize.height);return s.texture.name="ShadowMap",s.texture.type=e.mapType,s.depthTexture=i,{shadowMap:s,depthTexture:i}}setupShadow(e){const{renderer:t}=e,{light:i,shadow:s}=this,r=t.shadowMap.type,{depthTexture:l,shadowMap:u}=this.setupRenderTarget(s,e);if(s.camera.updateProjectionMatrix(),r===So&&s.isPointLightShadow!==!0){l.compareFunction=null,u.depth>1?(u._vsmShadowMapVertical||(u._vsmShadowMapVertical=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:ul,type:Qs,depth:u.depth,depthBuffer:!1}),u._vsmShadowMapVertical.texture.name="VSMVertical"),this.vsmShadowMapVertical=u._vsmShadowMapVertical,u._vsmShadowMapHorizontal||(u._vsmShadowMapHorizontal=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:ul,type:Qs,depth:u.depth,depthBuffer:!1}),u._vsmShadowMapHorizontal.texture.name="VSMHorizontal"),this.vsmShadowMapHorizontal=u._vsmShadowMapHorizontal):(this.vsmShadowMapVertical=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:ul,type:Qs,depthBuffer:!1}),this.vsmShadowMapHorizontal=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:ul,type:Qs,depthBuffer:!1}));let w=Si(l);l.isArrayTexture&&(w=w.depth(this.depthLayer));let O=Si(this.vsmShadowMapVertical.texture);l.isArrayTexture&&(O=O.depth(this.depthLayer));const F=hs("blurSamples","float",s).setGroup(On),B=hs("radius","float",s).setGroup(On),k=hs("mapSize","vec2",s).setGroup(On);let Y=this.vsmMaterialVertical||(this.vsmMaterialVertical=new ys);Y.fragmentNode=vQ({samples:F,radius:B,size:k,shadowPass:w,depthLayer:this.depthLayer}).context(e.getSharedContext()),Y.name="VSMVertical",Y=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new ys),Y.fragmentNode=SQ({samples:F,radius:B,size:k,shadowPass:O,depthLayer:this.depthLayer}).context(e.getSharedContext()),Y.name="VSMHorizontal"}const d=hs("intensity","float",s).setGroup(On),f=hs("normalBias","float",s).setGroup(On),g=$0(i).mul(vE.add(cu.mul(f))),x=this.setupShadowCoord(e,g),v=s.filterNode||this.getShadowFilterFn(t.shadowMap.type)||null;if(v===null)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const S=r===So&&s.isPointLightShadow!==!0?this.vsmShadowMapHorizontal.texture:l,T=this.setupShadowFilter(e,{filterFn:v,shadowTexture:u.texture,depthTexture:S,shadowCoord:x,shadow:s,depthLayer:this.depthLayer});let E=Si(u.texture,x);l.isArrayTexture&&(E=E.depth(this.depthLayer));const A=Ri(1,T.rgb.mix(E,1),d.mul(E.a)).toVar();return this.shadowMap=u,this.shadow.map=u,A}setup(e){if(e.renderer.shadowMap.enabled!==!1)return be(()=>{let t=this._node;return this.setupShadowPosition(e),t===null&&(this._node=t=this.setupShadow(e)),e.material.shadowNode&&console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.'),e.material.receivedShadowNode&&(t=e.material.receivedShadowNode(t)),t})()}renderShadow(e){const{shadow:t,shadowMap:i,light:s}=this,{renderer:r,scene:l}=e;t.updateMatrices(s),i.setSize(t.mapSize.width,t.mapSize.height,i.depth),r.render(l,t.camera)}updateShadow(e){const{shadowMap:t,light:i,shadow:s}=this,{renderer:r,scene:l,camera:u}=e,d=r.shadowMap.type,f=t.depthTexture.version;this._depthVersionCached=f;const g=s.camera.layers.mask;(s.camera.layers.mask&4294967294)===0&&(s.camera.layers.mask=u.layers.mask);const x=r.getRenderObjectFunction(),v=r.getMRT(),S=v?v.has("velocity"):!1;WT=c3(r,l,WT),l.overrideMaterial=m3(i),r.setRenderObjectFunction(g3(r,s,d,S)),r.setClearColor(0,0),r.setRenderTarget(t),this.renderShadow(e),r.setRenderObjectFunction(x),d===So&&s.isPointLightShadow!==!0&&this.vsmPass(r),s.camera.layers.mask=g,u3(r,l,WT)}vsmPass(e){const{shadow:t}=this,i=this.shadowMap.depth;this.vsmShadowMapVertical.setSize(t.mapSize.width,t.mapSize.height,i),this.vsmShadowMapHorizontal.setSize(t.mapSize.width,t.mapSize.height,i),e.setRenderTarget(this.vsmShadowMapVertical),Uy.material=this.vsmMaterialVertical,Uy.render(e),e.setRenderTarget(this.vsmShadowMapHorizontal),Uy.material=this.vsmMaterialHorizontal,Uy.render(e)}dispose(){this.shadowMap.dispose(),this.shadowMap=null,this.vsmShadowMapVertical!==null&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),this.vsmShadowMapHorizontal!==null&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),super.dispose()}updateBefore(e){const{shadow:t}=this;let i=t.needsUpdate||t.autoUpdate;i&&(this._cameraFrameId[e.camera]===e.frameId&&(i=!1),this._cameraFrameId[e.camera]=e.frameId),i&&(this.updateShadow(e),this.shadowMap.depthTexture.version===this._depthVersionCached&&(t.needsUpdate=!1))}}const _3=(a,e)=>Qe(new TE(a,e)),TQ=new Jt,Ua=be(([a,e])=>{const t=a.toVar(),i=ms(t),s=Zo(1,Ns(i.x,Ns(i.y,i.z)));i.mulAssign(s),t.mulAssign(s.mul(e.mul(2).oneMinus()));const r=nt(t.xy).toVar(),u=e.mul(1.5).oneMinus();return yn(i.z.greaterThanEqual(u),()=>{yn(t.z.greaterThan(0),()=>{r.x.assign(Mi(4,t.x))})}).ElseIf(i.x.greaterThanEqual(u),()=>{const d=Mg(t.x);r.x.assign(t.z.mul(d).add(d.mul(2)))}).ElseIf(i.y.greaterThanEqual(u),()=>{const d=Mg(t.y);r.x.assign(t.x.add(d.mul(2)).add(2)),r.y.assign(t.z.mul(d).sub(2))}),nt(.125,.25).mul(r).add(nt(.375,.75)).flipY()}).setLayout({name:"cubeToUV",type:"vec2",inputs:[{name:"pos",type:"vec3"},{name:"texelSizeY",type:"float"}]}),x3=be(({depthTexture:a,bd3D:e,dp:t,texelSize:i})=>Si(a,Ua(e,i.y)).compare(t)),y3=be(({depthTexture:a,bd3D:e,dp:t,texelSize:i,shadow:s})=>{const r=hs("radius","float",s).setGroup(On),l=nt(-1,1).mul(r).mul(i.y);return Si(a,Ua(e.add(l.xyy),i.y)).compare(t).add(Si(a,Ua(e.add(l.yyy),i.y)).compare(t)).add(Si(a,Ua(e.add(l.xyx),i.y)).compare(t)).add(Si(a,Ua(e.add(l.yyx),i.y)).compare(t)).add(Si(a,Ua(e,i.y)).compare(t)).add(Si(a,Ua(e.add(l.xxy),i.y)).compare(t)).add(Si(a,Ua(e.add(l.yxy),i.y)).compare(t)).add(Si(a,Ua(e.add(l.xxx),i.y)).compare(t)).add(Si(a,Ua(e.add(l.yxx),i.y)).compare(t)).mul(1/9)}),MQ=be(({filterFn:a,depthTexture:e,shadowCoord:t,shadow:i})=>{const s=t.xyz.toVar(),r=s.length(),l=wn("float").setGroup(On).onRenderUpdate(()=>i.camera.near),u=wn("float").setGroup(On).onRenderUpdate(()=>i.camera.far),d=hs("bias","float",i).setGroup(On),f=wn(i.mapSize).setGroup(On),g=te(1).toVar();return yn(r.sub(u).lessThanEqual(0).and(r.sub(l).greaterThanEqual(0)),()=>{const x=r.sub(l).div(u.sub(l)).toVar();x.addAssign(d);const v=s.normalize(),S=nt(1).div(f.mul(nt(4,2)));g.assign(a({depthTexture:e,bd3D:v,dp:x,texelSize:S,shadow:i}))}),g}),lI=new Un,Mf=new it,Lm=new it;class wQ extends TE{static get type(){return"PointShadowNode"}constructor(e,t=null){super(e,t)}getShadowFilterFn(e){return e===LI?x3:y3}setupShadowCoord(e,t){return t}setupShadowFilter(e,{filterFn:t,shadowTexture:i,depthTexture:s,shadowCoord:r,shadow:l}){return MQ({filterFn:t,shadowTexture:i,depthTexture:s,shadowCoord:r,shadow:l})}renderShadow(e){const{shadow:t,shadowMap:i,light:s}=this,{renderer:r,scene:l}=e,u=t.getFrameExtents();Lm.copy(t.mapSize),Lm.multiply(u),i.setSize(Lm.width,Lm.height),Mf.copy(t.mapSize);const d=r.autoClear,f=r.getClearColor(TQ),g=r.getClearAlpha();r.autoClear=!1,r.setClearColor(t.clearColor,t.clearAlpha),r.clear();const x=t.getViewportCount();for(let v=0;v<x;v++){const S=t.getViewport(v),T=Mf.x*S.x,E=Lm.y-Mf.y-Mf.y*S.y;lI.set(T,E,Mf.x*S.z,Mf.y*S.w),i.viewport.copy(lI),t.updateMatrices(s,v),r.render(l,t.camera)}r.autoClear=d,r.setClearColor(f,g)}}const v3=(a,e)=>Qe(new wQ(a,e));class du extends cd{static get type(){return"AnalyticLightNode"}constructor(e=null){super(),this.light=e,this.color=new Jt,this.colorNode=e&&e.colorNode||wn(this.color).setGroup(On),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0,this.updateType=ii.FRAME}getHash(){return this.light.uuid}getLightVector(e){return xE(this.light).sub(e.context.positionView||Bs)}setupDirect(){}setupDirectRectArea(){}setupShadowNode(){return _3(this.light)}setupShadow(e){const{renderer:t}=e;if(t.shadowMap.enabled===!1)return;let i=this.shadowColorNode;if(i===null){const s=this.light.shadow.shadowNode;let r;s!==void 0?r=Qe(s):r=this.setupShadowNode(),this.shadowNode=r,this.shadowColorNode=i=this.colorNode.mul(r),this.baseColorNode=this.colorNode}this.colorNode=i}setup(e){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?e.object.receiveShadow&&this.setupShadow(e):this.shadowNode!==null&&(this.shadowNode.dispose(),this.shadowNode=null,this.shadowColorNode=null);const t=this.setupDirect(e),i=this.setupDirectRectArea(e);t&&e.lightsNode.setupDirectLight(e,this,t),i&&e.lightsNode.setupDirectRectAreaLight(e,this,i)}update(){const{light:e}=this;this.color.copy(e.color).multiplyScalar(e.intensity)}}const ME=be(({lightDistance:a,cutoffDistance:e,decayExponent:t})=>{const i=a.pow(t).max(.01).reciprocal();return e.greaterThan(0).select(i.mul(a.div(e).pow4().oneMinus().clamp().pow2()),i)}),S3=({color:a,lightVector:e,cutoffDistance:t,decayExponent:i})=>{const s=e.normalize(),r=e.length(),l=ME({lightDistance:r,cutoffDistance:t,decayExponent:i}),u=a.mul(l);return{lightDirection:s,lightColor:u}};class b3 extends du{static get type(){return"PointLightNode"}constructor(e=null){super(e),this.cutoffDistanceNode=wn(0).setGroup(On),this.decayExponentNode=wn(2).setGroup(On)}update(e){const{light:t}=this;super.update(e),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}setupShadowNode(){return v3(this.light)}setupDirect(e){return S3({color:this.colorNode,lightVector:this.getLightVector(e),cutoffDistance:this.cutoffDistanceNode,decayExponent:this.decayExponentNode})}}const AQ=be(([a=is()])=>{const e=a.mul(2),t=e.x.floor(),i=e.y.floor();return t.add(i).mod(2).sign()}),EQ=be(([a=is()],{renderer:e,material:t})=>{const i=xA(a.mul(2).sub(1));let s;if(t.alphaToCoverage&&e.samples>1){const r=te(i.fwidth()).toVar();s=va(r.oneMinus(),r.add(1),i).oneMinus()}else s=vr(i.greaterThan(1),0,1);return s}),ig=be(([a,e,t])=>{const i=te(t).toVar(),s=te(e).toVar(),r=xa(a).toVar();return vr(r,s,i)}).setLayout({name:"mx_select",type:"float",inputs:[{name:"b",type:"bool"},{name:"t",type:"float"},{name:"f",type:"float"}]}),vv=be(([a,e])=>{const t=xa(e).toVar(),i=te(a).toVar();return vr(t,i.negate(),i)}).setLayout({name:"mx_negate_if",type:"float",inputs:[{name:"val",type:"float"},{name:"b",type:"bool"}]}),Hs=be(([a])=>{const e=te(a).toVar();return pe(fl(e))}).setLayout({name:"mx_floor",type:"int",inputs:[{name:"x",type:"float"}]}),bs=be(([a,e])=>{const t=te(a).toVar();return e.assign(Hs(t)),t.sub(te(e))}),RQ=be(([a,e,t,i,s,r])=>{const l=te(r).toVar(),u=te(s).toVar(),d=te(i).toVar(),f=te(t).toVar(),g=te(e).toVar(),x=te(a).toVar(),v=te(Mi(1,u)).toVar();return Mi(1,l).mul(x.mul(v).add(g.mul(u))).add(l.mul(f.mul(v).add(d.mul(u))))}).setLayout({name:"mx_bilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"}]}),CQ=be(([a,e,t,i,s,r])=>{const l=te(r).toVar(),u=te(s).toVar(),d=xe(i).toVar(),f=xe(t).toVar(),g=xe(e).toVar(),x=xe(a).toVar(),v=te(Mi(1,u)).toVar();return Mi(1,l).mul(x.mul(v).add(g.mul(u))).add(l.mul(f.mul(v).add(d.mul(u))))}).setLayout({name:"mx_bilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"}]}),T3=Pr([RQ,CQ]),NQ=be(([a,e,t,i,s,r,l,u,d,f,g])=>{const x=te(g).toVar(),v=te(f).toVar(),S=te(d).toVar(),T=te(u).toVar(),E=te(l).toVar(),A=te(r).toVar(),w=te(s).toVar(),O=te(i).toVar(),F=te(t).toVar(),B=te(e).toVar(),k=te(a).toVar(),Y=te(Mi(1,S)).toVar(),$=te(Mi(1,v)).toVar();return te(Mi(1,x)).toVar().mul($.mul(k.mul(Y).add(B.mul(S))).add(v.mul(F.mul(Y).add(O.mul(S))))).add(x.mul($.mul(w.mul(Y).add(A.mul(S))).add(v.mul(E.mul(Y).add(T.mul(S))))))}).setLayout({name:"mx_trilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"v4",type:"float"},{name:"v5",type:"float"},{name:"v6",type:"float"},{name:"v7",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),PQ=be(([a,e,t,i,s,r,l,u,d,f,g])=>{const x=te(g).toVar(),v=te(f).toVar(),S=te(d).toVar(),T=xe(u).toVar(),E=xe(l).toVar(),A=xe(r).toVar(),w=xe(s).toVar(),O=xe(i).toVar(),F=xe(t).toVar(),B=xe(e).toVar(),k=xe(a).toVar(),Y=te(Mi(1,S)).toVar(),$=te(Mi(1,v)).toVar();return te(Mi(1,x)).toVar().mul($.mul(k.mul(Y).add(B.mul(S))).add(v.mul(F.mul(Y).add(O.mul(S))))).add(x.mul($.mul(w.mul(Y).add(A.mul(S))).add(v.mul(E.mul(Y).add(T.mul(S))))))}).setLayout({name:"mx_trilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"v4",type:"vec3"},{name:"v5",type:"vec3"},{name:"v6",type:"vec3"},{name:"v7",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),M3=Pr([NQ,PQ]),IQ=be(([a,e,t])=>{const i=te(t).toVar(),s=te(e).toVar(),r=Kt(a).toVar(),l=Kt(r.bitAnd(Kt(7))).toVar(),u=te(ig(l.lessThan(Kt(4)),s,i)).toVar(),d=te(ri(2,ig(l.lessThan(Kt(4)),i,s))).toVar();return vv(u,xa(l.bitAnd(Kt(1)))).add(vv(d,xa(l.bitAnd(Kt(2)))))}).setLayout({name:"mx_gradient_float_0",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"}]}),LQ=be(([a,e,t,i])=>{const s=te(i).toVar(),r=te(t).toVar(),l=te(e).toVar(),u=Kt(a).toVar(),d=Kt(u.bitAnd(Kt(15))).toVar(),f=te(ig(d.lessThan(Kt(8)),l,r)).toVar(),g=te(ig(d.lessThan(Kt(4)),r,ig(d.equal(Kt(12)).or(d.equal(Kt(14))),l,s))).toVar();return vv(f,xa(d.bitAnd(Kt(1)))).add(vv(g,xa(d.bitAnd(Kt(2)))))}).setLayout({name:"mx_gradient_float_1",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),gr=Pr([IQ,LQ]),DQ=be(([a,e,t])=>{const i=te(t).toVar(),s=te(e).toVar(),r=vp(a).toVar();return xe(gr(r.x,s,i),gr(r.y,s,i),gr(r.z,s,i))}).setLayout({name:"mx_gradient_vec3_0",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"}]}),UQ=be(([a,e,t,i])=>{const s=te(i).toVar(),r=te(t).toVar(),l=te(e).toVar(),u=vp(a).toVar();return xe(gr(u.x,l,r,s),gr(u.y,l,r,s),gr(u.z,l,r,s))}).setLayout({name:"mx_gradient_vec3_1",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),oa=Pr([DQ,UQ]),FQ=be(([a])=>{const e=te(a).toVar();return ri(.6616,e)}).setLayout({name:"mx_gradient_scale2d_0",type:"float",inputs:[{name:"v",type:"float"}]}),BQ=be(([a])=>{const e=te(a).toVar();return ri(.982,e)}).setLayout({name:"mx_gradient_scale3d_0",type:"float",inputs:[{name:"v",type:"float"}]}),OQ=be(([a])=>{const e=xe(a).toVar();return ri(.6616,e)}).setLayout({name:"mx_gradient_scale2d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]}),w3=Pr([FQ,OQ]),VQ=be(([a])=>{const e=xe(a).toVar();return ri(.982,e)}).setLayout({name:"mx_gradient_scale3d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]}),A3=Pr([BQ,VQ]),Go=be(([a,e])=>{const t=pe(e).toVar(),i=Kt(a).toVar();return i.shiftLeft(t).bitOr(i.shiftRight(pe(32).sub(t)))}).setLayout({name:"mx_rotl32",type:"uint",inputs:[{name:"x",type:"uint"},{name:"k",type:"int"}]}),E3=be(([a,e,t])=>{a.subAssign(t),a.bitXorAssign(Go(t,pe(4))),t.addAssign(e),e.subAssign(a),e.bitXorAssign(Go(a,pe(6))),a.addAssign(t),t.subAssign(e),t.bitXorAssign(Go(e,pe(8))),e.addAssign(a),a.subAssign(t),a.bitXorAssign(Go(t,pe(16))),t.addAssign(e),e.subAssign(a),e.bitXorAssign(Go(a,pe(19))),a.addAssign(t),t.subAssign(e),t.bitXorAssign(Go(e,pe(4))),e.addAssign(a)}),i_=be(([a,e,t])=>{const i=Kt(t).toVar(),s=Kt(e).toVar(),r=Kt(a).toVar();return i.bitXorAssign(s),i.subAssign(Go(s,pe(14))),r.bitXorAssign(i),r.subAssign(Go(i,pe(11))),s.bitXorAssign(r),s.subAssign(Go(r,pe(25))),i.bitXorAssign(s),i.subAssign(Go(s,pe(16))),r.bitXorAssign(i),r.subAssign(Go(i,pe(4))),s.bitXorAssign(r),s.subAssign(Go(r,pe(14))),i.bitXorAssign(s),i.subAssign(Go(s,pe(24))),i}).setLayout({name:"mx_bjfinal",type:"uint",inputs:[{name:"a",type:"uint"},{name:"b",type:"uint"},{name:"c",type:"uint"}]}),Hr=be(([a])=>{const e=Kt(a).toVar();return te(e).div(te(Kt(pe(4294967295))))}).setLayout({name:"mx_bits_to_01",type:"float",inputs:[{name:"bits",type:"uint"}]}),ml=be(([a])=>{const e=te(a).toVar();return e.mul(e).mul(e).mul(e.mul(e.mul(6).sub(15)).add(10))}).setLayout({name:"mx_fade",type:"float",inputs:[{name:"t",type:"float"}]}),zQ=be(([a])=>{const e=pe(a).toVar(),t=Kt(Kt(1)).toVar(),i=Kt(Kt(pe(3735928559)).add(t.shiftLeft(Kt(2))).add(Kt(13))).toVar();return i_(i.add(Kt(e)),i,i)}).setLayout({name:"mx_hash_int_0",type:"uint",inputs:[{name:"x",type:"int"}]}),kQ=be(([a,e])=>{const t=pe(e).toVar(),i=pe(a).toVar(),s=Kt(Kt(2)).toVar(),r=Kt().toVar(),l=Kt().toVar(),u=Kt().toVar();return r.assign(l.assign(u.assign(Kt(pe(3735928559)).add(s.shiftLeft(Kt(2))).add(Kt(13))))),r.addAssign(Kt(i)),l.addAssign(Kt(t)),i_(r,l,u)}).setLayout({name:"mx_hash_int_1",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),GQ=be(([a,e,t])=>{const i=pe(t).toVar(),s=pe(e).toVar(),r=pe(a).toVar(),l=Kt(Kt(3)).toVar(),u=Kt().toVar(),d=Kt().toVar(),f=Kt().toVar();return u.assign(d.assign(f.assign(Kt(pe(3735928559)).add(l.shiftLeft(Kt(2))).add(Kt(13))))),u.addAssign(Kt(r)),d.addAssign(Kt(s)),f.addAssign(Kt(i)),i_(u,d,f)}).setLayout({name:"mx_hash_int_2",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),HQ=be(([a,e,t,i])=>{const s=pe(i).toVar(),r=pe(t).toVar(),l=pe(e).toVar(),u=pe(a).toVar(),d=Kt(Kt(4)).toVar(),f=Kt().toVar(),g=Kt().toVar(),x=Kt().toVar();return f.assign(g.assign(x.assign(Kt(pe(3735928559)).add(d.shiftLeft(Kt(2))).add(Kt(13))))),f.addAssign(Kt(u)),g.addAssign(Kt(l)),x.addAssign(Kt(r)),E3(f,g,x),f.addAssign(Kt(s)),i_(f,g,x)}).setLayout({name:"mx_hash_int_3",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"}]}),WQ=be(([a,e,t,i,s])=>{const r=pe(s).toVar(),l=pe(i).toVar(),u=pe(t).toVar(),d=pe(e).toVar(),f=pe(a).toVar(),g=Kt(Kt(5)).toVar(),x=Kt().toVar(),v=Kt().toVar(),S=Kt().toVar();return x.assign(v.assign(S.assign(Kt(pe(3735928559)).add(g.shiftLeft(Kt(2))).add(Kt(13))))),x.addAssign(Kt(f)),v.addAssign(Kt(d)),S.addAssign(Kt(u)),E3(x,v,S),x.addAssign(Kt(l)),v.addAssign(Kt(r)),i_(x,v,S)}).setLayout({name:"mx_hash_int_4",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"},{name:"yy",type:"int"}]}),Qi=Pr([zQ,kQ,GQ,HQ,WQ]),$Q=be(([a,e])=>{const t=pe(e).toVar(),i=pe(a).toVar(),s=Kt(Qi(i,t)).toVar(),r=vp().toVar();return r.x.assign(s.bitAnd(pe(255))),r.y.assign(s.shiftRight(pe(8)).bitAnd(pe(255))),r.z.assign(s.shiftRight(pe(16)).bitAnd(pe(255))),r}).setLayout({name:"mx_hash_vec3_0",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),XQ=be(([a,e,t])=>{const i=pe(t).toVar(),s=pe(e).toVar(),r=pe(a).toVar(),l=Kt(Qi(r,s,i)).toVar(),u=vp().toVar();return u.x.assign(l.bitAnd(pe(255))),u.y.assign(l.shiftRight(pe(8)).bitAnd(pe(255))),u.z.assign(l.shiftRight(pe(16)).bitAnd(pe(255))),u}).setLayout({name:"mx_hash_vec3_1",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),aa=Pr([$Q,XQ]),qQ=be(([a])=>{const e=nt(a).toVar(),t=pe().toVar(),i=pe().toVar(),s=te(bs(e.x,t)).toVar(),r=te(bs(e.y,i)).toVar(),l=te(ml(s)).toVar(),u=te(ml(r)).toVar(),d=te(T3(gr(Qi(t,i),s,r),gr(Qi(t.add(pe(1)),i),s.sub(1),r),gr(Qi(t,i.add(pe(1))),s,r.sub(1)),gr(Qi(t.add(pe(1)),i.add(pe(1))),s.sub(1),r.sub(1)),l,u)).toVar();return w3(d)}).setLayout({name:"mx_perlin_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"}]}),YQ=be(([a])=>{const e=xe(a).toVar(),t=pe().toVar(),i=pe().toVar(),s=pe().toVar(),r=te(bs(e.x,t)).toVar(),l=te(bs(e.y,i)).toVar(),u=te(bs(e.z,s)).toVar(),d=te(ml(r)).toVar(),f=te(ml(l)).toVar(),g=te(ml(u)).toVar(),x=te(M3(gr(Qi(t,i,s),r,l,u),gr(Qi(t.add(pe(1)),i,s),r.sub(1),l,u),gr(Qi(t,i.add(pe(1)),s),r,l.sub(1),u),gr(Qi(t.add(pe(1)),i.add(pe(1)),s),r.sub(1),l.sub(1),u),gr(Qi(t,i,s.add(pe(1))),r,l,u.sub(1)),gr(Qi(t.add(pe(1)),i,s.add(pe(1))),r.sub(1),l,u.sub(1)),gr(Qi(t,i.add(pe(1)),s.add(pe(1))),r,l.sub(1),u.sub(1)),gr(Qi(t.add(pe(1)),i.add(pe(1)),s.add(pe(1))),r.sub(1),l.sub(1),u.sub(1)),d,f,g)).toVar();return A3(x)}).setLayout({name:"mx_perlin_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"}]}),wE=Pr([qQ,YQ]),ZQ=be(([a])=>{const e=nt(a).toVar(),t=pe().toVar(),i=pe().toVar(),s=te(bs(e.x,t)).toVar(),r=te(bs(e.y,i)).toVar(),l=te(ml(s)).toVar(),u=te(ml(r)).toVar(),d=xe(T3(oa(aa(t,i),s,r),oa(aa(t.add(pe(1)),i),s.sub(1),r),oa(aa(t,i.add(pe(1))),s,r.sub(1)),oa(aa(t.add(pe(1)),i.add(pe(1))),s.sub(1),r.sub(1)),l,u)).toVar();return w3(d)}).setLayout({name:"mx_perlin_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),KQ=be(([a])=>{const e=xe(a).toVar(),t=pe().toVar(),i=pe().toVar(),s=pe().toVar(),r=te(bs(e.x,t)).toVar(),l=te(bs(e.y,i)).toVar(),u=te(bs(e.z,s)).toVar(),d=te(ml(r)).toVar(),f=te(ml(l)).toVar(),g=te(ml(u)).toVar(),x=xe(M3(oa(aa(t,i,s),r,l,u),oa(aa(t.add(pe(1)),i,s),r.sub(1),l,u),oa(aa(t,i.add(pe(1)),s),r,l.sub(1),u),oa(aa(t.add(pe(1)),i.add(pe(1)),s),r.sub(1),l.sub(1),u),oa(aa(t,i,s.add(pe(1))),r,l,u.sub(1)),oa(aa(t.add(pe(1)),i,s.add(pe(1))),r.sub(1),l,u.sub(1)),oa(aa(t,i.add(pe(1)),s.add(pe(1))),r,l.sub(1),u.sub(1)),oa(aa(t.add(pe(1)),i.add(pe(1)),s.add(pe(1))),r.sub(1),l.sub(1),u.sub(1)),d,f,g)).toVar();return A3(x)}).setLayout({name:"mx_perlin_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),s_=Pr([ZQ,KQ]),JQ=be(([a])=>{const e=te(a).toVar(),t=pe(Hs(e)).toVar();return Hr(Qi(t))}).setLayout({name:"mx_cell_noise_float_0",type:"float",inputs:[{name:"p",type:"float"}]}),jQ=be(([a])=>{const e=nt(a).toVar(),t=pe(Hs(e.x)).toVar(),i=pe(Hs(e.y)).toVar();return Hr(Qi(t,i))}).setLayout({name:"mx_cell_noise_float_1",type:"float",inputs:[{name:"p",type:"vec2"}]}),QQ=be(([a])=>{const e=xe(a).toVar(),t=pe(Hs(e.x)).toVar(),i=pe(Hs(e.y)).toVar(),s=pe(Hs(e.z)).toVar();return Hr(Qi(t,i,s))}).setLayout({name:"mx_cell_noise_float_2",type:"float",inputs:[{name:"p",type:"vec3"}]}),eee=be(([a])=>{const e=tn(a).toVar(),t=pe(Hs(e.x)).toVar(),i=pe(Hs(e.y)).toVar(),s=pe(Hs(e.z)).toVar(),r=pe(Hs(e.w)).toVar();return Hr(Qi(t,i,s,r))}).setLayout({name:"mx_cell_noise_float_3",type:"float",inputs:[{name:"p",type:"vec4"}]}),tee=Pr([JQ,jQ,QQ,eee]),nee=be(([a])=>{const e=te(a).toVar(),t=pe(Hs(e)).toVar();return xe(Hr(Qi(t,pe(0))),Hr(Qi(t,pe(1))),Hr(Qi(t,pe(2))))}).setLayout({name:"mx_cell_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"float"}]}),iee=be(([a])=>{const e=nt(a).toVar(),t=pe(Hs(e.x)).toVar(),i=pe(Hs(e.y)).toVar();return xe(Hr(Qi(t,i,pe(0))),Hr(Qi(t,i,pe(1))),Hr(Qi(t,i,pe(2))))}).setLayout({name:"mx_cell_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),see=be(([a])=>{const e=xe(a).toVar(),t=pe(Hs(e.x)).toVar(),i=pe(Hs(e.y)).toVar(),s=pe(Hs(e.z)).toVar();return xe(Hr(Qi(t,i,s,pe(0))),Hr(Qi(t,i,s,pe(1))),Hr(Qi(t,i,s,pe(2))))}).setLayout({name:"mx_cell_noise_vec3_2",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),ree=be(([a])=>{const e=tn(a).toVar(),t=pe(Hs(e.x)).toVar(),i=pe(Hs(e.y)).toVar(),s=pe(Hs(e.z)).toVar(),r=pe(Hs(e.w)).toVar();return xe(Hr(Qi(t,i,s,r,pe(0))),Hr(Qi(t,i,s,r,pe(1))),Hr(Qi(t,i,s,r,pe(2))))}).setLayout({name:"mx_cell_noise_vec3_3",type:"vec3",inputs:[{name:"p",type:"vec4"}]}),q0=Pr([nee,iee,see,ree]),Sv=be(([a,e,t,i])=>{const s=te(i).toVar(),r=te(t).toVar(),l=pe(e).toVar(),u=xe(a).toVar(),d=te(0).toVar(),f=te(1).toVar();return Zi(l,()=>{d.addAssign(f.mul(wE(u))),f.mulAssign(s),u.mulAssign(r)}),d}).setLayout({name:"mx_fractal_noise_float",type:"float",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Y0=be(([a,e,t,i])=>{const s=te(i).toVar(),r=te(t).toVar(),l=pe(e).toVar(),u=xe(a).toVar(),d=xe(0).toVar(),f=te(1).toVar();return Zi(l,()=>{d.addAssign(f.mul(s_(u))),f.mulAssign(s),u.mulAssign(r)}),d}).setLayout({name:"mx_fractal_noise_vec3",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),oee=be(([a,e,t,i])=>{const s=te(i).toVar(),r=te(t).toVar(),l=pe(e).toVar(),u=xe(a).toVar();return nt(Sv(u,l,r,s),Sv(u.add(xe(pe(19),pe(193),pe(17))),l,r,s))}).setLayout({name:"mx_fractal_noise_vec2",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),aee=be(([a,e,t,i])=>{const s=te(i).toVar(),r=te(t).toVar(),l=pe(e).toVar(),u=xe(a).toVar(),d=xe(Y0(u,l,r,s)).toVar(),f=te(Sv(u.add(xe(pe(19),pe(193),pe(17))),l,r,s)).toVar();return tn(d,f)}).setLayout({name:"mx_fractal_noise_vec4",type:"vec4",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),lee=be(([a,e,t,i,s,r,l])=>{const u=pe(l).toVar(),d=te(r).toVar(),f=pe(s).toVar(),g=pe(i).toVar(),x=pe(t).toVar(),v=pe(e).toVar(),S=nt(a).toVar(),T=xe(q0(nt(v.add(g),x.add(f)))).toVar(),E=nt(T.x,T.y).toVar();E.subAssign(.5),E.mulAssign(d),E.addAssign(.5);const A=nt(nt(te(v),te(x)).add(E)).toVar(),w=nt(A.sub(S)).toVar();return yn(u.equal(pe(2)),()=>ms(w.x).add(ms(w.y))),yn(u.equal(pe(3)),()=>Ns(ms(w.x),ms(w.y))),lu(w,w)}).setLayout({name:"mx_worley_distance_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),cee=be(([a,e,t,i,s,r,l,u,d])=>{const f=pe(d).toVar(),g=te(u).toVar(),x=pe(l).toVar(),v=pe(r).toVar(),S=pe(s).toVar(),T=pe(i).toVar(),E=pe(t).toVar(),A=pe(e).toVar(),w=xe(a).toVar(),O=xe(q0(xe(A.add(S),E.add(v),T.add(x)))).toVar();O.subAssign(.5),O.mulAssign(g),O.addAssign(.5);const F=xe(xe(te(A),te(E),te(T)).add(O)).toVar(),B=xe(F.sub(w)).toVar();return yn(f.equal(pe(2)),()=>ms(B.x).add(ms(B.y)).add(ms(B.z))),yn(f.equal(pe(3)),()=>Ns(ms(B.x),ms(B.y),ms(B.z))),lu(B,B)}).setLayout({name:"mx_worley_distance_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"zoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),wp=Pr([lee,cee]),uee=be(([a,e,t])=>{const i=pe(t).toVar(),s=te(e).toVar(),r=nt(a).toVar(),l=pe().toVar(),u=pe().toVar(),d=nt(bs(r.x,l),bs(r.y,u)).toVar(),f=te(1e6).toVar();return Zi({start:-1,end:pe(1),name:"x",condition:"<="},({x:g})=>{Zi({start:-1,end:pe(1),name:"y",condition:"<="},({y:x})=>{const v=te(wp(d,g,x,l,u,s,i)).toVar();f.assign(Co(f,v))})}),yn(i.equal(pe(0)),()=>{f.assign(xl(f))}),f}).setLayout({name:"mx_worley_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),hee=be(([a,e,t])=>{const i=pe(t).toVar(),s=te(e).toVar(),r=nt(a).toVar(),l=pe().toVar(),u=pe().toVar(),d=nt(bs(r.x,l),bs(r.y,u)).toVar(),f=nt(1e6,1e6).toVar();return Zi({start:-1,end:pe(1),name:"x",condition:"<="},({x:g})=>{Zi({start:-1,end:pe(1),name:"y",condition:"<="},({y:x})=>{const v=te(wp(d,g,x,l,u,s,i)).toVar();yn(v.lessThan(f.x),()=>{f.y.assign(f.x),f.x.assign(v)}).ElseIf(v.lessThan(f.y),()=>{f.y.assign(v)})})}),yn(i.equal(pe(0)),()=>{f.assign(xl(f))}),f}).setLayout({name:"mx_worley_noise_vec2_0",type:"vec2",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),dee=be(([a,e,t])=>{const i=pe(t).toVar(),s=te(e).toVar(),r=nt(a).toVar(),l=pe().toVar(),u=pe().toVar(),d=nt(bs(r.x,l),bs(r.y,u)).toVar(),f=xe(1e6,1e6,1e6).toVar();return Zi({start:-1,end:pe(1),name:"x",condition:"<="},({x:g})=>{Zi({start:-1,end:pe(1),name:"y",condition:"<="},({y:x})=>{const v=te(wp(d,g,x,l,u,s,i)).toVar();yn(v.lessThan(f.x),()=>{f.z.assign(f.y),f.y.assign(f.x),f.x.assign(v)}).ElseIf(v.lessThan(f.y),()=>{f.z.assign(f.y),f.y.assign(v)}).ElseIf(v.lessThan(f.z),()=>{f.z.assign(v)})})}),yn(i.equal(pe(0)),()=>{f.assign(xl(f))}),f}).setLayout({name:"mx_worley_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),fee=be(([a,e,t])=>{const i=pe(t).toVar(),s=te(e).toVar(),r=xe(a).toVar(),l=pe().toVar(),u=pe().toVar(),d=pe().toVar(),f=xe(bs(r.x,l),bs(r.y,u),bs(r.z,d)).toVar(),g=te(1e6).toVar();return Zi({start:-1,end:pe(1),name:"x",condition:"<="},({x})=>{Zi({start:-1,end:pe(1),name:"y",condition:"<="},({y:v})=>{Zi({start:-1,end:pe(1),name:"z",condition:"<="},({z:S})=>{const T=te(wp(f,x,v,S,l,u,d,s,i)).toVar();g.assign(Co(g,T))})})}),yn(i.equal(pe(0)),()=>{g.assign(xl(g))}),g}).setLayout({name:"mx_worley_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),pee=Pr([uee,fee]),mee=be(([a,e,t])=>{const i=pe(t).toVar(),s=te(e).toVar(),r=xe(a).toVar(),l=pe().toVar(),u=pe().toVar(),d=pe().toVar(),f=xe(bs(r.x,l),bs(r.y,u),bs(r.z,d)).toVar(),g=nt(1e6,1e6).toVar();return Zi({start:-1,end:pe(1),name:"x",condition:"<="},({x})=>{Zi({start:-1,end:pe(1),name:"y",condition:"<="},({y:v})=>{Zi({start:-1,end:pe(1),name:"z",condition:"<="},({z:S})=>{const T=te(wp(f,x,v,S,l,u,d,s,i)).toVar();yn(T.lessThan(g.x),()=>{g.y.assign(g.x),g.x.assign(T)}).ElseIf(T.lessThan(g.y),()=>{g.y.assign(T)})})})}),yn(i.equal(pe(0)),()=>{g.assign(xl(g))}),g}).setLayout({name:"mx_worley_noise_vec2_1",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),gee=Pr([hee,mee]),_ee=be(([a,e,t])=>{const i=pe(t).toVar(),s=te(e).toVar(),r=xe(a).toVar(),l=pe().toVar(),u=pe().toVar(),d=pe().toVar(),f=xe(bs(r.x,l),bs(r.y,u),bs(r.z,d)).toVar(),g=xe(1e6,1e6,1e6).toVar();return Zi({start:-1,end:pe(1),name:"x",condition:"<="},({x})=>{Zi({start:-1,end:pe(1),name:"y",condition:"<="},({y:v})=>{Zi({start:-1,end:pe(1),name:"z",condition:"<="},({z:S})=>{const T=te(wp(f,x,v,S,l,u,d,s,i)).toVar();yn(T.lessThan(g.x),()=>{g.z.assign(g.y),g.y.assign(g.x),g.x.assign(T)}).ElseIf(T.lessThan(g.y),()=>{g.z.assign(g.y),g.y.assign(T)}).ElseIf(T.lessThan(g.z),()=>{g.z.assign(T)})})})}),yn(i.equal(pe(0)),()=>{g.assign(xl(g))}),g}).setLayout({name:"mx_worley_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),AE=Pr([dee,_ee]),xee=be(([a,e,t,i,s,r,l,u,d,f,g])=>{const x=pe(a).toVar(),v=nt(e).toVar(),S=nt(t).toVar(),T=nt(i).toVar(),E=te(s).toVar(),A=te(r).toVar(),w=te(l).toVar(),O=xa(u).toVar(),F=pe(d).toVar(),B=te(f).toVar(),k=te(g).toVar(),Y=v.mul(S).add(T),$=te(0).toVar();return yn(x.equal(pe(0)),()=>{$.assign(s_(Y))}),yn(x.equal(pe(1)),()=>{$.assign(q0(Y))}),yn(x.equal(pe(2)),()=>{$.assign(AE(Y,E,pe(0)))}),yn(x.equal(pe(3)),()=>{$.assign(Y0(xe(Y,0),F,B,k))}),$.assign($.mul(w.sub(A)).add(A)),yn(O,()=>{$.assign(ya($,A,w))}),$}).setLayout({name:"mx_unifiednoise2d",type:"float",inputs:[{name:"noiseType",type:"int"},{name:"texcoord",type:"vec2"},{name:"freq",type:"vec2"},{name:"offset",type:"vec2"},{name:"jitter",type:"float"},{name:"outmin",type:"float"},{name:"outmax",type:"float"},{name:"clampoutput",type:"bool"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),yee=be(([a,e,t,i,s,r,l,u,d,f,g])=>{const x=pe(a).toVar(),v=xe(e).toVar(),S=xe(t).toVar(),T=xe(i).toVar(),E=te(s).toVar(),A=te(r).toVar(),w=te(l).toVar(),O=xa(u).toVar(),F=pe(d).toVar(),B=te(f).toVar(),k=te(g).toVar(),Y=v.mul(S).add(T),$=te(0).toVar();return yn(x.equal(pe(0)),()=>{$.assign(s_(Y))}),yn(x.equal(pe(1)),()=>{$.assign(q0(Y))}),yn(x.equal(pe(2)),()=>{$.assign(AE(Y,E,pe(0)))}),yn(x.equal(pe(3)),()=>{$.assign(Y0(Y,F,B,k))}),$.assign($.mul(w.sub(A)).add(A)),yn(O,()=>{$.assign(ya($,A,w))}),$}).setLayout({name:"mx_unifiednoise3d",type:"float",inputs:[{name:"noiseType",type:"int"},{name:"position",type:"vec3"},{name:"freq",type:"vec3"},{name:"offset",type:"vec3"},{name:"jitter",type:"float"},{name:"outmin",type:"float"},{name:"outmax",type:"float"},{name:"clampoutput",type:"bool"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),vee=be(([a])=>{const e=a.y,t=a.z,i=xe().toVar();return yn(e.lessThan(1e-4),()=>{i.assign(xe(t,t,t))}).Else(()=>{let s=a.x;s=s.sub(fl(s)).mul(6).toVar();const r=pe(gA(s)),l=s.sub(te(r)),u=t.mul(e.oneMinus()),d=t.mul(e.mul(l).oneMinus()),f=t.mul(e.mul(l.oneMinus()).oneMinus());yn(r.equal(pe(0)),()=>{i.assign(xe(t,f,u))}).ElseIf(r.equal(pe(1)),()=>{i.assign(xe(d,t,u))}).ElseIf(r.equal(pe(2)),()=>{i.assign(xe(u,t,f))}).ElseIf(r.equal(pe(3)),()=>{i.assign(xe(u,d,t))}).ElseIf(r.equal(pe(4)),()=>{i.assign(xe(f,u,t))}).Else(()=>{i.assign(xe(t,u,d))})}),i}).setLayout({name:"mx_hsvtorgb",type:"vec3",inputs:[{name:"hsv",type:"vec3"}]}),See=be(([a])=>{const e=xe(a).toVar(),t=te(e.x).toVar(),i=te(e.y).toVar(),s=te(e.z).toVar(),r=te(Co(t,Co(i,s))).toVar(),l=te(Ns(t,Ns(i,s))).toVar(),u=te(l.sub(r)).toVar(),d=te().toVar(),f=te().toVar(),g=te().toVar();return g.assign(l),yn(l.greaterThan(0),()=>{f.assign(u.div(l))}).Else(()=>{f.assign(0)}),yn(f.lessThanEqual(0),()=>{d.assign(0)}).Else(()=>{yn(t.greaterThanEqual(l),()=>{d.assign(i.sub(s).div(u))}).ElseIf(i.greaterThanEqual(l),()=>{d.assign(Ws(2,s.sub(t).div(u)))}).Else(()=>{d.assign(Ws(4,t.sub(i).div(u)))}),d.mulAssign(1/6),yn(d.lessThan(0),()=>{d.addAssign(1)})}),xe(d,f,g)}).setLayout({name:"mx_rgbtohsv",type:"vec3",inputs:[{name:"c",type:"vec3"}]}),bee=be(([a])=>{const e=xe(a).toVar(),t=eA(uA(e,xe(.04045))).toVar(),i=xe(e.div(12.92)).toVar(),s=xe(ha(Ns(e.add(xe(.055)),xe(0)).div(1.055),xe(2.4))).toVar();return Ri(i,s,t)}).setLayout({name:"mx_srgb_texture_to_lin_rec709",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),R3=(a,e)=>{a=te(a),e=te(e);const t=nt(e.dFdx(),e.dFdy()).length().mul(.7071067811865476);return va(a.sub(t),a.add(t),e)},C3=(a,e,t,i)=>Ri(a,e,t[i].clamp()),Tee=(a,e,t=is())=>C3(a,e,t,"x"),Mee=(a,e,t=is())=>C3(a,e,t,"y"),wee=(a,e,t,i,s=is())=>{const r=s.x.clamp(),l=s.y.clamp(),u=Ri(a,e,r),d=Ri(t,i,r);return Ri(u,d,l)},N3=(a,e,t,i,s)=>Ri(a,e,R3(t,i[s])),Aee=(a,e,t,i=is())=>N3(a,e,t,i,"x"),Eee=(a,e,t,i=is())=>N3(a,e,t,i,"y"),Ree=(a=1,e=0,t=is())=>t.mul(a).add(e),Cee=(a,e=1)=>(a=te(a),a.abs().pow(e).mul(a.sign())),Nee=(a,e=1,t=.5)=>te(a).sub(t).mul(e).add(t),Pee=(a=is(),e=1,t=0)=>wE(a.convert("vec2|vec3")).mul(e).add(t),Iee=(a=is(),e=1,t=0)=>s_(a.convert("vec2|vec3")).mul(e).add(t),Lee=(a=is(),e=1,t=0)=>(a=a.convert("vec2|vec3"),tn(s_(a),wE(a.add(nt(19,73)))).mul(e).add(t)),Dee=(a,e=is(),t=nt(1,1),i=nt(0,0),s=1,r=0,l=1,u=!1,d=1,f=2,g=.5)=>xee(a,e.convert("vec2|vec3"),t,i,s,r,l,u,d,f,g),Uee=(a,e=is(),t=nt(1,1),i=nt(0,0),s=1,r=0,l=1,u=!1,d=1,f=2,g=.5)=>yee(a,e.convert("vec2|vec3"),t,i,s,r,l,u,d,f,g),Fee=(a=is(),e=1)=>pee(a.convert("vec2|vec3"),e,pe(1)),Bee=(a=is(),e=1)=>gee(a.convert("vec2|vec3"),e,pe(1)),Oee=(a=is(),e=1)=>AE(a.convert("vec2|vec3"),e,pe(1)),Vee=(a=is())=>tee(a.convert("vec2|vec3")),zee=(a=is(),e=3,t=2,i=.5,s=1)=>Sv(a,pe(e),t,i).mul(s),kee=(a=is(),e=3,t=2,i=.5,s=1)=>oee(a,pe(e),t,i).mul(s),Gee=(a=is(),e=3,t=2,i=.5,s=1)=>Y0(a,pe(e),t,i).mul(s),Hee=(a=is(),e=3,t=2,i=.5,s=1)=>aee(a,pe(e),t,i).mul(s),Wee=(a,e=te(0))=>Ws(a,e),$ee=(a,e=te(0))=>Mi(a,e),Xee=(a,e=te(1))=>ri(a,e),qee=(a,e=te(1))=>Zo(a,e),Yee=(a,e=te(1))=>qg(a,e),Zee=(a,e=te(1))=>ha(a,e),Kee=(a=te(0),e=te(1))=>w0(a,e),Jee=()=>hu,jee=()=>wB,Qee=(a,e=te(1))=>Mi(e,a),ete=(a,e,t,i)=>a.greaterThan(e).mix(t,i),tte=(a,e,t,i)=>a.greaterThanEqual(e).mix(t,i),nte=(a,e,t,i)=>a.equal(e).mix(t,i),ite=(a,e=null)=>{if(typeof e=="string"){const t={x:0,r:0,y:1,g:1,z:2,b:2,w:3,a:3},i=e.replace(/^out/,"").toLowerCase();if(t[i]!==void 0)return a.element(t[i])}if(typeof e=="number")return a.element(e);if(typeof e=="string"&&e.length===1){const t={x:0,r:0,y:1,g:1,z:2,b:2,w:3,a:3};if(t[e]!==void 0)return a.element(t[e])}return a},ste=(a,e=nt(.5,.5),t=nt(1,1),i=te(0),s=nt(0,0))=>{let r=a;if(e&&(r=r.sub(e)),t&&(r=r.mul(t)),i){const l=i.mul(Math.PI/180),u=l.cos(),d=l.sin();r=nt(r.x.mul(u).sub(r.y.mul(d)),r.x.mul(d).add(r.y.mul(u)))}return e&&(r=r.add(e)),s&&(r=r.add(s)),r},rte=(a,e)=>{a=nt(a),e=te(e);const t=e.mul(Math.PI/180);return t_(a,t)},ote=(a,e,t)=>{a=xe(a),e=te(e),t=xe(t);const i=e.mul(Math.PI/180),s=t.normalize(),r=i.cos(),l=i.sin(),u=te(1).sub(r);return a.mul(r).add(s.cross(a).mul(l)).add(s.mul(s.dot(a)).mul(u))},ate=(a,e)=>(a=xe(a),e=te(e),FA(a,e)),lte=be(([a,e,t])=>{const i=rc(a).toVar(),s=Mi(te(.5).mul(e.sub(t)),Xo).div(i).toVar(),r=Mi(te(-.5).mul(e.sub(t)),Xo).div(i).toVar(),l=xe().toVar();l.x=i.x.greaterThan(te(0)).select(s.x,r.x),l.y=i.y.greaterThan(te(0)).select(s.y,r.y),l.z=i.z.greaterThan(te(0)).select(s.z,r.z);const u=Co(l.x,l.y,l.z).toVar();return Xo.add(i.mul(u)).toVar().sub(t)}),P3=be(([a,e])=>{const t=a.x,i=a.y,s=a.z;let r=e.element(0).mul(.886227);return r=r.add(e.element(1).mul(2*.511664).mul(i)),r=r.add(e.element(2).mul(2*.511664).mul(s)),r=r.add(e.element(3).mul(2*.511664).mul(t)),r=r.add(e.element(4).mul(2*.429043).mul(t).mul(i)),r=r.add(e.element(5).mul(2*.429043).mul(i).mul(s)),r=r.add(e.element(6).mul(s.mul(s).mul(.743125).sub(.247708))),r=r.add(e.element(7).mul(2*.429043).mul(t).mul(s)),r=r.add(e.element(8).mul(.429043).mul(ri(t,t).sub(ri(i,i)))),r});var D=Object.freeze({__proto__:null,BRDF_GGX:wM,BRDF_Lambert:td,BasicPointShadowFilter:x3,BasicShadowFilter:h3,Break:gF,Const:E2,Continue:NZ,DFGApprox:eE,D_GGX:ZF,Discard:J2,EPSILON:JD,F_Schlick:hp,Fn:be,INFINITY:P7,If:yn,Loop:Zi,NodeAccess:yr,NodeShaderStage:If,NodeType:aD,NodeUpdateType:ii,OnMaterialUpdate:hj,OnObjectUpdate:uj,PCFShadowFilter:d3,PCFSoftShadowFilter:f3,PI:mv,PI2:I7,PointShadowFilter:y3,Return:k7,Schlick_to_F0:JF,ScriptableNodeResources:Jy,ShaderNode:Df,Stack:x0,Switch:M7,TBNViewMatrix:Th,VSMShadowFilter:p3,V_GGX_SmithCorrelated:YF,Var:A2,VarIntent:R2,abs:ms,acesFilmicToneMapping:qB,acos:fA,add:Ws,addMethodChaining:Je,addNodeElement:G7,agxToneMapping:YB,all:jD,alphaT:dv,and:FD,anisotropy:Oc,anisotropyB:Ch,anisotropyT:Zm,any:QD,append:R7,array:ED,arrayBuffer:A7,asin:i2,assign:CD,atan:w0,atan2:M2,atomicAdd:oQ,atomicAnd:uQ,atomicFunc:vl,atomicLoad:sQ,atomicMax:lQ,atomicMin:cQ,atomicOr:hQ,atomicStore:rQ,atomicSub:aQ,atomicXor:dQ,attenuationColor:rA,attenuationDistance:sA,attribute:to,attributeArray:dj,backgroundBlurriness:LB,backgroundIntensity:PM,backgroundRotation:DB,batch:hF,bentNormalView:PU,billboarding:ZJ,bitAnd:zD,bitNot:kD,bitOr:GD,bitXor:HD,bitangentGeometry:_Z,bitangentLocal:xZ,bitangentView:CU,bitangentWorld:yZ,bitcast:L7,blendBurn:CF,blendColor:HZ,blendDodge:NF,blendOverlay:IF,blendScreen:PF,blur:iB,bool:xa,buffer:Zg,bufferAttribute:Yg,bumpMap:FA,burn:$Z,bvec2:xD,bvec3:eA,bvec4:bD,bypass:Y2,cache:jm,call:PD,cameraFar:Xl,cameraIndex:L0,cameraNear:$l,cameraNormalMatrix:J7,cameraPosition:eg,cameraProjectionMatrix:Wo,cameraProjectionMatrixInverse:Z7,cameraViewMatrix:jo,cameraWorldMatrix:K7,cbrt:y2,cdl:Mj,ceil:M0,checker:AQ,cineonToneMapping:XB,clamp:ya,clearcoat:hv,clearcoatNormalView:bh,clearcoatRoughness:Sg,code:H0,color:gD,colorSpaceToWorking:P0,colorToDirection:QZ,compute:$2,computeKernel:wA,computeSkinning:CZ,context:R0,convert:MD,convertColorSpace:O7,convertToTexture:rj,cos:Gl,cross:E0,cubeTexture:cp,cubeTextureBase:UA,cubeToUV:Ua,dFdx:pA,dFdy:mA,dashSize:Nh,debug:eU,decrement:ZD,decrementBefore:qD,defaultBuildStages:lv,defaultShaderStages:Yw,defined:xg,degrees:t2,deltaTime:MB,densityFog:Gj,densityFogFactor:mE,depth:KA,depthPass:Rj,determinant:u2,difference:m2,diffuseColor:zi,directPointLight:S3,directionToColor:OF,directionToFaceDirection:bp,dispersion:oA,distance:p2,div:Zo,dodge:XZ,dot:lu,drawIndex:aF,dynamicBufferAttribute:H2,element:TD,emissive:mM,equal:cA,equals:d2,equirectUV:JA,exp:hA,exp2:ap,expression:oc,faceDirection:IA,faceForward:SA,faceforward:D7,float:te,floor:fl,fog:Ag,fract:uc,frameGroup:AD,frameId:wB,frontFacing:cU,fwidth:l2,gain:DJ,gapSize:Tg,getConstNodeType:mD,getCurrentStack:_0,getDirection:tB,getDistanceAttenuation:ME,getGeometryRoughness:qF,getNormalFromDepth:aj,getParallaxCorrectNormal:lte,getRoughness:QA,getScreenPosition:oj,getShIrradianceAt:P3,getShadowMaterial:m3,getShadowRenderObjectFunction:g3,getTextureIndex:vB,getViewPosition:Cf,globalId:qj,glsl:Fj,glslFn:Bj,grayscale:vj,greaterThan:uA,greaterThanEqual:UD,hash:LJ,highpModelNormalViewMatrix:yM,highpModelViewMatrix:xM,hue:Tj,increment:YD,incrementBefore:XD,instance:AZ,instanceIndex:Zc,instancedArray:fj,instancedBufferAttribute:gv,instancedDynamicBufferAttribute:_M,instancedMesh:cF,int:pe,inverse:h2,inverseSqrt:dA,inversesqrt:U7,invocationLocalIndex:wZ,invocationSubgroupIndex:MZ,ior:Km,iridescence:S0,iridescenceIOR:tA,iridescenceThickness:nA,ivec2:rr,ivec3:yD,ivec4:vD,js:Dj,label:w2,length:pl,lengthSq:xA,lessThan:LD,lessThanEqual:DD,lightPosition:_E,lightProjectionUV:n3,lightShadowMatrix:$0,lightTargetDirection:yE,lightTargetPosition:i3,lightViewPosition:xE,lightingContext:SF,lights:mQ,linearDepth:up,linearToneMapping:WB,localId:Yj,log:T0,log2:dl,logarithmicDepthToViewZ:FZ,luminance:dE,mat2:y0,mat3:Wr,mat4:Rh,matcapUV:cB,materialAO:rF,materialAlphaTest:DU,materialAnisotropy:YU,materialAnisotropyVector:Rf,materialAttenuationColor:nF,materialAttenuationDistance:tF,materialClearcoat:GU,materialClearcoatNormal:WU,materialClearcoatRoughness:HU,materialColor:xv,materialDispersion:sF,materialEmissive:FU,materialEnvIntensity:Xy,materialEnvRotation:DA,materialIOR:eF,materialIridescence:ZU,materialIridescenceIOR:KU,materialIridescenceThickness:JU,materialLightMap:kA,materialLineDashOffset:zA,materialLineDashSize:OA,materialLineGapSize:VA,materialLineScale:BA,materialLineWidth:Yy,materialMetalness:zU,materialNormal:kU,materialOpacity:O0,materialPointSize:iF,materialReference:ql,materialReflectivity:qy,materialRefractionRatio:fU,materialRotation:$U,materialRoughness:VU,materialSheen:XU,materialSheenRoughness:qU,materialShininess:UU,materialSpecular:BU,materialSpecularColor:OU,materialSpecularIntensity:MM,materialSpecularStrength:tg,materialThickness:QU,materialTransmission:jU,max:Ns,maxMipLevel:CA,mediumpModelViewMatrix:aU,metalness:vg,min:Co,mix:Ri,mixElement:S2,mod:qg,modInt:KD,modelDirection:iZ,modelNormalMatrix:oU,modelPosition:sZ,modelRadius:rU,modelScale:rZ,modelViewMatrix:ac,modelViewPosition:oZ,modelViewProjection:GA,modelWorldMatrix:da,modelWorldMatrixInverse:aZ,morphReference:xF,mrt:bB,mul:ri,mx_aastep:R3,mx_add:Wee,mx_atan2:Kee,mx_cell_noise_float:Vee,mx_contrast:Nee,mx_divide:qee,mx_fractal_noise_float:zee,mx_fractal_noise_vec2:kee,mx_fractal_noise_vec3:Gee,mx_fractal_noise_vec4:Hee,mx_frame:jee,mx_heighttonormal:ate,mx_hsvtorgb:vee,mx_ifequal:nte,mx_ifgreater:ete,mx_ifgreatereq:tte,mx_invert:Qee,mx_modulo:Yee,mx_multiply:Xee,mx_noise_float:Pee,mx_noise_vec3:Iee,mx_noise_vec4:Lee,mx_place2d:ste,mx_power:Zee,mx_ramp4:wee,mx_ramplr:Tee,mx_ramptb:Mee,mx_rgbtohsv:See,mx_rotate2d:rte,mx_rotate3d:ote,mx_safepower:Cee,mx_separate:ite,mx_splitlr:Aee,mx_splittb:Eee,mx_srgb_texture_to_lin_rec709:bee,mx_subtract:$ee,mx_timer:Jee,mx_transform_uv:Ree,mx_unifiednoise2d:Dee,mx_unifiednoise3d:Uee,mx_worley_noise_float:Fee,mx_worley_noise_vec2:Bee,mx_worley_noise_vec3:Oee,negate:s2,neutralToneMapping:ZB,nodeArray:Eh,nodeImmutable:Vt,nodeObject:Qe,nodeObjectIntent:Gm,nodeObjects:Xg,nodeProxy:Wn,nodeProxyIntent:on,normalFlat:uU,normalGeometry:D0,normalLocal:No,normalMap:TM,normalView:Yi,normalViewGeometry:lp,normalWorld:cu,normalWorldGeometry:hU,normalize:rc,not:OD,notEqual:ID,numWorkgroups:$j,objectDirection:j7,objectGroup:lA,objectPosition:sU,objectRadius:nZ,objectScale:eZ,objectViewPosition:tZ,objectWorldMatrix:Q7,oneMinus:r2,or:BD,orthographicDepthToViewZ:UZ,oscSawtooth:XJ,oscSine:HJ,oscSquare:WJ,oscTriangle:$J,output:Of,outputStruct:IJ,overlay:YZ,overloadingFn:Pr,parabola:NM,parallaxDirection:NU,parallaxUV:vZ,parameter:CJ,pass:Aj,passTexture:Ej,pcurve:UJ,perspectiveDepthToViewZ:YA,pmremTexture:sE,pointShadow:v3,pointUV:pj,pointWidth:C7,positionGeometry:Er,positionLocal:Fs,positionPrevious:_v,positionView:Bs,positionViewDirection:_s,positionWorld:Xo,positionWorldDirection:PA,posterize:wj,pow:ha,pow2:_A,pow3:g2,pow4:_2,premultiplyAlpha:LF,property:Va,radians:e2,rand:v2,range:Hj,rangeFog:kj,rangeFogFactor:pE,reciprocal:a2,reference:hs,referenceBuffer:vM,reflect:f2,reflectVector:gU,reflectView:pU,reflector:tj,refract:vA,refractVector:_U,refractView:mU,reinhardToneMapping:$B,remap:Z2,remapClamp:K2,renderGroup:On,renderOutput:EA,rendererReference:O2,rotate:t_,rotateUV:qJ,roughness:cl,round:o2,rtt:CB,sRGBTransferEOTF:L2,sRGBTransferOETF:D2,sample:cj,sampler:$7,samplerComparison:X7,saturate:yA,saturation:Sj,screen:qZ,screenCoordinate:Qg,screenSize:wg,screenUV:Ql,scriptable:zj,scriptableValue:Ky,select:vr,setCurrentStack:yg,setName:TA,shaderStages:cv,shadow:_3,shadowPositionWorld:vE,shapeCircle:EQ,sharedUniformGroup:b0,sheen:Sh,sheenRoughness:v0,shiftLeft:WD,shiftRight:$D,shininess:fv,sign:Mg,sin:Ho,sinc:FJ,skinning:pF,smoothstep:va,smoothstepElement:b2,specularColor:vo,specularF90:bg,spherizeUV:YJ,split:E7,spritesheetUV:JJ,sqrt:xl,stack:Zy,step:A0,stepElement:T2,storage:Ph,storageBarrier:jj,storageObject:RZ,storageTexture:FB,string:w7,struct:PJ,sub:Mi,subBuild:Vf,subgroupIndex:TZ,subgroupSize:Zj,tan:n2,tangentGeometry:U0,tangentLocal:jg,tangentView:F0,tangentWorld:RU,temp:C2,texture:Si,texture3D:OB,textureBarrier:Qj,textureBicubic:xK,textureBicubicLevel:tE,textureCubeUV:nB,textureLoad:Us,textureSize:Yc,textureStore:mj,thickness:iA,time:hu,timerDelta:GJ,timerGlobal:kJ,timerLocal:zJ,toneMapping:z2,toneMappingExposure:k2,toonOutlinePass:Cj,transformDirection:x2,transformNormal:dU,transformNormalToView:LA,transformedClearcoatNormalView:uZ,transformedNormalView:lZ,transformedNormalWorld:cZ,transmission:pv,transpose:c2,triNoise3D:OJ,triplanarTexture:jJ,triplanarTextures:EB,trunc:gA,uint:Kt,uniform:wn,uniformArray:ca,uniformCubeTexture:hZ,uniformGroup:wD,uniformTexture:W7,unpremultiplyAlpha:WZ,userData:_j,uv:is,uvec2:_D,uvec3:vp,uvec4:SD,varying:yl,varyingProperty:ko,vec2:nt,vec3:xe,vec4:tn,vectorComponents:ou,velocity:yj,vertexColor:RF,vertexIndex:oF,vertexStage:I2,vibrance:bj,viewZToLogarithmicDepth:ZA,viewZToOrthographicDepth:zf,viewZToPerspectiveDepth:qA,viewport:ec,viewportCoordinate:MF,viewportDepthTexture:XA,viewportLinearDepth:BZ,viewportMipTexture:$A,viewportResolution:LZ,viewportSafeUV:KJ,viewportSharedTexture:BF,viewportSize:TF,viewportTexture:DZ,viewportUV:IZ,wgsl:Uj,wgslFn:Oj,workgroupArray:nQ,workgroupBarrier:Jj,workgroupId:Xj,workingToColorSpace:U2,xor:VD});const Da=new lE;class cte extends uu{constructor(e,t){super(),this.renderer=e,this.nodes=t}update(e,t,i){const s=this.renderer,r=this.nodes.getBackgroundNode(e)||e.background;let l=!1;if(r===null)s._clearColor.getRGB(Da),Da.a=s._clearColor.a;else if(r.isColor===!0)r.getRGB(Da),Da.a=1,l=!0;else if(r.isNode===!0){const f=this.get(e),g=r;Da.copy(s._clearColor);let x=f.backgroundMesh;if(x===void 0){let A=function(){r.removeEventListener("dispose",A),x.material.dispose(),x.geometry.dispose()};var d=A;const S=R0(tn(g).mul(PM),{getUV:()=>DB.mul(hU),getTextureLevel:()=>LB});let T=GA;T=T.setZ(T.w);const E=new ys;E.name="Background.material",E.side=ns,E.depthTest=!1,E.depthWrite=!1,E.allowOverride=!1,E.fog=!1,E.lights=!1,E.vertexNode=T,E.colorNode=S,f.backgroundMeshNode=S,f.backgroundMesh=x=new ts(new xp(1,32,32),E),x.frustumCulled=!1,x.name="Background.mesh",x.onBeforeRender=function(w,O,F){this.matrixWorld.copyPosition(F.matrixWorld)},r.addEventListener("dispose",A)}const v=g.getCacheKey();f.backgroundCacheKey!==v&&(f.backgroundMeshNode.node=tn(g).mul(PM),f.backgroundMeshNode.needsUpdate=!0,x.material.needsUpdate=!0,f.backgroundCacheKey=v),t.unshift(x,x.geometry,x.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",r);const u=s.xr.getEnvironmentBlendMode();if(u==="additive"?Da.set(0,0,0,1):u==="alpha-blend"&&Da.set(0,0,0,0),s.autoClear===!0||l===!0){const f=i.clearColorValue;f.r=Da.r,f.g=Da.g,f.b=Da.b,f.a=Da.a,(s.backend.isWebGLBackend===!0||s.alpha===!0)&&(f.r*=f.a,f.g*=f.a,f.b*=f.a),i.depthClearValue=s._clearDepth,i.stencilClearValue=s._clearStencil,i.clearColor=s.autoClearColor===!0,i.clearDepth=s.autoClearDepth===!0,i.clearStencil=s.autoClearStencil===!0}else i.clearColor=!1,i.clearDepth=!1,i.clearStencil=!1}}let ute=0;class IM{constructor(e="",t=[],i=0,s=[]){this.name=e,this.bindings=t,this.index=i,this.bindingsReference=s,this.id=ute++}}class hte{constructor(e,t,i,s,r,l,u,d,f,g=[]){this.vertexShader=e,this.fragmentShader=t,this.computeShader=i,this.transforms=g,this.nodeAttributes=s,this.bindings=r,this.updateNodes=l,this.updateBeforeNodes=u,this.updateAfterNodes=d,this.observer=f,this.usedTimes=0}createBindings(){const e=[];for(const t of this.bindings)if(t.bindings[0].groupNode.shared!==!0){const s=new IM(t.name,[],t.index,t);e.push(s);for(const r of t.bindings)s.bindings.push(r.clone())}else e.push(t);return e}}class LM{constructor(e,t,i=null){this.isNodeAttribute=!0,this.name=e,this.type=t,this.node=i}}class I3{constructor(e,t,i){this.isNodeUniform=!0,this.name=e,this.type=t,this.node=i.getSelf()}get value(){return this.node.value}set value(e){this.node.value=e}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class EE{constructor(e,t,i=!1,s=null){this.isNodeVar=!0,this.name=e,this.type=t,this.readOnly=i,this.count=s}}class L3 extends EE{constructor(e,t,i=null,s=null){super(e,t),this.needsInterpolation=!1,this.isNodeVarying=!0,this.interpolationType=i,this.interpolationSampling=s}}class D3{constructor(e,t,i=""){this.name=e,this.type=t,this.code=i,Object.defineProperty(this,"isNodeCode",{value:!0})}}let dte=0;class jy{constructor(e=null){this.id=dte++,this.nodesData=new WeakMap,this.parent=e}getData(e){let t=this.nodesData.get(e);return t===void 0&&this.parent!==null&&(t=this.parent.getData(e)),t}setData(e,t){this.nodesData.set(e,t)}}class fte{constructor(e,t){this.name=e,this.members=t,this.output=!1}}class fu{constructor(e,t){this.name=e,this.value=t,this.boundary=0,this.itemSize=0,this.offset=0}setValue(e){this.value=e}getValue(){return this.value}}class pte extends fu{constructor(e,t=0){super(e,t),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class mte extends fu{constructor(e,t=new it){super(e,t),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class gte extends fu{constructor(e,t=new re){super(e,t),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class _te extends fu{constructor(e,t=new Un){super(e,t),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class xte extends fu{constructor(e,t=new Jt){super(e,t),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class yte extends fu{constructor(e,t=new Wg){super(e,t),this.isMatrix2Uniform=!0,this.boundary=8,this.itemSize=4}}class vte extends fu{constructor(e,t=new ni){super(e,t),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class Ste extends fu{constructor(e,t=new xn){super(e,t),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class bte extends pte{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Tte extends mte{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Mte extends gte{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class wte extends _te{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Ate extends xte{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Ete extends yte{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Rte extends vte{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Cte extends Ste{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}const cI=new WeakMap,Nte=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),Fy=a=>/e/g.test(a)?String(a).replace(/\+/g,""):(a=Number(a),a+(a%1?"":".0"));class RE{constructor(e,t,i){this.object=e,this.material=e&&e.material||null,this.geometry=e&&e.geometry||null,this.renderer=t,this.parser=i,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.observer=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.declarations={},this.flow={code:""},this.chaining=[],this.stack=Zy(),this.stacks=[],this.tab="	",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new jy,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.subBuildLayers=[],this.currentStack=null,this.subBuildFn=null}getBindGroupsCache(){let e=cI.get(this.renderer);return e===void 0&&(e=new Ha,cI.set(this.renderer,e)),e}createRenderTarget(e,t,i){return new $a(e,t,i)}createCubeRenderTarget(e,t){return new zF(e,t)}includes(e){return this.nodes.includes(e)}getOutputStructName(){}_getBindGroup(e,t){const i=this.getBindGroupsCache(),s=[];let r=!0;for(const u of t)s.push(u),r=r&&u.groupNode.shared!==!0;let l;return r?(l=i.get(s),l===void 0&&(l=new IM(e,s,this.bindingsIndexes[e].group,s),i.set(s,l))):l=new IM(e,s,this.bindingsIndexes[e].group,s),l}getBindGroupArray(e,t){const i=this.bindings[t];let s=i[e];return s===void 0&&(this.bindingsIndexes[e]===void 0&&(this.bindingsIndexes[e]={binding:0,group:Object.keys(this.bindingsIndexes).length}),i[e]=s=[]),s}getBindings(){let e=this.bindGroups;if(e===null){const t={},i=this.bindings;for(const s of cv)for(const r in i[s]){const l=i[s][r];(t[r]||(t[r]=[])).push(...l)}e=[];for(const s in t){const r=t[s],l=this._getBindGroup(s,r);e.push(l)}this.bindGroups=e}return e}sortBindingGroups(){const e=this.getBindings();e.sort((t,i)=>t.bindings[0].groupNode.order-i.bindings[0].groupNode.order);for(let t=0;t<e.length;t++){const i=e[t];this.bindingsIndexes[i.name].group=t,i.index=t}}setHashNode(e,t){this.hashNodes[t]=e}addNode(e){this.nodes.includes(e)===!1&&(this.nodes.push(e),this.setHashNode(e,e.getHash(this)))}addSequentialNode(e){this.sequentialNodes.includes(e)===!1&&this.sequentialNodes.push(e)}buildUpdateNodes(){for(const e of this.nodes)e.getUpdateType()!==ii.NONE&&this.updateNodes.push(e.getSelf());for(const e of this.sequentialNodes){const t=e.getUpdateBeforeType(),i=e.getUpdateAfterType();t!==ii.NONE&&this.updateBeforeNodes.push(e.getSelf()),i!==ii.NONE&&this.updateAfterNodes.push(e.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(e){return e.magFilter===Ni||e.magFilter===Hc||e.magFilter===Fa||e.magFilter===Cr||e.minFilter===Ni||e.minFilter===Hc||e.minFilter===Fa||e.minFilter===Cr}addChain(e){this.chaining.push(e)}removeChain(e){if(this.chaining.pop()!==e)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(e){return e}getNodeFromHash(e){return this.hashNodes[e]}addFlow(e,t){return this.flowNodes[e].push(t),t}setContext(e){this.context=e}getContext(){return this.context}getSharedContext(){return{...this.context},this.context}setCache(e){this.cache=e}getCache(){return this.cache}getCacheFromNode(e,t=!0){const i=this.getDataFromNode(e);return i.cache===void 0&&(i.cache=new jy(t?this.getCache():null)),i.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(e){const t=this.getDataFromNode(e);return t.usageCount=t.usageCount===void 0?1:t.usageCount+1,t.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateArrayDeclaration(e,t){return this.getType(e)+"[ "+t+" ]"}generateArray(e,t,i=null){let s=this.generateArrayDeclaration(e,t)+"( ";for(let r=0;r<t;r++){const l=i?i[r]:null;l!==null?s+=l.build(this,e):s+=this.generateConst(e),r<t-1&&(s+=", ")}return s+=" )",s}generateStruct(e,t,i=null){const s=[];for(const r of t){const{name:l,type:u}=r;i&&i[l]&&i[l].isNode?s.push(i[l].build(this,u)):s.push(this.generateConst(u))}return e+"( "+s.join(", ")+" )"}generateConst(e,t=null){if(t===null&&(e==="float"||e==="int"||e==="uint"?t=0:e==="bool"?t=!1:e==="color"?t=new Jt:e==="vec2"?t=new it:e==="vec3"?t=new re:e==="vec4"&&(t=new Un)),e==="float")return Fy(t);if(e==="int")return`${Math.round(t)}`;if(e==="uint")return t>=0?`${Math.round(t)}u`:"0u";if(e==="bool")return t?"true":"false";if(e==="color")return`${this.getType("vec3")}( ${Fy(t.r)}, ${Fy(t.g)}, ${Fy(t.b)} )`;const i=this.getTypeLength(e),s=this.getComponentType(e),r=l=>this.generateConst(s,l);if(i===2)return`${this.getType(e)}( ${r(t.x)}, ${r(t.y)} )`;if(i===3)return`${this.getType(e)}( ${r(t.x)}, ${r(t.y)}, ${r(t.z)} )`;if(i===4&&e!=="mat2")return`${this.getType(e)}( ${r(t.x)}, ${r(t.y)}, ${r(t.z)}, ${r(t.w)} )`;if(i>=4&&t&&(t.isMatrix2||t.isMatrix3||t.isMatrix4))return`${this.getType(e)}( ${t.elements.map(r).join(", ")} )`;if(i>4)return`${this.getType(e)}()`;throw new Error(`NodeBuilder: Type '${e}' not found in generate constant attempt.`)}getType(e){return e==="color"?"vec3":e}hasGeometryAttribute(e){return this.geometry&&this.geometry.getAttribute(e)!==void 0}getAttribute(e,t){const i=this.attributes;for(const r of i)if(r.name===e)return r;const s=new LM(e,t);return this.registerDeclaration(s),i.push(s),s}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isReference(e){return e==="void"||e==="property"||e==="sampler"||e==="samplerComparison"||e==="texture"||e==="cubeTexture"||e==="storageTexture"||e==="depthTexture"||e==="texture3D"}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(e){const t=e.type;if(e.isDataTexture){if(t===or)return"int";if(t===rs)return"uint"}return"float"}getElementType(e){return e==="mat2"?"vec2":e==="mat3"?"vec3":e==="mat4"?"vec4":this.getComponentType(e)}getComponentType(e){if(e=this.getVectorType(e),e==="float"||e==="bool"||e==="int"||e==="uint")return e;const t=/(b|i|u|)(vec|mat)([2-4])/.exec(e);return t===null?null:t[1]==="b"?"bool":t[1]==="i"?"int":t[1]==="u"?"uint":"float"}getVectorType(e){return e==="color"?"vec3":e==="texture"||e==="cubeTexture"||e==="storageTexture"||e==="texture3D"?"vec4":e}getTypeFromLength(e,t="float"){if(e===1)return t;let i=Gw(e);const s=t==="float"?"":t[0];return/mat2/.test(t)===!0&&(i=i.replace("vec","mat")),s+i}getTypeFromArray(e){return Nte.get(e.constructor)}isInteger(e){return/int|uint|(i|u)vec/.test(e)}getTypeFromAttribute(e){let t=e;e.isInterleavedBufferAttribute&&(t=e.data);const i=t.array,s=e.itemSize,r=e.normalized;let l;return!(e instanceof nw)&&r!==!0&&(l=this.getTypeFromArray(i)),this.getTypeFromLength(s,l)}getTypeLength(e){const t=this.getVectorType(e),i=/vec([2-4])/.exec(t);return i!==null?Number(i[1]):t==="float"||t==="bool"||t==="int"||t==="uint"?1:/mat2/.test(e)===!0?4:/mat3/.test(e)===!0?9:/mat4/.test(e)===!0?16:0}getVectorFromMatrix(e){return e.replace("mat","vec")}changeComponentType(e,t){return this.getTypeFromLength(this.getTypeLength(e),t)}getIntegerType(e){const t=this.getComponentType(e);return t==="int"||t==="uint"?e:this.changeComponentType(e,"int")}addStack(){return this.stack=Zy(this.stack),this.stacks.push(_0()||this.stack),yg(this.stack),this.stack}removeStack(){const e=this.stack;return this.stack=e.parent,yg(this.stacks.pop()),e}getDataFromNode(e,t=this.shaderStage,i=null){i=i===null?e.isGlobal(this)?this.globalCache:this.cache:i;let s=i.getData(e);s===void 0&&(s={},i.setData(e,s)),s[t]===void 0&&(s[t]={});let r=s[t];const l=s.any?s.any.subBuilds:null,u=this.getClosestSubBuild(l);return u&&(r.subBuildsCache===void 0&&(r.subBuildsCache={}),r=r.subBuildsCache[u]||(r.subBuildsCache[u]={}),r.subBuilds=l),r}getNodeProperties(e,t="any"){const i=this.getDataFromNode(e,t);return i.properties||(i.properties={outputNode:null})}getBufferAttributeFromNode(e,t){const i=this.getDataFromNode(e);let s=i.bufferAttribute;if(s===void 0){const r=this.uniforms.index++;s=new LM("nodeAttribute"+r,t,e),this.bufferAttributes.push(s),i.bufferAttribute=s}return s}getStructTypeFromNode(e,t,i=null,s=this.shaderStage){const r=this.getDataFromNode(e,s,this.globalCache);let l=r.structType;if(l===void 0){const u=this.structs.index++;i===null&&(i="StructType"+u),l=new fte(i,t),this.structs[s].push(l),r.structType=l}return l}getOutputStructTypeFromNode(e,t){const i=this.getStructTypeFromNode(e,t,"OutputType","fragment");return i.output=!0,i}getUniformFromNode(e,t,i=this.shaderStage,s=null){const r=this.getDataFromNode(e,i,this.globalCache);let l=r.uniform;if(l===void 0){const u=this.uniforms.index++;l=new I3(s||"nodeUniform"+u,t,e),this.uniforms[i].push(l),this.registerDeclaration(l),r.uniform=l}return l}getVarFromNode(e,t=null,i=e.getNodeType(this),s=this.shaderStage,r=!1){const l=this.getDataFromNode(e,s),u=this.getSubBuildProperty("variable",l.subBuilds);let d=l[u];if(d===void 0){const f=r?"_const":"_var",g=this.vars[s]||(this.vars[s]=[]),x=this.vars[f]||(this.vars[f]=0);t===null&&(t=(r?"nodeConst":"nodeVar")+x,this.vars[f]++),u!=="variable"&&(t=this.getSubBuildProperty(t,l.subBuilds));const v=e.getArrayCount(this);d=new EE(t,i,r,v),r||g.push(d),this.registerDeclaration(d),l[u]=d}return d}isDeterministic(e){if(e.isMathNode)return this.isDeterministic(e.aNode)&&(e.bNode?this.isDeterministic(e.bNode):!0)&&(e.cNode?this.isDeterministic(e.cNode):!0);if(e.isOperatorNode)return this.isDeterministic(e.aNode)&&(e.bNode?this.isDeterministic(e.bNode):!0);if(e.isArrayNode){if(e.values!==null){for(const t of e.values)if(!this.isDeterministic(t))return!1}return!0}else if(e.isConstNode)return!0;return!1}getVaryingFromNode(e,t=null,i=e.getNodeType(this),s=null,r=null){const l=this.getDataFromNode(e,"any"),u=this.getSubBuildProperty("varying",l.subBuilds);let d=l[u];if(d===void 0){const f=this.varyings,g=f.length;t===null&&(t="nodeVarying"+g),u!=="varying"&&(t=this.getSubBuildProperty(t,l.subBuilds)),d=new L3(t,i,s,r),f.push(d),this.registerDeclaration(d),l[u]=d}return d}registerDeclaration(e){const t=this.shaderStage,i=this.declarations[t]||(this.declarations[t]={}),s=this.getPropertyName(e);let r=1,l=s;for(;i[l]!==void 0;)l=s+"_"+r++;r>1&&(e.name=l,console.warn(`THREE.TSL: Declaration name '${s}' of '${e.type}' already in use. Renamed to '${l}'.`)),i[l]=e}getCodeFromNode(e,t,i=this.shaderStage){const s=this.getDataFromNode(e);let r=s.code;if(r===void 0){const l=this.codes[i]||(this.codes[i]=[]),u=l.length;r=new D3("nodeCode"+u,t),l.push(r),s.code=r}return r}addFlowCodeHierarchy(e,t){const{flowCodes:i,flowCodeBlock:s}=this.getDataFromNode(e);let r=!0,l=t;for(;l;){if(s.get(l)===!0){r=!1;break}l=this.getDataFromNode(l).parentNodeBlock}if(r)for(const u of i)this.addLineFlowCode(u)}addLineFlowCodeBlock(e,t,i){const s=this.getDataFromNode(e),r=s.flowCodes||(s.flowCodes=[]),l=s.flowCodeBlock||(s.flowCodeBlock=new WeakMap);r.push(t),l.set(i,!0)}addLineFlowCode(e,t=null){return e===""?this:(t!==null&&this.context.nodeBlock&&this.addLineFlowCodeBlock(t,e,this.context.nodeBlock),e=this.tab+e,/;\s*$/.test(e)||(e=e+`;
`),this.flow.code+=e,this)}addFlowCode(e){return this.flow.code+=e,this}addFlowTab(){return this.tab+="	",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(e){return this.flowsData.get(e)}flowNode(e){const t=e.getNodeType(this),i=this.flowChildNode(e,t);return this.flowsData.set(e,i),i}addInclude(e){this.currentFunctionNode!==null&&this.currentFunctionNode.includes.push(e)}buildFunctionNode(e){const t=new fE,i=this.currentFunctionNode;return this.currentFunctionNode=t,t.code=this.buildFunctionCode(e),this.currentFunctionNode=i,t}flowShaderNode(e){const t=e.layout,i={[Symbol.iterator](){let l=0;const u=Object.values(this);return{next:()=>({value:u[l],done:l++>=u.length})}}};for(const l of t.inputs)i[l.name]=new cE(l.type,l.name);e.layout=null;const s=e.call(i),r=this.flowStagesNode(s,t.type);return e.layout=t,r}flowBuildStage(e,t,i=null){const s=this.getBuildStage();this.setBuildStage(t);const r=e.build(this,i);return this.setBuildStage(s),r}flowStagesNode(e,t=null){const i=this.flow,s=this.vars,r=this.declarations,l=this.cache,u=this.buildStage,d=this.stack,f={code:""};this.flow=f,this.vars={},this.declarations={},this.cache=new jy,this.stack=Zy();for(const g of lv)this.setBuildStage(g),f.result=e.build(this,t);return f.vars=this.getVars(this.shaderStage),this.flow=i,this.vars=s,this.declarations=r,this.cache=l,this.stack=d,this.setBuildStage(u),f}getFunctionOperator(){return null}buildFunctionCode(){console.warn("Abstract function.")}flowChildNode(e,t=null){const i=this.flow,s={code:""};return this.flow=s,s.result=e.build(this,t),this.flow=i,s}flowNodeFromShaderStage(e,t,i=null,s=null){const r=this.tab,l=this.cache,u=this.shaderStage,d=this.context;this.setShaderStage(e);const f={...this.context};delete f.nodeBlock,this.cache=this.globalCache,this.tab="	",this.context=f;let g=null;if(this.buildStage==="generate"){const x=this.flowChildNode(t,i);s!==null&&(x.code+=`${this.tab+s} = ${x.result};
`),this.flowCode[e]=this.flowCode[e]+x.code,g=x}else g=t.build(this);return this.setShaderStage(u),this.cache=l,this.tab=r,this.context=d,g}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(e,t,i=null){return`${i!==null?this.generateArrayDeclaration(e,i):this.getType(e)} ${t}`}getVars(e){let t="";const i=this.vars[e];if(i!==void 0)for(const s of i)t+=`${this.getVar(s.type,s.name)}; `;return t}getUniforms(){console.warn("Abstract function.")}getCodes(e){const t=this.codes[e];let i="";if(t!==void 0)for(const s of t)i+=s.code+`
`;return i}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(e){this.shaderStage=e}getShaderStage(){return this.shaderStage}setBuildStage(e){this.buildStage=e}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}get subBuild(){return this.subBuildLayers[this.subBuildLayers.length-1]||null}addSubBuild(e){this.subBuildLayers.push(e)}removeSubBuild(){return this.subBuildLayers.pop()}getClosestSubBuild(e){let t;if(e&&e.isNode?e.isShaderCallNodeInternal?t=e.shaderNode.subBuilds:e.isStackNode?t=[e.subBuild]:t=this.getDataFromNode(e,"any").subBuilds:e instanceof Set?t=[...e]:t=e,!t)return null;const i=this.subBuildLayers;for(let s=t.length-1;s>=0;s--){const r=t[s];if(i.includes(r))return r}return null}getSubBuildOutput(e){return this.getSubBuildProperty("outputNode",e)}getSubBuildProperty(e="",t=null){let i;t!==null?i=this.getClosestSubBuild(t):i=this.subBuildFn;let s;return i?s=e?i+"_"+e:i:s=e,s}build(){const{object:e,material:t,renderer:i}=this;if(t!==null){let s=i.library.fromMaterial(t);s===null&&(console.error(`NodeMaterial: Material "${t.type}" is not compatible.`),s=new ys),s.build(this)}else this.addFlow("compute",e);for(const s of lv){this.setBuildStage(s),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const r of cv){this.setShaderStage(r);const l=this.flowNodes[r];for(const u of l)s==="generate"?this.flowNode(u):u.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(e,t){if(t==="float"||t==="int"||t==="uint")return new bte(e);if(t==="vec2"||t==="ivec2"||t==="uvec2")return new Tte(e);if(t==="vec3"||t==="ivec3"||t==="uvec3")return new Mte(e);if(t==="vec4"||t==="ivec4"||t==="uvec4")return new wte(e);if(t==="color")return new Ate(e);if(t==="mat2")return new Ete(e);if(t==="mat3")return new Rte(e);if(t==="mat4")return new Cte(e);throw new Error(`Uniform "${t}" not declared.`)}format(e,t,i){if(t=this.getVectorType(t),i=this.getVectorType(i),t===i||i===null||this.isReference(i))return e;const s=this.getTypeLength(t),r=this.getTypeLength(i);return s===16&&r===9?`${this.getType(i)}( ${e}[ 0 ].xyz, ${e}[ 1 ].xyz, ${e}[ 2 ].xyz )`:s===9&&r===4?`${this.getType(i)}( ${e}[ 0 ].xy, ${e}[ 1 ].xy )`:s>4||r>4||r===0?e:s===r?`${this.getType(i)}( ${e} )`:s>r?(e=i==="bool"?`all( ${e} )`:`${e}.${"xyz".slice(0,r)}`,this.format(e,this.getTypeFromLength(r,this.getComponentType(t)),i)):r===4&&s>1?`${this.getType(i)}( ${this.format(e,t,"vec3")}, 1.0 )`:s===2?`${this.getType(i)}( ${this.format(e,t,"vec2")}, 0.0 )`:(s===1&&r>1&&t!==this.getComponentType(i)&&(e=`${this.getType(this.getComponentType(i))}( ${e} )`),`${this.getType(i)}( ${e} )`)}getSignature(){return`// Three.js r${fp} - Node System
`}*[Symbol.iterator](){}}class DM{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(e,t){let i=e.get(t);return i===void 0&&(i={renderMap:new WeakMap,frameMap:new WeakMap},e.set(t,i)),i}updateBeforeNode(e){const t=e.getUpdateBeforeType(),i=e.updateReference(this);if(t===ii.FRAME){const{frameMap:s}=this._getMaps(this.updateBeforeMap,i);s.get(i)!==this.frameId&&e.updateBefore(this)!==!1&&s.set(i,this.frameId)}else if(t===ii.RENDER){const{renderMap:s}=this._getMaps(this.updateBeforeMap,i);s.get(i)!==this.renderId&&e.updateBefore(this)!==!1&&s.set(i,this.renderId)}else t===ii.OBJECT&&e.updateBefore(this)}updateAfterNode(e){const t=e.getUpdateAfterType(),i=e.updateReference(this);if(t===ii.FRAME){const{frameMap:s}=this._getMaps(this.updateAfterMap,i);s.get(i)!==this.frameId&&e.updateAfter(this)!==!1&&s.set(i,this.frameId)}else if(t===ii.RENDER){const{renderMap:s}=this._getMaps(this.updateAfterMap,i);s.get(i)!==this.renderId&&e.updateAfter(this)!==!1&&s.set(i,this.renderId)}else t===ii.OBJECT&&e.updateAfter(this)}updateNode(e){const t=e.getUpdateType(),i=e.updateReference(this);if(t===ii.FRAME){const{frameMap:s}=this._getMaps(this.updateMap,i);s.get(i)!==this.frameId&&e.update(this)!==!1&&s.set(i,this.frameId)}else if(t===ii.RENDER){const{renderMap:s}=this._getMaps(this.updateMap,i);s.get(i)!==this.renderId&&e.update(this)!==!1&&s.set(i,this.renderId)}else t===ii.OBJECT&&e.update(this)}update(){this.frameId++,this.lastTime===void 0&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class Z0{constructor(e,t,i=null,s="",r=!1){this.type=e,this.name=t,this.count=i,this.qualifier=s,this.isConst=r}}Z0.isNodeFunctionInput=!0;class U3 extends du{static get type(){return"DirectionalLightNode"}constructor(e=null){super(e)}setupDirect(){const e=this.colorNode;return{lightDirection:yE(this.light),lightColor:e}}}const $T=new xn,By=new xn;let Dm=null;class F3 extends du{static get type(){return"RectAreaLightNode"}constructor(e=null){super(e),this.halfHeight=wn(new re).setGroup(On),this.halfWidth=wn(new re).setGroup(On),this.updateType=ii.RENDER}update(e){super.update(e);const{light:t}=this,i=e.camera.matrixWorldInverse;By.identity(),$T.copy(t.matrixWorld),$T.premultiply(i),By.extractRotation($T),this.halfWidth.value.set(t.width*.5,0,0),this.halfHeight.value.set(0,t.height*.5,0),this.halfWidth.value.applyMatrix4(By),this.halfHeight.value.applyMatrix4(By)}setupDirectRectArea(e){let t,i;e.isAvailable("float32Filterable")?(t=Si(Dm.LTC_FLOAT_1),i=Si(Dm.LTC_FLOAT_2)):(t=Si(Dm.LTC_HALF_1),i=Si(Dm.LTC_HALF_2));const{colorNode:s,light:r}=this,l=xE(r);return{lightColor:s,lightPosition:l,halfWidth:this.halfWidth,halfHeight:this.halfHeight,ltc_1:t,ltc_2:i}}static setLTC(e){Dm=e}}class K0 extends du{static get type(){return"SpotLightNode"}constructor(e=null){super(e),this.coneCosNode=wn(0).setGroup(On),this.penumbraCosNode=wn(0).setGroup(On),this.cutoffDistanceNode=wn(0).setGroup(On),this.decayExponentNode=wn(0).setGroup(On),this.colorNode=wn(this.color).setGroup(On)}update(e){super.update(e);const{light:t}=this;this.coneCosNode.value=Math.cos(t.angle),this.penumbraCosNode.value=Math.cos(t.angle*(1-t.penumbra)),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}getSpotAttenuation(e,t){const{coneCosNode:i,penumbraCosNode:s}=this;return va(i,s,t)}getLightCoord(e){const t=e.getNodeProperties(this);let i=t.projectionUV;return i===void 0&&(i=n3(this.light,e.context.positionWorld),t.projectionUV=i),i}setupDirect(e){const{colorNode:t,cutoffDistanceNode:i,decayExponentNode:s,light:r}=this,l=this.getLightVector(e),u=l.normalize(),d=u.dot(yE(r)),f=this.getSpotAttenuation(e,d),g=l.length(),x=ME({lightDistance:g,cutoffDistance:i,decayExponent:s});let v=t.mul(f).mul(x),S,T;return r.colorNode?(T=this.getLightCoord(e),S=r.colorNode(T)):r.map&&(T=this.getLightCoord(e),S=Si(r.map,T.xy).onRenderUpdate(()=>r.map)),S&&(v=T.mul(2).sub(1).abs().lessThan(1).all().select(v.mul(S),v)),{lightColor:v,lightDirection:u}}}class B3 extends K0{static get type(){return"IESSpotLightNode"}getSpotAttenuation(e,t){const i=this.light.iesMap;let s=null;if(i&&i.isTexture===!0){const r=t.acos().mul(1/Math.PI);s=Si(i,nt(r,0),0).r}else s=super.getSpotAttenuation(t);return s}}const Pte=be(([a,e])=>{const t=a.abs().sub(e);return pl(Ns(t,0)).add(Co(Ns(t.x,t.y),0))});class O3 extends K0{static get type(){return"ProjectorLightNode"}update(e){super.update(e);const t=this.light;if(this.penumbraCosNode.value=Math.min(Math.cos(t.angle*(1-t.penumbra)),.99999),t.aspect===null){let i=1;t.map!==null&&(i=t.map.width/t.map.height),t.shadow.aspect=i}else t.shadow.aspect=t.aspect}getSpotAttenuation(e){const t=te(0),i=this.penumbraCosNode,s=$0(this.light).mul(e.context.positionWorld||Xo);return yn(s.w.greaterThan(0),()=>{const r=s.xyz.div(s.w),l=Pte(r.xy.sub(nt(.5)),nt(.5)),u=Zo(-1,Mi(1,fA(i)).sub(1));t.assign(yA(l.mul(-2).mul(u)))}),t}}class V3 extends du{static get type(){return"AmbientLightNode"}constructor(e=null){super(e)}setup({context:e}){e.irradiance.addAssign(this.colorNode)}}class z3 extends du{static get type(){return"HemisphereLightNode"}constructor(e=null){super(e),this.lightPositionNode=_E(e),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=wn(new Jt).setGroup(On)}update(e){const{light:t}=this;super.update(e),this.lightPositionNode.object3d=t,this.groundColorNode.value.copy(t.groundColor).multiplyScalar(t.intensity)}setup(e){const{colorNode:t,groundColorNode:i,lightDirectionNode:s}=this,l=cu.dot(s).mul(.5).add(.5),u=Ri(i,t,l);e.context.irradiance.addAssign(u)}}class k3 extends du{static get type(){return"LightProbeNode"}constructor(e=null){super(e);const t=[];for(let i=0;i<9;i++)t.push(new re);this.lightProbe=ca(t)}update(e){const{light:t}=this;super.update(e);for(let i=0;i<9;i++)this.lightProbe.array[i].copy(t.sh.coefficients[i]).multiplyScalar(t.intensity)}setup(e){const t=P3(cu,this.lightProbe);e.context.irradiance.addAssign(t)}}class G3{parseFunction(){console.warn("Abstract function.")}}class CE{constructor(e,t,i="",s=""){this.type=e,this.inputs=t,this.name=i,this.precision=s}getCode(){console.warn("Abstract function.")}}CE.isNodeFunction=!0;const Ite=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,Lte=/[a-z_0-9]+/ig,uI="#pragma main",Dte=a=>{a=a.trim();const e=a.indexOf(uI),t=e!==-1?a.slice(e+uI.length):a,i=t.match(Ite);if(i!==null&&i.length===5){const s=i[4],r=[];let l=null;for(;(l=Lte.exec(s))!==null;)r.push(l);const u=[];let d=0;for(;d<r.length;){const T=r[d][0]==="const";T===!0&&d++;let E=r[d][0];E==="in"||E==="out"||E==="inout"?d++:E="";const A=r[d++][0];let w=Number.parseInt(r[d][0]);Number.isNaN(w)===!1?d++:w=null;const O=r[d++][0];u.push(new Z0(A,O,w,E,T))}const f=t.substring(i[0].length),g=i[3]!==void 0?i[3]:"",x=i[2],v=i[1]!==void 0?i[1]:"",S=e!==-1?a.slice(0,e):"";return{type:x,inputs:u,name:g,precision:v,inputsCode:s,blockCode:f,headerCode:S}}else throw new Error("FunctionNode: Function is not a GLSL code.")};class Ute extends CE{constructor(e){const{type:t,inputs:i,name:s,precision:r,inputsCode:l,blockCode:u,headerCode:d}=Dte(e);super(t,i,s,r),this.inputsCode=l,this.blockCode=u,this.headerCode=d}getCode(e=this.name){let t;const i=this.blockCode;if(i!==""){const{type:s,inputsCode:r,headerCode:l,precision:u}=this;let d=`${s} ${e} ( ${r.trim()} )`;u!==""&&(d=`${u} ${d}`),t=l+d+i}else t="";return t}}class H3 extends G3{parseFunction(e){return new Ute(e)}}const hI=new WeakMap,rl=[],ch=[];class Fte extends uu{constructor(e,t){super(),this.renderer=e,this.backend=t,this.nodeFrame=new DM,this.nodeBuilderCache=new Map,this.callHashCache=new Ha,this.groupsData=new Ha,this.cacheLib={}}updateGroup(e){const t=e.groupNode,i=t.name;if(i===lA.name)return!0;if(i===On.name){const r=this.get(e),l=this.nodeFrame.renderId;return r.renderId!==l?(r.renderId=l,!0):!1}if(i===AD.name){const r=this.get(e),l=this.nodeFrame.frameId;return r.frameId!==l?(r.frameId=l,!0):!1}rl[0]=t,rl[1]=e;let s=this.groupsData.get(rl);return s===void 0&&this.groupsData.set(rl,s={}),rl.length=0,s.version!==t.version?(s.version=t.version,!0):!1}getForRenderCacheKey(e){return e.initialCacheKey}getForRender(e){const t=this.get(e);let i=t.nodeBuilderState;if(i===void 0){const{nodeBuilderCache:s}=this,r=this.getForRenderCacheKey(e);if(i=s.get(r),i===void 0){const l=this.backend.createNodeBuilder(e.object,this.renderer);l.scene=e.scene,l.material=e.material,l.camera=e.camera,l.context.material=e.material,l.lightsNode=e.lightsNode,l.environmentNode=this.getEnvironmentNode(e.scene),l.fogNode=this.getFogNode(e.scene),l.clippingContext=e.clippingContext,this.renderer.getOutputRenderTarget()&&this.renderer.getOutputRenderTarget().multiview&&l.enableMultiview(),l.build(),i=this._createNodeBuilderState(l),s.set(r,i)}i.usedTimes++,t.nodeBuilderState=i}return i}delete(e){if(e.isRenderObject){const t=this.get(e).nodeBuilderState;t.usedTimes--,t.usedTimes===0&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(e))}return super.delete(e)}getForCompute(e){const t=this.get(e);let i=t.nodeBuilderState;if(i===void 0){const s=this.backend.createNodeBuilder(e,this.renderer);s.build(),i=this._createNodeBuilderState(s),t.nodeBuilderState=i}return i}_createNodeBuilderState(e){return new hte(e.vertexShader,e.fragmentShader,e.computeShader,e.getAttributesArray(),e.getBindings(),e.updateNodes,e.updateBeforeNodes,e.updateAfterNodes,e.observer,e.transforms)}getEnvironmentNode(e){this.updateEnvironment(e);let t=null;if(e.environmentNode&&e.environmentNode.isNode)t=e.environmentNode;else{const i=this.get(e);i.environmentNode&&(t=i.environmentNode)}return t}getBackgroundNode(e){this.updateBackground(e);let t=null;if(e.backgroundNode&&e.backgroundNode.isNode)t=e.backgroundNode;else{const i=this.get(e);i.backgroundNode&&(t=i.backgroundNode)}return t}getFogNode(e){return this.updateFog(e),e.fogNode||this.get(e).fogNode||null}getCacheKey(e,t){rl[0]=e,rl[1]=t;const i=this.renderer.info.calls,s=this.callHashCache.get(rl)||{};if(s.callId!==i){const r=this.getEnvironmentNode(e),l=this.getFogNode(e);t&&ch.push(t.getCacheKey(!0)),r&&ch.push(r.getCacheKey()),l&&ch.push(l.getCacheKey()),ch.push(this.renderer.getOutputRenderTarget()&&this.renderer.getOutputRenderTarget().multiview?1:0),ch.push(this.renderer.shadowMap.enabled?1:0),s.callId=i,s.cacheKey=$g(ch),this.callHashCache.set(rl,s),ch.length=0}return rl.length=0,s.cacheKey}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(e){const t=this.get(e),i=e.background;if(i){const s=e.backgroundBlurriness===0&&t.backgroundBlurriness>0||e.backgroundBlurriness>0&&t.backgroundBlurriness===0;if(t.background!==i||s){const r=this.getCacheNode("background",i,()=>{if(i.isCubeTexture===!0||i.mapping===Kc||i.mapping===Jc||i.mapping===nc){if(e.backgroundBlurriness>0||i.mapping===nc)return sE(i);{let l;return i.isCubeTexture===!0?l=cp(i):l=Si(i),GF(l)}}else{if(i.isTexture===!0)return Si(i,Ql.flipY()).setUpdateMatrix(!0);i.isColor!==!0&&console.error("WebGPUNodes: Unsupported background configuration.",i)}},s);t.backgroundNode=r,t.background=i,t.backgroundBlurriness=e.backgroundBlurriness}}else t.backgroundNode&&(delete t.backgroundNode,delete t.background)}getCacheNode(e,t,i,s=!1){const r=this.cacheLib[e]||(this.cacheLib[e]=new WeakMap);let l=r.get(t);return(l===void 0||s)&&(l=i(),r.set(t,l)),l}updateFog(e){const t=this.get(e),i=e.fog;if(i){if(t.fog!==i){const s=this.getCacheNode("fog",i,()=>{if(i.isFogExp2){const r=hs("color","color",i).setGroup(On),l=hs("density","float",i).setGroup(On);return Ag(r,mE(l))}else if(i.isFog){const r=hs("color","color",i).setGroup(On),l=hs("near","float",i).setGroup(On),u=hs("far","float",i).setGroup(On);return Ag(r,pE(l,u))}else console.error("THREE.Renderer: Unsupported fog configuration.",i)});t.fogNode=s,t.fog=i}}else delete t.fogNode,delete t.fog}updateEnvironment(e){const t=this.get(e),i=e.environment;if(i){if(t.environment!==i){const s=this.getCacheNode("environment",i,()=>{if(i.isCubeTexture===!0)return cp(i);if(i.isTexture===!0)return Si(i);console.error("Nodes: Unsupported environment configuration.",i)});t.environmentNode=s,t.environment=i}}else t.environmentNode&&(delete t.environmentNode,delete t.environment)}getNodeFrame(e=this.renderer,t=null,i=null,s=null,r=null){const l=this.nodeFrame;return l.renderer=e,l.scene=t,l.object=i,l.camera=s,l.material=r,l}getNodeFrameForRender(e){return this.getNodeFrame(e.renderer,e.scene,e.object,e.camera,e.material)}getOutputCacheKey(){const e=this.renderer;return e.toneMapping+","+e.currentColorSpace+","+e.xr.isPresenting}hasOutputChange(e){return hI.get(e)!==this.getOutputCacheKey()}getOutputNode(e){const t=this.renderer,i=this.getOutputCacheKey(),s=e.isArrayTexture?OB(e,xe(Ql,Kg("gl_ViewID_OVR"))).renderOutput(t.toneMapping,t.currentColorSpace):Si(e,Ql).renderOutput(t.toneMapping,t.currentColorSpace);return hI.set(e,i),s}updateBefore(e){const t=e.getNodeBuilderState();for(const i of t.updateBeforeNodes)this.getNodeFrameForRender(e).updateBeforeNode(i)}updateAfter(e){const t=e.getNodeBuilderState();for(const i of t.updateAfterNodes)this.getNodeFrameForRender(e).updateAfterNode(i)}updateForCompute(e){const t=this.getNodeFrame(),i=this.getForCompute(e);for(const s of i.updateNodes)t.updateNode(s)}updateForRender(e){const t=this.getNodeFrameForRender(e),i=e.getNodeBuilderState();for(const s of i.updateNodes)t.updateNode(s)}needsRefresh(e){const t=this.getNodeFrameForRender(e);return e.getMonitor().needsRefresh(e,t)}dispose(){super.dispose(),this.nodeFrame=new DM,this.nodeBuilderCache=new Map,this.cacheLib={}}}const XT=new al;class bv{constructor(e=null){this.version=0,this.clipIntersection=null,this.cacheKey="",this.shadowPass=!1,this.viewNormalMatrix=new ni,this.clippingGroupContexts=new WeakMap,this.intersectionPlanes=[],this.unionPlanes=[],this.parentVersion=null,e!==null&&(this.viewNormalMatrix=e.viewNormalMatrix,this.clippingGroupContexts=e.clippingGroupContexts,this.shadowPass=e.shadowPass,this.viewMatrix=e.viewMatrix)}projectPlanes(e,t,i){const s=e.length;for(let r=0;r<s;r++){XT.copy(e[r]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const l=t[i+r],u=XT.normal;l.x=-u.x,l.y=-u.y,l.z=-u.z,l.w=XT.constant}}updateGlobal(e,t){this.shadowPass=e.overrideMaterial!==null&&e.overrideMaterial.isShadowPassMaterial,this.viewMatrix=t.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix)}update(e,t){let i=!1;e.version!==this.parentVersion&&(this.intersectionPlanes=Array.from(e.intersectionPlanes),this.unionPlanes=Array.from(e.unionPlanes),this.parentVersion=e.version),this.clipIntersection!==t.clipIntersection&&(this.clipIntersection=t.clipIntersection,this.clipIntersection?this.unionPlanes.length=e.unionPlanes.length:this.intersectionPlanes.length=e.intersectionPlanes.length);const s=t.clippingPlanes,r=s.length;let l,u;if(this.clipIntersection?(l=this.intersectionPlanes,u=e.intersectionPlanes.length):(l=this.unionPlanes,u=e.unionPlanes.length),l.length!==u+r){l.length=u+r;for(let d=0;d<r;d++)l[u+d]=new Un;i=!0}this.projectPlanes(s,l,u),i&&(this.version++,this.cacheKey=`${this.intersectionPlanes.length}:${this.unionPlanes.length}`)}getGroupContext(e){if(this.shadowPass&&!e.clipShadows)return this;let t=this.clippingGroupContexts.get(e);return t===void 0&&(t=new bv(this),this.clippingGroupContexts.set(e,t)),t.update(this,e),t}get unionClippingCount(){return this.unionPlanes.length}}class Bte{constructor(e,t){this.bundleGroup=e,this.camera=t}}const Um=[];class Ote{constructor(){this.bundles=new Ha}get(e,t){const i=this.bundles;Um[0]=e,Um[1]=t;let s=i.get(Um);return s===void 0&&(s=new Bte(e,t),i.set(Um,s)),Um.length=0,s}dispose(){this.bundles=new Ha}}class W3{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(e){if(e.isNodeMaterial)return e;let t=null;const i=this.getMaterialNodeClass(e.type);if(i!==null){t=new i;for(const s in e)t[s]=e[s]}return t}addToneMapping(e,t){this.addType(e,t,this.toneMappingNodes)}getToneMappingFunction(e){return this.toneMappingNodes.get(e)||null}getMaterialNodeClass(e){return this.materialNodes.get(e)||null}addMaterial(e,t){this.addType(e,t,this.materialNodes)}getLightNodeClass(e){return this.lightNodes.get(e)||null}addLight(e,t){this.addClass(e,t,this.lightNodes)}addType(e,t,i){if(i.has(t)){console.warn(`Redefinition of node ${t}`);return}if(typeof e!="function")throw new Error(`Node class ${e.name} is not a class.`);if(typeof t=="function"||typeof t=="object")throw new Error(`Base class ${t} is not a class.`);i.set(t,e)}addClass(e,t,i){if(i.has(t)){console.warn(`Redefinition of node ${t.name}`);return}if(typeof e!="function")throw new Error(`Node class ${e.name} is not a class.`);if(typeof t!="function")throw new Error(`Base class ${t.name} is not a class.`);i.set(t,e)}}const Vte=new X0,Fm=[];class $3 extends Ha{constructor(){super()}createNode(e=[]){return new X0().setLights(e)}getNode(e,t){if(e.isQuadMesh)return Vte;Fm[0]=e,Fm[1]=t;let i=this.get(Fm);return i===void 0&&(i=this.createNode(),this.set(Fm,i)),Fm.length=0,i}}class Hm extends $a{constructor(e=1,t=1,i={}){super(e,t,i),this.isXRRenderTarget=!0,this._hasExternalTextures=!1,this._autoAllocateDepthBuffer=!0,this._isOpaqueFramebuffer=!1}copy(e){return super.copy(e),this._hasExternalTextures=e._hasExternalTextures,this._autoAllocateDepthBuffer=e._autoAllocateDepthBuffer,this._isOpaqueFramebuffer=e._isOpaqueFramebuffer,this}}const dI=new re,fI=new re;class zte extends Jo{constructor(e,t=!1){super(),this.enabled=!1,this.isPresenting=!1,this.cameraAutoUpdate=!0,this._renderer=e,this._cameraL=new Gs,this._cameraL.viewport=new Un,this._cameraR=new Gs,this._cameraR.viewport=new Un,this._cameras=[this._cameraL,this._cameraR],this._cameraXR=new Fw,this._currentDepthNear=null,this._currentDepthFar=null,this._controllers=[],this._controllerInputSources=[],this._xrRenderTarget=null,this._layers=[],this._supportsLayers=!1,this._supportsGlBinding=typeof XRWebGLBinding<"u",this._frameBufferTargets=null,this._createXRLayer=Xte.bind(this),this._gl=null,this._currentAnimationContext=null,this._currentAnimationLoop=null,this._currentPixelRatio=null,this._currentSize=new it,this._onSessionEvent=Hte.bind(this),this._onSessionEnd=Wte.bind(this),this._onInputSourcesChange=$te.bind(this),this._onAnimationFrame=qte.bind(this),this._referenceSpace=null,this._referenceSpaceType="local-floor",this._customReferenceSpace=null,this._framebufferScaleFactor=1,this._foveation=1,this._session=null,this._glBaseLayer=null,this._glBinding=null,this._glProjLayer=null,this._xrFrame=null,this._useLayers=this._supportsGlBinding&&"createProjectionLayer"in XRWebGLBinding.prototype,this._useMultiviewIfPossible=t,this._useMultiview=!1}getController(e){return this._getController(e).getTargetRaySpace()}getControllerGrip(e){return this._getController(e).getGripSpace()}getHand(e){return this._getController(e).getHandSpace()}getFoveation(){if(!(this._glProjLayer===null&&this._glBaseLayer===null))return this._foveation}setFoveation(e){this._foveation=e,this._glProjLayer!==null&&(this._glProjLayer.fixedFoveation=e),this._glBaseLayer!==null&&this._glBaseLayer.fixedFoveation!==void 0&&(this._glBaseLayer.fixedFoveation=e)}getFramebufferScaleFactor(){return this._framebufferScaleFactor}setFramebufferScaleFactor(e){this._framebufferScaleFactor=e,this.isPresenting===!0&&console.warn("THREE.XRManager: Cannot change framebuffer scale while presenting.")}getReferenceSpaceType(){return this._referenceSpaceType}setReferenceSpaceType(e){this._referenceSpaceType=e,this.isPresenting===!0&&console.warn("THREE.XRManager: Cannot change reference space type while presenting.")}getReferenceSpace(){return this._customReferenceSpace||this._referenceSpace}setReferenceSpace(e){this._customReferenceSpace=e}getCamera(){return this._cameraXR}getEnvironmentBlendMode(){if(this._session!==null)return this._session.environmentBlendMode}getFrame(){return this._xrFrame}useMultiview(){return this._useMultiview}createQuadLayer(e,t,i,s,r,l,u,d={}){const f=new iu(e,t),g=new Hm(r,l,{format:es,type:Ts,depthTexture:new Ro(r,l,d.stencil?Mo:rs,void 0,void 0,void 0,void 0,void 0,void 0,d.stencil?Ao:wo),stencilBuffer:d.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1});g._autoAllocateDepthBuffer=!0;const x=new so({color:16777215,side:ao});x.map=g.texture,x.map.offset.y=1,x.map.repeat.y=-1;const v=new ts(f,x);v.position.copy(i),v.quaternion.copy(s);const S={type:"quad",width:e,height:t,translation:i,quaternion:s,pixelwidth:r,pixelheight:l,plane:v,material:x,rendercall:u,renderTarget:g};if(this._layers.push(S),this._session!==null){S.plane.material=new so({color:16777215,side:ao}),S.plane.material.blending=Mh,S.plane.material.blendEquation=Rr,S.plane.material.blendSrc=ol,S.plane.material.blendDst=ol,S.xrlayer=this._createXRLayer(S);const T=this._session.renderState.layers;T.unshift(S.xrlayer),this._session.updateRenderState({layers:T})}else g.isXRRenderTarget=!1;return v}createCylinderLayer(e,t,i,s,r,l,u,d,f={}){const g=new _p(e,e,e*t/i,64,64,!0,Math.PI-t/2,t),x=new Hm(l,u,{format:es,type:Ts,depthTexture:new Ro(l,u,f.stencil?Mo:rs,void 0,void 0,void 0,void 0,void 0,void 0,f.stencil?Ao:wo),stencilBuffer:f.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1});x._autoAllocateDepthBuffer=!0;const v=new so({color:16777215,side:ns});v.map=x.texture,v.map.offset.y=1,v.map.repeat.y=-1;const S=new ts(g,v);S.position.copy(s),S.quaternion.copy(r);const T={type:"cylinder",radius:e,centralAngle:t,aspectratio:i,translation:s,quaternion:r,pixelwidth:l,pixelheight:u,plane:S,material:v,rendercall:d,renderTarget:x};if(this._layers.push(T),this._session!==null){T.plane.material=new so({color:16777215,side:ns}),T.plane.material.blending=Mh,T.plane.material.blendEquation=Rr,T.plane.material.blendSrc=ol,T.plane.material.blendDst=ol,T.xrlayer=this._createXRLayer(T);const E=this._session.renderState.layers;E.unshift(T.xrlayer),this._session.updateRenderState({layers:E})}else x.isXRRenderTarget=!1;return S}renderLayers(){const e=new re,t=new lo,i=this._renderer,s=this.isPresenting,r=i.getOutputRenderTarget(),l=i._frameBufferTarget;this.isPresenting=!1;const u=new it;i.getSize(u);const d=i._quad;for(const f of this._layers)if(f.renderTarget.isXRRenderTarget=this._session!==null,f.renderTarget._hasExternalTextures=f.renderTarget.isXRRenderTarget,f.renderTarget.isXRRenderTarget&&this._supportsLayers){f.xrlayer.transform=new XRRigidTransform(f.plane.getWorldPosition(e),f.plane.getWorldQuaternion(t));const g=this._glBinding.getSubImage(f.xrlayer,this._xrFrame);i.backend.setXRRenderTargetTextures(f.renderTarget,g.colorTexture,void 0),i._setXRLayerSize(f.renderTarget.width,f.renderTarget.height),i.setOutputRenderTarget(f.renderTarget),i.setRenderTarget(null),i._frameBufferTarget=null,this._frameBufferTargets||(this._frameBufferTargets=new WeakMap);const{frameBufferTarget:x,quad:v}=this._frameBufferTargets.get(f.renderTarget)||{frameBufferTarget:null,quad:null};x?(i._frameBufferTarget=x,i._quad=v):(i._quad=new Mp(new ys),this._frameBufferTargets.set(f.renderTarget,{frameBufferTarget:i._getFrameBufferTarget(),quad:i._quad})),f.rendercall(),i._frameBufferTarget=null}else i.setRenderTarget(f.renderTarget),f.rendercall();i.setRenderTarget(null),i.setOutputRenderTarget(r),i._frameBufferTarget=l,i._setXRLayerSize(u.x,u.y),i._quad=d,this.isPresenting=s}getSession(){return this._session}async setSession(e){const t=this._renderer,i=t.backend;this._gl=t.getContext();const s=this._gl,r=s.getContextAttributes();if(this._session=e,e!==null){if(i.isWebGPUBackend===!0)throw new Error('THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing "{ forceWebGL: true }" to the constructor of the renderer.');if(e.addEventListener("select",this._onSessionEvent),e.addEventListener("selectstart",this._onSessionEvent),e.addEventListener("selectend",this._onSessionEvent),e.addEventListener("squeeze",this._onSessionEvent),e.addEventListener("squeezestart",this._onSessionEvent),e.addEventListener("squeezeend",this._onSessionEvent),e.addEventListener("end",this._onSessionEnd),e.addEventListener("inputsourceschange",this._onInputSourcesChange),await i.makeXRCompatible(),this._currentPixelRatio=t.getPixelRatio(),t.getSize(this._currentSize),this._currentAnimationContext=t._animation.getContext(),this._currentAnimationLoop=t._animation.getAnimationLoop(),t._animation.stop(),this._supportsGlBinding){const l=new XRWebGLBinding(e,s);this._glBinding=l}if(this._useLayers===!0){let l=null,u=null,d=null;t.depth&&(d=t.stencil?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24,l=t.stencil?Ao:wo,u=t.stencil?Mo:rs);const f={colorFormat:s.RGBA8,depthFormat:d,scaleFactor:this._framebufferScaleFactor,clearOnAccess:!1};this._useMultiviewIfPossible&&t.hasFeature("OVR_multiview2")&&(f.textureType="texture-array",this._useMultiview=!0);const g=this._glBinding.createProjectionLayer(f),x=[g];this._glProjLayer=g,t.setPixelRatio(1),t._setXRLayerSize(g.textureWidth,g.textureHeight);const v=this._useMultiview?2:1,S=new Ro(g.textureWidth,g.textureHeight,u,void 0,void 0,void 0,void 0,void 0,void 0,l,v);if(this._xrRenderTarget=new Hm(g.textureWidth,g.textureHeight,{format:es,type:Ts,colorSpace:t.outputColorSpace,depthTexture:S,stencilBuffer:t.stencil,samples:r.antialias?4:0,resolveDepthBuffer:g.ignoreDepthValues===!1,resolveStencilBuffer:g.ignoreDepthValues===!1,depth:this._useMultiview?2:1,multiview:this._useMultiview}),this._xrRenderTarget._hasExternalTextures=!0,this._xrRenderTarget.depth=this._useMultiview?2:1,this._supportsLayers=e.enabledFeatures.includes("layers"),this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType()),this._supportsLayers)for(const T of this._layers)T.plane.material=new so({color:16777215,side:T.type==="cylinder"?ns:ao}),T.plane.material.blending=Mh,T.plane.material.blendEquation=Rr,T.plane.material.blendSrc=ol,T.plane.material.blendDst=ol,T.xrlayer=this._createXRLayer(T),x.unshift(T.xrlayer);e.updateRenderState({layers:x})}else{const l={antialias:t.samples>0,alpha:!0,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:this.getFramebufferScaleFactor()},u=new XRWebGLLayer(e,s,l);this._glBaseLayer=u,e.updateRenderState({baseLayer:u}),t.setPixelRatio(1),t._setXRLayerSize(u.framebufferWidth,u.framebufferHeight),this._xrRenderTarget=new Hm(u.framebufferWidth,u.framebufferHeight,{format:es,type:Ts,colorSpace:t.outputColorSpace,stencilBuffer:t.stencil,resolveDepthBuffer:u.ignoreDepthValues===!1,resolveStencilBuffer:u.ignoreDepthValues===!1}),this._xrRenderTarget._isOpaqueFramebuffer=!0,this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType())}this.setFoveation(this.getFoveation()),t._animation.setAnimationLoop(this._onAnimationFrame),t._animation.setContext(e),t._animation.start(),this.isPresenting=!0,this.dispatchEvent({type:"sessionstart"})}}updateCamera(e){const t=this._session;if(t===null)return;const i=e.near,s=e.far,r=this._cameraXR,l=this._cameraL,u=this._cameraR;r.near=u.near=l.near=i,r.far=u.far=l.far=s,r.isMultiViewCamera=this._useMultiview,(this._currentDepthNear!==r.near||this._currentDepthFar!==r.far)&&(t.updateRenderState({depthNear:r.near,depthFar:r.far}),this._currentDepthNear=r.near,this._currentDepthFar=r.far),r.layers.mask=e.layers.mask|6,l.layers.mask=r.layers.mask&3,u.layers.mask=r.layers.mask&5;const d=e.parent,f=r.cameras;pI(r,d);for(let g=0;g<f.length;g++)pI(f[g],d);f.length===2?kte(r,l,u):r.projectionMatrix.copy(l.projectionMatrix),Gte(e,r,d)}_getController(e){let t=this._controllers[e];return t===void 0&&(t=new Xm,this._controllers[e]=t),t}}function kte(a,e,t){dI.setFromMatrixPosition(e.matrixWorld),fI.setFromMatrixPosition(t.matrixWorld);const i=dI.distanceTo(fI),s=e.projectionMatrix.elements,r=t.projectionMatrix.elements,l=s[14]/(s[10]-1),u=s[14]/(s[10]+1),d=(s[9]+1)/s[5],f=(s[9]-1)/s[5],g=(s[8]-1)/s[0],x=(r[8]+1)/r[0],v=l*g,S=l*x,T=i/(-g+x),E=T*-g;if(e.matrixWorld.decompose(a.position,a.quaternion,a.scale),a.translateX(E),a.translateZ(T),a.matrixWorld.compose(a.position,a.quaternion,a.scale),a.matrixWorldInverse.copy(a.matrixWorld).invert(),s[10]===-1)a.projectionMatrix.copy(e.projectionMatrix),a.projectionMatrixInverse.copy(e.projectionMatrixInverse);else{const A=l+T,w=u+T,O=v-E,F=S+(i-E),B=d*u/w*A,k=f*u/w*A;a.projectionMatrix.makePerspective(O,F,B,k,A,w),a.projectionMatrixInverse.copy(a.projectionMatrix).invert()}}function pI(a,e){e===null?a.matrixWorld.copy(a.matrix):a.matrixWorld.multiplyMatrices(e.matrixWorld,a.matrix),a.matrixWorldInverse.copy(a.matrixWorld).invert()}function Gte(a,e,t){t===null?a.matrix.copy(e.matrixWorld):(a.matrix.copy(t.matrixWorld),a.matrix.invert(),a.matrix.multiply(e.matrixWorld)),a.matrix.decompose(a.position,a.quaternion,a.scale),a.updateMatrixWorld(!0),a.projectionMatrix.copy(e.projectionMatrix),a.projectionMatrixInverse.copy(e.projectionMatrixInverse),a.isPerspectiveCamera&&(a.fov=jh*2*Math.atan(1/a.projectionMatrix.elements[5]),a.zoom=1)}function Hte(a){const e=this._controllerInputSources.indexOf(a.inputSource);if(e===-1)return;const t=this._controllers[e];if(t!==void 0){const i=this.getReferenceSpace();t.update(a.inputSource,a.frame,i),t.dispatchEvent({type:a.type,data:a.inputSource})}}function Wte(){const a=this._session,e=this._renderer;a.removeEventListener("select",this._onSessionEvent),a.removeEventListener("selectstart",this._onSessionEvent),a.removeEventListener("selectend",this._onSessionEvent),a.removeEventListener("squeeze",this._onSessionEvent),a.removeEventListener("squeezestart",this._onSessionEvent),a.removeEventListener("squeezeend",this._onSessionEvent),a.removeEventListener("end",this._onSessionEnd),a.removeEventListener("inputsourceschange",this._onInputSourcesChange);for(let t=0;t<this._controllers.length;t++){const i=this._controllerInputSources[t];i!==null&&(this._controllerInputSources[t]=null,this._controllers[t].disconnect(i))}if(this._currentDepthNear=null,this._currentDepthFar=null,e._resetXRState(),this._session=null,this._xrRenderTarget=null,this._supportsLayers===!0)for(const t of this._layers)t.renderTarget=new Hm(t.pixelwidth,t.pixelheight,{format:es,type:Ts,depthTexture:new Ro(t.pixelwidth,t.pixelheight,t.stencilBuffer?Mo:rs,void 0,void 0,void 0,void 0,void 0,void 0,t.stencilBuffer?Ao:wo),stencilBuffer:t.stencilBuffer,resolveDepthBuffer:!1,resolveStencilBuffer:!1}),t.renderTarget.isXRRenderTarget=!1,t.plane.material=t.material,t.material.map=t.renderTarget.texture,t.material.map.offset.y=1,t.material.map.repeat.y=-1,delete t.xrlayer;this.isPresenting=!1,this._useMultiview=!1,e._animation.stop(),e._animation.setAnimationLoop(this._currentAnimationLoop),e._animation.setContext(this._currentAnimationContext),e._animation.start(),e.setPixelRatio(this._currentPixelRatio),e.setSize(this._currentSize.width,this._currentSize.height,!1),this.dispatchEvent({type:"sessionend"})}function $te(a){const e=this._controllers,t=this._controllerInputSources;for(let i=0;i<a.removed.length;i++){const s=a.removed[i],r=t.indexOf(s);r>=0&&(t[r]=null,e[r].disconnect(s))}for(let i=0;i<a.added.length;i++){const s=a.added[i];let r=t.indexOf(s);if(r===-1){for(let u=0;u<e.length;u++)if(u>=t.length){t.push(s),r=u;break}else if(t[u]===null){t[u]=s,r=u;break}if(r===-1)break}const l=e[r];l&&l.connect(s)}}function Xte(a){return a.type==="quad"?this._glBinding.createQuadLayer({transform:new XRRigidTransform(a.translation,a.quaternion),width:a.width/2,height:a.height/2,space:this._referenceSpace,viewPixelWidth:a.pixelwidth,viewPixelHeight:a.pixelheight,clearOnAccess:!1}):this._glBinding.createCylinderLayer({transform:new XRRigidTransform(a.translation,a.quaternion),radius:a.radius,centralAngle:a.centralAngle,aspectRatio:a.aspectRatio,space:this._referenceSpace,viewPixelWidth:a.pixelwidth,viewPixelHeight:a.pixelheight,clearOnAccess:!1})}function qte(a,e){if(e===void 0)return;const t=this._cameraXR,i=this._renderer,s=i.backend,r=this._glBaseLayer,l=this.getReferenceSpace(),u=e.getViewerPose(l);if(this._xrFrame=e,u!==null){const d=u.views;this._glBaseLayer!==null&&s.setXRTarget(r.framebuffer);let f=!1;d.length!==t.cameras.length&&(t.cameras.length=0,f=!0);for(let g=0;g<d.length;g++){const x=d[g];let v;if(this._useLayers===!0){const T=this._glBinding.getViewSubImage(this._glProjLayer,x);v=T.viewport,g===0&&s.setXRRenderTargetTextures(this._xrRenderTarget,T.colorTexture,this._glProjLayer.ignoreDepthValues&&!this._useMultiview?void 0:T.depthStencilTexture)}else v=r.getViewport(x);let S=this._cameras[g];S===void 0&&(S=new Gs,S.layers.enable(g),S.viewport=new Un,this._cameras[g]=S),S.matrix.fromArray(x.transform.matrix),S.matrix.decompose(S.position,S.quaternion,S.scale),S.projectionMatrix.fromArray(x.projectionMatrix),S.projectionMatrixInverse.copy(S.projectionMatrix).invert(),S.viewport.set(v.x,v.y,v.width,v.height),g===0&&(t.matrix.copy(S.matrix),t.matrix.decompose(t.position,t.quaternion,t.scale)),f===!0&&t.cameras.push(S)}i.setOutputRenderTarget(this._xrRenderTarget)}for(let d=0;d<this._controllers.length;d++){const f=this._controllerInputSources[d],g=this._controllers[d];f!==null&&g!==void 0&&g.update(f,e,l)}this._currentAnimationLoop&&this._currentAnimationLoop(a,e),e.detectedPlanes&&this.dispatchEvent({type:"planesdetected",data:e}),this._xrFrame=null}const mI=new rd,Oy=new it,qT=new Un,YT=new od,ZT=new Bg,Vy=new xn,Uc=new Un;class Yte{constructor(e,t={}){this.isRenderer=!0;const{logarithmicDepthBuffer:i=!1,alpha:s=!0,depth:r=!0,stencil:l=!1,antialias:u=!1,samples:d=0,getFallback:f=null,colorBufferType:g=Qs,multiview:x=!1}=t;this.domElement=e.getDomElement(),this.backend=e,this.samples=d||u===!0?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=s,this.logarithmicDepthBuffer=i,this.outputColorSpace=zr,this.toneMapping=Nr,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=r,this.stencil=l,this.info=new fJ,this.overrideNodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new W3,this.lighting=new $3,this._getFallback=f,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new Un(0,0,this._width,this._height),this._scissor=new Un(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new Mp(new ys),this._quad.material.name="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const v=this.alpha===!0?0:1;this._clearColor=new lE(0,0,0,v),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._outputRenderTarget=null,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._colorBufferType=g,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:Tv},this.xr=new zte(this,x),this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(S,T,E)=>{await this.compileAsync(S,T);const A=this._renderLists.get(S,T),w=this._renderContexts.get(S,T,this._renderTarget),O=S.overrideMaterial||E.material,F=this._objects.get(E,O,S,T,A.lightsNode,w,w.clippingContext),{fragmentShader:B,vertexShader:k}=F.getNodeBuilderState();return{fragmentShader:B,vertexShader:k}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return this._initPromise!==null?this._initPromise:(this._initPromise=new Promise(async(e,t)=>{let i=this.backend;try{await i.init(this)}catch(s){if(this._getFallback!==null)try{this.backend=i=this._getFallback(s),await i.init(this)}catch(r){t(r);return}else{t(s);return}}this._nodes=new Fte(this,i),this._animation=new sJ(this._nodes,this.info),this._attributes=new hJ(i),this._background=new cte(this,this._nodes),this._geometries=new dJ(this._attributes,this.info),this._textures=new RJ(this,i,this.info),this._pipelines=new _J(i,this._nodes),this._bindings=new xJ(i,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new lJ(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new SJ(this.lighting),this._bundles=new Ote,this._renderContexts=new AJ,this._animation.start(),this._initialized=!0,e(this)}),this._initPromise)}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(e,t,i=null){if(this._isDeviceLost===!0)return;this._initialized===!1&&await this.init();const s=this._nodes.nodeFrame,r=s.renderId,l=this._currentRenderContext,u=this._currentRenderObjectFunction,d=this._compilationPromises,f=e.isScene===!0?e:mI;i===null&&(i=e);const g=this._renderTarget,x=this._renderContexts.get(i,t,g),v=this._activeMipmapLevel,S=[];this._currentRenderContext=x,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=S,s.renderId++,s.update(),x.depth=this.depth,x.stencil=this.stencil,x.clippingContext||(x.clippingContext=new bv),x.clippingContext.updateGlobal(f,t),f.onBeforeRender(this,e,t,g);const T=this._renderLists.get(e,t);if(T.begin(),this._projectObject(e,t,0,T,x.clippingContext),i!==e&&i.traverseVisible(function(F){F.isLight&&F.layers.test(t.layers)&&T.pushLight(F)}),T.finish(),g!==null){this._textures.updateRenderTarget(g,v);const F=this._textures.get(g);x.textures=F.textures,x.depthTexture=F.depthTexture}else x.textures=null,x.depthTexture=null;this._background.update(f,T,x);const E=T.opaque,A=T.transparent,w=T.transparentDoublePass,O=T.lightsNode;this.opaque===!0&&E.length>0&&this._renderObjects(E,t,f,O),this.transparent===!0&&A.length>0&&this._renderTransparents(A,w,t,f,O),s.renderId=r,this._currentRenderContext=l,this._currentRenderObjectFunction=u,this._compilationPromises=d,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(S)}async renderAsync(e,t){this._initialized===!1&&await this.init(),this._renderScene(e,t)}async waitForGPU(){await this.backend.waitForGPU()}set highPrecision(e){e===!0?(this.overrideNodes.modelViewMatrix=xM,this.overrideNodes.modelNormalViewMatrix=yM):this.highPrecision&&(this.overrideNodes.modelViewMatrix=null,this.overrideNodes.modelNormalViewMatrix=null)}get highPrecision(){return this.overrideNodes.modelViewMatrix===xM&&this.overrideNodes.modelNormalViewMatrix===yM}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}getColorBufferType(){return this._colorBufferType}_onDeviceLost(e){let t=`THREE.WebGPURenderer: ${e.api} Device Lost:

Message: ${e.message}`;e.reason&&(t+=`
Reason: ${e.reason}`),console.error(t),this._isDeviceLost=!0}_renderBundle(e,t,i){const{bundleGroup:s,camera:r,renderList:l}=e,u=this._currentRenderContext,d=this._bundles.get(s,r),f=this.backend.get(d);f.renderContexts===void 0&&(f.renderContexts=new Set);const g=s.version!==f.version,x=f.renderContexts.has(u)===!1||g;if(f.renderContexts.add(u),x){this.backend.beginBundle(u),(f.renderObjects===void 0||g)&&(f.renderObjects=[]),this._currentRenderBundle=d;const{transparentDoublePass:v,transparent:S,opaque:T}=l;this.opaque===!0&&T.length>0&&this._renderObjects(T,r,t,i),this.transparent===!0&&S.length>0&&this._renderTransparents(S,v,r,t,i),this._currentRenderBundle=null,this.backend.finishBundle(u,d),f.version=s.version}else{const{renderObjects:v}=f;for(let S=0,T=v.length;S<T;S++){const E=v[S];this._nodes.needsRefresh(E)&&(this._nodes.updateBefore(E),this._nodes.updateForRender(E),this._bindings.updateForRender(E),this._nodes.updateAfter(E))}}this.backend.addBundle(u,d)}render(e,t){if(this._initialized===!1)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(e,t);this._renderScene(e,t)}_getFrameBufferTarget(){const{currentToneMapping:e,currentColorSpace:t}=this,i=e!==Nr,s=t!==zn.workingColorSpace;if(i===!1&&s===!1)return null;const{width:r,height:l}=this.getDrawingBufferSize(Oy),{depth:u,stencil:d}=this;let f=this._frameBufferTarget;f===null&&(f=new $a(r,l,{depthBuffer:u,stencilBuffer:d,type:this._colorBufferType,format:es,colorSpace:zn.workingColorSpace,generateMipmaps:!1,minFilter:Ni,magFilter:Ni,samples:this.samples}),f.isPostProcessingRenderTarget=!0,this._frameBufferTarget=f);const g=this.getOutputRenderTarget();return f.depthBuffer=u,f.stencilBuffer=d,g!==null?f.setSize(g.width,g.height,g.depth):f.setSize(r,l,1),f.viewport.copy(this._viewport),f.scissor.copy(this._scissor),f.viewport.multiplyScalar(this._pixelRatio),f.scissor.multiplyScalar(this._pixelRatio),f.scissorTest=this._scissorTest,f.multiview=g!==null?g.multiview:!1,f.resolveDepthBuffer=g!==null?g.resolveDepthBuffer:!0,f._autoAllocateDepthBuffer=g!==null?g._autoAllocateDepthBuffer:!1,f}_renderScene(e,t,i=!0){if(this._isDeviceLost===!0)return;const s=i?this._getFrameBufferTarget():null,r=this._nodes.nodeFrame,l=r.renderId,u=this._currentRenderContext,d=this._currentRenderObjectFunction,f=e.isScene===!0?e:mI,g=this._renderTarget||this._outputRenderTarget,x=this._activeCubeFace,v=this._activeMipmapLevel;let S;s!==null?(S=s,this.setRenderTarget(S)):S=g;const T=this._renderContexts.get(e,t,S);this._currentRenderContext=T,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,r.renderId=this.info.calls;const E=this.coordinateSystem,A=this.xr;if(t.coordinateSystem!==E&&A.isPresenting===!1&&(t.coordinateSystem=E,t.updateProjectionMatrix(),t.isArrayCamera))for(const Ne of t.cameras)Ne.coordinateSystem=E,Ne.updateProjectionMatrix();e.matrixWorldAutoUpdate===!0&&e.updateMatrixWorld(),t.parent===null&&t.matrixWorldAutoUpdate===!0&&t.updateMatrixWorld(),A.enabled===!0&&A.isPresenting===!0&&(A.cameraAutoUpdate===!0&&A.updateCamera(t),t=A.getCamera());let w=this._viewport,O=this._scissor,F=this._pixelRatio;S!==null&&(w=S.viewport,O=S.scissor,F=1),this.getDrawingBufferSize(Oy),qT.set(0,0,Oy.width,Oy.height);const B=w.minDepth===void 0?0:w.minDepth,k=w.maxDepth===void 0?1:w.maxDepth;T.viewportValue.copy(w).multiplyScalar(F).floor(),T.viewportValue.width>>=v,T.viewportValue.height>>=v,T.viewportValue.minDepth=B,T.viewportValue.maxDepth=k,T.viewport=T.viewportValue.equals(qT)===!1,T.scissorValue.copy(O).multiplyScalar(F).floor(),T.scissor=this._scissorTest&&T.scissorValue.equals(qT)===!1,T.scissorValue.width>>=v,T.scissorValue.height>>=v,T.clippingContext||(T.clippingContext=new bv),T.clippingContext.updateGlobal(f,t),f.onBeforeRender(this,e,t,S);const Y=t.isArrayCamera?ZT:YT;t.isArrayCamera||(Vy.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),Y.setFromProjectionMatrix(Vy,t.coordinateSystem,t.reversedDepth));const $=this._renderLists.get(e,t);if($.begin(),this._projectObject(e,t,0,$,T.clippingContext),$.finish(),this.sortObjects===!0&&$.sort(this._opaqueSort,this._transparentSort),S!==null){this._textures.updateRenderTarget(S,v);const Ne=this._textures.get(S);T.textures=Ne.textures,T.depthTexture=Ne.depthTexture,T.width=Ne.width,T.height=Ne.height,T.renderTarget=S,T.depth=S.depthBuffer,T.stencil=S.stencilBuffer}else T.textures=null,T.depthTexture=null,T.width=this.domElement.width,T.height=this.domElement.height,T.depth=this.depth,T.stencil=this.stencil;T.width>>=v,T.height>>=v,T.activeCubeFace=x,T.activeMipmapLevel=v,T.occlusionQueryCount=$.occlusionQueryCount,this._background.update(f,$,T),T.camera=t,this.backend.beginRender(T);const{bundles:Q,lightsNode:z,transparentDoublePass:q,transparent:oe,opaque:Ce}=$;return Q.length>0&&this._renderBundles(Q,f,z),this.opaque===!0&&Ce.length>0&&this._renderObjects(Ce,t,f,z),this.transparent===!0&&oe.length>0&&this._renderTransparents(oe,q,t,f,z),this.backend.finishRender(T),r.renderId=l,this._currentRenderContext=u,this._currentRenderObjectFunction=d,s!==null&&(this.setRenderTarget(g,x,v),this._renderOutput(S)),f.onAfterRender(this,e,t,S),T}_setXRLayerSize(e,t){this._width=e,this._height=t,this.setViewport(0,0,e,t)}_renderOutput(e){const t=this._quad;this._nodes.hasOutputChange(e.texture)&&(t.material.fragmentNode=this._nodes.getOutputNode(e.texture),t.material.needsUpdate=!0);const i=this.autoClear,s=this.xr.enabled;this.autoClear=!1,this.xr.enabled=!1,this._renderScene(t,t.camera,!1),this.autoClear=i,this.xr.enabled=s}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(e){this._initialized===!1&&await this.init(),this._animation.setAnimationLoop(e)}async getArrayBufferAsync(e){return await this.backend.getArrayBufferAsync(e)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(e){return e.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(e){return e.set(this._width,this._height)}setPixelRatio(e=1){this._pixelRatio!==e&&(this._pixelRatio=e,this.setSize(this._width,this._height,!1))}setDrawingBufferSize(e,t,i){this.xr&&this.xr.isPresenting||(this._width=e,this._height=t,this._pixelRatio=i,this.domElement.width=Math.floor(e*i),this.domElement.height=Math.floor(t*i),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize())}setSize(e,t,i=!0){this.xr&&this.xr.isPresenting||(this._width=e,this._height=t,this.domElement.width=Math.floor(e*this._pixelRatio),this.domElement.height=Math.floor(t*this._pixelRatio),i===!0&&(this.domElement.style.width=e+"px",this.domElement.style.height=t+"px"),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize())}setOpaqueSort(e){this._opaqueSort=e}setTransparentSort(e){this._transparentSort=e}getScissor(e){const t=this._scissor;return e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e}setScissor(e,t,i,s){const r=this._scissor;e.isVector4?r.copy(e):r.set(e,t,i,s)}getScissorTest(){return this._scissorTest}setScissorTest(e){this._scissorTest=e,this.backend.setScissorTest(e)}getViewport(e){return e.copy(this._viewport)}setViewport(e,t,i,s,r=0,l=1){const u=this._viewport;e.isVector4?u.copy(e):u.set(e,t,i,s),u.minDepth=r,u.maxDepth=l}getClearColor(e){return e.copy(this._clearColor)}setClearColor(e,t=1){this._clearColor.set(e),this._clearColor.a=t}getClearAlpha(){return this._clearColor.a}setClearAlpha(e){this._clearColor.a=e}getClearDepth(){return this._clearDepth}setClearDepth(e){this._clearDepth=e}getClearStencil(){return this._clearStencil}setClearStencil(e){this._clearStencil=e}isOccluded(e){const t=this._currentRenderContext;return t&&this.backend.isOccluded(t,e)}clear(e=!0,t=!0,i=!0){if(this._initialized===!1)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(e,t,i);const s=this._renderTarget||this._getFrameBufferTarget();let r=null;if(s!==null){this._textures.updateRenderTarget(s);const l=this._textures.get(s);r=this._renderContexts.getForClear(s),r.textures=l.textures,r.depthTexture=l.depthTexture,r.width=l.width,r.height=l.height,r.renderTarget=s,r.depth=s.depthBuffer,r.stencil=s.stencilBuffer,r.clearColorValue=this.backend.getClearColor(),r.activeCubeFace=this.getActiveCubeFace(),r.activeMipmapLevel=this.getActiveMipmapLevel()}this.backend.clear(e,t,i,r),s!==null&&this._renderTarget===null&&this._renderOutput(s)}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(e=!0,t=!0,i=!0){this._initialized===!1&&await this.init(),this.clear(e,t,i)}async clearColorAsync(){this.clearAsync(!0,!1,!1)}async clearDepthAsync(){this.clearAsync(!1,!0,!1)}async clearStencilAsync(){this.clearAsync(!1,!1,!0)}get currentToneMapping(){return this.isOutputTarget?this.toneMapping:Nr}get currentColorSpace(){return this.isOutputTarget?this.outputColorSpace:zn.workingColorSpace}get isOutputTarget(){return this._renderTarget===this._outputRenderTarget||this._renderTarget===null}dispose(){this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),this._frameBufferTarget!==null&&this._frameBufferTarget.dispose(),Object.values(this.backend.timestampQueryPool).forEach(e=>{e!==null&&e.dispose()}),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(e,t=0,i=0){this._renderTarget=e,this._activeCubeFace=t,this._activeMipmapLevel=i}getRenderTarget(){return this._renderTarget}setOutputRenderTarget(e){this._outputRenderTarget=e}getOutputRenderTarget(){return this._outputRenderTarget}_resetXRState(){this.backend.setXRTarget(null),this.setOutputRenderTarget(null),this.setRenderTarget(null),this._frameBufferTarget.dispose(),this._frameBufferTarget=null}setRenderObjectFunction(e){this._renderObjectFunction=e}getRenderObjectFunction(){return this._renderObjectFunction}compute(e,t=null){if(this._isDeviceLost===!0)return;if(this._initialized===!1)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(e);const i=this._nodes.nodeFrame,s=i.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,i.renderId=this.info.calls;const r=this.backend,l=this._pipelines,u=this._bindings,d=this._nodes,f=Array.isArray(e)?e:[e];if(f[0]===void 0||f[0].isComputeNode!==!0)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");r.beginCompute(e);for(const g of f){if(l.has(g)===!1){const S=()=>{g.removeEventListener("dispose",S),l.delete(g),u.delete(g),d.delete(g)};g.addEventListener("dispose",S);const T=g.onInitFunction;T!==null&&T.call(g,{renderer:this})}d.updateForCompute(g),u.updateForCompute(g);const x=u.getForCompute(g),v=l.getForCompute(g,x);r.compute(e,g,x,v,t)}r.finishCompute(e),i.renderId=s}async computeAsync(e,t=null){this._initialized===!1&&await this.init(),this.compute(e,t)}async hasFeatureAsync(e){return this._initialized===!1&&await this.init(),this.backend.hasFeature(e)}async resolveTimestampsAsync(e="render"){return this._initialized===!1&&await this.init(),this.backend.resolveTimestampsAsync(e)}hasFeature(e){return this._initialized===!1?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(e)}hasInitialized(){return this._initialized}async initTextureAsync(e){this._initialized===!1&&await this.init(),this._textures.updateTexture(e)}initTexture(e){this._initialized===!1&&console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead."),this._textures.updateTexture(e)}copyFramebufferToTexture(e,t=null){if(t!==null)if(t.isVector2)t=Uc.set(t.x,t.y,e.image.width,e.image.height).floor();else if(t.isVector4)t=Uc.copy(t).floor();else{console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");return}else t=Uc.set(0,0,e.image.width,e.image.height);let i=this._currentRenderContext,s;i!==null?s=i.renderTarget:(s=this._renderTarget||this._getFrameBufferTarget(),s!==null&&(this._textures.updateRenderTarget(s),i=this._textures.get(s))),this._textures.updateTexture(e,{renderTarget:s}),this.backend.copyFramebufferToTexture(e,i,t)}copyTextureToTexture(e,t,i=null,s=null,r=0,l=0){this._textures.updateTexture(e),this._textures.updateTexture(t),this.backend.copyTextureToTexture(e,t,i,s,r,l)}async readRenderTargetPixelsAsync(e,t,i,s,r,l=0,u=0){return this.backend.copyTextureToBuffer(e.textures[l],t,i,s,r,u)}_projectObject(e,t,i,s,r){if(e.visible===!1)return;if(e.layers.test(t.layers)){if(e.isGroup)i=e.renderOrder,e.isClippingGroup&&e.enabled&&(r=r.getGroupContext(e));else if(e.isLOD)e.autoUpdate===!0&&e.update(t);else if(e.isLight)s.pushLight(e);else if(e.isSprite){const d=t.isArrayCamera?ZT:YT;if(!e.frustumCulled||d.intersectsSprite(e,t)){this.sortObjects===!0&&Uc.setFromMatrixPosition(e.matrixWorld).applyMatrix4(Vy);const{geometry:f,material:g}=e;g.visible&&s.push(e,f,g,i,Uc.z,null,r)}}else if(e.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if(e.isMesh||e.isLine||e.isPoints){const d=t.isArrayCamera?ZT:YT;if(!e.frustumCulled||d.intersectsObject(e,t)){const{geometry:f,material:g}=e;if(this.sortObjects===!0&&(f.boundingSphere===null&&f.computeBoundingSphere(),Uc.copy(f.boundingSphere.center).applyMatrix4(e.matrixWorld).applyMatrix4(Vy)),Array.isArray(g)){const x=f.groups;for(let v=0,S=x.length;v<S;v++){const T=x[v],E=g[T.materialIndex];E&&E.visible&&s.push(e,f,E,i,Uc.z,T,r)}}else g.visible&&s.push(e,f,g,i,Uc.z,null,r)}}}if(e.isBundleGroup===!0&&this.backend.beginBundle!==void 0){const d=s;s=this._renderLists.get(e,t),s.begin(),d.pushBundle({bundleGroup:e,camera:t,renderList:s}),s.finish()}const u=e.children;for(let d=0,f=u.length;d<f;d++)this._projectObject(u[d],t,i,s,r)}_renderBundles(e,t,i){for(const s of e)this._renderBundle(s,t,i)}_renderTransparents(e,t,i,s,r){if(t.length>0){for(const{material:l}of t)l.side=ns;this._renderObjects(t,i,s,r,"backSide");for(const{material:l}of t)l.side=ao;this._renderObjects(e,i,s,r);for(const{material:l}of t)l.side=_r}else this._renderObjects(e,i,s,r)}_renderObjects(e,t,i,s,r=null){for(let l=0,u=e.length;l<u;l++){const{object:d,geometry:f,material:g,group:x,clippingContext:v}=e[l];this._currentRenderObjectFunction(d,i,t,f,g,x,s,v,r)}}renderObject(e,t,i,s,r,l,u,d=null,f=null){let g,x,v;if(e.onBeforeRender(this,t,i,s,r,l),r.allowOverride===!0&&t.overrideMaterial!==null){const S=t.overrideMaterial;r.positionNode&&r.positionNode.isNode&&(g=S.positionNode,S.positionNode=r.positionNode),S.alphaTest=r.alphaTest,S.alphaMap=r.alphaMap,S.transparent=r.transparent||r.transmission>0,S.isShadowPassMaterial&&(S.side=r.shadowSide===null?r.side:r.shadowSide,r.depthNode&&r.depthNode.isNode&&(v=S.depthNode,S.depthNode=r.depthNode),r.castShadowNode&&r.castShadowNode.isNode&&(x=S.colorNode,S.colorNode=r.castShadowNode),r.castShadowPositionNode&&r.castShadowPositionNode.isNode&&(g=S.positionNode,S.positionNode=r.castShadowPositionNode)),r=S}r.transparent===!0&&r.side===_r&&r.forceSinglePass===!1?(r.side=ns,this._handleObjectFunction(e,r,t,i,u,l,d,"backSide"),r.side=ao,this._handleObjectFunction(e,r,t,i,u,l,d,f),r.side=_r):this._handleObjectFunction(e,r,t,i,u,l,d,f),g!==void 0&&(t.overrideMaterial.positionNode=g),v!==void 0&&(t.overrideMaterial.depthNode=v),x!==void 0&&(t.overrideMaterial.colorNode=x),e.onAfterRender(this,t,i,s,r,l)}_renderObjectDirect(e,t,i,s,r,l,u,d){const f=this._objects.get(e,t,i,s,r,this._currentRenderContext,u,d);f.drawRange=e.geometry.drawRange,f.group=l;const g=this._nodes.needsRefresh(f);g&&(this._nodes.updateBefore(f),this._geometries.updateForRender(f),this._nodes.updateForRender(f),this._bindings.updateForRender(f)),this._pipelines.updateForRender(f),this._currentRenderBundle!==null&&(this.backend.get(this._currentRenderBundle).renderObjects.push(f),f.bundle=this._currentRenderBundle.bundleGroup),this.backend.draw(f,this.info),g&&this._nodes.updateAfter(f)}_createObjectPipeline(e,t,i,s,r,l,u,d){const f=this._objects.get(e,t,i,s,r,this._currentRenderContext,u,d);f.drawRange=e.geometry.drawRange,f.group=l,this._nodes.updateBefore(f),this._geometries.updateForRender(f),this._nodes.updateForRender(f),this._bindings.updateForRender(f),this._pipelines.getForRender(f,this._compilationPromises),this._nodes.updateAfter(f)}get compile(){return this.compileAsync}}class X3{constructor(e=""){this.name=e,this.visibility=0}setVisibility(e){this.visibility|=e}clone(){return Object.assign(new this.constructor,this)}}function Zte(a){return a+(Vc-a%Vc)%Vc}class q3 extends X3{constructor(e,t=null){super(e),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=t}get byteLength(){return Zte(this._buffer.byteLength)}get buffer(){return this._buffer}update(){return!0}}class Y3 extends q3{constructor(e,t=null){super(e,t),this.isUniformBuffer=!0}}let Kte=0;class Z3 extends Y3{constructor(e,t){super("UniformBuffer_"+Kte++,e?e.value:null),this.nodeUniform=e,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class Jte extends Y3{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return t!==-1&&this.uniforms.splice(t,1),this}get values(){return this._values===null&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(e===null){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){const e=this.bytesPerElement;let t=0;for(let i=0,s=this.uniforms.length;i<s;i++){const r=this.uniforms[i],l=r.boundary,u=r.itemSize*e,d=t%Vc,f=d%l,g=d+f;t+=f,g!==0&&Vc-g<u&&(t+=Vc-g),r.offset=t/e,t+=u}return Math.ceil(t/Vc)*Vc}update(){let e=!1;for(const t of this.uniforms)this.updateByType(t)===!0&&(e=!0);return e}updateByType(e){if(e.isNumberUniform)return this.updateNumber(e);if(e.isVector2Uniform)return this.updateVector2(e);if(e.isVector3Uniform)return this.updateVector3(e);if(e.isVector4Uniform)return this.updateVector4(e);if(e.isColorUniform)return this.updateColor(e);if(e.isMatrix3Uniform)return this.updateMatrix3(e);if(e.isMatrix4Uniform)return this.updateMatrix4(e);console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let t=!1;const i=this.values,s=e.getValue(),r=e.offset,l=e.getType();if(i[r]!==s){const u=this._getBufferForType(l);u[r]=i[r]=s,t=!0}return t}updateVector2(e){let t=!1;const i=this.values,s=e.getValue(),r=e.offset,l=e.getType();if(i[r+0]!==s.x||i[r+1]!==s.y){const u=this._getBufferForType(l);u[r+0]=i[r+0]=s.x,u[r+1]=i[r+1]=s.y,t=!0}return t}updateVector3(e){let t=!1;const i=this.values,s=e.getValue(),r=e.offset,l=e.getType();if(i[r+0]!==s.x||i[r+1]!==s.y||i[r+2]!==s.z){const u=this._getBufferForType(l);u[r+0]=i[r+0]=s.x,u[r+1]=i[r+1]=s.y,u[r+2]=i[r+2]=s.z,t=!0}return t}updateVector4(e){let t=!1;const i=this.values,s=e.getValue(),r=e.offset,l=e.getType();if(i[r+0]!==s.x||i[r+1]!==s.y||i[r+2]!==s.z||i[r+4]!==s.w){const u=this._getBufferForType(l);u[r+0]=i[r+0]=s.x,u[r+1]=i[r+1]=s.y,u[r+2]=i[r+2]=s.z,u[r+3]=i[r+3]=s.w,t=!0}return t}updateColor(e){let t=!1;const i=this.values,s=e.getValue(),r=e.offset;if(i[r+0]!==s.r||i[r+1]!==s.g||i[r+2]!==s.b){const l=this.buffer;l[r+0]=i[r+0]=s.r,l[r+1]=i[r+1]=s.g,l[r+2]=i[r+2]=s.b,t=!0}return t}updateMatrix3(e){let t=!1;const i=this.values,s=e.getValue().elements,r=e.offset;if(i[r+0]!==s[0]||i[r+1]!==s[1]||i[r+2]!==s[2]||i[r+4]!==s[3]||i[r+5]!==s[4]||i[r+6]!==s[5]||i[r+8]!==s[6]||i[r+9]!==s[7]||i[r+10]!==s[8]){const l=this.buffer;l[r+0]=i[r+0]=s[0],l[r+1]=i[r+1]=s[1],l[r+2]=i[r+2]=s[2],l[r+4]=i[r+4]=s[3],l[r+5]=i[r+5]=s[4],l[r+6]=i[r+6]=s[5],l[r+8]=i[r+8]=s[6],l[r+9]=i[r+9]=s[7],l[r+10]=i[r+10]=s[8],t=!0}return t}updateMatrix4(e){let t=!1;const i=this.values,s=e.getValue().elements,r=e.offset;return Qte(i,s,r)===!1&&(this.buffer.set(s,r),jte(i,s,r),t=!0),t}_getBufferForType(e){return e==="int"||e==="ivec2"||e==="ivec3"||e==="ivec4"?new Int32Array(this.buffer.buffer):e==="uint"||e==="uvec2"||e==="uvec3"||e==="uvec4"?new Uint32Array(this.buffer.buffer):this.buffer}}function jte(a,e,t){for(let i=0,s=e.length;i<s;i++)a[t+i]=e[i]}function Qte(a,e,t){for(let i=0,s=e.length;i<s;i++)if(a[t+i]!==e[i])return!1;return!0}let ene=0;class K3 extends Jte{constructor(e,t){super(e),this.id=ene++,this.groupNode=t,this.isNodeUniformsGroup=!0}}class J3 extends X3{constructor(e,t){super(e),this._onDisposeTexture=()=>{this.texture=null},this.texture=t,this.version=t?t.version:0,this.generation=null,this.isSampler=!0}set texture(e){this._texture!==e&&(this._texture&&this._texture.removeEventListener("dispose",this._onDisposeTexture),this._texture=e,this.generation=null,this.version=0,this._texture&&this._texture.addEventListener("dispose",this._onDisposeTexture))}get texture(){return this._texture}update(){const{texture:e,version:t}=this;return t!==e.version?(this.version=e.version,!0):!1}}let tne=0;class nne extends J3{constructor(e,t){super(e,t),this.id=tne++,this.store=!1,this.isSampledTexture=!0}}class J0 extends nne{constructor(e,t,i,s=null){super(e,t?t.value:null),this.textureNode=t,this.groupNode=i,this.access=s}update(){const{textureNode:e}=this;return this.texture!==e.value?(this.texture=e.value,!0):super.update()}}class j3 extends J0{constructor(e,t,i,s=null){super(e,t,i,s),this.isSampledCubeTexture=!0}}class UM extends J0{constructor(e,t,i,s=null){super(e,t,i,s),this.isSampledTexture3D=!0}}const ine={textureDimensions:"textureSize",equals:"equal"},sne={low:"lowp",medium:"mediump",high:"highp"},gI={swizzleAssign:!0,storageBuffer:!1},_I={perspective:"smooth",linear:"noperspective"},xI={centroid:"centroid"},yI=`
precision highp float;
precision highp int;
precision highp sampler2D;
precision highp sampler3D;
precision highp samplerCube;
precision highp sampler2DArray;

precision highp usampler2D;
precision highp usampler3D;
precision highp usamplerCube;
precision highp usampler2DArray;

precision highp isampler2D;
precision highp isampler3D;
precision highp isamplerCube;
precision highp isampler2DArray;

precision lowp sampler2DShadow;
precision lowp sampler2DArrayShadow;
precision lowp samplerCubeShadow;
`;class rne extends RE{constructor(e,t){super(e,t,new H3),this.uniformGroups={},this.transforms=[],this.extensions={},this.builtins={vertex:[],fragment:[],compute:[]}}needsToWorkingColorSpace(e){return e.isVideoTexture===!0&&e.colorSpace!==no}getMethod(e){return ine[e]||e}getOutputStructName(){return""}buildFunctionCode(e){const t=e.layout,i=this.flowShaderNode(e),s=[];for(const l of t.inputs)s.push(this.getType(l.type)+" "+l.name);return`${this.getType(t.type)} ${t.name}( ${s.join(", ")} ) {

	${i.vars}

${i.code}
	return ${i.result};

}`}setupPBO(e){const t=e.value;if(t.pbo===void 0){const i=t.array,s=t.count*t.itemSize,{itemSize:r}=t,l=t.array.constructor.name.toLowerCase().includes("int");let u=l?eu:nd;r===2?u=l?id:ul:r===3?u=l?GI:mp:r===4&&(u=l?sd:es);const d={Float32Array:os,Uint8Array:Ts,Uint16Array:ua,Uint32Array:rs,Int8Array:Wc,Int16Array:$c,Int32Array:or,Uint8ClampedArray:Ts},f=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(s/r))));let g=Math.ceil(s/r/f);f*g*r<s&&g++;const x=f*g*r,v=new i.constructor(x);v.set(i,0),t.array=v;const S=new Oa(t.array,f,g,u,d[t.array.constructor.name]||os);S.needsUpdate=!0,S.isPBOTexture=!0;const T=new Ga(S,null,null);T.setPrecision("high"),t.pboNode=T,t.pbo=T.value,this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.nodeName)}}getPropertyName(e,t=this.shaderStage){return e.isNodeUniform&&e.node.isTextureNode!==!0&&e.node.isBufferNode!==!0?t.charAt(0)+"_"+e.name:super.getPropertyName(e,t)}generatePBO(e){const{node:t,indexNode:i}=e,s=t.value;if(this.renderer.backend.has(s)){const g=this.renderer.backend.get(s);g.pbo=s.pbo}const r=this.getUniformFromNode(s.pboNode,"texture",this.shaderStage,this.context.nodeName),l=this.getPropertyName(r);this.increaseUsage(i);const u=i.build(this,"uint"),d=this.getDataFromNode(e);let f=d.propertyName;if(f===void 0){const g=this.getVarFromNode(e);f=this.getPropertyName(g);const x=this.getDataFromNode(t);let v=x.propertySizeName;v===void 0&&(v=f+"Size",this.getVarFromNode(t,v,"uint"),this.addLineFlowCode(`${v} = uint( textureSize( ${l}, 0 ).x )`,e),x.propertySizeName=v);const{itemSize:S}=s,T="."+ou.join("").slice(0,S),E=`ivec2(${u} % ${v}, ${u} / ${v})`,A=this.generateTextureLoad(null,l,E,null,"0");let w="vec4";s.pbo.type===rs?w="uvec4":s.pbo.type===or&&(w="ivec4"),this.addLineFlowCode(`${f} = ${w}(${A})${T}`,e),d.propertyName=f}return f}generateTextureLoad(e,t,i,s,r="0"){return s?`texelFetch( ${t}, ivec3( ${i}, ${s} ), ${r} )`:`texelFetch( ${t}, ${i}, ${r} )`}generateTexture(e,t,i,s){return e.isDepthTexture?(s&&(i=`vec4( ${i}, ${s} )`),`texture( ${t}, ${i} ).x`):(s&&(i=`vec3( ${i}, ${s} )`),`texture( ${t}, ${i} )`)}generateTextureLevel(e,t,i,s){return`textureLod( ${t}, ${i}, ${s} )`}generateTextureBias(e,t,i,s){return`texture( ${t}, ${i}, ${s} )`}generateTextureGrad(e,t,i,s){return`textureGrad( ${t}, ${i}, ${s[0]}, ${s[1]} )`}generateTextureCompare(e,t,i,s,r,l=this.shaderStage){if(l==="fragment")return r?`texture( ${t}, vec4( ${i}, ${r}, ${s} ) )`:`texture( ${t}, vec3( ${i}, ${s} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${l} shader.`)}getVars(e){const t=[],i=this.vars[e];if(i!==void 0)for(const s of i)t.push(`${this.getVar(s.type,s.name,s.count)};`);return t.join(`
	`)}getUniforms(e){const t=this.uniforms[e],i=[],s={};for(const l of t){let u=null,d=!1;if(l.type==="texture"||l.type==="texture3D"){const g=l.node.value;let x="";(g.isDataTexture===!0||g.isData3DTexture===!0)&&(g.type===rs?x="u":g.type===or&&(x="i")),l.type==="texture3D"&&g.isArrayTexture===!1?u=`${x}sampler3D ${l.name};`:g.compareFunction?g.isArrayTexture===!0?u=`sampler2DArrayShadow ${l.name};`:u=`sampler2DShadow ${l.name};`:g.isArrayTexture===!0||g.isDataArrayTexture===!0||g.isCompressedArrayTexture===!0?u=`${x}sampler2DArray ${l.name};`:u=`${x}sampler2D ${l.name};`}else if(l.type==="cubeTexture")u=`samplerCube ${l.name};`;else if(l.type==="buffer"){const g=l.node,x=this.getType(g.bufferType),v=g.bufferCount,S=v>0?v:"";u=`${g.name} {
	${x} ${l.name}[${S}];
};
`}else u=`${this.getVectorType(l.type)} ${this.getPropertyName(l,e)};`,d=!0;const f=l.node.precision;if(f!==null&&(u=sne[f]+" "+u),d){u="	"+u;const g=l.groupNode.name;(s[g]||(s[g]=[])).push(u)}else u="uniform "+u,i.push(u)}let r="";for(const l in s){const u=s[l];r+=this._getGLSLUniformStruct(e+"_"+l,u.join(`
`))+`
`}return r+=i.join(`
`),r}getTypeFromAttribute(e){let t=super.getTypeFromAttribute(e);if(/^[iu]/.test(t)&&e.gpuType!==or){let i=e;e.isInterleavedBufferAttribute&&(i=e.data);const s=i.array;s instanceof Uint32Array||s instanceof Int32Array||(t=t.slice(1))}return t}getAttributes(e){let t="";if(e==="vertex"||e==="compute"){const i=this.getAttributesArray();let s=0;for(const r of i)t+=`layout( location = ${s++} ) in ${r.type} ${r.name};
`}return t}getStructMembers(e){const t=[];for(const i of e.members)t.push(`	${i.type} ${i.name};`);return t.join(`
`)}getStructs(e){const t=[],i=this.structs[e],s=[];for(const r of i)if(r.output)for(const l of r.members)s.push(`layout( location = ${l.index} ) out ${l.type} ${l.name};`);else{let l="struct "+r.name+` {
`;l+=this.getStructMembers(r),l+=`
};
`,t.push(l)}return s.length===0&&s.push("layout( location = 0 ) out vec4 fragColor;"),`
`+s.join(`
`)+`

`+t.join(`
`)}getVaryings(e){let t="";const i=this.varyings;if(e==="vertex"||e==="compute")for(const s of i){e==="compute"&&(s.needsInterpolation=!0);const r=this.getType(s.type);if(s.needsInterpolation)if(s.interpolationType){const l=_I[s.interpolationType]||s.interpolationType,u=xI[s.interpolationSampling]||"";t+=`${l} ${u} out ${r} ${s.name};
`}else{const l=r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":"";t+=`${l}out ${r} ${s.name};
`}else t+=`${r} ${s.name};
`}else if(e==="fragment"){for(const s of i)if(s.needsInterpolation){const r=this.getType(s.type);if(s.interpolationType){const l=_I[s.interpolationType]||s.interpolationType,u=xI[s.interpolationSampling]||"";t+=`${l} ${u} in ${r} ${s.name};
`}else{const l=r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":"";t+=`${l}in ${r} ${s.name};
`}}}for(const s of this.builtins[e])t+=`${s};
`;return t}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce((i,s)=>i*s,1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(e,t,i=this.shaderStage){const s=this.extensions[i]||(this.extensions[i]=new Map);s.has(e)===!1&&s.set(e,{name:e,behavior:t})}getExtensions(e){const t=[];if(e==="vertex"){const s=this.renderer.backend.extensions;this.object.isBatchedMesh&&s.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",e)}const i=this.extensions[e];if(i!==void 0)for(const{name:s,behavior:r}of i.values())t.push(`#extension ${s} : ${r}`);return t.join(`
`)}getClipDistance(){return"gl_ClipDistance"}isAvailable(e){let t=gI[e];if(t===void 0){let i;switch(t=!1,e){case"float32Filterable":i="OES_texture_float_linear";break;case"clipDistance":i="WEBGL_clip_cull_distance";break}if(i!==void 0){const s=this.renderer.backend.extensions;s.has(i)&&(s.get(i),t=!0)}gI[e]=t}return t}isFlipY(){return!0}enableHardwareClipping(e){this.enableExtension("GL_ANGLE_clip_cull_distance","require"),this.builtins.vertex.push(`out float gl_ClipDistance[ ${e} ]`)}enableMultiview(){this.enableExtension("GL_OVR_multiview2","require","fragment"),this.enableExtension("GL_OVR_multiview2","require","vertex"),this.builtins.vertex.push("layout(num_views = 2) in")}registerTransform(e,t){this.transforms.push({varyingName:e,attributeNode:t})}getTransforms(){const e=this.transforms;let t="";for(let i=0;i<e.length;i++){const s=e[i],r=this.getPropertyName(s.attributeNode);r&&(t+=`${s.varyingName} = ${r};
	`)}return t}_getGLSLUniformStruct(e,t){return`
layout( std140 ) uniform ${e} {
${t}
};`}_getGLSLVertexCode(e){return`#version 300 es

${this.getSignature()}

// extensions
${e.extensions}

// precision
${yI}

// uniforms
${e.uniforms}

// varyings
${e.varyings}

// attributes
${e.attributes}

// codes
${e.codes}

void main() {

	// vars
	${e.vars}

	// transforms
	${e.transforms}

	// flow
	${e.flow}

	gl_PointSize = 1.0;

}
`}_getGLSLFragmentCode(e){return`#version 300 es

${this.getSignature()}

// extensions
${e.extensions}

// precision
${yI}

// uniforms
${e.uniforms}

// varyings
${e.varyings}

// codes
${e.codes}

// structs
${e.structs}

void main() {

	// vars
	${e.vars}

	// flow
	${e.flow}

}
`}buildCode(){const e=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){let i=`// code

`;i+=this.flowCode[t];const s=this.flowNodes[t],r=s[s.length-1];for(const u of s){const d=this.getFlowData(u),f=u.name;f&&(i.length>0&&(i+=`
`),i+=`	// flow -> ${f}
	`),i+=`${d.code}
	`,u===r&&t!=="compute"&&(i+=`// result
	`,t==="vertex"?(i+="gl_Position = ",i+=`${d.result};`):t==="fragment"&&(u.outputNode.isOutputStructNode||(i+="fragColor = ",i+=`${d.result};`)))}const l=e[t];l.extensions=this.getExtensions(t),l.uniforms=this.getUniforms(t),l.attributes=this.getAttributes(t),l.varyings=this.getVaryings(t),l.vars=this.getVars(t),l.structs=this.getStructs(t),l.codes=this.getCodes(t),l.transforms=this.getTransforms(t),l.flow=i}this.material!==null?(this.vertexShader=this._getGLSLVertexCode(e.vertex),this.fragmentShader=this._getGLSLFragmentCode(e.fragment)):this.computeShader=this._getGLSLVertexCode(e.compute)}getUniformFromNode(e,t,i,s=null){const r=super.getUniformFromNode(e,t,i,s),l=this.getDataFromNode(e,i,this.globalCache);let u=l.uniformGPU;if(u===void 0){const d=e.groupNode,f=d.name,g=this.getBindGroupArray(f,i);if(t==="texture")u=new J0(r.name,r.node,d),g.push(u);else if(t==="cubeTexture")u=new j3(r.name,r.node,d),g.push(u);else if(t==="texture3D")u=new UM(r.name,r.node,d),g.push(u);else if(t==="buffer"){e.name=`NodeBuffer_${e.id}`,r.name=`buffer${e.id}`;const x=new Z3(e,d);x.name=e.name,g.push(x),u=x}else{const x=this.uniformGroups[i]||(this.uniformGroups[i]={});let v=x[f];v===void 0&&(v=new K3(i+"_"+f,d),x[f]=v,g.push(v)),u=this.getNodeUniform(r,t),v.addUniform(u)}l.uniformGPU=u}return r}}let KT=null,wf=null;class Q3{constructor(e={}){this.parameters=Object.assign({},e),this.data=new WeakMap,this.renderer=null,this.domElement=null,this.timestampQueryPool={render:null,compute:null},this.trackTimestamp=e.trackTimestamp===!0}async init(e){this.renderer=e}get coordinateSystem(){}beginRender(){}finishRender(){}beginCompute(){}finishCompute(){}draw(){}compute(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}updateBinding(){}createRenderPipeline(){}createComputePipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}destroySampler(){}createDefaultTexture(){}createTexture(){}updateTexture(){}generateMipmaps(){}destroyTexture(){}async copyTextureToBuffer(){}copyTextureToTexture(){}copyFramebufferToTexture(){}createAttribute(){}createIndexAttribute(){}createStorageAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}updateViewport(){}isOccluded(){}async resolveTimestampsAsync(e="render"){if(!this.trackTimestamp){Eo("WebGPURenderer: Timestamp tracking is disabled.");return}const t=this.timestampQueryPool[e];if(!t){Eo(`WebGPURenderer: No timestamp query pool for type '${e}' found.`);return}const i=await t.resolveQueriesAsync();return this.renderer.info[e].timestamp=i,i}async waitForGPU(){}async getArrayBufferAsync(){}async hasFeatureAsync(){}hasFeature(){}getMaxAnisotropy(){}getDrawingBufferSize(){return KT=KT||new it,this.renderer.getDrawingBufferSize(KT)}setScissorTest(){}getClearColor(){const e=this.renderer;return wf=wf||new lE,e.getClearColor(wf),wf.getRGB(wf),wf}getDomElement(){let e=this.domElement;return e===null&&(e=this.parameters.canvas!==void 0?this.parameters.canvas:tw(),"setAttribute"in e&&e.setAttribute("data-engine",`three.js r${fp} webgpu`),this.domElement=e),e}set(e,t){this.data.set(e,t)}get(e){let t=this.data.get(e);return t===void 0&&(t={},this.data.set(e,t)),t}has(e){return this.data.has(e)}delete(e){this.data.delete(e)}dispose(){}}let one=0;class ane{constructor(e,t){this.buffers=[e.bufferGPU,t],this.type=e.type,this.bufferType=e.bufferType,this.pbo=e.pbo,this.byteLength=e.byteLength,this.bytesPerElement=e.BYTES_PER_ELEMENT,this.version=e.version,this.isInteger=e.isInteger,this.activeBufferIndex=0,this.baseId=e.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[this.activeBufferIndex^1]}switchBuffers(){this.activeBufferIndex^=1}}class lne{constructor(e){this.backend=e}createAttribute(e,t){const i=this.backend,{gl:s}=i,r=e.array,l=e.usage||s.STATIC_DRAW,u=e.isInterleavedBufferAttribute?e.data:e,d=i.get(u);let f=d.bufferGPU;f===void 0&&(f=this._createBuffer(s,t,r,l),d.bufferGPU=f,d.bufferType=t,d.version=u.version);let g;if(r instanceof Float32Array)g=s.FLOAT;else if(typeof Float16Array<"u"&&r instanceof Float16Array)g=s.HALF_FLOAT;else if(r instanceof Uint16Array)e.isFloat16BufferAttribute?g=s.HALF_FLOAT:g=s.UNSIGNED_SHORT;else if(r instanceof Int16Array)g=s.SHORT;else if(r instanceof Uint32Array)g=s.UNSIGNED_INT;else if(r instanceof Int32Array)g=s.INT;else if(r instanceof Int8Array)g=s.BYTE;else if(r instanceof Uint8Array)g=s.UNSIGNED_BYTE;else if(r instanceof Uint8ClampedArray)g=s.UNSIGNED_BYTE;else throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+r);let x={bufferGPU:f,bufferType:t,type:g,byteLength:r.byteLength,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version,pbo:e.pbo,isInteger:g===s.INT||g===s.UNSIGNED_INT||e.gpuType===or,id:one++};if(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute){const v=this._createBuffer(s,t,r,l);x=new ane(x,v)}i.set(e,x)}updateAttribute(e){const t=this.backend,{gl:i}=t,s=e.array,r=e.isInterleavedBufferAttribute?e.data:e,l=t.get(r),u=l.bufferType,d=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(i.bindBuffer(u,l.bufferGPU),d.length===0)i.bufferSubData(u,0,s);else{for(let f=0,g=d.length;f<g;f++){const x=d[f];i.bufferSubData(u,x.start*s.BYTES_PER_ELEMENT,s,x.start,x.count)}r.clearUpdateRanges()}i.bindBuffer(u,null),l.version=r.version}destroyAttribute(e){const t=this.backend,{gl:i}=t;e.isInterleavedBufferAttribute&&t.delete(e.data);const s=t.get(e);i.deleteBuffer(s.bufferGPU),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,{gl:i}=t,s=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:r}=t.get(s),l=e.array,u=l.byteLength;i.bindBuffer(i.COPY_READ_BUFFER,r);const d=i.createBuffer();i.bindBuffer(i.COPY_WRITE_BUFFER,d),i.bufferData(i.COPY_WRITE_BUFFER,u,i.STREAM_READ),i.copyBufferSubData(i.COPY_READ_BUFFER,i.COPY_WRITE_BUFFER,0,0,u),await t.utils._clientWaitAsync();const f=new e.array.constructor(l.length);return i.bindBuffer(i.COPY_WRITE_BUFFER,d),i.getBufferSubData(i.COPY_WRITE_BUFFER,0,f),i.deleteBuffer(d),i.bindBuffer(i.COPY_READ_BUFFER,null),i.bindBuffer(i.COPY_WRITE_BUFFER,null),f.buffer}_createBuffer(e,t,i,s){const r=e.createBuffer();return e.bindBuffer(t,r),e.bufferData(t,i,s),e.bindBuffer(t,null),r}}let JT,Bm;class cne{constructor(e){this.backend=e,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentClippingPlanes=0,this.currentVAO=null,this.currentIndex=null,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},this._init()}_init(){const e=this.gl;JT={[Rr]:e.FUNC_ADD,[Mv]:e.FUNC_SUBTRACT,[wv]:e.FUNC_REVERSE_SUBTRACT},Bm={[ol]:e.ZERO,[Av]:e.ONE,[Ev]:e.SRC_COLOR,[kf]:e.SRC_ALPHA,[Lv]:e.SRC_ALPHA_SATURATE,[Pv]:e.DST_COLOR,[Cv]:e.DST_ALPHA,[Rv]:e.ONE_MINUS_SRC_COLOR,[Gf]:e.ONE_MINUS_SRC_ALPHA,[Iv]:e.ONE_MINUS_DST_COLOR,[Nv]:e.ONE_MINUS_DST_ALPHA};const t=e.getParameter(e.SCISSOR_BOX),i=e.getParameter(e.VIEWPORT);this.currentScissor=new Un().fromArray(t),this.currentViewport=new Un().fromArray(i),this._tempVec4=new Un}enable(e){const{enabled:t}=this;t[e]!==!0&&(this.gl.enable(e),t[e]=!0)}disable(e){const{enabled:t}=this;t[e]!==!1&&(this.gl.disable(e),t[e]=!1)}setFlipSided(e){if(this.currentFlipSided!==e){const{gl:t}=this;e?t.frontFace(t.CW):t.frontFace(t.CCW),this.currentFlipSided=e}}setCullFace(e){const{gl:t}=this;e!==OM?(this.enable(t.CULL_FACE),e!==this.currentCullFace&&(e===Qy?t.cullFace(t.BACK):e===VM?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):this.disable(t.CULL_FACE),this.currentCullFace=e}setLineWidth(e){const{currentLineWidth:t,gl:i}=this;e!==t&&(i.lineWidth(e),this.currentLineWidth=e)}setBlending(e,t,i,s,r,l,u,d){const{gl:f}=this;if(e===kr){this.currentBlendingEnabled===!0&&(this.disable(f.BLEND),this.currentBlendingEnabled=!1);return}if(this.currentBlendingEnabled===!1&&(this.enable(f.BLEND),this.currentBlendingEnabled=!0),e!==Mh){if(e!==this.currentBlending||d!==this.currentPremultipledAlpha){if((this.currentBlendEquation!==Rr||this.currentBlendEquationAlpha!==Rr)&&(f.blendEquation(f.FUNC_ADD),this.currentBlendEquation=Rr,this.currentBlendEquationAlpha=Rr),d)switch(e){case To:f.blendFuncSeparate(f.ONE,f.ONE_MINUS_SRC_ALPHA,f.ONE,f.ONE_MINUS_SRC_ALPHA);break;case Ih:f.blendFunc(f.ONE,f.ONE);break;case Lh:f.blendFuncSeparate(f.ZERO,f.ONE_MINUS_SRC_COLOR,f.ZERO,f.ONE);break;case Dh:f.blendFuncSeparate(f.DST_COLOR,f.ONE_MINUS_SRC_ALPHA,f.ZERO,f.ONE);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}else switch(e){case To:f.blendFuncSeparate(f.SRC_ALPHA,f.ONE_MINUS_SRC_ALPHA,f.ONE,f.ONE_MINUS_SRC_ALPHA);break;case Ih:f.blendFuncSeparate(f.SRC_ALPHA,f.ONE,f.ONE,f.ONE);break;case Lh:console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");break;case Dh:console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=e,this.currentPremultipledAlpha=d}return}r=r||t,l=l||i,u=u||s,(t!==this.currentBlendEquation||r!==this.currentBlendEquationAlpha)&&(f.blendEquationSeparate(JT[t],JT[r]),this.currentBlendEquation=t,this.currentBlendEquationAlpha=r),(i!==this.currentBlendSrc||s!==this.currentBlendDst||l!==this.currentBlendSrcAlpha||u!==this.currentBlendDstAlpha)&&(f.blendFuncSeparate(Bm[i],Bm[s],Bm[l],Bm[u]),this.currentBlendSrc=i,this.currentBlendDst=s,this.currentBlendSrcAlpha=l,this.currentBlendDstAlpha=u),this.currentBlending=e,this.currentPremultipledAlpha=!1}setColorMask(e){this.currentColorMask!==e&&(this.gl.colorMask(e,e,e,e),this.currentColorMask=e)}setDepthTest(e){const{gl:t}=this;e?this.enable(t.DEPTH_TEST):this.disable(t.DEPTH_TEST)}setDepthMask(e){this.currentDepthMask!==e&&(this.gl.depthMask(e),this.currentDepthMask=e)}setDepthFunc(e){if(this.currentDepthFunc!==e){const{gl:t}=this;switch(e){case Hf:t.depthFunc(t.NEVER);break;case Wf:t.depthFunc(t.ALWAYS);break;case $f:t.depthFunc(t.LESS);break;case tc:t.depthFunc(t.LEQUAL);break;case Xf:t.depthFunc(t.EQUAL);break;case qf:t.depthFunc(t.GEQUAL);break;case Yf:t.depthFunc(t.GREATER);break;case Zf:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}this.currentDepthFunc=e}}scissor(e,t,i,s){const r=this._tempVec4.set(e,t,i,s);if(this.currentScissor.equals(r)===!1){const{gl:l}=this;l.scissor(r.x,r.y,r.z,r.w),this.currentScissor.copy(r)}}viewport(e,t,i,s){const r=this._tempVec4.set(e,t,i,s);if(this.currentViewport.equals(r)===!1){const{gl:l}=this;l.viewport(r.x,r.y,r.z,r.w),this.currentViewport.copy(r)}}setScissorTest(e){const t=this.gl;e?t.enable(t.SCISSOR_TEST):t.disable(t.SCISSOR_TEST)}setStencilTest(e){const{gl:t}=this;e?this.enable(t.STENCIL_TEST):this.disable(t.STENCIL_TEST)}setStencilMask(e){this.currentStencilMask!==e&&(this.gl.stencilMask(e),this.currentStencilMask=e)}setStencilFunc(e,t,i){(this.currentStencilFunc!==e||this.currentStencilRef!==t||this.currentStencilFuncMask!==i)&&(this.gl.stencilFunc(e,t,i),this.currentStencilFunc=e,this.currentStencilRef=t,this.currentStencilFuncMask=i)}setStencilOp(e,t,i){(this.currentStencilFail!==e||this.currentStencilZFail!==t||this.currentStencilZPass!==i)&&(this.gl.stencilOp(e,t,i),this.currentStencilFail=e,this.currentStencilZFail=t,this.currentStencilZPass=i)}setMaterial(e,t,i){const{gl:s}=this;e.side===_r?this.disable(s.CULL_FACE):this.enable(s.CULL_FACE);let r=e.side===ns;t&&(r=!r),this.setFlipSided(r),e.blending===To&&e.transparent===!1?this.setBlending(kr):this.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),this.setDepthFunc(e.depthFunc),this.setDepthTest(e.depthTest),this.setDepthMask(e.depthWrite),this.setColorMask(e.colorWrite);const l=e.stencilWrite;if(this.setStencilTest(l),l&&(this.setStencilMask(e.stencilWriteMask),this.setStencilFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),this.setStencilOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),this.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),e.alphaToCoverage===!0&&this.backend.renderer.samples>1?this.enable(s.SAMPLE_ALPHA_TO_COVERAGE):this.disable(s.SAMPLE_ALPHA_TO_COVERAGE),i>0&&this.currentClippingPlanes!==i)for(let d=0;d<8;d++)d<i?this.enable(12288+d):this.disable(12288+d)}setPolygonOffset(e,t,i){const{gl:s}=this;e?(this.enable(s.POLYGON_OFFSET_FILL),(this.currentPolygonOffsetFactor!==t||this.currentPolygonOffsetUnits!==i)&&(s.polygonOffset(t,i),this.currentPolygonOffsetFactor=t,this.currentPolygonOffsetUnits=i)):this.disable(s.POLYGON_OFFSET_FILL)}useProgram(e){return this.currentProgram!==e?(this.gl.useProgram(e),this.currentProgram=e,!0):!1}setVertexState(e,t=null){const i=this.gl;return this.currentVAO!==e||this.currentIndex!==t?(i.bindVertexArray(e),t!==null&&i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,t),this.currentVAO=e,this.currentIndex=t,!0):!1}resetVertexState(){const e=this.gl;e.bindVertexArray(null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),this.currentVAO=null,this.currentIndex=null}bindFramebuffer(e,t){const{gl:i,currentBoundFramebuffers:s}=this;return s[e]!==t?(i.bindFramebuffer(e,t),s[e]=t,e===i.DRAW_FRAMEBUFFER&&(s[i.FRAMEBUFFER]=t),e===i.FRAMEBUFFER&&(s[i.DRAW_FRAMEBUFFER]=t),!0):!1}drawBuffers(e,t){const{gl:i}=this;let s=[],r=!1;if(e.textures!==null){s=this.currentDrawbuffers.get(t),s===void 0&&(s=[],this.currentDrawbuffers.set(t,s));const l=e.textures;if(s.length!==l.length||s[0]!==i.COLOR_ATTACHMENT0){for(let u=0,d=l.length;u<d;u++)s[u]=i.COLOR_ATTACHMENT0+u;s.length=l.length,r=!0}}else s[0]!==i.BACK&&(s[0]=i.BACK,r=!0);r&&i.drawBuffers(s)}activeTexture(e){const{gl:t,currentTextureSlot:i,maxTextures:s}=this;e===void 0&&(e=t.TEXTURE0+s-1),i!==e&&(t.activeTexture(e),this.currentTextureSlot=e)}bindTexture(e,t,i){const{gl:s,currentTextureSlot:r,currentBoundTextures:l,maxTextures:u}=this;i===void 0&&(r===null?i=s.TEXTURE0+u-1:i=r);let d=l[i];d===void 0&&(d={type:void 0,texture:void 0},l[i]=d),(d.type!==e||d.texture!==t)&&(r!==i&&(s.activeTexture(i),this.currentTextureSlot=i),s.bindTexture(e,t),d.type=e,d.texture=t)}bindBufferBase(e,t,i){const{gl:s}=this,r=`${e}-${t}`;return this.currentBoundBufferBases[r]!==i?(s.bindBufferBase(e,t,i),this.currentBoundBufferBases[r]=i,!0):!1}unbindTexture(){const{gl:e,currentTextureSlot:t,currentBoundTextures:i}=this,s=i[t];s!==void 0&&s.type!==void 0&&(e.bindTexture(s.type,null),s.type=void 0,s.texture=void 0)}}class une{constructor(e){this.backend=e,this.gl=this.backend.gl,this.extensions=e.extensions}convert(e,t=no){const{gl:i,extensions:s}=this;let r;const l=zn.getTransfer(t);if(e===Ts)return i.UNSIGNED_BYTE;if(e===Cg)return i.UNSIGNED_SHORT_4_4_4_4;if(e===Ng)return i.UNSIGNED_SHORT_5_5_5_1;if(e===Pg)return i.UNSIGNED_INT_5_9_9_9_REV;if(e===Wc)return i.BYTE;if(e===$c)return i.SHORT;if(e===ua)return i.UNSIGNED_SHORT;if(e===or)return i.INT;if(e===rs)return i.UNSIGNED_INT;if(e===os)return i.FLOAT;if(e===Qs)return i.HALF_FLOAT;if(e===Dv)return i.ALPHA;if(e===mp)return i.RGB;if(e===es)return i.RGBA;if(e===wo)return i.DEPTH_COMPONENT;if(e===Ao)return i.DEPTH_STENCIL;if(e===nd)return i.RED;if(e===eu)return i.RED_INTEGER;if(e===ul)return i.RG;if(e===id)return i.RG_INTEGER;if(e===sd)return i.RGBA_INTEGER;if(e===Xc||e===Zl||e===Kl||e===Jl)if(l===un)if(r=s.get("WEBGL_compressed_texture_s3tc_srgb"),r!==null){if(e===Xc)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===Zl)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===Kl)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===Jl)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(r=s.get("WEBGL_compressed_texture_s3tc"),r!==null){if(e===Xc)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===Zl)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===Kl)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===Jl)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(e===Kf||e===Jf||e===jf||e===Qf)if(r=s.get("WEBGL_compressed_texture_pvrtc"),r!==null){if(e===Kf)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===Jf)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===jf)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===Qf)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(e===ep||e===Uh||e===Fh)if(r=s.get("WEBGL_compressed_texture_etc"),r!==null){if(e===ep||e===Uh)return l===un?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(e===Fh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(e===Bh||e===Oh||e===Vh||e===zh||e===kh||e===Gh||e===Hh||e===Wh||e===$h||e===Xh||e===qh||e===Yh||e===Zh||e===Kh)if(r=s.get("WEBGL_compressed_texture_astc"),r!==null){if(e===Bh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===Oh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===Vh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===zh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===kh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===Gh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===Hh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===Wh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===$h)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===Xh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===qh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===Yh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===Zh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===Kh)return l===un?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(e===qc)if(r=s.get("EXT_texture_compression_bptc"),r!==null){if(e===qc)return l===un?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(e===Uv||e===tp||e===np||e===ip)if(r=s.get("EXT_texture_compression_rgtc"),r!==null){if(e===qc)return r.COMPRESSED_RED_RGTC1_EXT;if(e===tp)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===np)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===ip)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return e===Mo?i.UNSIGNED_INT_24_8:i[e]!==void 0?i[e]:null}_clientWaitAsync(){const{gl:e}=this,t=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new Promise((i,s)=>{function r(){const l=e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0);if(l===e.WAIT_FAILED){e.deleteSync(t),s();return}if(l===e.TIMEOUT_EXPIRED){requestAnimationFrame(r);return}e.deleteSync(t),i()}r()})}}let vI=!1,zy,jT,SI;class hne{constructor(e){this.backend=e,this.gl=e.gl,this.extensions=e.extensions,this.defaultTextures={},vI===!1&&(this._init(),vI=!0)}_init(){const e=this.gl;zy={[za]:e.REPEAT,[js]:e.CLAMP_TO_EDGE,[ic]:e.MIRRORED_REPEAT},jT={[Ci]:e.NEAREST,[Rg]:e.NEAREST_MIPMAP_NEAREST,[Fa]:e.NEAREST_MIPMAP_LINEAR,[Ni]:e.LINEAR,[Hc]:e.LINEAR_MIPMAP_NEAREST,[Cr]:e.LINEAR_MIPMAP_LINEAR},SI={[Bv]:e.NEVER,[Gv]:e.ALWAYS,[Ig]:e.LESS,[Lg]:e.LEQUAL,[Ov]:e.EQUAL,[kv]:e.GEQUAL,[Vv]:e.GREATER,[zv]:e.NOTEQUAL}}getGLTextureType(e){const{gl:t}=this;let i;return e.isCubeTexture===!0?i=t.TEXTURE_CUBE_MAP:e.isArrayTexture===!0||e.isDataArrayTexture===!0||e.isCompressedArrayTexture===!0?i=t.TEXTURE_2D_ARRAY:e.isData3DTexture===!0?i=t.TEXTURE_3D:i=t.TEXTURE_2D,i}getInternalFormat(e,t,i,s,r=!1){const{gl:l,extensions:u}=this;if(e!==null){if(l[e]!==void 0)return l[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let d=t;if(t===l.RED&&(i===l.FLOAT&&(d=l.R32F),i===l.HALF_FLOAT&&(d=l.R16F),i===l.UNSIGNED_BYTE&&(d=l.R8),i===l.UNSIGNED_SHORT&&(d=l.R16),i===l.UNSIGNED_INT&&(d=l.R32UI),i===l.BYTE&&(d=l.R8I),i===l.SHORT&&(d=l.R16I),i===l.INT&&(d=l.R32I)),t===l.RED_INTEGER&&(i===l.UNSIGNED_BYTE&&(d=l.R8UI),i===l.UNSIGNED_SHORT&&(d=l.R16UI),i===l.UNSIGNED_INT&&(d=l.R32UI),i===l.BYTE&&(d=l.R8I),i===l.SHORT&&(d=l.R16I),i===l.INT&&(d=l.R32I)),t===l.RG&&(i===l.FLOAT&&(d=l.RG32F),i===l.HALF_FLOAT&&(d=l.RG16F),i===l.UNSIGNED_BYTE&&(d=l.RG8),i===l.UNSIGNED_SHORT&&(d=l.RG16),i===l.UNSIGNED_INT&&(d=l.RG32UI),i===l.BYTE&&(d=l.RG8I),i===l.SHORT&&(d=l.RG16I),i===l.INT&&(d=l.RG32I)),t===l.RG_INTEGER&&(i===l.UNSIGNED_BYTE&&(d=l.RG8UI),i===l.UNSIGNED_SHORT&&(d=l.RG16UI),i===l.UNSIGNED_INT&&(d=l.RG32UI),i===l.BYTE&&(d=l.RG8I),i===l.SHORT&&(d=l.RG16I),i===l.INT&&(d=l.RG32I)),t===l.RGB){const f=r?Jh:zn.getTransfer(s);i===l.FLOAT&&(d=l.RGB32F),i===l.HALF_FLOAT&&(d=l.RGB16F),i===l.UNSIGNED_BYTE&&(d=l.RGB8),i===l.UNSIGNED_SHORT&&(d=l.RGB16),i===l.UNSIGNED_INT&&(d=l.RGB32UI),i===l.BYTE&&(d=l.RGB8I),i===l.SHORT&&(d=l.RGB16I),i===l.INT&&(d=l.RGB32I),i===l.UNSIGNED_BYTE&&(d=f===un?l.SRGB8:l.RGB8),i===l.UNSIGNED_SHORT_5_6_5&&(d=l.RGB565),i===l.UNSIGNED_SHORT_5_5_5_1&&(d=l.RGB5_A1),i===l.UNSIGNED_SHORT_4_4_4_4&&(d=l.RGB4),i===l.UNSIGNED_INT_5_9_9_9_REV&&(d=l.RGB9_E5)}if(t===l.RGB_INTEGER&&(i===l.UNSIGNED_BYTE&&(d=l.RGB8UI),i===l.UNSIGNED_SHORT&&(d=l.RGB16UI),i===l.UNSIGNED_INT&&(d=l.RGB32UI),i===l.BYTE&&(d=l.RGB8I),i===l.SHORT&&(d=l.RGB16I),i===l.INT&&(d=l.RGB32I)),t===l.RGBA){const f=r?Jh:zn.getTransfer(s);i===l.FLOAT&&(d=l.RGBA32F),i===l.HALF_FLOAT&&(d=l.RGBA16F),i===l.UNSIGNED_BYTE&&(d=l.RGBA8),i===l.UNSIGNED_SHORT&&(d=l.RGBA16),i===l.UNSIGNED_INT&&(d=l.RGBA32UI),i===l.BYTE&&(d=l.RGBA8I),i===l.SHORT&&(d=l.RGBA16I),i===l.INT&&(d=l.RGBA32I),i===l.UNSIGNED_BYTE&&(d=f===un?l.SRGB8_ALPHA8:l.RGBA8),i===l.UNSIGNED_SHORT_4_4_4_4&&(d=l.RGBA4),i===l.UNSIGNED_SHORT_5_5_5_1&&(d=l.RGB5_A1)}return t===l.RGBA_INTEGER&&(i===l.UNSIGNED_BYTE&&(d=l.RGBA8UI),i===l.UNSIGNED_SHORT&&(d=l.RGBA16UI),i===l.UNSIGNED_INT&&(d=l.RGBA32UI),i===l.BYTE&&(d=l.RGBA8I),i===l.SHORT&&(d=l.RGBA16I),i===l.INT&&(d=l.RGBA32I)),t===l.DEPTH_COMPONENT&&(i===l.UNSIGNED_SHORT&&(d=l.DEPTH_COMPONENT16),i===l.UNSIGNED_INT&&(d=l.DEPTH_COMPONENT24),i===l.FLOAT&&(d=l.DEPTH_COMPONENT32F)),t===l.DEPTH_STENCIL&&i===l.UNSIGNED_INT_24_8&&(d=l.DEPTH24_STENCIL8),(d===l.R16F||d===l.R32F||d===l.RG16F||d===l.RG32F||d===l.RGBA16F||d===l.RGBA32F)&&u.get("EXT_color_buffer_float"),d}setTextureParameters(e,t){const{gl:i,extensions:s,backend:r}=this,l=zn.getPrimaries(zn.workingColorSpace),u=t.colorSpace===no?null:zn.getPrimaries(t.colorSpace),d=t.colorSpace===no||l===u?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,t.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,t.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,d),i.texParameteri(e,i.TEXTURE_WRAP_S,zy[t.wrapS]),i.texParameteri(e,i.TEXTURE_WRAP_T,zy[t.wrapT]),(e===i.TEXTURE_3D||e===i.TEXTURE_2D_ARRAY)&&(t.isArrayTexture||i.texParameteri(e,i.TEXTURE_WRAP_R,zy[t.wrapR])),i.texParameteri(e,i.TEXTURE_MAG_FILTER,jT[t.magFilter]);const f=t.mipmaps!==void 0&&t.mipmaps.length>0,g=t.minFilter===Ni&&f?Cr:t.minFilter;if(i.texParameteri(e,i.TEXTURE_MIN_FILTER,jT[g]),t.compareFunction&&(i.texParameteri(e,i.TEXTURE_COMPARE_MODE,i.COMPARE_REF_TO_TEXTURE),i.texParameteri(e,i.TEXTURE_COMPARE_FUNC,SI[t.compareFunction])),s.has("EXT_texture_filter_anisotropic")===!0){if(t.magFilter===Ci||t.minFilter!==Fa&&t.minFilter!==Cr||t.type===os&&s.has("OES_texture_float_linear")===!1)return;if(t.anisotropy>1){const x=s.get("EXT_texture_filter_anisotropic");i.texParameterf(e,x.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,r.getMaxAnisotropy()))}}}createDefaultTexture(e){const{gl:t,backend:i,defaultTextures:s}=this,r=this.getGLTextureType(e);let l=s[r];l===void 0&&(l=t.createTexture(),i.state.bindTexture(r,l),t.texParameteri(r,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(r,t.TEXTURE_MAG_FILTER,t.NEAREST),s[r]=l),i.set(e,{textureGPU:l,glTextureType:r,isDefault:!0})}createTexture(e,t){const{gl:i,backend:s}=this,{levels:r,width:l,height:u,depth:d}=t,f=s.utils.convert(e.format,e.colorSpace),g=s.utils.convert(e.type),x=this.getInternalFormat(e.internalFormat,f,g,e.colorSpace,e.isVideoTexture),v=i.createTexture(),S=this.getGLTextureType(e);s.state.bindTexture(S,v),this.setTextureParameters(S,e),e.isArrayTexture||e.isDataArrayTexture||e.isCompressedArrayTexture?i.texStorage3D(i.TEXTURE_2D_ARRAY,r,x,l,u,d):e.isData3DTexture?i.texStorage3D(i.TEXTURE_3D,r,x,l,u,d):e.isVideoTexture||i.texStorage2D(S,r,x,l,u),s.set(e,{textureGPU:v,glTextureType:S,glFormat:f,glType:g,glInternalFormat:x})}copyBufferToTexture(e,t){const{gl:i,backend:s}=this,{textureGPU:r,glTextureType:l,glFormat:u,glType:d}=s.get(t),{width:f,height:g}=t.source.data;i.bindBuffer(i.PIXEL_UNPACK_BUFFER,e),s.state.bindTexture(l,r),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,!1),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),i.texSubImage2D(l,0,0,0,f,g,u,d,0),i.bindBuffer(i.PIXEL_UNPACK_BUFFER,null),s.state.unbindTexture()}updateTexture(e,t){const{gl:i}=this,{width:s,height:r}=t,{textureGPU:l,glTextureType:u,glFormat:d,glType:f,glInternalFormat:g}=this.backend.get(e);if(!(e.isRenderTargetTexture||l===void 0))if(this.backend.state.bindTexture(u,l),this.setTextureParameters(u,e),e.isCompressedTexture){const x=e.mipmaps,v=t.image;for(let S=0;S<x.length;S++){const T=x[S];e.isCompressedArrayTexture?e.format!==i.RGBA?d!==null?i.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,S,0,0,0,T.width,T.height,v.depth,d,T.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):i.texSubImage3D(i.TEXTURE_2D_ARRAY,S,0,0,0,T.width,T.height,v.depth,d,f,T.data):d!==null?i.compressedTexSubImage2D(i.TEXTURE_2D,S,0,0,T.width,T.height,d,T.data):console.warn("Unsupported compressed texture format")}}else if(e.isCubeTexture){const x=t.images;for(let v=0;v<6;v++){const S=bI(x[v]);i.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+v,0,0,0,s,r,d,f,S)}}else if(e.isDataArrayTexture||e.isArrayTexture){const x=t.image;i.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,0,x.width,x.height,x.depth,d,f,x.data)}else if(e.isData3DTexture){const x=t.image;i.texSubImage3D(i.TEXTURE_3D,0,0,0,0,x.width,x.height,x.depth,d,f,x.data)}else if(e.isVideoTexture)e.update(),i.texImage2D(u,0,g,d,f,t.image);else{const x=bI(t.image);i.texSubImage2D(u,0,0,0,s,r,d,f,x)}}generateMipmaps(e){const{gl:t,backend:i}=this,{textureGPU:s,glTextureType:r}=i.get(e);i.state.bindTexture(r,s),t.generateMipmap(r)}deallocateRenderBuffers(e){const{gl:t,backend:i}=this;if(e){const s=i.get(e);if(s.renderBufferStorageSetup=void 0,s.framebuffers){for(const r in s.framebuffers)t.deleteFramebuffer(s.framebuffers[r]);delete s.framebuffers}if(s.depthRenderbuffer&&(t.deleteRenderbuffer(s.depthRenderbuffer),delete s.depthRenderbuffer),s.stencilRenderbuffer&&(t.deleteRenderbuffer(s.stencilRenderbuffer),delete s.stencilRenderbuffer),s.msaaFrameBuffer&&(t.deleteFramebuffer(s.msaaFrameBuffer),delete s.msaaFrameBuffer),s.msaaRenderbuffers){for(let r=0;r<s.msaaRenderbuffers.length;r++)t.deleteRenderbuffer(s.msaaRenderbuffers[r]);delete s.msaaRenderbuffers}}}destroyTexture(e){const{gl:t,backend:i}=this,{textureGPU:s,renderTarget:r}=i.get(e);this.deallocateRenderBuffers(r),t.deleteTexture(s),i.delete(e)}copyTextureToTexture(e,t,i=null,s=null,r=0,l=0){const{gl:u,backend:d}=this,{state:f}=this.backend,{textureGPU:g,glTextureType:x,glType:v,glFormat:S}=d.get(t);f.bindTexture(x,g);let T,E,A,w,O,F,B,k,Y;const $=e.isCompressedTexture?e.mipmaps[l]:e.image;if(i!==null)T=i.max.x-i.min.x,E=i.max.y-i.min.y,A=i.isBox3?i.max.z-i.min.z:1,w=i.min.x,O=i.min.y,F=i.isBox3?i.min.z:0;else{const Oe=Math.pow(2,-r);T=Math.floor($.width*Oe),E=Math.floor($.height*Oe),e.isDataArrayTexture||e.isArrayTexture?A=$.depth:e.isData3DTexture?A=Math.floor($.depth*Oe):A=1,w=0,O=0,F=0}s!==null?(B=s.x,k=s.y,Y=s.z):(B=0,k=0,Y=0),u.pixelStorei(u.UNPACK_FLIP_Y_WEBGL,t.flipY),u.pixelStorei(u.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),u.pixelStorei(u.UNPACK_ALIGNMENT,t.unpackAlignment);const Q=u.getParameter(u.UNPACK_ROW_LENGTH),z=u.getParameter(u.UNPACK_IMAGE_HEIGHT),q=u.getParameter(u.UNPACK_SKIP_PIXELS),oe=u.getParameter(u.UNPACK_SKIP_ROWS),Ce=u.getParameter(u.UNPACK_SKIP_IMAGES);u.pixelStorei(u.UNPACK_ROW_LENGTH,$.width),u.pixelStorei(u.UNPACK_IMAGE_HEIGHT,$.height),u.pixelStorei(u.UNPACK_SKIP_PIXELS,w),u.pixelStorei(u.UNPACK_SKIP_ROWS,O),u.pixelStorei(u.UNPACK_SKIP_IMAGES,F);const Ne=t.isDataArrayTexture||t.isData3DTexture||t.isArrayTexture;if(e.isRenderTargetTexture||e.isDepthTexture){const Oe=d.get(e),Be=d.get(t),He=d.get(Oe.renderTarget),ct=d.get(Be.renderTarget),Ve=He.framebuffers[Oe.cacheKey],Ct=ct.framebuffers[Be.cacheKey];f.bindFramebuffer(u.READ_FRAMEBUFFER,Ve),f.bindFramebuffer(u.DRAW_FRAMEBUFFER,Ct);let Gt=u.COLOR_BUFFER_BIT;e.isDepthTexture&&(Gt=u.DEPTH_BUFFER_BIT),u.blitFramebuffer(w,O,T,E,B,k,T,E,Gt,u.NEAREST),f.bindFramebuffer(u.READ_FRAMEBUFFER,null),f.bindFramebuffer(u.DRAW_FRAMEBUFFER,null)}else Ne?e.isDataTexture||e.isData3DTexture?u.texSubImage3D(x,l,B,k,Y,T,E,A,S,v,$.data):t.isCompressedArrayTexture?u.compressedTexSubImage3D(x,l,B,k,Y,T,E,A,S,$.data):u.texSubImage3D(x,l,B,k,Y,T,E,A,S,v,$):e.isDataTexture?u.texSubImage2D(x,l,B,k,T,E,S,v,$.data):e.isCompressedTexture?u.compressedTexSubImage2D(x,l,B,k,$.width,$.height,S,$.data):u.texSubImage2D(x,l,B,k,T,E,S,v,$);u.pixelStorei(u.UNPACK_ROW_LENGTH,Q),u.pixelStorei(u.UNPACK_IMAGE_HEIGHT,z),u.pixelStorei(u.UNPACK_SKIP_PIXELS,q),u.pixelStorei(u.UNPACK_SKIP_ROWS,oe),u.pixelStorei(u.UNPACK_SKIP_IMAGES,Ce),l===0&&t.generateMipmaps&&u.generateMipmap(x),f.unbindTexture()}copyFramebufferToTexture(e,t,i){const{gl:s}=this,{state:r}=this.backend,{textureGPU:l}=this.backend.get(e),{x:u,y:d,z:f,w:g}=i,x=e.isDepthTexture===!0||t.renderTarget&&t.renderTarget.samples>0,v=t.renderTarget?t.renderTarget.height:this.backend.getDrawingBufferSize().y;if(x){const S=u!==0||d!==0;let T,E;if(e.isDepthTexture===!0?(T=s.DEPTH_BUFFER_BIT,E=s.DEPTH_ATTACHMENT,t.stencil&&(T|=s.STENCIL_BUFFER_BIT)):(T=s.COLOR_BUFFER_BIT,E=s.COLOR_ATTACHMENT0),S){const A=this.backend.get(t.renderTarget),w=A.framebuffers[t.getCacheKey()],O=A.msaaFrameBuffer;r.bindFramebuffer(s.DRAW_FRAMEBUFFER,w),r.bindFramebuffer(s.READ_FRAMEBUFFER,O);const F=v-d-g;s.blitFramebuffer(u,F,u+f,F+g,u,F,u+f,F+g,T,s.NEAREST),r.bindFramebuffer(s.READ_FRAMEBUFFER,w),r.bindTexture(s.TEXTURE_2D,l),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,u,F,f,g),r.unbindTexture()}else{const A=s.createFramebuffer();r.bindFramebuffer(s.DRAW_FRAMEBUFFER,A),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,E,s.TEXTURE_2D,l,0),s.blitFramebuffer(0,0,f,g,0,0,f,g,T,s.NEAREST),s.deleteFramebuffer(A)}}else r.bindTexture(s.TEXTURE_2D,l),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,u,v-g-d,f,g),r.unbindTexture();e.generateMipmaps&&this.generateMipmaps(e),this.backend._setFramebuffer(t)}setupRenderBufferStorage(e,t,i,s=!1){const{gl:r}=this,l=t.renderTarget,{depthTexture:u,depthBuffer:d,stencilBuffer:f,width:g,height:x}=l;if(r.bindRenderbuffer(r.RENDERBUFFER,e),d&&!f){let v=r.DEPTH_COMPONENT24;s===!0?this.extensions.get("WEBGL_multisampled_render_to_texture").renderbufferStorageMultisampleEXT(r.RENDERBUFFER,l.samples,v,g,x):i>0?(u&&u.isDepthTexture&&u.type===r.FLOAT&&(v=r.DEPTH_COMPONENT32F),r.renderbufferStorageMultisample(r.RENDERBUFFER,i,v,g,x)):r.renderbufferStorage(r.RENDERBUFFER,v,g,x),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.RENDERBUFFER,e)}else d&&f&&(i>0?r.renderbufferStorageMultisample(r.RENDERBUFFER,i,r.DEPTH24_STENCIL8,g,x):r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_STENCIL,g,x),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.RENDERBUFFER,e));r.bindRenderbuffer(r.RENDERBUFFER,null)}async copyTextureToBuffer(e,t,i,s,r,l){const{backend:u,gl:d}=this,{textureGPU:f,glFormat:g,glType:x}=this.backend.get(e),v=d.createFramebuffer();d.bindFramebuffer(d.READ_FRAMEBUFFER,v);const S=e.isCubeTexture?d.TEXTURE_CUBE_MAP_POSITIVE_X+l:d.TEXTURE_2D;d.framebufferTexture2D(d.READ_FRAMEBUFFER,d.COLOR_ATTACHMENT0,S,f,0);const T=this._getTypedArrayType(x),E=this._getBytesPerTexel(x,g),w=s*r*E,O=d.createBuffer();d.bindBuffer(d.PIXEL_PACK_BUFFER,O),d.bufferData(d.PIXEL_PACK_BUFFER,w,d.STREAM_READ),d.readPixels(t,i,s,r,g,x,0),d.bindBuffer(d.PIXEL_PACK_BUFFER,null),await u.utils._clientWaitAsync();const F=new T(w/T.BYTES_PER_ELEMENT);return d.bindBuffer(d.PIXEL_PACK_BUFFER,O),d.getBufferSubData(d.PIXEL_PACK_BUFFER,0,F),d.bindBuffer(d.PIXEL_PACK_BUFFER,null),d.deleteFramebuffer(v),F}_getTypedArrayType(e){const{gl:t}=this;if(e===t.UNSIGNED_BYTE)return Uint8Array;if(e===t.UNSIGNED_SHORT_4_4_4_4||e===t.UNSIGNED_SHORT_5_5_5_1||e===t.UNSIGNED_SHORT_5_6_5||e===t.UNSIGNED_SHORT)return Uint16Array;if(e===t.UNSIGNED_INT)return Uint32Array;if(e===t.HALF_FLOAT)return Uint16Array;if(e===t.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${e}`)}_getBytesPerTexel(e,t){const{gl:i}=this;let s=0;if(e===i.UNSIGNED_BYTE&&(s=1),(e===i.UNSIGNED_SHORT_4_4_4_4||e===i.UNSIGNED_SHORT_5_5_5_1||e===i.UNSIGNED_SHORT_5_6_5||e===i.UNSIGNED_SHORT||e===i.HALF_FLOAT)&&(s=2),(e===i.UNSIGNED_INT||e===i.FLOAT)&&(s=4),t===i.RGBA)return s*4;if(t===i.RGB)return s*3;if(t===i.ALPHA)return s}}function bI(a){return a.isDataTexture?a.image.data:typeof HTMLImageElement<"u"&&a instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&a instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&a instanceof ImageBitmap||typeof OffscreenCanvas<"u"&&a instanceof OffscreenCanvas?a:a.data}class dne{constructor(e){this.backend=e,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(e){let t=this.extensions[e];return t===void 0&&(t=this.gl.getExtension(e),this.extensions[e]=t),t}has(e){return this.availableExtensions.includes(e)}}class fne{constructor(e){this.backend=e,this.maxAnisotropy=null}getMaxAnisotropy(){if(this.maxAnisotropy!==null)return this.maxAnisotropy;const e=this.backend.gl,t=this.backend.extensions;if(t.has("EXT_texture_filter_anisotropic")===!0){const i=t.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=e.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const TI={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query",OVR_multiview2:"OVR_multiview2"};class pne{constructor(e){this.gl=e.gl,this.extensions=e.extensions,this.info=e.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(e,t){const{gl:i,mode:s,object:r,type:l,info:u,index:d}=this;d!==0?i.drawElements(s,t,l,e):i.drawArrays(s,e,t),u.update(r,t,1)}renderInstances(e,t,i){const{gl:s,mode:r,type:l,index:u,object:d,info:f}=this;i!==0&&(u!==0?s.drawElementsInstanced(r,t,l,e,i):s.drawArraysInstanced(r,e,t,i),f.update(d,t,i))}renderMultiDraw(e,t,i){const{extensions:s,mode:r,object:l,info:u}=this;if(i===0)return;const d=s.get("WEBGL_multi_draw");if(d===null)for(let f=0;f<i;f++)this.render(e[f],t[f]);else{this.index!==0?d.multiDrawElementsWEBGL(r,t,0,this.type,e,0,i):d.multiDrawArraysWEBGL(r,e,0,t,0,i);let f=0;for(let g=0;g<i;g++)f+=t[g];u.update(l,f,1)}}renderMultiDrawInstances(e,t,i,s){const{extensions:r,mode:l,object:u,info:d}=this;if(i===0)return;const f=r.get("WEBGL_multi_draw");if(f===null)for(let g=0;g<i;g++)this.renderInstances(e[g],t[g],s[g]);else{this.index!==0?f.multiDrawElementsInstancedWEBGL(l,t,0,this.type,e,0,s,0,i):f.multiDrawArraysInstancedWEBGL(l,e,0,t,0,s,0,i);let g=0;for(let x=0;x<i;x++)g+=t[x]*s[x];d.update(u,g,1)}}}class eO{constructor(e=256){this.trackTimestamp=!0,this.maxQueries=e,this.currentQueryIndex=0,this.queryOffsets=new Map,this.isDisposed=!1,this.lastValue=0,this.pendingResolve=!1}allocateQueriesForContext(){}async resolveQueriesAsync(){}dispose(){}}class mne extends eO{constructor(e,t,i=2048){if(super(i),this.gl=e,this.type=t,this.ext=e.getExtension("EXT_disjoint_timer_query_webgl2")||e.getExtension("EXT_disjoint_timer_query"),!this.ext){console.warn("EXT_disjoint_timer_query not supported; timestamps will be disabled."),this.trackTimestamp=!1;return}this.queries=[];for(let s=0;s<this.maxQueries;s++)this.queries.push(e.createQuery());this.activeQuery=null,this.queryStates=new Map}allocateQueriesForContext(e){if(!this.trackTimestamp)return null;if(this.currentQueryIndex+2>this.maxQueries)return Eo(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryStates.set(t,"inactive"),this.queryOffsets.set(e.id,t),t}beginQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(t==null||this.activeQuery!==null)return;const i=this.queries[t];if(i)try{this.queryStates.get(t)==="inactive"&&(this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT,i),this.activeQuery=t,this.queryStates.set(t,"started"))}catch(s){console.error("Error in beginQuery:",s),this.activeQuery=null,this.queryStates.set(t,"inactive")}}endQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(t!=null&&this.activeQuery===t)try{this.gl.endQuery(this.ext.TIME_ELAPSED_EXT),this.queryStates.set(t,"ended"),this.activeQuery=null}catch(i){console.error("Error in endQuery:",i),this.queryStates.set(t,"inactive"),this.activeQuery=null}}async resolveQueriesAsync(){if(!this.trackTimestamp||this.pendingResolve)return this.lastValue;this.pendingResolve=!0;try{const e=[];for(const[s,r]of this.queryStates)if(r==="ended"){const l=this.queries[s];e.push(this.resolveQuery(l))}if(e.length===0)return this.lastValue;const i=(await Promise.all(e)).reduce((s,r)=>s+r,0);return this.lastValue=i,this.currentQueryIndex=0,this.queryOffsets.clear(),this.queryStates.clear(),this.activeQuery=null,i}catch(e){return console.error("Error resolving queries:",e),this.lastValue}finally{this.pendingResolve=!1}}async resolveQuery(e){return new Promise(t=>{if(this.isDisposed){t(this.lastValue);return}let i,s=!1;const r=()=>{i&&(clearTimeout(i),i=null)},l=d=>{s||(s=!0,r(),t(d))},u=()=>{if(this.isDisposed){l(this.lastValue);return}try{if(this.gl.getParameter(this.ext.GPU_DISJOINT_EXT)){l(this.lastValue);return}if(!this.gl.getQueryParameter(e,this.gl.QUERY_RESULT_AVAILABLE)){i=setTimeout(u,1);return}const g=this.gl.getQueryParameter(e,this.gl.QUERY_RESULT);t(Number(g)/1e6)}catch(d){console.error("Error checking query:",d),t(this.lastValue)}};u()})}dispose(){if(!this.isDisposed&&(this.isDisposed=!0,!!this.trackTimestamp)){for(const e of this.queries)this.gl.deleteQuery(e);this.queries=[],this.queryStates.clear(),this.queryOffsets.clear(),this.lastValue=0,this.activeQuery=null}}}class MI extends Q3{constructor(e={}){super(e),this.isWebGLBackend=!0,this.attributeUtils=null,this.extensions=null,this.capabilities=null,this.textureUtils=null,this.bufferRenderer=null,this.gl=null,this.state=null,this.utils=null,this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.disjoint=null,this.parallel=null,this._currentContext=null,this._knownBindings=new WeakSet,this._supportsInvalidateFramebuffer=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),this._xrFramebuffer=null}init(e){super.init(e);const t=this.parameters,i={antialias:e.samples>0,alpha:!0,depth:e.depth,stencil:e.stencil},s=t.context!==void 0?t.context:e.domElement.getContext("webgl2",i);function r(l){l.preventDefault();const u={api:"WebGL",message:l.statusMessage||"Unknown reason",reason:null,originalEvent:l};e.onDeviceLost(u)}this._onContextLost=r,e.domElement.addEventListener("webglcontextlost",r,!1),this.gl=s,this.extensions=new dne(this),this.capabilities=new fne(this),this.attributeUtils=new lne(this),this.textureUtils=new hne(this),this.bufferRenderer=new pne(this),this.state=new cne(this),this.utils=new une(this),this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.extensions.get("OVR_multiview2"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile")}get coordinateSystem(){return xr}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}async makeXRCompatible(){this.gl.getContextAttributes().xrCompatible!==!0&&await this.gl.makeXRCompatible()}setXRTarget(e){this._xrFramebuffer=e}setXRRenderTargetTextures(e,t,i=null){const s=this.gl;if(this.set(e.texture,{textureGPU:t,glInternalFormat:s.RGBA8}),i!==null){const r=e.stencilBuffer?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24;this.set(e.depthTexture,{textureGPU:i,glInternalFormat:r}),this.extensions.has("WEBGL_multisampled_render_to_texture")===!0&&e._autoAllocateDepthBuffer===!0&&e.multiview===!1&&console.warn("THREE.WebGLBackend: Render-to-texture extension was disabled because an external texture was provided"),e._autoAllocateDepthBuffer=!1}}initTimestampQuery(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t]||(this.timestampQueryPool[t]=new mne(this.gl,t,2048));const i=this.timestampQueryPool[t];i.allocateQueriesForContext(e)!==null&&i.beginQuery(e)}prepareTimestampBuffer(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t].endQuery(e)}getContext(){return this.gl}beginRender(e){const{state:t}=this,i=this.get(e);if(e.viewport)this.updateViewport(e);else{const{width:r,height:l}=this.getDrawingBufferSize();t.viewport(0,0,r,l)}if(e.scissor){const{x:r,y:l,width:u,height:d}=e.scissorValue;t.scissor(r,e.height-d-l,u,d)}this.initTimestampQuery(e),i.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1);const s=e.occlusionQueryCount;s>0&&(i.currentOcclusionQueries=i.occlusionQueries,i.currentOcclusionQueryObjects=i.occlusionQueryObjects,i.lastOcclusionObject=null,i.occlusionQueries=new Array(s),i.occlusionQueryObjects=new Array(s),i.occlusionQueryIndex=0)}finishRender(e){const{gl:t,state:i}=this,s=this.get(e),r=s.previousContext;i.resetVertexState();const l=e.occlusionQueryCount;l>0&&(l>s.occlusionQueryIndex&&t.endQuery(t.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const u=e.textures;if(u!==null)for(let f=0;f<u.length;f++){const g=u[f];g.generateMipmaps&&this.generateMipmaps(g)}this._currentContext=r;const d=e.renderTarget;if(e.textures!==null&&d){const f=this.get(d);if(d.samples>0&&this._useMultisampledExtension(d)===!1){const g=f.framebuffers[e.getCacheKey()];let x=t.COLOR_BUFFER_BIT;d.resolveDepthBuffer&&(d.depthBuffer&&(x|=t.DEPTH_BUFFER_BIT),d.stencilBuffer&&d.resolveStencilBuffer&&(x|=t.STENCIL_BUFFER_BIT));const v=f.msaaFrameBuffer,S=f.msaaRenderbuffers,T=e.textures,E=T.length>1;if(i.bindFramebuffer(t.READ_FRAMEBUFFER,v),i.bindFramebuffer(t.DRAW_FRAMEBUFFER,g),E)for(let A=0;A<T.length;A++)t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0+A,t.RENDERBUFFER,null),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+A,t.TEXTURE_2D,null,0);for(let A=0;A<T.length;A++){if(E){const{textureGPU:w}=this.get(T[A]);t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,S[A]),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,w,0)}if(e.scissor){const{x:w,y:O,width:F,height:B}=e.scissorValue,k=e.height-B-O;t.blitFramebuffer(w,k,w+F,k+B,w,k,w+F,k+B,x,t.NEAREST)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,x,t.NEAREST)}if(E)for(let A=0;A<T.length;A++){const{textureGPU:w}=this.get(T[A]);t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0+A,t.RENDERBUFFER,S[A]),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+A,t.TEXTURE_2D,w,0)}this._supportsInvalidateFramebuffer===!0&&t.invalidateFramebuffer(t.READ_FRAMEBUFFER,f.invalidationArray)}else if(d.resolveDepthBuffer===!1&&f.framebuffers){const g=f.framebuffers[e.getCacheKey()];i.bindFramebuffer(t.DRAW_FRAMEBUFFER,g),t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,f.depthInvalidationArray)}}if(r!==null)if(this._setFramebuffer(r),r.viewport)this.updateViewport(r);else{const{width:f,height:g}=this.getDrawingBufferSize();i.viewport(0,0,f,g)}this.prepareTimestampBuffer(e)}resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueries:i,currentOcclusionQueryObjects:s}=t;if(i&&s){const r=new WeakSet,{gl:l}=this;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueries=null;const u=()=>{let d=0;for(let f=0;f<i.length;f++){const g=i[f];g!==null&&l.getQueryParameter(g,l.QUERY_RESULT_AVAILABLE)&&(l.getQueryParameter(g,l.QUERY_RESULT)===0&&r.add(s[f]),i[f]=null,l.deleteQuery(g),d++)}d<i.length?requestAnimationFrame(u):t.occluded=r};u()}}isOccluded(e,t){const i=this.get(e);return i.occluded&&i.occluded.has(t)}updateViewport(e){const{state:t}=this,{x:i,y:s,width:r,height:l}=e.viewportValue;t.viewport(i,e.height-l-s,r,l)}setScissorTest(e){this.state.setScissorTest(e)}getClearColor(){const e=super.getClearColor();return e.r*=e.a,e.g*=e.a,e.b*=e.a,e}clear(e,t,i,s=null,r=!0){const{gl:l,renderer:u}=this;s===null&&(s={textures:null,clearColorValue:this.getClearColor()});let d=0;if(e&&(d|=l.COLOR_BUFFER_BIT),t&&(d|=l.DEPTH_BUFFER_BIT),i&&(d|=l.STENCIL_BUFFER_BIT),d!==0){let f;s.clearColorValue?f=s.clearColorValue:f=this.getClearColor();const g=u.getClearDepth(),x=u.getClearStencil();if(t&&this.state.setDepthMask(!0),s.textures===null)l.clearColor(f.r,f.g,f.b,f.a),l.clear(d);else{if(r&&this._setFramebuffer(s),e)for(let v=0;v<s.textures.length;v++)v===0?l.clearBufferfv(l.COLOR,v,[f.r,f.g,f.b,f.a]):l.clearBufferfv(l.COLOR,v,[0,0,0,1]);t&&i?l.clearBufferfi(l.DEPTH_STENCIL,0,g,x):t?l.clearBufferfv(l.DEPTH,0,[g]):i&&l.clearBufferiv(l.STENCIL,0,[x])}}}beginCompute(e){const{state:t,gl:i}=this;t.bindFramebuffer(i.FRAMEBUFFER,null),this.initTimestampQuery(e)}compute(e,t,i,s,r=null){const{state:l,gl:u}=this;this.discard===!1&&(u.enable(u.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:d,transformBuffers:f,attributes:g}=this.get(s),x=this._getVaoKey(g),v=this.vaoCache[x];v===void 0?this.vaoCache[x]=this._createVao(g):l.setVertexState(v),l.useProgram(d),this._bindUniforms(i);const S=this._getTransformFeedback(f);u.bindTransformFeedback(u.TRANSFORM_FEEDBACK,S),u.beginTransformFeedback(u.POINTS),r=r!==null?r:t.count,Array.isArray(r)&&(Eo("WebGLBackend.compute(): The count parameter must be a single number, not an array."),r=r[0]),g[0].isStorageInstancedBufferAttribute?u.drawArraysInstanced(u.POINTS,0,1,r):u.drawArrays(u.POINTS,0,r),u.endTransformFeedback(),u.bindTransformFeedback(u.TRANSFORM_FEEDBACK,null);for(let T=0;T<f.length;T++){const E=f[T];E.pbo&&this.has(E.pbo)&&this.textureUtils.copyBufferToTexture(E.transformBuffer,E.pbo),E.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(e),this._currentContext&&this._setFramebuffer(this._currentContext)}_isRenderCameraDepthArray(e){return e.depthTexture&&e.depthTexture.isArrayTexture&&e.camera.isArrayCamera}draw(e){const{object:t,pipeline:i,material:s,context:r,hardwareClippingPlanes:l}=e,{programGPU:u}=this.get(i),{gl:d,state:f}=this,g=this.get(r),x=e.getDrawParameters();if(x===null)return;this._bindUniforms(e.getBindings());const v=t.isMesh&&t.matrixWorld.determinant()<0;f.setMaterial(s,v,l),f.useProgram(u);const S=e.getAttributes(),T=this.get(S);let E=T.vaoGPU;if(E===void 0){const Q=this._getVaoKey(S);E=this.vaoCache[Q],E===void 0&&(E=this._createVao(S),this.vaoCache[Q]=E,T.vaoGPU=E)}const A=e.getIndex(),w=A!==null?this.get(A).bufferGPU:null;f.setVertexState(E,w);const O=g.lastOcclusionObject;if(O!==t&&O!==void 0){if(O!==null&&O.occlusionTest===!0&&(d.endQuery(d.ANY_SAMPLES_PASSED),g.occlusionQueryIndex++),t.occlusionTest===!0){const Q=d.createQuery();d.beginQuery(d.ANY_SAMPLES_PASSED,Q),g.occlusionQueries[g.occlusionQueryIndex]=Q,g.occlusionQueryObjects[g.occlusionQueryIndex]=t}g.lastOcclusionObject=t}const F=this.bufferRenderer;t.isPoints?F.mode=d.POINTS:t.isLineSegments?F.mode=d.LINES:t.isLine?F.mode=d.LINE_STRIP:t.isLineLoop?F.mode=d.LINE_LOOP:s.wireframe===!0?(f.setLineWidth(s.wireframeLinewidth*this.renderer.getPixelRatio()),F.mode=d.LINES):F.mode=d.TRIANGLES;const{vertexCount:B,instanceCount:k}=x;let{firstVertex:Y}=x;if(F.object=t,A!==null){Y*=A.array.BYTES_PER_ELEMENT;const Q=this.get(A);F.index=A.count,F.type=Q.type}else F.index=0;const $=()=>{t.isBatchedMesh?t._multiDrawInstances!==null?(Eo("THREE.WebGLBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),F.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances)):this.hasFeature("WEBGL_multi_draw")?F.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):Eo("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):k>1?F.renderInstances(Y,B,k):F.render(Y,B)};if(e.camera.isArrayCamera===!0&&e.camera.cameras.length>0&&e.camera.isMultiViewCamera===!1){const Q=this.get(e.camera),z=e.camera.cameras,q=e.getBindingGroup("cameraIndex").bindings[0];if(Q.indexesGPU===void 0||Q.indexesGPU.length!==z.length){const He=new Uint32Array([0,0,0,0]),ct=[];for(let Ve=0,Ct=z.length;Ve<Ct;Ve++){const Gt=d.createBuffer();He[0]=Ve,d.bindBuffer(d.UNIFORM_BUFFER,Gt),d.bufferData(d.UNIFORM_BUFFER,He,d.STATIC_DRAW),ct.push(Gt)}Q.indexesGPU=ct}const oe=this.get(q),Ce=this.renderer.getPixelRatio(),Ne=this._currentContext.renderTarget,Oe=this._isRenderCameraDepthArray(this._currentContext),Be=this._currentContext.activeCubeFace;if(Oe){const He=this.get(Ne.depthTexture);if(He.clearedRenderId!==this.renderer._nodes.nodeFrame.renderId){He.clearedRenderId=this.renderer._nodes.nodeFrame.renderId;const{stencilBuffer:ct}=Ne;for(let Ve=0,Ct=z.length;Ve<Ct;Ve++)this.renderer._activeCubeFace=Ve,this._currentContext.activeCubeFace=Ve,this._setFramebuffer(this._currentContext),this.clear(!1,!0,ct,this._currentContext,!1);this.renderer._activeCubeFace=Be,this._currentContext.activeCubeFace=Be}}for(let He=0,ct=z.length;He<ct;He++){const Ve=z[He];if(t.layers.test(Ve.layers)){Oe&&(this.renderer._activeCubeFace=He,this._currentContext.activeCubeFace=He,this._setFramebuffer(this._currentContext));const Ct=Ve.viewport;if(Ct!==void 0){const Gt=Ct.x*Ce,pn=Ct.y*Ce,qn=Ct.width*Ce,yi=Ct.height*Ce;f.viewport(Math.floor(Gt),Math.floor(e.context.height-yi-pn),Math.floor(qn),Math.floor(yi))}f.bindBufferBase(d.UNIFORM_BUFFER,oe.index,Q.indexesGPU[He]),$()}this._currentContext.activeCubeFace=Be,this.renderer._activeCubeFace=Be}}else $()}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,i,s,r,l){return this.textureUtils.copyTextureToBuffer(e,t,i,s,r,l)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new rne(e,t)}createProgram(e){const t=this.gl,{stage:i,code:s}=e,r=i==="fragment"?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(r,s),t.compileShader(r),this.set(e,{shaderGPU:r})}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){const i=this.gl,s=e.pipeline,{fragmentProgram:r,vertexProgram:l}=s,u=i.createProgram(),d=this.get(r).shaderGPU,f=this.get(l).shaderGPU;if(i.attachShader(u,d),i.attachShader(u,f),i.linkProgram(u),this.set(s,{programGPU:u,fragmentShader:d,vertexShader:f}),t!==null&&this.parallel){const g=new Promise(x=>{const v=this.parallel,S=()=>{i.getProgramParameter(u,v.COMPLETION_STATUS_KHR)?(this._completeCompile(e,s),x()):requestAnimationFrame(S)};S()});t.push(g);return}this._completeCompile(e,s)}_handleSource(e,t){const i=e.split(`
`),s=[],r=Math.max(t-6,0),l=Math.min(t+6,i.length);for(let u=r;u<l;u++){const d=u+1;s.push(`${d===t?">":" "} ${d}: ${i[u]}`)}return s.join(`
`)}_getShaderErrors(e,t,i){const s=e.getShaderParameter(t,e.COMPILE_STATUS),l=(e.getShaderInfoLog(t)||"").trim();if(s&&l==="")return"";const u=/ERROR: 0:(\d+)/.exec(l);if(u){const d=parseInt(u[1]);return i.toUpperCase()+`

`+l+`

`+this._handleSource(e.getShaderSource(t),d)}else return l}_logProgramError(e,t,i){if(this.renderer.debug.checkShaderErrors){const s=this.gl,l=(s.getProgramInfoLog(e)||"").trim();if(s.getProgramParameter(e,s.LINK_STATUS)===!1)if(typeof this.renderer.debug.onShaderError=="function")this.renderer.debug.onShaderError(s,e,i,t);else{const u=this._getShaderErrors(s,i,"vertex"),d=this._getShaderErrors(s,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(e,s.VALIDATE_STATUS)+`

Program Info Log: `+l+`
`+u+`
`+d)}else l!==""&&console.warn("THREE.WebGLProgram: Program Info Log:",l)}}_completeCompile(e,t){const{state:i,gl:s}=this,r=this.get(t),{programGPU:l,fragmentShader:u,vertexShader:d}=r;s.getProgramParameter(l,s.LINK_STATUS)===!1&&this._logProgramError(l,u,d),i.useProgram(l);const f=e.getBindings();this._setupBindings(f,l),this.set(t,{programGPU:l})}createComputePipeline(e,t){const{state:i,gl:s}=this,r={stage:"fragment",code:`#version 300 es
precision highp float;
void main() {}`};this.createProgram(r);const{computeProgram:l}=e,u=s.createProgram(),d=this.get(r).shaderGPU,f=this.get(l).shaderGPU,g=l.transforms,x=[],v=[];for(let A=0;A<g.length;A++){const w=g[A];x.push(w.varyingName),v.push(w.attributeNode)}s.attachShader(u,d),s.attachShader(u,f),s.transformFeedbackVaryings(u,x,s.SEPARATE_ATTRIBS),s.linkProgram(u),s.getProgramParameter(u,s.LINK_STATUS)===!1&&this._logProgramError(u,d,f),i.useProgram(u),this._setupBindings(t,u);const S=l.attributes,T=[],E=[];for(let A=0;A<S.length;A++){const w=S[A].node.attribute;T.push(w),this.has(w)||this.attributeUtils.createAttribute(w,s.ARRAY_BUFFER)}for(let A=0;A<v.length;A++){const w=v[A].attribute;this.has(w)||this.attributeUtils.createAttribute(w,s.ARRAY_BUFFER);const O=this.get(w);E.push(O)}this.set(e,{programGPU:u,transformBuffers:E,attributes:T})}createBindings(e,t){if(this._knownBindings.has(t)===!1){this._knownBindings.add(t);let i=0,s=0;for(const r of t){this.set(r,{textures:s,uniformBuffers:i});for(const l of r.bindings)l.isUniformBuffer&&i++,l.isSampledTexture&&s++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,i=this.get(e);let s=i.uniformBuffers,r=i.textures;for(const l of e.bindings)if(l.isUniformsGroup||l.isUniformBuffer){const u=l.buffer,d=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,d),t.bufferData(t.UNIFORM_BUFFER,u,t.DYNAMIC_DRAW),this.set(l,{index:s++,bufferGPU:d})}else if(l.isSampledTexture){const{textureGPU:u,glTextureType:d}=this.get(l.texture);this.set(l,{index:r++,textureGPU:u,glTextureType:d})}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const s=this.get(e).bufferGPU,r=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,s),t.bufferData(t.UNIFORM_BUFFER,r,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}hasFeature(e){const t=Object.keys(TI).filter(s=>TI[s]===e),i=this.extensions;for(let s=0;s<t.length;s++)if(i.has(t[s]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,i=null,s=null,r=0,l=0){this.textureUtils.copyTextureToTexture(e,t,i,s,r,l)}copyFramebufferToTexture(e,t,i){this.textureUtils.copyFramebufferToTexture(e,t,i)}_setFramebuffer(e){const{gl:t,state:i}=this;let s=null;if(e.textures!==null){const r=e.renderTarget,l=this.get(r),{samples:u,depthBuffer:d,stencilBuffer:f}=r,g=r.isWebGLCubeRenderTarget===!0,x=r.isRenderTarget3D===!0,v=r.depth>1,S=r.isXRRenderTarget===!0,T=S===!0&&r._hasExternalTextures===!0;let E=l.msaaFrameBuffer,A=l.depthRenderbuffer;const w=this.extensions.get("WEBGL_multisampled_render_to_texture"),O=this.extensions.get("OVR_multiview2"),F=this._useMultisampledExtension(r),B=gB(e);let k;if(g?(l.cubeFramebuffers||(l.cubeFramebuffers={}),k=l.cubeFramebuffers[B]):S&&T===!1?k=this._xrFramebuffer:(l.framebuffers||(l.framebuffers={}),k=l.framebuffers[B]),k===void 0){k=t.createFramebuffer(),i.bindFramebuffer(t.FRAMEBUFFER,k);const Y=e.textures,$=[];if(g){l.cubeFramebuffers[B]=k;const{textureGPU:z}=this.get(Y[0]),q=this.renderer._activeCubeFace;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+q,z,0)}else{l.framebuffers[B]=k;for(let z=0;z<Y.length;z++){const q=Y[z],oe=this.get(q);oe.renderTarget=e.renderTarget,oe.cacheKey=B;const Ce=t.COLOR_ATTACHMENT0+z;if(r.multiview)O.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,Ce,oe.textureGPU,0,u,0,2);else if(x||v){const Ne=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,Ce,oe.textureGPU,0,Ne)}else F?w.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,Ce,t.TEXTURE_2D,oe.textureGPU,0,u):t.framebufferTexture2D(t.FRAMEBUFFER,Ce,t.TEXTURE_2D,oe.textureGPU,0)}}const Q=f?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(r._autoAllocateDepthBuffer===!0){const z=t.createRenderbuffer();this.textureUtils.setupRenderBufferStorage(z,e,0,F),l.xrDepthRenderbuffer=z,$.push(f?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT),t.bindRenderbuffer(t.RENDERBUFFER,z),t.framebufferRenderbuffer(t.FRAMEBUFFER,Q,t.RENDERBUFFER,z)}else if(e.depthTexture!==null){$.push(f?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT);const z=this.get(e.depthTexture);if(z.renderTarget=e.renderTarget,z.cacheKey=B,r.multiview)O.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,Q,z.textureGPU,0,u,0,2);else if(T&&F)w.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,Q,t.TEXTURE_2D,z.textureGPU,0,u);else if(e.depthTexture.isArrayTexture){const q=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,Q,z.textureGPU,0,q)}else t.framebufferTexture2D(t.FRAMEBUFFER,Q,t.TEXTURE_2D,z.textureGPU,0)}l.depthInvalidationArray=$}else{if(this._isRenderCameraDepthArray(e)){i.bindFramebuffer(t.FRAMEBUFFER,k);const $=this.renderer._activeCubeFace,Q=this.get(e.depthTexture),z=f?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;t.framebufferTextureLayer(t.FRAMEBUFFER,z,Q.textureGPU,0,$)}if((S||F||r.multiview)&&r._isOpaqueFramebuffer!==!0){i.bindFramebuffer(t.FRAMEBUFFER,k);const $=this.get(e.textures[0]);r.multiview?O.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,$.textureGPU,0,u,0,2):F?w.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,$.textureGPU,0,u):t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,$.textureGPU,0);const Q=f?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(r._autoAllocateDepthBuffer===!0){const z=l.xrDepthRenderbuffer;t.bindRenderbuffer(t.RENDERBUFFER,z),t.framebufferRenderbuffer(t.FRAMEBUFFER,Q,t.RENDERBUFFER,z)}else{const z=this.get(e.depthTexture);r.multiview?O.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,Q,z.textureGPU,0,u,0,2):F?w.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,Q,t.TEXTURE_2D,z.textureGPU,0,u):t.framebufferTexture2D(t.FRAMEBUFFER,Q,t.TEXTURE_2D,z.textureGPU,0)}}}if(u>0&&F===!1&&!r.multiview){if(E===void 0){const Y=[];E=t.createFramebuffer(),i.bindFramebuffer(t.FRAMEBUFFER,E);const $=[],Q=e.textures;for(let z=0;z<Q.length;z++){$[z]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,$[z]),Y.push(t.COLOR_ATTACHMENT0+z);const q=e.textures[z],oe=this.get(q);t.renderbufferStorageMultisample(t.RENDERBUFFER,u,oe.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+z,t.RENDERBUFFER,$[z])}if(t.bindRenderbuffer(t.RENDERBUFFER,null),l.msaaFrameBuffer=E,l.msaaRenderbuffers=$,d&&A===void 0){A=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(A,e,u),l.depthRenderbuffer=A;const z=f?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;Y.push(z)}l.invalidationArray=Y}s=l.msaaFrameBuffer}else s=k;i.drawBuffers(e,k)}i.bindFramebuffer(t.FRAMEBUFFER,s)}_getVaoKey(e){let t="";for(let i=0;i<e.length;i++){const s=this.get(e[i]);t+=":"+s.id}return t}_createVao(e){const{gl:t}=this,i=t.createVertexArray();t.bindVertexArray(i);for(let s=0;s<e.length;s++){const r=e[s],l=this.get(r);t.bindBuffer(t.ARRAY_BUFFER,l.bufferGPU),t.enableVertexAttribArray(s);let u,d;r.isInterleavedBufferAttribute===!0?(u=r.data.stride*l.bytesPerElement,d=r.offset*l.bytesPerElement):(u=0,d=0),l.isInteger?t.vertexAttribIPointer(s,r.itemSize,l.type,u,d):t.vertexAttribPointer(s,r.itemSize,l.type,r.normalized,u,d),r.isInstancedBufferAttribute&&!r.isInterleavedBufferAttribute?t.vertexAttribDivisor(s,r.meshPerAttribute):r.isInterleavedBufferAttribute&&r.data.isInstancedInterleavedBuffer&&t.vertexAttribDivisor(s,r.data.meshPerAttribute)}return t.bindBuffer(t.ARRAY_BUFFER,null),i}_getTransformFeedback(e){let t="";for(let r=0;r<e.length;r++)t+=":"+e[r].id;let i=this.transformFeedbackCache[t];if(i!==void 0)return i;const{gl:s}=this;i=s.createTransformFeedback(),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,i);for(let r=0;r<e.length;r++){const l=e[r];s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,r,l.transformBuffer)}return s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[t]=i,i}_setupBindings(e,t){const i=this.gl;for(const s of e)for(const r of s.bindings){const u=this.get(r).index;if(r.isUniformsGroup||r.isUniformBuffer){const d=i.getUniformBlockIndex(t,r.name);i.uniformBlockBinding(t,d,u)}else if(r.isSampledTexture){const d=i.getUniformLocation(t,r.name);i.uniform1i(d,u)}}}_bindUniforms(e){const{gl:t,state:i}=this;for(const s of e)for(const r of s.bindings){const l=this.get(r),u=l.index;r.isUniformsGroup||r.isUniformBuffer?i.bindBufferBase(t.UNIFORM_BUFFER,u,l.bufferGPU):r.isSampledTexture&&i.bindTexture(l.glTextureType,l.textureGPU,t.TEXTURE0+u)}}_useMultisampledExtension(e){return e.multiview===!0?!0:e.samples>0&&this.extensions.has("WEBGL_multisampled_render_to_texture")===!0&&e._autoAllocateDepthBuffer!==!1}dispose(){const e=this.extensions.get("WEBGL_lose_context");e&&e.loseContext(),this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}const Ff={PointList:"point-list",LineList:"line-list",LineStrip:"line-strip",TriangleList:"triangle-list",TriangleStrip:"triangle-strip"},Ar={Never:"never",Less:"less",Equal:"equal",LessEqual:"less-equal",Greater:"greater",NotEqual:"not-equal",GreaterEqual:"greater-equal",Always:"always"},eo={Store:"store"},qi={Load:"load",Clear:"clear"},QT={CCW:"ccw"},eM={None:"none",Front:"front",Back:"back"},dp={Uint16:"uint16",Uint32:"uint32"},ye={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG11B10UFloat:"rgb10a2unorm",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},tM={ClampToEdge:"clamp-to-edge",Repeat:"repeat",MirrorRepeat:"mirror-repeat"},gh={Linear:"linear",Nearest:"nearest"},Ai={Zero:"zero",One:"one",Src:"src",OneMinusSrc:"one-minus-src",SrcAlpha:"src-alpha",OneMinusSrcAlpha:"one-minus-src-alpha",Dst:"dst",OneMinusDst:"one-minus-dst",DstAlpha:"dst-alpha",OneMinusDstAlpha:"one-minus-dst-alpha",SrcAlphaSaturated:"src-alpha-saturated",Constant:"constant",OneMinusConstant:"one-minus-constant"},uh={Add:"add",Subtract:"subtract",ReverseSubtract:"reverse-subtract",Min:"min",Max:"max"},wI={None:0,All:15},Fc={Keep:"keep",Zero:"zero",Replace:"replace",Invert:"invert",IncrementClamp:"increment-clamp",DecrementClamp:"decrement-clamp",IncrementWrap:"increment-wrap",DecrementWrap:"decrement-wrap"},nM={Storage:"storage",ReadOnlyStorage:"read-only-storage"},iM={WriteOnly:"write-only",ReadOnly:"read-only",ReadWrite:"read-write"},AI={NonFiltering:"non-filtering",Comparison:"comparison"},hh={Float:"float",UnfilterableFloat:"unfilterable-float",Depth:"depth",SInt:"sint",UInt:"uint"},EI={TwoD:"2d",ThreeD:"3d"},Js={TwoD:"2d",TwoDArray:"2d-array",Cube:"cube",ThreeD:"3d"},gne={All:"all"},ky={Vertex:"vertex",Instance:"instance"},FM={CoreFeaturesAndLimits:"core-features-and-limits",DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionBCSliced3D:"texture-compression-bc-sliced-3d",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TextureCompressionASTCSliced3D:"texture-compression-astc-sliced-3d",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",Float32Blendable:"float32-blendable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups",TextureFormatsTier1:"texture-formats-tier1",TextureFormatsTier2:"texture-formats-tier2"};class _ne extends J3{constructor(e,t,i){super(e,t?t.value:null),this.textureNode=t,this.groupNode=i}update(){this.texture=this.textureNode.value}}class xne extends q3{constructor(e,t){super(e,t?t.array:null),this.attribute=t,this.isStorageBuffer=!0}}let yne=0;class vne extends xne{constructor(e,t){super("StorageBuffer_"+yne++,e?e.value:null),this.nodeUniform=e,this.access=e?e.access:yr.READ_WRITE,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class Sne extends uu{constructor(e){super(),this.device=e;const t=`
struct VarysStruct {
	@builtin( position ) Position: vec4<f32>,
	@location( 0 ) vTex : vec2<f32>
};

@vertex
fn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {

	var Varys : VarysStruct;

	var pos = array< vec2<f32>, 4 >(
		vec2<f32>( -1.0,  1.0 ),
		vec2<f32>(  1.0,  1.0 ),
		vec2<f32>( -1.0, -1.0 ),
		vec2<f32>(  1.0, -1.0 )
	);

	var tex = array< vec2<f32>, 4 >(
		vec2<f32>( 0.0, 0.0 ),
		vec2<f32>( 1.0, 0.0 ),
		vec2<f32>( 0.0, 1.0 ),
		vec2<f32>( 1.0, 1.0 )
	);

	Varys.vTex = tex[ vertexIndex ];
	Varys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );

	return Varys;

}
`,i=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vTex );

}
`,s=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );

}
`;this.mipmapSampler=e.createSampler({minFilter:gh.Linear}),this.flipYSampler=e.createSampler({minFilter:gh.Nearest}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:t}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:i}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:s})}getTransferPipeline(e){let t=this.transferPipelines[e];return t===void 0&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:Ff.TriangleStrip,stripIndexFormat:dp.Uint32},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return t===void 0&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:Ff.TriangleStrip,stripIndexFormat:dp.Uint32},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,i=0){const s=t.format,{width:r,height:l}=t.size,u=this.getTransferPipeline(s),d=this.getFlipYPipeline(s),f=this.device.createTexture({size:{width:r,height:l,depthOrArrayLayers:1},format:s,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),g=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Js.TwoD,baseArrayLayer:i}),x=f.createView({baseMipLevel:0,mipLevelCount:1,dimension:Js.TwoD,baseArrayLayer:0}),v=this.device.createCommandEncoder({}),S=(T,E,A)=>{const w=T.getBindGroupLayout(0),O=this.device.createBindGroup({layout:w,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:E}]}),F=v.beginRenderPass({colorAttachments:[{view:A,loadOp:qi.Clear,storeOp:eo.Store,clearValue:[0,0,0,0]}]});F.setPipeline(T),F.setBindGroup(0,O),F.draw(4,1,0,0),F.end()};S(u,g,x),S(d,x,g),this.device.queue.submit([v.finish()]),f.destroy()}generateMipmaps(e,t,i=0){const s=this.get(e);s.useCount===void 0&&(s.useCount=0,s.layers=[]);const r=s.layers[i]||this._mipmapCreateBundles(e,t,i),l=this.device.createCommandEncoder({});this._mipmapRunBundles(l,r),this.device.queue.submit([l.finish()]),s.useCount!==0&&(s.layers[i]=r),s.useCount++}_mipmapCreateBundles(e,t,i){const s=this.getTransferPipeline(t.format),r=s.getBindGroupLayout(0);let l=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Js.TwoD,baseArrayLayer:i});const u=[];for(let d=1;d<t.mipLevelCount;d++){const f=this.device.createBindGroup({layout:r,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:l}]}),g=e.createView({baseMipLevel:d,mipLevelCount:1,dimension:Js.TwoD,baseArrayLayer:i}),x={colorAttachments:[{view:g,loadOp:qi.Clear,storeOp:eo.Store,clearValue:[0,0,0,0]}]},v=this.device.createRenderBundleEncoder({colorFormats:[t.format]});v.setPipeline(s),v.setBindGroup(0,f),v.draw(4,1,0,0),u.push({renderBundles:[v.finish()],passDescriptor:x}),l=g}return u}_mipmapRunBundles(e,t){const i=t.length;for(let s=0;s<i;s++){const r=t[s],l=e.beginRenderPass(r.passDescriptor);l.executeBundles(r.renderBundles),l.end()}}}const bne={[Bv]:"never",[Ig]:"less",[Ov]:"equal",[Lg]:"less-equal",[Vv]:"greater",[kv]:"greater-equal",[Gv]:"always",[zv]:"not-equal"},Tne=[0,1,3,2,4,5];class Mne{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new Ro,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,i=t.device,s=t.get(e),r={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};r.magFilter===gh.Linear&&r.minFilter===gh.Linear&&r.mipmapFilter===gh.Linear&&(r.maxAnisotropy=e.anisotropy),e.isDepthTexture&&e.compareFunction!==null&&(r.compare=bne[e.compareFunction]),s.sampler=i.createSampler(r)}createDefaultTexture(e){let t;const i=BM(e);e.isCubeTexture?t=this._getDefaultCubeTextureGPU(i):t=this._getDefaultTextureGPU(i),this.backend.get(e).texture=t}createTexture(e,t={}){const i=this.backend,s=i.get(e);if(s.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");t.needsMipmaps===void 0&&(t.needsMipmaps=!1),t.levels===void 0&&(t.levels=1),t.depth===void 0&&(t.depth=1);const{width:r,height:l,depth:u,levels:d}=t;e.isFramebufferTexture&&(t.renderTarget?t.format=this.backend.utils.getCurrentColorFormat(t.renderTarget):t.format=this.backend.utils.getPreferredCanvasFormat());const f=this._getDimension(e),g=e.internalFormat||t.format||BM(e,i.device);s.format=g;const{samples:x,primarySamples:v,isMSAA:S}=i.utils.getTextureSampleData(e);let T=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;e.isStorageTexture===!0&&(T|=GPUTextureUsage.STORAGE_BINDING),e.isCompressedTexture!==!0&&e.isCompressedArrayTexture!==!0&&(T|=GPUTextureUsage.RENDER_ATTACHMENT);const E={label:e.name,size:{width:r,height:l,depthOrArrayLayers:u},mipLevelCount:d,sampleCount:v,dimension:f,format:g,usage:T};if(g===void 0){console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(e);return}if(e.isCubeTexture&&(E.textureBindingViewDimension=Js.Cube),s.texture=i.device.createTexture(E),S){const A=Object.assign({},E);A.label=A.label+"-msaa",A.sampleCount=x,s.msaaTexture=i.device.createTexture(A)}s.initialized=!0,s.textureDescriptorGPU=E}destroyTexture(e){const t=this.backend,i=t.get(e);i.texture!==void 0&&i.texture.destroy(),i.msaaTexture!==void 0&&i.msaaTexture.destroy(),t.delete(e)}destroySampler(e){const i=this.backend.get(e);delete i.sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let i=0;i<6;i++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,i);else{const i=e.image.depth||1;for(let s=0;s<i;s++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,s)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:i}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:i,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const i=this.backend,{width:s,height:r}=i.getDrawingBufferSize(),l=this.depthTexture,u=i.get(l).texture;let d,f;if(t?(d=Ao,f=Mo):e&&(d=wo,f=rs),u!==void 0){if(l.image.width===s&&l.image.height===r&&l.format===d&&l.type===f)return u;this.destroyTexture(l)}return l.name="depthBuffer",l.format=d,l.type=f,l.image.width=s,l.image.height=r,this.createTexture(l,{width:s,height:r}),i.get(l).texture}updateTexture(e,t){const i=this.backend.get(e),{textureDescriptorGPU:s}=i;if(!(e.isRenderTargetTexture||s===void 0)){if(e.isDataTexture)this._copyBufferToTexture(t.image,i.texture,s,0,e.flipY);else if(e.isArrayTexture||e.isDataArrayTexture||e.isData3DTexture)for(let r=0;r<t.image.depth;r++)this._copyBufferToTexture(t.image,i.texture,s,r,e.flipY,r);else e.isCompressedTexture||e.isCompressedArrayTexture?this._copyCompressedBufferToTexture(e.mipmaps,i.texture,s):e.isCubeTexture?this._copyCubeMapToTexture(t.images,i.texture,s,e.flipY,e.premultiplyAlpha):this._copyImageToTexture(t.image,i.texture,s,0,e.flipY,e.premultiplyAlpha);i.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,i,s,r,l){const u=this.backend.device,d=this.backend.get(e),f=d.texture,g=d.textureDescriptorGPU.format,x=this._getBytesPerTexel(g);let v=s*x;v=Math.ceil(v/256)*256;const S=u.createBuffer({size:s*r*x,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),T=u.createCommandEncoder();T.copyTextureToBuffer({texture:f,origin:{x:t,y:i,z:l}},{buffer:S,bytesPerRow:v},{width:s,height:r});const E=this._getTypedArrayType(g);u.queue.submit([T.finish()]),await S.mapAsync(GPUMapMode.READ);const A=S.getMappedRange();return new E(A)}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(t===void 0){const i=new ds;i.minFilter=Ci,i.magFilter=Ci,this.createTexture(i,{width:1,height:1,format:e}),this.defaultTexture[e]=t=i}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(t===void 0){const i=new tu;i.minFilter=Ci,i.magFilter=Ci,this.createTexture(i,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=i}return this.backend.get(t).texture}_copyCubeMapToTexture(e,t,i,s,r){for(let l=0;l<6;l++){const u=e[l],d=s===!0?Tne[l]:l;u.isDataTexture?this._copyBufferToTexture(u.image,t,i,d,s):this._copyImageToTexture(u,t,i,d,s,r)}}_copyImageToTexture(e,t,i,s,r,l){this.backend.device.queue.copyExternalImageToTexture({source:e,flipY:r},{texture:t,mipLevel:0,origin:{x:0,y:0,z:s},premultipliedAlpha:l},{width:i.size.width,height:i.size.height,depthOrArrayLayers:1})}_getPassUtils(){let e=this._passUtils;return e===null&&(this._passUtils=e=new Sne(this.backend.device)),e}_generateMipmaps(e,t,i=0){this._getPassUtils().generateMipmaps(e,t,i)}_flipY(e,t,i=0){this._getPassUtils().flipY(e,t,i)}_copyBufferToTexture(e,t,i,s,r,l=0){const u=this.backend.device,d=e.data,f=this._getBytesPerTexel(i.format),g=e.width*f;u.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},d,{offset:e.width*e.height*f*l,bytesPerRow:g},{width:e.width,height:e.height,depthOrArrayLayers:1}),r===!0&&this._flipY(t,i,s)}_copyCompressedBufferToTexture(e,t,i){const s=this.backend.device,r=this._getBlockData(i.format),l=i.size.depthOrArrayLayers>1;for(let u=0;u<e.length;u++){const d=e[u],f=d.width,g=d.height,x=l?i.size.depthOrArrayLayers:1,v=Math.ceil(f/r.width)*r.byteLength,S=v*Math.ceil(g/r.height);for(let T=0;T<x;T++)s.queue.writeTexture({texture:t,mipLevel:u,origin:{x:0,y:0,z:T}},d.data,{offset:T*S,bytesPerRow:v,rowsPerImage:Math.ceil(g/r.height)},{width:Math.ceil(f/r.width)*r.width,height:Math.ceil(g/r.height)*r.height,depthOrArrayLayers:1})}}_getBlockData(e){if(e===ye.BC1RGBAUnorm||e===ye.BC1RGBAUnormSRGB)return{byteLength:8,width:4,height:4};if(e===ye.BC2RGBAUnorm||e===ye.BC2RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(e===ye.BC3RGBAUnorm||e===ye.BC3RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(e===ye.BC4RUnorm||e===ye.BC4RSnorm)return{byteLength:8,width:4,height:4};if(e===ye.BC5RGUnorm||e===ye.BC5RGSnorm)return{byteLength:16,width:4,height:4};if(e===ye.BC6HRGBUFloat||e===ye.BC6HRGBFloat)return{byteLength:16,width:4,height:4};if(e===ye.BC7RGBAUnorm||e===ye.BC7RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(e===ye.ETC2RGB8Unorm||e===ye.ETC2RGB8UnormSRGB)return{byteLength:8,width:4,height:4};if(e===ye.ETC2RGB8A1Unorm||e===ye.ETC2RGB8A1UnormSRGB)return{byteLength:8,width:4,height:4};if(e===ye.ETC2RGBA8Unorm||e===ye.ETC2RGBA8UnormSRGB)return{byteLength:16,width:4,height:4};if(e===ye.EACR11Unorm)return{byteLength:8,width:4,height:4};if(e===ye.EACR11Snorm)return{byteLength:8,width:4,height:4};if(e===ye.EACRG11Unorm)return{byteLength:16,width:4,height:4};if(e===ye.EACRG11Snorm)return{byteLength:16,width:4,height:4};if(e===ye.ASTC4x4Unorm||e===ye.ASTC4x4UnormSRGB)return{byteLength:16,width:4,height:4};if(e===ye.ASTC5x4Unorm||e===ye.ASTC5x4UnormSRGB)return{byteLength:16,width:5,height:4};if(e===ye.ASTC5x5Unorm||e===ye.ASTC5x5UnormSRGB)return{byteLength:16,width:5,height:5};if(e===ye.ASTC6x5Unorm||e===ye.ASTC6x5UnormSRGB)return{byteLength:16,width:6,height:5};if(e===ye.ASTC6x6Unorm||e===ye.ASTC6x6UnormSRGB)return{byteLength:16,width:6,height:6};if(e===ye.ASTC8x5Unorm||e===ye.ASTC8x5UnormSRGB)return{byteLength:16,width:8,height:5};if(e===ye.ASTC8x6Unorm||e===ye.ASTC8x6UnormSRGB)return{byteLength:16,width:8,height:6};if(e===ye.ASTC8x8Unorm||e===ye.ASTC8x8UnormSRGB)return{byteLength:16,width:8,height:8};if(e===ye.ASTC10x5Unorm||e===ye.ASTC10x5UnormSRGB)return{byteLength:16,width:10,height:5};if(e===ye.ASTC10x6Unorm||e===ye.ASTC10x6UnormSRGB)return{byteLength:16,width:10,height:6};if(e===ye.ASTC10x8Unorm||e===ye.ASTC10x8UnormSRGB)return{byteLength:16,width:10,height:8};if(e===ye.ASTC10x10Unorm||e===ye.ASTC10x10UnormSRGB)return{byteLength:16,width:10,height:10};if(e===ye.ASTC12x10Unorm||e===ye.ASTC12x10UnormSRGB)return{byteLength:16,width:12,height:10};if(e===ye.ASTC12x12Unorm||e===ye.ASTC12x12UnormSRGB)return{byteLength:16,width:12,height:12}}_convertAddressMode(e){let t=tM.ClampToEdge;return e===za?t=tM.Repeat:e===ic&&(t=tM.MirrorRepeat),t}_convertFilterMode(e){let t=gh.Linear;return(e===Ci||e===Rg||e===Fa)&&(t=gh.Nearest),t}_getBytesPerTexel(e){if(e===ye.R8Unorm||e===ye.R8Snorm||e===ye.R8Uint||e===ye.R8Sint)return 1;if(e===ye.R16Uint||e===ye.R16Sint||e===ye.R16Float||e===ye.RG8Unorm||e===ye.RG8Snorm||e===ye.RG8Uint||e===ye.RG8Sint)return 2;if(e===ye.R32Uint||e===ye.R32Sint||e===ye.R32Float||e===ye.RG16Uint||e===ye.RG16Sint||e===ye.RG16Float||e===ye.RGBA8Unorm||e===ye.RGBA8UnormSRGB||e===ye.RGBA8Snorm||e===ye.RGBA8Uint||e===ye.RGBA8Sint||e===ye.BGRA8Unorm||e===ye.BGRA8UnormSRGB||e===ye.RGB9E5UFloat||e===ye.RGB10A2Unorm||e===ye.RG11B10UFloat||e===ye.Depth32Float||e===ye.Depth24Plus||e===ye.Depth24PlusStencil8||e===ye.Depth32FloatStencil8)return 4;if(e===ye.RG32Uint||e===ye.RG32Sint||e===ye.RG32Float||e===ye.RGBA16Uint||e===ye.RGBA16Sint||e===ye.RGBA16Float)return 8;if(e===ye.RGBA32Uint||e===ye.RGBA32Sint||e===ye.RGBA32Float)return 16}_getTypedArrayType(e){if(e===ye.R8Uint)return Uint8Array;if(e===ye.R8Sint)return Int8Array;if(e===ye.R8Unorm)return Uint8Array;if(e===ye.R8Snorm)return Int8Array;if(e===ye.RG8Uint)return Uint8Array;if(e===ye.RG8Sint)return Int8Array;if(e===ye.RG8Unorm)return Uint8Array;if(e===ye.RG8Snorm)return Int8Array;if(e===ye.RGBA8Uint)return Uint8Array;if(e===ye.RGBA8Sint)return Int8Array;if(e===ye.RGBA8Unorm)return Uint8Array;if(e===ye.RGBA8Snorm)return Int8Array;if(e===ye.R16Uint)return Uint16Array;if(e===ye.R16Sint)return Int16Array;if(e===ye.RG16Uint)return Uint16Array;if(e===ye.RG16Sint)return Int16Array;if(e===ye.RGBA16Uint)return Uint16Array;if(e===ye.RGBA16Sint)return Int16Array;if(e===ye.R16Float||e===ye.RG16Float||e===ye.RGBA16Float)return Uint16Array;if(e===ye.R32Uint)return Uint32Array;if(e===ye.R32Sint)return Int32Array;if(e===ye.R32Float)return Float32Array;if(e===ye.RG32Uint)return Uint32Array;if(e===ye.RG32Sint)return Int32Array;if(e===ye.RG32Float)return Float32Array;if(e===ye.RGBA32Uint)return Uint32Array;if(e===ye.RGBA32Sint)return Int32Array;if(e===ye.RGBA32Float)return Float32Array;if(e===ye.BGRA8Unorm||e===ye.BGRA8UnormSRGB)return Uint8Array;if(e===ye.RGB10A2Unorm||e===ye.RGB9E5UFloat||e===ye.RG11B10UFloat)return Uint32Array;if(e===ye.Depth32Float)return Float32Array;if(e===ye.Depth24Plus||e===ye.Depth24PlusStencil8)return Uint32Array;if(e===ye.Depth32FloatStencil8)return Float32Array}_getDimension(e){let t;return e.is3DTexture||e.isData3DTexture?t=EI.ThreeD:t=EI.TwoD,t}}function BM(a,e=null){const t=a.format,i=a.type,s=a.colorSpace,r=zn.getTransfer(s);let l;if(a.isCompressedTexture===!0||a.isCompressedArrayTexture===!0)switch(t){case Zl:l=r===un?ye.BC1RGBAUnormSRGB:ye.BC1RGBAUnorm;break;case Kl:l=r===un?ye.BC2RGBAUnormSRGB:ye.BC2RGBAUnorm;break;case Jl:l=r===un?ye.BC3RGBAUnormSRGB:ye.BC3RGBAUnorm;break;case Uh:l=r===un?ye.ETC2RGB8UnormSRGB:ye.ETC2RGB8Unorm;break;case Fh:l=r===un?ye.ETC2RGBA8UnormSRGB:ye.ETC2RGBA8Unorm;break;case Bh:l=r===un?ye.ASTC4x4UnormSRGB:ye.ASTC4x4Unorm;break;case Oh:l=r===un?ye.ASTC5x4UnormSRGB:ye.ASTC5x4Unorm;break;case Vh:l=r===un?ye.ASTC5x5UnormSRGB:ye.ASTC5x5Unorm;break;case zh:l=r===un?ye.ASTC6x5UnormSRGB:ye.ASTC6x5Unorm;break;case kh:l=r===un?ye.ASTC6x6UnormSRGB:ye.ASTC6x6Unorm;break;case Gh:l=r===un?ye.ASTC8x5UnormSRGB:ye.ASTC8x5Unorm;break;case Hh:l=r===un?ye.ASTC8x6UnormSRGB:ye.ASTC8x6Unorm;break;case Wh:l=r===un?ye.ASTC8x8UnormSRGB:ye.ASTC8x8Unorm;break;case $h:l=r===un?ye.ASTC10x5UnormSRGB:ye.ASTC10x5Unorm;break;case Xh:l=r===un?ye.ASTC10x6UnormSRGB:ye.ASTC10x6Unorm;break;case qh:l=r===un?ye.ASTC10x8UnormSRGB:ye.ASTC10x8Unorm;break;case Yh:l=r===un?ye.ASTC10x10UnormSRGB:ye.ASTC10x10Unorm;break;case Zh:l=r===un?ye.ASTC12x10UnormSRGB:ye.ASTC12x10Unorm;break;case Kh:l=r===un?ye.ASTC12x12UnormSRGB:ye.ASTC12x12Unorm;break;case es:l=r===un?ye.RGBA8UnormSRGB:ye.RGBA8Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",t)}else switch(t){case es:switch(i){case Wc:l=ye.RGBA8Snorm;break;case $c:l=ye.RGBA16Sint;break;case ua:l=ye.RGBA16Uint;break;case rs:l=ye.RGBA32Uint;break;case or:l=ye.RGBA32Sint;break;case Ts:l=r===un?ye.RGBA8UnormSRGB:ye.RGBA8Unorm;break;case Qs:l=ye.RGBA16Float;break;case os:l=ye.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",i)}break;case mp:switch(i){case Pg:l=ye.RGB9E5UFloat;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",i)}break;case nd:switch(i){case Wc:l=ye.R8Snorm;break;case $c:l=ye.R16Sint;break;case ua:l=ye.R16Uint;break;case rs:l=ye.R32Uint;break;case or:l=ye.R32Sint;break;case Ts:l=ye.R8Unorm;break;case Qs:l=ye.R16Float;break;case os:l=ye.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",i)}break;case ul:switch(i){case Wc:l=ye.RG8Snorm;break;case $c:l=ye.RG16Sint;break;case ua:l=ye.RG16Uint;break;case rs:l=ye.RG32Uint;break;case or:l=ye.RG32Sint;break;case Ts:l=ye.RG8Unorm;break;case Qs:l=ye.RG16Float;break;case os:l=ye.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",i)}break;case wo:switch(i){case ua:l=ye.Depth16Unorm;break;case rs:l=ye.Depth24Plus;break;case os:l=ye.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",i)}break;case Ao:switch(i){case Mo:l=ye.Depth24PlusStencil8;break;case os:e&&e.features.has(FM.Depth32FloatStencil8)===!1&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),l=ye.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",i)}break;case eu:switch(i){case or:l=ye.R32Sint;break;case rs:l=ye.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",i)}break;case id:switch(i){case or:l=ye.RG32Sint;break;case rs:l=ye.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",i)}break;case sd:switch(i){case or:l=ye.RGBA32Sint;break;case rs:l=ye.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",i)}break;default:console.error("WebGPURenderer: Unsupported texture format.",t)}return l}const wne=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,Ane=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/ig,RI={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_depth_2d_array:"depthTexture",texture_depth_multisampled_2d:"depthTexture",texture_depth_cube:"depthTexture",texture_depth_cube_array:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"},Ene=a=>{a=a.trim();const e=a.match(wne);if(e!==null&&e.length===4){const t=e[2],i=[];let s=null;for(;(s=Ane.exec(t))!==null;)i.push({name:s[1],type:s[2]});const r=[];for(let g=0;g<i.length;g++){const{name:x,type:v}=i[g];let S=v;S.startsWith("ptr")?S="pointer":(S.startsWith("texture")&&(S=v.split("<")[0]),S=RI[S]),r.push(new Z0(S,x))}const l=a.substring(e[0].length),u=e[3]||"void",d=e[1]!==void 0?e[1]:"";return{type:RI[u]||u,inputs:r,name:d,inputsCode:t,blockCode:l,outputType:u}}else throw new Error("FunctionNode: Function is not a WGSL code.")};class Rne extends CE{constructor(e){const{type:t,inputs:i,name:s,inputsCode:r,blockCode:l,outputType:u}=Ene(e);super(t,i,s),this.inputsCode=r,this.blockCode=l,this.outputType=u}getCode(e=this.name){const t=this.outputType!=="void"?"-> "+this.outputType:"";return`fn ${e} ( ${this.inputsCode.trim()} ) ${t}`+this.blockCode}}class Cne extends G3{parseFunction(e){return new Rne(e)}}const Af=typeof self<"u"?self.GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},Nne={[yr.READ_ONLY]:"read",[yr.WRITE_ONLY]:"write",[yr.READ_WRITE]:"read_write"},CI={[za]:"repeat",[js]:"clamp",[ic]:"mirror"},Gy={vertex:Af?Af.VERTEX:1,fragment:Af?Af.FRAGMENT:2,compute:Af?Af.COMPUTE:4},NI={instance:!0,swizzleAssign:!1,storageBuffer:!0},Pne={"^^":"tsl_xor"},Ine={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},PI={},la={tsl_xor:new zs("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new zs("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new zs("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new zs("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new zs("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new zs("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new zs("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new zs("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new zs("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping_float:new zs("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),mirrorWrapping_float:new zs("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),clampWrapping_float:new zs("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),biquadraticTexture:new zs(`
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {

	let res = vec2f( iRes );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );
	let rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );
	let rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );
	let rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
`)},Wm={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};typeof navigator<"u"&&/Windows/g.test(navigator.userAgent)&&(la.pow_float=new zs("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),la.pow_vec2=new zs("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[la.pow_float]),la.pow_vec3=new zs("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[la.pow_float]),la.pow_vec4=new zs("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[la.pow_float]),Wm.pow_float="tsl_pow_float",Wm.pow_vec2="tsl_pow_vec2",Wm.pow_vec3="tsl_pow_vec3",Wm.pow_vec4="tsl_pow_vec4");let tO="";(typeof navigator<"u"&&/Firefox|Deno/g.test(navigator.userAgent))!==!0&&(tO+=`diagnostic( off, derivative_uniformity );
`);class Lne extends RE{constructor(e,t){super(e,t,new Cne),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}_generateTextureSample(e,t,i,s,r=this.shaderStage){return r==="fragment"?s?`textureSample( ${t}, ${t}_sampler, ${i}, ${s} )`:`textureSample( ${t}, ${t}_sampler, ${i} )`:this.generateTextureSampleLevel(e,t,i,"0",s)}generateTextureSampleLevel(e,t,i,s,r){return this.isUnfilterable(e)===!1?`textureSampleLevel( ${t}, ${t}_sampler, ${i}, ${s} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,i,s):this.generateTextureLod(e,t,i,r,s)}generateWrapFunction(e){const t=`tsl_coord_${CI[e.wrapS]}S_${CI[e.wrapT]}_${e.isData3DTexture?"3d":"2d"}T`;let i=PI[t];if(i===void 0){const s=[],r=e.isData3DTexture?"vec3f":"vec2f";let l=`fn ${t}( coord : ${r} ) -> ${r} {

	return ${r}(
`;const u=(d,f)=>{d===za?(s.push(la.repeatWrapping_float),l+=`		tsl_repeatWrapping_float( coord.${f} )`):d===js?(s.push(la.clampWrapping_float),l+=`		tsl_clampWrapping_float( coord.${f} )`):d===ic?(s.push(la.mirrorWrapping_float),l+=`		tsl_mirrorWrapping_float( coord.${f} )`):(l+=`		coord.${f}`,console.warn(`WebGPURenderer: Unsupported texture wrap type "${d}" for vertex shader.`))};u(e.wrapS,"x"),l+=`,
`,u(e.wrapT,"y"),e.isData3DTexture&&(l+=`,
`,u(e.wrapR,"z")),l+=`
	);

}
`,PI[t]=i=new zs(l,s)}return i.build(this),t}generateArrayDeclaration(e,t){return`array< ${this.getType(e)}, ${t} >`}generateTextureDimension(e,t,i){const s=this.getDataFromNode(e,this.shaderStage,this.globalCache);s.dimensionsSnippet===void 0&&(s.dimensionsSnippet={});let r=s.dimensionsSnippet[i];if(s.dimensionsSnippet[i]===void 0){let l,u;const{primarySamples:d}=this.renderer.backend.utils.getTextureSampleData(e),f=d>1;e.isData3DTexture?u="vec3<u32>":u="vec2<u32>",f||e.isStorageTexture?l=t:l=`${t}${i?`, u32( ${i} )`:""}`,r=new Jm(new Qm(`textureDimensions( ${l} )`,u)),s.dimensionsSnippet[i]=r,(e.isArrayTexture||e.isDataArrayTexture||e.isData3DTexture)&&(s.arrayLayerCount=new Jm(new Qm(`textureNumLayers(${t})`,"u32"))),e.isTextureCube&&(s.cubeFaceCount=new Jm(new Qm("6u","u32")))}return r.build(this)}generateFilteredTexture(e,t,i,s="0u"){this._include("biquadraticTexture");const r=this.generateWrapFunction(e),l=this.generateTextureDimension(e,t,s);return`tsl_biquadraticTexture( ${t}, ${r}( ${i} ), ${l}, u32( ${s} ) )`}generateTextureLod(e,t,i,s,r="0u"){const l=this.generateWrapFunction(e),u=this.generateTextureDimension(e,t,r),d=e.isData3DTexture?"vec3":"vec2",f=`${d}<u32>( ${l}( ${i} ) * ${d}<f32>( ${u} ) )`;return this.generateTextureLoad(e,t,f,s,r)}generateTextureLoad(e,t,i,s,r="0u"){let l;return s?l=`textureLoad( ${t}, ${i}, ${s}, u32( ${r} ) )`:(l=`textureLoad( ${t}, ${i}, u32( ${r} ) )`,this.renderer.backend.compatibilityMode&&e.isDepthTexture&&(l+=".x")),l}generateTextureStore(e,t,i,s,r){let l;return s?l=`textureStore( ${t}, ${i}, ${s}, ${r} )`:l=`textureStore( ${t}, ${i}, ${r} )`,l}isSampleCompare(e){return e.isDepthTexture===!0&&e.compareFunction!==null}isUnfilterable(e){return this.getComponentTypeFromTexture(e)!=="float"||!this.isAvailable("float32Filterable")&&e.isDataTexture===!0&&e.type===os||this.isSampleCompare(e)===!1&&e.minFilter===Ci&&e.magFilter===Ci||this.renderer.backend.utils.getTextureSampleData(e).primarySamples>1}generateTexture(e,t,i,s,r=this.shaderStage){let l=null;return this.isUnfilterable(e)?l=this.generateTextureLod(e,t,i,s,"0",r):l=this._generateTextureSample(e,t,i,s,r),l}generateTextureGrad(e,t,i,s,r,l=this.shaderStage){if(l==="fragment")return`textureSampleGrad( ${t}, ${t}_sampler, ${i},  ${s[0]}, ${s[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${l} shader.`)}generateTextureCompare(e,t,i,s,r,l=this.shaderStage){if(l==="fragment")return e.isDepthTexture===!0&&e.isArrayTexture===!0?`textureSampleCompare( ${t}, ${t}_sampler, ${i}, ${r}, ${s} )`:`textureSampleCompare( ${t}, ${t}_sampler, ${i}, ${s} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${l} shader.`)}generateTextureLevel(e,t,i,s,r){return this.isUnfilterable(e)===!1?`textureSampleLevel( ${t}, ${t}_sampler, ${i}, ${s} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,i,s):this.generateTextureLod(e,t,i,r,s)}generateTextureBias(e,t,i,s,r,l=this.shaderStage){if(l==="fragment")return`textureSampleBias( ${t}, ${t}_sampler, ${i}, ${s} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${l} shader.`)}getPropertyName(e,t=this.shaderStage){if(e.isNodeVarying===!0&&e.needsInterpolation===!0){if(t==="vertex")return`varyings.${e.name}`}else if(e.isNodeUniform===!0){const i=e.name,s=e.type;return s==="texture"||s==="cubeTexture"||s==="storageTexture"||s==="texture3D"?i:s==="buffer"||s==="storageBuffer"||s==="indirectStorageBuffer"?this.isCustomStruct(e)?i:i+".value":e.groupNode.name+"."+i}return super.getPropertyName(e)}getOutputStructName(){return"output"}getFunctionOperator(e){const t=Pne[e];return t!==void 0?(this._include(t),t):null}getNodeAccess(e,t){return t!=="compute"?e.isAtomic===!0?(console.warn("WebGPURenderer: Atomic operations are only supported in compute shaders."),yr.READ_WRITE):yr.READ_ONLY:e.access}getStorageAccess(e,t){return Nne[this.getNodeAccess(e,t)]}getUniformFromNode(e,t,i,s=null){const r=super.getUniformFromNode(e,t,i,s),l=this.getDataFromNode(e,i,this.globalCache);if(l.uniformGPU===void 0){let u;const d=e.groupNode,f=d.name,g=this.getBindGroupArray(f,i);if(t==="texture"||t==="cubeTexture"||t==="storageTexture"||t==="texture3D"){let x=null;const v=this.getNodeAccess(e,i);if(t==="texture"||t==="storageTexture"?e.value.is3DTexture===!0?x=new UM(r.name,r.node,d,v):x=new J0(r.name,r.node,d,v):t==="cubeTexture"?x=new j3(r.name,r.node,d,v):t==="texture3D"&&(x=new UM(r.name,r.node,d,v)),x.store=e.isStorageTextureNode===!0,x.setVisibility(Gy[i]),this.isUnfilterable(e.value)===!1&&x.store===!1){const S=new _ne(`${r.name}_sampler`,r.node,d);S.setVisibility(Gy[i]),g.push(S,x),u=[S,x]}else g.push(x),u=[x]}else if(t==="buffer"||t==="storageBuffer"||t==="indirectStorageBuffer"){const x=t==="buffer"?Z3:vne,v=new x(e,d);v.setVisibility(Gy[i]),g.push(v),u=v,r.name=s||"NodeBuffer_"+r.id}else{const x=this.uniformGroups[i]||(this.uniformGroups[i]={});let v=x[f];v===void 0&&(v=new K3(f,d),v.setVisibility(Gy[i]),x[f]=v,g.push(v)),u=this.getNodeUniform(r,t),v.addUniform(u)}l.uniformGPU=u}return r}getBuiltin(e,t,i,s=this.shaderStage){const r=this.builtins[s]||(this.builtins[s]=new Map);return r.has(e)===!1&&r.set(e,{name:e,property:t,type:i}),t}hasBuiltin(e,t=this.shaderStage){return this.builtins[t]!==void 0&&this.builtins[t].has(e)}getVertexIndex(){return this.shaderStage==="vertex"?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(e){const t=e.layout,i=this.flowShaderNode(e),s=[];for(const l of t.inputs)s.push(l.name+" : "+this.getType(l.type));let r=`fn ${t.name}( ${s.join(", ")} ) -> ${this.getType(t.type)} {
${i.vars}
${i.code}
`;return i.result&&(r+=`	return ${i.result};
`),r+=`
}
`,r}getInstanceIndex(){return this.shaderStage==="vertex"?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}getClipDistance(){return"varyings.hw_clip_distances"}isFlipY(){return!1}enableDirective(e,t=this.shaderStage){(this.directives[t]||(this.directives[t]=new Set)).add(e)}getDirectives(e){const t=[],i=this.directives[e];if(i!==void 0)for(const s of i)t.push(`enable ${s};`);return t.join(`
`)}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}enableHardwareClipping(e){this.enableClipDistances(),this.getBuiltin("clip_distances","hw_clip_distances",`array<f32, ${e} >`,"vertex")}getBuiltins(e){const t=[],i=this.builtins[e];if(i!==void 0)for(const{name:s,property:r,type:l}of i.values())t.push(`@builtin( ${s} ) ${r} : ${l}`);return t.join(`,
	`)}getScopedArray(e,t,i,s){return this.scopedArrays.has(e)===!1&&this.scopedArrays.set(e,{name:e,scope:t,bufferType:i,bufferCount:s}),e}getScopedArrays(e){if(e!=="compute")return;const t=[];for(const{name:i,scope:s,bufferType:r,bufferCount:l}of this.scopedArrays.values()){const u=this.getType(r);t.push(`var<${s}> ${i}: array< ${u}, ${l} >;`)}return t.join(`
`)}getAttributes(e){const t=[];if(e==="compute"&&(this.getBuiltin("global_invocation_id","globalId","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",e),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),e==="vertex"||e==="compute"){const i=this.getBuiltins("attribute");i&&t.push(i);const s=this.getAttributesArray();for(let r=0,l=s.length;r<l;r++){const u=s[r],d=u.name,f=this.getType(u.type);t.push(`@location( ${r} ) ${d} : ${f}`)}}return t.join(`,
	`)}getStructMembers(e){const t=[];for(const i of e.members){const s=e.output?"@location( "+i.index+" ) ":"";let r=this.getType(i.type);i.atomic&&(r="atomic< "+r+" >"),t.push(`	${s+i.name} : ${r}`)}return e.output&&t.push(`	${this.getBuiltins("output")}`),t.join(`,
`)}getStructs(e){let t="";const i=this.structs[e];if(i.length>0){const s=[];for(const r of i){let l=`struct ${r.name} {
`;l+=this.getStructMembers(r),l+=`
};`,s.push(l)}t=`
`+s.join(`

`)+`
`}return t}getVar(e,t,i=null){let s=`var ${t} : `;return i!==null?s+=this.generateArrayDeclaration(e,i):s+=this.getType(e),s}getVars(e){const t=[],i=this.vars[e];if(i!==void 0)for(const s of i)t.push(`	${this.getVar(s.type,s.name,s.count)};`);return`
${t.join(`
`)}
`}getVaryings(e){const t=[];if(e==="vertex"&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),e==="vertex"||e==="fragment"){const r=this.varyings,l=this.vars[e];for(let u=0;u<r.length;u++){const d=r[u];if(d.needsInterpolation){let f=`@location( ${u} )`;if(d.interpolationType){const g=d.interpolationSampling!==null?`, ${d.interpolationSampling} )`:" )";f+=` @interpolate( ${d.interpolationType}${g}`}else/^(int|uint|ivec|uvec)/.test(d.type)&&(f+=` @interpolate( ${this.renderer.backend.compatibilityMode?"flat, either":"flat"} )`);t.push(`${f} ${d.name} : ${this.getType(d.type)}`)}else e==="vertex"&&l.includes(d)===!1&&l.push(d)}}const i=this.getBuiltins(e);i&&t.push(i);const s=t.join(`,
	`);return e==="vertex"?this._getWGSLStruct("VaryingsStruct","	"+s):s}isCustomStruct(e){const t=e.value,i=e.node,s=(t.isBufferAttribute||t.isInstancedBufferAttribute)&&i.structTypeNode!==null,r=i.value&&i.value.array&&typeof i.value.itemSize=="number"&&i.value.array.length>i.value.itemSize;return s&&!r}getUniforms(e){const t=this.uniforms[e],i=[],s=[],r=[],l={};for(const d of t){const f=d.groupNode.name,g=this.bindingsIndexes[f];if(d.type==="texture"||d.type==="cubeTexture"||d.type==="storageTexture"||d.type==="texture3D"){const x=d.node.value;this.isUnfilterable(x)===!1&&d.node.isStorageTextureNode!==!0&&(this.isSampleCompare(x)?i.push(`@binding( ${g.binding++} ) @group( ${g.group} ) var ${d.name}_sampler : sampler_comparison;`):i.push(`@binding( ${g.binding++} ) @group( ${g.group} ) var ${d.name}_sampler : sampler;`));let v,S="";const{primarySamples:T}=this.renderer.backend.utils.getTextureSampleData(x);if(T>1&&(S="_multisampled"),x.isCubeTexture===!0)v="texture_cube<f32>";else if(x.isDepthTexture===!0)this.renderer.backend.compatibilityMode&&x.compareFunction===null?v=`texture${S}_2d<f32>`:v=`texture_depth${S}_2d${x.isArrayTexture===!0?"_array":""}`;else if(d.node.isStorageTextureNode===!0){const E=BM(x),A=this.getStorageAccess(d.node,e),w=d.node.value.is3DTexture,O=d.node.value.isArrayTexture;v=`texture_storage_${w?"3d":`2d${O?"_array":""}`}<${E}, ${A}>`}else if(x.isArrayTexture===!0||x.isDataArrayTexture===!0||x.isCompressedArrayTexture===!0)v="texture_2d_array<f32>";else if(x.is3DTexture===!0||x.isData3DTexture===!0)v="texture_3d<f32>";else{const E=this.getComponentTypeFromTexture(x).charAt(0);v=`texture${S}_2d<${E}32>`}i.push(`@binding( ${g.binding++} ) @group( ${g.group} ) var ${d.name} : ${v};`)}else if(d.type==="buffer"||d.type==="storageBuffer"||d.type==="indirectStorageBuffer"){const x=d.node,v=this.getType(x.getNodeType(this)),S=x.bufferCount,T=S>0&&d.type==="buffer"?", "+S:"",E=x.isStorageBufferNode?`storage, ${this.getStorageAccess(x,e)}`:"uniform";if(this.isCustomStruct(d))s.push(`@binding( ${g.binding++} ) @group( ${g.group} ) var<${E}> ${d.name} : ${v};`);else{const w=`	value : array< ${x.isAtomic?`atomic<${v}>`:`${v}`}${T} >`;s.push(this._getWGSLStructBinding(d.name,w,E,g.binding++,g.group))}}else{const x=this.getType(this.getVectorType(d.type)),v=d.groupNode.name;(l[v]||(l[v]={index:g.binding++,id:g.group,snippets:[]})).snippets.push(`	${d.name} : ${x}`)}}for(const d in l){const f=l[d];r.push(this._getWGSLStructBinding(d,f.snippets.join(`,
`),"uniform",f.index,f.id))}let u=i.join(`
`);return u+=s.join(`
`),u+=r.join(`
`),u}buildCode(){const e=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){this.shaderStage=t;const i=e[t];i.uniforms=this.getUniforms(t),i.attributes=this.getAttributes(t),i.varyings=this.getVaryings(t),i.structs=this.getStructs(t),i.vars=this.getVars(t),i.codes=this.getCodes(t),i.directives=this.getDirectives(t),i.scopedArrays=this.getScopedArrays(t);let s=`// code

`;s+=this.flowCode[t];const r=this.flowNodes[t],l=r[r.length-1],u=l.outputNode,d=u!==void 0&&u.isOutputStructNode===!0;for(const f of r){const g=this.getFlowData(f),x=f.name;if(x&&(s.length>0&&(s+=`
`),s+=`	// flow -> ${x}
`),s+=`${g.code}
	`,f===l&&t!=="compute"){if(s+=`// result

	`,t==="vertex")s+=`varyings.Vertex = ${g.result};`;else if(t==="fragment")if(d)i.returnType=u.getNodeType(this),i.structs+="var<private> output : "+i.returnType+";",s+=`return ${g.result};`;else{let v="	@location(0) color: vec4<f32>";const S=this.getBuiltins("output");S&&(v+=`,
	`+S),i.returnType="OutputStruct",i.structs+=this._getWGSLStruct("OutputStruct",v),i.structs+=`
var<private> output : OutputStruct;`,s+=`output.color = ${g.result};

	return output;`}}}i.flow=s}if(this.shaderStage=null,this.material!==null)this.vertexShader=this._getWGSLVertexCode(e.vertex),this.fragmentShader=this._getWGSLFragmentCode(e.fragment);else{const t=this.object.workgroupSize;this.computeShader=this._getWGSLComputeCode(e.compute,t)}}getMethod(e,t=null){let i;return t!==null&&(i=this._getWGSLMethod(e+"_"+t)),i===void 0&&(i=this._getWGSLMethod(e)),i||e}getType(e){return Ine[e]||e}isAvailable(e){let t=NI[e];return t===void 0&&(e==="float32Filterable"?t=this.renderer.hasFeature("float32-filterable"):e==="clipDistance"&&(t=this.renderer.hasFeature("clip-distances")),NI[e]=t),t}_getWGSLMethod(e){return la[e]!==void 0&&this._include(e),Wm[e]}_include(e){const t=la[e];return t.build(this),this.currentFunctionNode!==null&&this.currentFunctionNode.includes.push(t),t}_getWGSLVertexCode(e){return`${this.getSignature()}
// directives
${e.directives}

// structs
${e.structs}

// uniforms
${e.uniforms}

// varyings
${e.varyings}
var<private> varyings : VaryingsStruct;

// codes
${e.codes}

@vertex
fn main( ${e.attributes} ) -> VaryingsStruct {

	// vars
	${e.vars}

	// flow
	${e.flow}

	return varyings;

}
`}_getWGSLFragmentCode(e){return`${this.getSignature()}
// global
${tO}

// structs
${e.structs}

// uniforms
${e.uniforms}

// codes
${e.codes}

@fragment
fn main( ${e.varyings} ) -> ${e.returnType} {

	// vars
	${e.vars}

	// flow
	${e.flow}

}
`}_getWGSLComputeCode(e,t){const[i,s,r]=t;return`${this.getSignature()}
// directives
${e.directives}

// system
var<private> instanceIndex : u32;

// locals
${e.scopedArrays}

// structs
${e.structs}

// uniforms
${e.uniforms}

// codes
${e.codes}

@compute @workgroup_size( ${i}, ${s}, ${r} )
fn main( ${e.attributes} ) {

	// system
	instanceIndex = globalId.x
		+ globalId.y * ( ${i} * numWorkgroups.x )
		+ globalId.z * ( ${i} * numWorkgroups.x ) * ( ${s} * numWorkgroups.y );

	// vars
	${e.vars}

	// flow
	${e.flow}

}
`}_getWGSLStruct(e,t){return`
struct ${e} {
${t}
};`}_getWGSLStructBinding(e,t,i,s=0,r=0){const l=e+"Struct";return`${this._getWGSLStruct(l,t)}
@binding( ${s} ) @group( ${r} )
var<${i}> ${e} : ${l};`}}class Dne{constructor(e){this.backend=e}getCurrentDepthStencilFormat(e){let t;return e.depthTexture!==null?t=this.getTextureFormatGPU(e.depthTexture):e.depth&&e.stencil?t=ye.Depth24PlusStencil8:e.depth&&(t=ye.Depth24Plus),t}getTextureFormatGPU(e){return this.backend.get(e).format}getTextureSampleData(e){let t;if(e.isFramebufferTexture)t=1;else if(e.isDepthTexture&&!e.renderTarget){const r=this.backend.renderer,l=r.getRenderTarget();t=l?l.samples:r.samples}else e.renderTarget&&(t=e.renderTarget.samples);t=t||1;const i=t>1&&e.renderTarget!==null&&e.isDepthTexture!==!0&&e.isFramebufferTexture!==!0;return{samples:t,primarySamples:i?1:t,isMSAA:i}}getCurrentColorFormat(e){let t;return e.textures!==null?t=this.getTextureFormatGPU(e.textures[0]):t=this.getPreferredCanvasFormat(),t}getCurrentColorSpace(e){return e.textures!==null?e.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(e,t){if(e.isPoints)return Ff.PointList;if(e.isLineSegments||e.isMesh&&t.wireframe===!0)return Ff.LineList;if(e.isLine)return Ff.LineStrip;if(e.isMesh)return Ff.TriangleList}getSampleCount(e){return e>=4?4:1}getSampleCountRenderContext(e){return e.textures!==null?this.getSampleCount(e.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){const e=this.backend.parameters.outputType;if(e===void 0)return navigator.gpu.getPreferredCanvasFormat();if(e===Ts)return ye.BGRA8Unorm;if(e===Qs)return ye.RGBA16Float;throw new Error("Unsupported outputType")}}const nO=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]);typeof Float16Array<"u"&&nO.set(Float16Array,["float16"]);const Une=new Map([[nw,["float16"]]]),Fne=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class Bne{constructor(e){this.backend=e}createAttribute(e,t){const i=this._getBufferAttribute(e),s=this.backend,r=s.get(i);let l=r.buffer;if(l===void 0){const u=s.device;let d=i.array;if(e.normalized===!1){if(d.constructor===Int16Array||d.constructor===Int8Array)d=new Int32Array(d);else if((d.constructor===Uint16Array||d.constructor===Uint8Array)&&(d=new Uint32Array(d),t&GPUBufferUsage.INDEX))for(let x=0;x<d.length;x++)d[x]===65535&&(d[x]=4294967295)}if(i.array=d,(i.isStorageBufferAttribute||i.isStorageInstancedBufferAttribute)&&i.itemSize===3){d=new d.constructor(i.count*4);for(let x=0;x<i.count;x++)d.set(i.array.subarray(x*3,x*3+3),x*4);i.itemSize=4,i.array=d,r._force3to4BytesAlignment=!0}const f=d.byteLength,g=f+(4-f%4)%4;l=u.createBuffer({label:i.name,size:g,usage:t,mappedAtCreation:!0}),new d.constructor(l.getMappedRange()).set(d),l.unmap(),r.buffer=l}}updateAttribute(e){const t=this._getBufferAttribute(e),i=this.backend,s=i.device,r=i.get(t),l=i.get(t).buffer;let u=t.array;if(r._force3to4BytesAlignment===!0){u=new u.constructor(t.count*4);for(let g=0;g<t.count;g++)u.set(t.array.subarray(g*3,g*3+3),g*4);t.array=u}const d=this._isTypedArray(u),f=t.updateRanges;if(f.length===0)s.queue.writeBuffer(l,0,u,0);else{const g=d?1:u.BYTES_PER_ELEMENT;for(let x=0,v=f.length;x<v;x++){const S=f[x];let T,E;if(r._force3to4BytesAlignment===!0){const w=Math.floor(S.start/3),O=Math.ceil(S.count/3);T=w*4*g,E=O*4*g}else T=S.start*g,E=S.count*g;const A=T*(d?u.BYTES_PER_ELEMENT:1);s.queue.writeBuffer(l,A,u,T,E)}t.clearUpdateRanges()}}createShaderVertexBuffers(e){const t=e.getAttributes(),i=new Map;for(let s=0;s<t.length;s++){const r=t[s],l=r.array.BYTES_PER_ELEMENT,u=this._getBufferAttribute(r);let d=i.get(u);if(d===void 0){let x,v;r.isInterleavedBufferAttribute===!0?(x=r.data.stride*l,v=r.data.isInstancedInterleavedBuffer?ky.Instance:ky.Vertex):(x=r.itemSize*l,v=r.isInstancedBufferAttribute?ky.Instance:ky.Vertex),r.normalized===!1&&(r.array.constructor===Int16Array||r.array.constructor===Uint16Array)&&(x=4),d={arrayStride:x,attributes:[],stepMode:v},i.set(u,d)}const f=this._getVertexFormat(r),g=r.isInterleavedBufferAttribute===!0?r.offset*l:0;d.attributes.push({shaderLocation:s,offset:g,format:f})}return Array.from(i.values())}destroyAttribute(e){const t=this.backend;t.get(this._getBufferAttribute(e)).buffer.destroy(),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,i=t.device,r=t.get(this._getBufferAttribute(e)).buffer,l=r.size,u=i.createBuffer({label:`${e.name}_readback`,size:l,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),d=i.createCommandEncoder({label:`readback_encoder_${e.name}`});d.copyBufferToBuffer(r,0,u,0,l);const f=d.finish();i.queue.submit([f]),await u.mapAsync(GPUMapMode.READ);const g=u.getMappedRange(),x=new e.array.constructor(g.slice(0));return u.unmap(),x.buffer}_getVertexFormat(e){const{itemSize:t,normalized:i}=e,s=e.array.constructor,r=e.constructor;let l;if(t===1)l=Fne.get(s);else{const d=(Une.get(r)||nO.get(s))[i?1:0];if(d){const f=s.BYTES_PER_ELEMENT*t,x=Math.floor((f+3)/4)*4/s.BYTES_PER_ELEMENT;if(x%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");l=`${d}x${x}`}}return l||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),l}_isTypedArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}class One{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend,i=t.device,s=[];let r=0;for(const l of e.bindings){const u={binding:r++,visibility:l.visibility};if(l.isUniformBuffer||l.isStorageBuffer){const d={};l.isStorageBuffer&&(l.visibility&4&&(l.access===yr.READ_WRITE||l.access===yr.WRITE_ONLY)?d.type=nM.Storage:d.type=nM.ReadOnlyStorage),u.buffer=d}else if(l.isSampledTexture&&l.store){const d={};d.format=this.backend.get(l.texture).texture.format;const f=l.access;f===yr.READ_WRITE?d.access=iM.ReadWrite:f===yr.WRITE_ONLY?d.access=iM.WriteOnly:d.access=iM.ReadOnly,l.texture.isArrayTexture?d.viewDimension=Js.TwoDArray:l.texture.is3DTexture&&(d.viewDimension=Js.ThreeD),u.storageTexture=d}else if(l.isSampledTexture){const d={},{primarySamples:f}=t.utils.getTextureSampleData(l.texture);if(f>1&&(d.multisampled=!0,l.texture.isDepthTexture||(d.sampleType=hh.UnfilterableFloat)),l.texture.isDepthTexture)t.compatibilityMode&&l.texture.compareFunction===null?d.sampleType=hh.UnfilterableFloat:d.sampleType=hh.Depth;else if(l.texture.isDataTexture||l.texture.isDataArrayTexture||l.texture.isData3DTexture){const g=l.texture.type;g===or?d.sampleType=hh.SInt:g===rs?d.sampleType=hh.UInt:g===os&&(this.backend.hasFeature("float32-filterable")?d.sampleType=hh.Float:d.sampleType=hh.UnfilterableFloat)}l.isSampledCubeTexture?d.viewDimension=Js.Cube:l.texture.isArrayTexture||l.texture.isDataArrayTexture||l.texture.isCompressedArrayTexture?d.viewDimension=Js.TwoDArray:l.isSampledTexture3D&&(d.viewDimension=Js.ThreeD),u.texture=d}else if(l.isSampler){const d={};l.texture.isDepthTexture&&(l.texture.compareFunction!==null?d.type=AI.Comparison:t.compatibilityMode&&(d.type=AI.NonFiltering)),u.sampler=d}else console.error(`WebGPUBindingUtils: Unsupported binding "${l}".`);s.push(u)}return i.createBindGroupLayout({entries:s})}createBindings(e,t,i,s=0){const{backend:r,bindGroupLayoutCache:l}=this,u=r.get(e);let d=l.get(e.bindingsReference);d===void 0&&(d=this.createBindingsLayout(e),l.set(e.bindingsReference,d));let f;i>0&&(u.groups===void 0&&(u.groups=[],u.versions=[]),u.versions[i]===s&&(f=u.groups[i])),f===void 0&&(f=this.createBindGroup(e,d),i>0&&(u.groups[i]=f,u.versions[i]=s)),u.group=f,u.layout=d}updateBinding(e){const t=this.backend,i=t.device,s=e.buffer,r=t.get(e).buffer;i.queue.writeBuffer(r,0,s,0)}createBindGroupIndex(e,t){const s=this.backend.device,r=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,l=e[0],u=s.createBuffer({label:"bindingCameraIndex_"+l,size:16,usage:r});s.queue.writeBuffer(u,0,e,0);const d=[{binding:0,resource:{buffer:u}}];return s.createBindGroup({label:"bindGroupCameraIndex_"+l,layout:t,entries:d})}createBindGroup(e,t){const i=this.backend,s=i.device;let r=0;const l=[];for(const u of e.bindings){if(u.isUniformBuffer){const d=i.get(u);if(d.buffer===void 0){const f=u.byteLength,g=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,x=s.createBuffer({label:"bindingBuffer_"+u.name,size:f,usage:g});d.buffer=x}l.push({binding:r,resource:{buffer:d.buffer}})}else if(u.isStorageBuffer){const d=i.get(u);if(d.buffer===void 0){const f=u.attribute;d.buffer=i.get(f).buffer}l.push({binding:r,resource:{buffer:d.buffer}})}else if(u.isSampledTexture){const d=i.get(u.texture);let f;if(d.externalTexture!==void 0)f=s.importExternalTexture({source:d.externalTexture});else{const g=u.store?1:d.texture.mipLevelCount;let x=`view-${d.texture.width}-${d.texture.height}`;if(d.texture.depthOrArrayLayers>1&&(x+=`-${d.texture.depthOrArrayLayers}`),x+=`-${g}`,f=d[x],f===void 0){const v=gne.All;let S;u.isSampledCubeTexture?S=Js.Cube:u.isSampledTexture3D?S=Js.ThreeD:u.texture.isArrayTexture||u.texture.isDataArrayTexture||u.texture.isCompressedArrayTexture?S=Js.TwoDArray:S=Js.TwoD,f=d[x]=d.texture.createView({aspect:v,dimension:S,mipLevelCount:g})}}l.push({binding:r,resource:f})}else if(u.isSampler){const d=i.get(u.texture);l.push({binding:r,resource:d.sampler})}r++}return s.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:l})}}class Vne{constructor(e){this.backend=e,this._activePipelines=new WeakMap}setPipeline(e,t){this._activePipelines.get(e)!==t&&(e.setPipeline(t),this._activePipelines.set(e,t))}_getSampleCount(e){return this.backend.utils.getSampleCountRenderContext(e)}createRenderPipeline(e,t){const{object:i,material:s,geometry:r,pipeline:l}=e,{vertexProgram:u,fragmentProgram:d}=l,f=this.backend,g=f.device,x=f.utils,v=f.get(l),S=[];for(const Ne of e.getBindings()){const Oe=f.get(Ne);S.push(Oe.layout)}const T=f.attributeUtils.createShaderVertexBuffers(e);let E;s.blending!==kr&&(s.blending!==To||s.transparent!==!1)&&(E=this._getBlending(s));let A={};s.stencilWrite===!0&&(A={compare:this._getStencilCompare(s),failOp:this._getStencilOperation(s.stencilFail),depthFailOp:this._getStencilOperation(s.stencilZFail),passOp:this._getStencilOperation(s.stencilZPass)});const w=this._getColorWriteMask(s),O=[];if(e.context.textures!==null){const Ne=e.context.textures;for(let Oe=0;Oe<Ne.length;Oe++){const Be=x.getTextureFormatGPU(Ne[Oe]);O.push({format:Be,blend:E,writeMask:w})}}else{const Ne=x.getCurrentColorFormat(e.context);O.push({format:Ne,blend:E,writeMask:w})}const F=f.get(u).module,B=f.get(d).module,k=this._getPrimitiveState(i,r,s),Y=this._getDepthCompare(s),$=x.getCurrentDepthStencilFormat(e.context),Q=this._getSampleCount(e.context),z={label:`renderPipeline_${s.name||s.type}_${s.id}`,vertex:Object.assign({},F,{buffers:T}),fragment:Object.assign({},B,{targets:O}),primitive:k,multisample:{count:Q,alphaToCoverageEnabled:s.alphaToCoverage&&Q>1},layout:g.createPipelineLayout({bindGroupLayouts:S})},q={},oe=e.context.depth,Ce=e.context.stencil;if((oe===!0||Ce===!0)&&(oe===!0&&(q.format=$,q.depthWriteEnabled=s.depthWrite,q.depthCompare=Y),Ce===!0&&(q.stencilFront=A,q.stencilBack={},q.stencilReadMask=s.stencilFuncMask,q.stencilWriteMask=s.stencilWriteMask),s.polygonOffset===!0&&(q.depthBias=s.polygonOffsetUnits,q.depthBiasSlopeScale=s.polygonOffsetFactor,q.depthBiasClamp=0),z.depthStencil=q),t===null)v.pipeline=g.createRenderPipeline(z);else{const Ne=new Promise(Oe=>{g.createRenderPipelineAsync(z).then(Be=>{v.pipeline=Be,Oe()})});t.push(Ne)}}createBundleEncoder(e,t="renderBundleEncoder"){const i=this.backend,{utils:s,device:r}=i,l=s.getCurrentDepthStencilFormat(e),u=s.getCurrentColorFormat(e),d=this._getSampleCount(e),f={label:t,colorFormats:[u],depthStencilFormat:l,sampleCount:d};return r.createRenderBundleEncoder(f)}createComputePipeline(e,t){const i=this.backend,s=i.device,r=i.get(e.computeProgram).module,l=i.get(e),u=[];for(const d of t){const f=i.get(d);u.push(f.layout)}l.pipeline=s.createComputePipeline({compute:r,layout:s.createPipelineLayout({bindGroupLayouts:u})})}_getBlending(e){let t,i;const s=e.blending,r=e.blendSrc,l=e.blendDst,u=e.blendEquation;if(s===Mh){const d=e.blendSrcAlpha!==null?e.blendSrcAlpha:r,f=e.blendDstAlpha!==null?e.blendDstAlpha:l,g=e.blendEquationAlpha!==null?e.blendEquationAlpha:u;t={srcFactor:this._getBlendFactor(r),dstFactor:this._getBlendFactor(l),operation:this._getBlendOperation(u)},i={srcFactor:this._getBlendFactor(d),dstFactor:this._getBlendFactor(f),operation:this._getBlendOperation(g)}}else{const d=e.premultipliedAlpha,f=(g,x,v,S)=>{t={srcFactor:g,dstFactor:x,operation:uh.Add},i={srcFactor:v,dstFactor:S,operation:uh.Add}};if(d)switch(s){case To:f(Ai.One,Ai.OneMinusSrcAlpha,Ai.One,Ai.OneMinusSrcAlpha);break;case Ih:f(Ai.One,Ai.One,Ai.One,Ai.One);break;case Lh:f(Ai.Zero,Ai.OneMinusSrc,Ai.Zero,Ai.One);break;case Dh:f(Ai.Dst,Ai.OneMinusSrcAlpha,Ai.Zero,Ai.One);break}else switch(s){case To:f(Ai.SrcAlpha,Ai.OneMinusSrcAlpha,Ai.One,Ai.OneMinusSrcAlpha);break;case Ih:f(Ai.SrcAlpha,Ai.One,Ai.One,Ai.One);break;case Lh:console.error("THREE.WebGPURenderer: SubtractiveBlending requires material.premultipliedAlpha = true");break;case Dh:console.error("THREE.WebGPURenderer: MultiplyBlending requires material.premultipliedAlpha = true");break}}if(t!==void 0&&i!==void 0)return{color:t,alpha:i};console.error("THREE.WebGPURenderer: Invalid blending: ",s)}_getBlendFactor(e){let t;switch(e){case ol:t=Ai.Zero;break;case Av:t=Ai.One;break;case Ev:t=Ai.Src;break;case Rv:t=Ai.OneMinusSrc;break;case kf:t=Ai.SrcAlpha;break;case Gf:t=Ai.OneMinusSrcAlpha;break;case Pv:t=Ai.Dst;break;case Iv:t=Ai.OneMinusDst;break;case Cv:t=Ai.DstAlpha;break;case Nv:t=Ai.OneMinusDstAlpha;break;case Lv:t=Ai.SrcAlphaSaturated;break;case cJ:t=Ai.Constant;break;case uJ:t=Ai.OneMinusConstant;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",e)}return t}_getStencilCompare(e){let t;const i=e.stencilFunc;switch(i){case tL:t=Ar.Never;break;case iv:t=Ar.Always;break;case nL:t=Ar.Less;break;case sL:t=Ar.LessEqual;break;case iL:t=Ar.Equal;break;case aL:t=Ar.GreaterEqual;break;case rL:t=Ar.Greater;break;case oL:t=Ar.NotEqual;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",i)}return t}_getStencilOperation(e){let t;switch(e){case Bc:t=Fc.Keep;break;case YI:t=Fc.Zero;break;case ZI:t=Fc.Replace;break;case eL:t=Fc.Invert;break;case KI:t=Fc.IncrementClamp;break;case JI:t=Fc.DecrementClamp;break;case jI:t=Fc.IncrementWrap;break;case QI:t=Fc.DecrementWrap;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",t)}return t}_getBlendOperation(e){let t;switch(e){case Rr:t=uh.Add;break;case Mv:t=uh.Subtract;break;case wv:t=uh.ReverseSubtract;break;case zM:t=uh.Min;break;case kM:t=uh.Max;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",e)}return t}_getPrimitiveState(e,t,i){const s={},r=this.backend.utils;switch(s.topology=r.getPrimitiveTopology(e,i),t.index!==null&&e.isLine===!0&&e.isLineSegments!==!0&&(s.stripIndexFormat=t.index.array instanceof Uint16Array?dp.Uint16:dp.Uint32),i.side){case ao:s.frontFace=QT.CCW,s.cullMode=eM.Back;break;case ns:s.frontFace=QT.CCW,s.cullMode=eM.Front;break;case _r:s.frontFace=QT.CCW,s.cullMode=eM.None;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",i.side);break}return s}_getColorWriteMask(e){return e.colorWrite===!0?wI.All:wI.None}_getDepthCompare(e){let t;if(e.depthTest===!1)t=Ar.Always;else{const i=e.depthFunc;switch(i){case Hf:t=Ar.Never;break;case Wf:t=Ar.Always;break;case $f:t=Ar.Less;break;case tc:t=Ar.LessEqual;break;case Xf:t=Ar.Equal;break;case qf:t=Ar.GreaterEqual;break;case Yf:t=Ar.Greater;break;case Zf:t=Ar.NotEqual;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",i)}}return t}}class zne extends eO{constructor(e,t,i=2048){super(i),this.device=e,this.type=t,this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxQueries,label:`queryset_global_timestamp_${t}`});const s=this.maxQueries*8;this.resolveBuffer=this.device.createBuffer({label:`buffer_timestamp_resolve_${t}`,size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.resultBuffer=this.device.createBuffer({label:`buffer_timestamp_result_${t}`,size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ})}allocateQueriesForContext(e){if(!this.trackTimestamp||this.isDisposed)return null;if(this.currentQueryIndex+2>this.maxQueries)return Eo(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryOffsets.set(e.id,t),t}async resolveQueriesAsync(){if(!this.trackTimestamp||this.currentQueryIndex===0||this.isDisposed)return this.lastValue;if(this.pendingResolve)return this.pendingResolve;this.pendingResolve=this._resolveQueries();try{return await this.pendingResolve}finally{this.pendingResolve=null}}async _resolveQueries(){if(this.isDisposed)return this.lastValue;try{if(this.resultBuffer.mapState!=="unmapped")return this.lastValue;const e=new Map(this.queryOffsets),t=this.currentQueryIndex,i=t*8;this.currentQueryIndex=0,this.queryOffsets.clear();const s=this.device.createCommandEncoder();s.resolveQuerySet(this.querySet,0,t,this.resolveBuffer,0),s.copyBufferToBuffer(this.resolveBuffer,0,this.resultBuffer,0,i);const r=s.finish();if(this.device.queue.submit([r]),this.resultBuffer.mapState!=="unmapped")return this.lastValue;if(await this.resultBuffer.mapAsync(GPUMapMode.READ,0,i),this.isDisposed)return this.resultBuffer.mapState==="mapped"&&this.resultBuffer.unmap(),this.lastValue;const l=new BigUint64Array(this.resultBuffer.getMappedRange(0,i));let u=0;for(const[,d]of e){const f=l[d],g=l[d+1],x=Number(g-f)/1e6;u+=x}return this.resultBuffer.unmap(),this.lastValue=u,u}catch(e){return console.error("Error resolving queries:",e),this.resultBuffer.mapState==="mapped"&&this.resultBuffer.unmap(),this.lastValue}}async dispose(){if(!this.isDisposed){if(this.isDisposed=!0,this.pendingResolve)try{await this.pendingResolve}catch(e){console.error("Error waiting for pending resolve:",e)}if(this.resultBuffer&&this.resultBuffer.mapState==="mapped")try{this.resultBuffer.unmap()}catch(e){console.error("Error unmapping buffer:",e)}this.querySet&&(this.querySet.destroy(),this.querySet=null),this.resolveBuffer&&(this.resolveBuffer.destroy(),this.resolveBuffer=null),this.resultBuffer&&(this.resultBuffer.destroy(),this.resultBuffer=null),this.queryOffsets.clear(),this.pendingResolve=null}}}class kne extends Q3{constructor(e={}){super(e),this.isWebGPUBackend=!0,this.parameters.alpha=e.alpha===void 0?!0:e.alpha,this.parameters.compatibilityMode=e.compatibilityMode===void 0?!1:e.compatibilityMode,this.parameters.requiredLimits=e.requiredLimits===void 0?{}:e.requiredLimits,this.compatibilityMode=this.parameters.compatibilityMode,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new Dne(this),this.attributeUtils=new Bne(this),this.bindingUtils=new One(this),this.pipelineUtils=new Vne(this),this.textureUtils=new Mne(this),this.occludedResolveCache=new Map}async init(e){await super.init(e);const t=this.parameters;let i;if(t.device===void 0){const l={powerPreference:t.powerPreference,featureLevel:t.compatibilityMode?"compatibility":void 0},u=typeof navigator<"u"?await navigator.gpu.requestAdapter(l):null;if(u===null)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const d=Object.values(FM),f=[];for(const x of d)u.features.has(x)&&f.push(x);const g={requiredFeatures:f,requiredLimits:t.requiredLimits};i=await u.requestDevice(g)}else i=t.device;i.lost.then(l=>{const u={api:"WebGPU",message:l.message||"Unknown reason",reason:l.reason||null,originalEvent:l};e.onDeviceLost(u)});const s=t.context!==void 0?t.context:e.domElement.getContext("webgpu");this.device=i,this.context=s;const r=t.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(FM.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:r}),this.updateSize()}get coordinateSystem(){return _a}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let e=this.defaultRenderPassdescriptor;if(e===null){const i=this.renderer;e={colorAttachments:[{view:null}]},(this.renderer.depth===!0||this.renderer.stencil===!0)&&(e.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(i.depth,i.stencil).createView()});const s=e.colorAttachments[0];this.renderer.samples>0?s.view=this.colorBuffer.createView():s.resolveTarget=void 0,this.defaultRenderPassdescriptor=e}const t=e.colorAttachments[0];return this.renderer.samples>0?t.resolveTarget=this.context.getCurrentTexture().createView():t.view=this.context.getCurrentTexture().createView(),e}_isRenderCameraDepthArray(e){return e.depthTexture&&e.depthTexture.image.depth>1&&e.camera.isArrayCamera}_getRenderPassDescriptor(e,t={}){const i=e.renderTarget,s=this.get(i);let r=s.descriptors;if(r===void 0||s.width!==i.width||s.height!==i.height||s.dimensions!==i.dimensions||s.activeMipmapLevel!==e.activeMipmapLevel||s.activeCubeFace!==e.activeCubeFace||s.samples!==i.samples){r={},s.descriptors=r;const f=()=>{i.removeEventListener("dispose",f),this.delete(i)};i.hasEventListener("dispose",f)===!1&&i.addEventListener("dispose",f)}const l=e.getCacheKey();let u=r[l];if(u===void 0){const f=e.textures,g=[];let x;const v=this._isRenderCameraDepthArray(e);for(let S=0;S<f.length;S++){const T=this.get(f[S]),E={label:`colorAttachment_${S}`,baseMipLevel:e.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:e.activeCubeFace,arrayLayerCount:1,dimension:Js.TwoD};if(i.isRenderTarget3D)x=e.activeCubeFace,E.baseArrayLayer=0,E.dimension=Js.ThreeD,E.depthOrArrayLayers=f[S].image.depth;else if(i.isRenderTarget&&f[S].image.depth>1)if(v===!0){const A=e.camera.cameras;for(let w=0;w<A.length;w++){const O={...E,baseArrayLayer:w,arrayLayerCount:1,dimension:Js.TwoD},F=T.texture.createView(O);g.push({view:F,resolveTarget:void 0,depthSlice:void 0})}}else E.dimension=Js.TwoDArray,E.depthOrArrayLayers=f[S].image.depth;if(v!==!0){const A=T.texture.createView(E);let w,O;T.msaaTexture!==void 0?(w=T.msaaTexture.createView(),O=A):(w=A,O=void 0),g.push({view:w,resolveTarget:O,depthSlice:x})}}if(u={textureViews:g},e.depth){const S=this.get(e.depthTexture),T={};e.depthTexture.isArrayTexture&&(T.dimension=Js.TwoD,T.arrayLayerCount=1,T.baseArrayLayer=e.activeCubeFace),u.depthStencilView=S.texture.createView(T)}r[l]=u,s.width=i.width,s.height=i.height,s.samples=i.samples,s.activeMipmapLevel=e.activeMipmapLevel,s.activeCubeFace=e.activeCubeFace,s.dimensions=i.dimensions}const d={colorAttachments:[]};for(let f=0;f<u.textureViews.length;f++){const g=u.textureViews[f];let x={r:0,g:0,b:0,a:1};f===0&&t.clearValue&&(x=t.clearValue),d.colorAttachments.push({view:g.view,depthSlice:g.depthSlice,resolveTarget:g.resolveTarget,loadOp:t.loadOp||qi.Load,storeOp:t.storeOp||eo.Store,clearValue:x})}return u.depthStencilView&&(d.depthStencilAttachment={view:u.depthStencilView}),d}beginRender(e){const t=this.get(e),i=this.device,s=e.occlusionQueryCount;let r;s>0&&(t.currentOcclusionQuerySet&&t.currentOcclusionQuerySet.destroy(),t.currentOcclusionQueryBuffer&&t.currentOcclusionQueryBuffer.destroy(),t.currentOcclusionQuerySet=t.occlusionQuerySet,t.currentOcclusionQueryBuffer=t.occlusionQueryBuffer,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,r=i.createQuerySet({type:"occlusion",count:s,label:`occlusionQuerySet_${e.id}`}),t.occlusionQuerySet=r,t.occlusionQueryIndex=0,t.occlusionQueryObjects=new Array(s),t.lastOcclusionObject=null);let l;e.textures===null?l=this._getDefaultRenderPassDescriptor():l=this._getRenderPassDescriptor(e,{loadOp:qi.Load}),this.initTimestampQuery(e,l),l.occlusionQuerySet=r;const u=l.depthStencilAttachment;if(e.textures!==null){const f=l.colorAttachments;for(let g=0;g<f.length;g++){const x=f[g];e.clearColor?(x.clearValue=g===0?e.clearColorValue:{r:0,g:0,b:0,a:1},x.loadOp=qi.Clear):x.loadOp=qi.Load,x.storeOp=eo.Store}}else{const f=l.colorAttachments[0];e.clearColor?(f.clearValue=e.clearColorValue,f.loadOp=qi.Clear):f.loadOp=qi.Load,f.storeOp=eo.Store}e.depth&&(e.clearDepth?(u.depthClearValue=e.clearDepthValue,u.depthLoadOp=qi.Clear):u.depthLoadOp=qi.Load,u.depthStoreOp=eo.Store),e.stencil&&(e.clearStencil?(u.stencilClearValue=e.clearStencilValue,u.stencilLoadOp=qi.Clear):u.stencilLoadOp=qi.Load,u.stencilStoreOp=eo.Store);const d=i.createCommandEncoder({label:"renderContext_"+e.id});if(this._isRenderCameraDepthArray(e)===!0){const f=e.camera.cameras;!t.layerDescriptors||t.layerDescriptors.length!==f.length?this._createDepthLayerDescriptors(e,t,l,f):this._updateDepthLayerDescriptors(e,t,f),t.bundleEncoders=[],t.bundleSets=[];for(let g=0;g<f.length;g++){const x=this.pipelineUtils.createBundleEncoder(e,"renderBundleArrayCamera_"+g),v={attributes:{},bindingGroups:[],pipeline:null,index:null};t.bundleEncoders.push(x),t.bundleSets.push(v)}t.currentPass=null}else{const f=d.beginRenderPass(l);if(t.currentPass=f,e.viewport&&this.updateViewport(e),e.scissor){const{x:g,y:x,width:v,height:S}=e.scissorValue;f.setScissorRect(g,x,v,S)}}t.descriptor=l,t.encoder=d,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.renderBundles=[]}_createDepthLayerDescriptors(e,t,i,s){const r=i.depthStencilAttachment;t.layerDescriptors=[];const l=this.get(e.depthTexture);l.viewCache||(l.viewCache=[]);for(let u=0;u<s.length;u++){const d={...i,colorAttachments:[{...i.colorAttachments[0],view:i.colorAttachments[u].view}]};if(i.depthStencilAttachment){const f=u;l.viewCache[f]||(l.viewCache[f]=l.texture.createView({dimension:Js.TwoD,baseArrayLayer:u,arrayLayerCount:1})),d.depthStencilAttachment={view:l.viewCache[f],depthLoadOp:r.depthLoadOp||qi.Clear,depthStoreOp:r.depthStoreOp||eo.Store,depthClearValue:r.depthClearValue||1},e.stencil&&(d.depthStencilAttachment.stencilLoadOp=r.stencilLoadOp,d.depthStencilAttachment.stencilStoreOp=r.stencilStoreOp,d.depthStencilAttachment.stencilClearValue=r.stencilClearValue)}else d.depthStencilAttachment={...r};t.layerDescriptors.push(d)}}_updateDepthLayerDescriptors(e,t,i){for(let s=0;s<i.length;s++){const r=t.layerDescriptors[s];if(r.depthStencilAttachment){const l=r.depthStencilAttachment;e.depth&&(e.clearDepth?(l.depthClearValue=e.clearDepthValue,l.depthLoadOp=qi.Clear):l.depthLoadOp=qi.Load),e.stencil&&(e.clearStencil?(l.stencilClearValue=e.clearStencilValue,l.stencilLoadOp=qi.Clear):l.stencilLoadOp=qi.Load)}}}finishRender(e){const t=this.get(e),i=e.occlusionQueryCount;t.renderBundles.length>0&&t.currentPass.executeBundles(t.renderBundles),i>t.occlusionQueryIndex&&t.currentPass.endOcclusionQuery();const s=t.encoder;if(this._isRenderCameraDepthArray(e)===!0){const r=[];for(let l=0;l<t.bundleEncoders.length;l++){const u=t.bundleEncoders[l];r.push(u.finish())}for(let l=0;l<t.layerDescriptors.length;l++)if(l<r.length){const u=t.layerDescriptors[l],d=s.beginRenderPass(u);if(e.viewport){const{x:f,y:g,width:x,height:v,minDepth:S,maxDepth:T}=e.viewportValue;d.setViewport(f,g,x,v,S,T)}if(e.scissor){const{x:f,y:g,width:x,height:v}=e.scissorValue;d.setScissorRect(f,g,x,v)}d.executeBundles([r[l]]),d.end()}}else t.currentPass&&t.currentPass.end();if(i>0){const r=i*8;let l=this.occludedResolveCache.get(r);l===void 0&&(l=this.device.createBuffer({size:r,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(r,l));const u=this.device.createBuffer({size:r,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});t.encoder.resolveQuerySet(t.occlusionQuerySet,0,i,l,0),t.encoder.copyBufferToBuffer(l,0,u,0,r),t.occlusionQueryBuffer=u,this.resolveOccludedAsync(e)}if(this.device.queue.submit([t.encoder.finish()]),e.textures!==null){const r=e.textures;for(let l=0;l<r.length;l++){const u=r[l];u.generateMipmaps===!0&&this.textureUtils.generateMipmaps(u)}}}isOccluded(e,t){const i=this.get(e);return i.occluded&&i.occluded.has(t)}async resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueryBuffer:i,currentOcclusionQueryObjects:s}=t;if(i&&s){const r=new WeakSet;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueryBuffer=null,await i.mapAsync(GPUMapMode.READ);const l=i.getMappedRange(),u=new BigUint64Array(l);for(let d=0;d<s.length;d++)u[d]===BigInt(0)&&r.add(s[d]);i.destroy(),t.occluded=r}}updateViewport(e){const{currentPass:t}=this.get(e),{x:i,y:s,width:r,height:l,minDepth:u,maxDepth:d}=e.viewportValue;t.setViewport(i,s,r,l,u,d)}getClearColor(){const e=super.getClearColor();return this.renderer.alpha===!0&&(e.r*=e.a,e.g*=e.a,e.b*=e.a),e}clear(e,t,i,s=null){const r=this.device,l=this.renderer;let u=[],d,f,g,x;if(e){const T=this.getClearColor();f={r:T.r,g:T.g,b:T.b,a:T.a}}if(s===null){g=l.depth,x=l.stencil;const T=this._getDefaultRenderPassDescriptor();if(e){u=T.colorAttachments;const E=u[0];E.clearValue=f,E.loadOp=qi.Clear,E.storeOp=eo.Store}(g||x)&&(d=T.depthStencilAttachment)}else{g=s.depth,x=s.stencil;const T={loadOp:e?qi.Clear:qi.Load,clearValue:e?f:void 0};g&&(T.depthLoadOp=t?qi.Clear:qi.Load,T.depthClearValue=t?l.getClearDepth():void 0,T.depthStoreOp=eo.Store),x&&(T.stencilLoadOp=i?qi.Clear:qi.Load,T.stencilClearValue=i?l.getClearStencil():void 0,T.stencilStoreOp=eo.Store);const E=this._getRenderPassDescriptor(s,T);u=E.colorAttachments,d=E.depthStencilAttachment}g&&d&&(t?(d.depthLoadOp=qi.Clear,d.depthClearValue=l.getClearDepth(),d.depthStoreOp=eo.Store):(d.depthLoadOp=qi.Load,d.depthStoreOp=eo.Store)),x&&d&&(i?(d.stencilLoadOp=qi.Clear,d.stencilClearValue=l.getClearStencil(),d.stencilStoreOp=eo.Store):(d.stencilLoadOp=qi.Load,d.stencilStoreOp=eo.Store));const v=r.createCommandEncoder({label:"clear"});v.beginRenderPass({colorAttachments:u,depthStencilAttachment:d}).end(),r.queue.submit([v.finish()])}beginCompute(e){const t=this.get(e),i={label:"computeGroup_"+e.id};this.initTimestampQuery(e,i),t.cmdEncoderGPU=this.device.createCommandEncoder({label:"computeGroup_"+e.id}),t.passEncoderGPU=t.cmdEncoderGPU.beginComputePass(i)}compute(e,t,i,s,r=null){const l=this.get(t),{passEncoderGPU:u}=this.get(e),d=this.get(s).pipeline;this.pipelineUtils.setPipeline(u,d);for(let g=0,x=i.length;g<x;g++){const v=i[g],S=this.get(v);u.setBindGroup(g,S.group)}let f;if(r===null&&(r=t.count),typeof r=="number"){const g=r;if(l.dispatchSize===void 0||l.count!==g){l.dispatchSize=[0,1,1],l.count=g;const x=t.workgroupSize;let v=x[0];for(let E=1;E<x.length;E++)v*=x[E];const S=Math.ceil(g/v),T=this.device.limits.maxComputeWorkgroupsPerDimension;f=[S,1,1],S>T&&(f[0]=Math.min(S,T),f[1]=Math.ceil(S/T)),l.dispatchSize=f}f=l.dispatchSize}else f=r;u.dispatchWorkgroups(f[0],f[1]||1,f[2]||1)}finishCompute(e){const t=this.get(e);t.passEncoderGPU.end(),this.device.queue.submit([t.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(e,t){const{object:i,material:s,context:r,pipeline:l}=e,u=e.getBindings(),d=this.get(r),f=this.get(l).pipeline,g=e.getIndex(),x=g!==null,v=e.getDrawParameters();if(v===null)return;const S=(E,A)=>{this.pipelineUtils.setPipeline(E,f),A.pipeline=f;const w=A.bindingGroups;for(let F=0,B=u.length;F<B;F++){const k=u[F],Y=this.get(k);w[k.index]!==k.id&&(E.setBindGroup(k.index,Y.group),w[k.index]=k.id)}if(x===!0&&A.index!==g){const F=this.get(g).buffer,B=g.array instanceof Uint16Array?dp.Uint16:dp.Uint32;E.setIndexBuffer(F,B),A.index=g}const O=e.getVertexBuffers();for(let F=0,B=O.length;F<B;F++){const k=O[F];if(A.attributes[F]!==k){const Y=this.get(k).buffer;E.setVertexBuffer(F,Y),A.attributes[F]=k}}r.stencil===!0&&s.stencilWrite===!0&&d.currentStencilRef!==s.stencilRef&&(E.setStencilReference(s.stencilRef),d.currentStencilRef=s.stencilRef)},T=(E,A)=>{if(S(E,A),i.isBatchedMesh===!0){const w=i._multiDrawStarts,O=i._multiDrawCounts,F=i._multiDrawCount,B=i._multiDrawInstances;B!==null&&Eo("THREE.WebGPUBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");for(let k=0;k<F;k++){const Y=B?B[k]:1,$=Y>1?0:k;x===!0?E.drawIndexed(O[k],Y,w[k]/g.array.BYTES_PER_ELEMENT,0,$):E.draw(O[k],Y,w[k],$),t.update(i,O[k],Y)}}else if(x===!0){const{vertexCount:w,instanceCount:O,firstVertex:F}=v,B=e.getIndirect();if(B!==null){const k=this.get(B).buffer;E.drawIndexedIndirect(k,0)}else E.drawIndexed(w,O,F,0,0);t.update(i,w,O)}else{const{vertexCount:w,instanceCount:O,firstVertex:F}=v,B=e.getIndirect();if(B!==null){const k=this.get(B).buffer;E.drawIndirect(k,0)}else E.draw(w,O,F,0);t.update(i,w,O)}};if(e.camera.isArrayCamera&&e.camera.cameras.length>0){const E=this.get(e.camera),A=e.camera.cameras,w=e.getBindingGroup("cameraIndex");if(E.indexesGPU===void 0||E.indexesGPU.length!==A.length){const F=this.get(w),B=[],k=new Uint32Array([0,0,0,0]);for(let Y=0,$=A.length;Y<$;Y++){k[0]=Y;const Q=this.bindingUtils.createBindGroupIndex(k,F.layout);B.push(Q)}E.indexesGPU=B}const O=this.renderer.getPixelRatio();for(let F=0,B=A.length;F<B;F++){const k=A[F];if(i.layers.test(k.layers)){const Y=k.viewport;let $=d.currentPass,Q=d.currentSets;if(d.bundleEncoders){const z=d.bundleEncoders[F],q=d.bundleSets[F];$=z,Q=q}Y&&$.setViewport(Math.floor(Y.x*O),Math.floor(Y.y*O),Math.floor(Y.width*O),Math.floor(Y.height*O),r.viewportValue.minDepth,r.viewportValue.maxDepth),w&&E.indexesGPU&&($.setBindGroup(w.index,E.indexesGPU[F]),Q.bindingGroups[w.index]=w.id),T($,Q)}}}else if(d.currentPass){if(d.occlusionQuerySet!==void 0){const E=d.lastOcclusionObject;E!==i&&(E!==null&&E.occlusionTest===!0&&(d.currentPass.endOcclusionQuery(),d.occlusionQueryIndex++),i.occlusionTest===!0&&(d.currentPass.beginOcclusionQuery(d.occlusionQueryIndex),d.occlusionQueryObjects[d.occlusionQueryIndex]=i),d.lastOcclusionObject=i)}T(d.currentPass,d.currentSets)}}needsRenderUpdate(e){const t=this.get(e),{object:i,material:s}=e,r=this.utils,l=r.getSampleCountRenderContext(e.context),u=r.getCurrentColorSpace(e.context),d=r.getCurrentColorFormat(e.context),f=r.getCurrentDepthStencilFormat(e.context),g=r.getPrimitiveTopology(i,s);let x=!1;return(t.material!==s||t.materialVersion!==s.version||t.transparent!==s.transparent||t.blending!==s.blending||t.premultipliedAlpha!==s.premultipliedAlpha||t.blendSrc!==s.blendSrc||t.blendDst!==s.blendDst||t.blendEquation!==s.blendEquation||t.blendSrcAlpha!==s.blendSrcAlpha||t.blendDstAlpha!==s.blendDstAlpha||t.blendEquationAlpha!==s.blendEquationAlpha||t.colorWrite!==s.colorWrite||t.depthWrite!==s.depthWrite||t.depthTest!==s.depthTest||t.depthFunc!==s.depthFunc||t.stencilWrite!==s.stencilWrite||t.stencilFunc!==s.stencilFunc||t.stencilFail!==s.stencilFail||t.stencilZFail!==s.stencilZFail||t.stencilZPass!==s.stencilZPass||t.stencilFuncMask!==s.stencilFuncMask||t.stencilWriteMask!==s.stencilWriteMask||t.side!==s.side||t.alphaToCoverage!==s.alphaToCoverage||t.sampleCount!==l||t.colorSpace!==u||t.colorFormat!==d||t.depthStencilFormat!==f||t.primitiveTopology!==g||t.clippingContextCacheKey!==e.clippingContextCacheKey)&&(t.material=s,t.materialVersion=s.version,t.transparent=s.transparent,t.blending=s.blending,t.premultipliedAlpha=s.premultipliedAlpha,t.blendSrc=s.blendSrc,t.blendDst=s.blendDst,t.blendEquation=s.blendEquation,t.blendSrcAlpha=s.blendSrcAlpha,t.blendDstAlpha=s.blendDstAlpha,t.blendEquationAlpha=s.blendEquationAlpha,t.colorWrite=s.colorWrite,t.depthWrite=s.depthWrite,t.depthTest=s.depthTest,t.depthFunc=s.depthFunc,t.stencilWrite=s.stencilWrite,t.stencilFunc=s.stencilFunc,t.stencilFail=s.stencilFail,t.stencilZFail=s.stencilZFail,t.stencilZPass=s.stencilZPass,t.stencilFuncMask=s.stencilFuncMask,t.stencilWriteMask=s.stencilWriteMask,t.side=s.side,t.alphaToCoverage=s.alphaToCoverage,t.sampleCount=l,t.colorSpace=u,t.colorFormat=d,t.depthStencilFormat=f,t.primitiveTopology=g,t.clippingContextCacheKey=e.clippingContextCacheKey,x=!0),x}getRenderCacheKey(e){const{object:t,material:i}=e,s=this.utils,r=e.context;return[i.transparent,i.blending,i.premultipliedAlpha,i.blendSrc,i.blendDst,i.blendEquation,i.blendSrcAlpha,i.blendDstAlpha,i.blendEquationAlpha,i.colorWrite,i.depthWrite,i.depthTest,i.depthFunc,i.stencilWrite,i.stencilFunc,i.stencilFail,i.stencilZFail,i.stencilZPass,i.stencilFuncMask,i.stencilWriteMask,i.side,s.getSampleCountRenderContext(r),s.getCurrentColorSpace(r),s.getCurrentColorFormat(r),s.getCurrentDepthStencilFormat(r),s.getPrimitiveTopology(t,i),e.getGeometryCacheKey(),e.clippingContextCacheKey].join()}createSampler(e){this.textureUtils.createSampler(e)}destroySampler(e){this.textureUtils.destroySampler(e)}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,i,s,r,l){return this.textureUtils.copyTextureToBuffer(e,t,i,s,r,l)}initTimestampQuery(e,t){if(!this.trackTimestamp)return;const i=e.isComputeNode?"compute":"render";this.timestampQueryPool[i]||(this.timestampQueryPool[i]=new zne(this.device,i,2048));const s=this.timestampQueryPool[i],r=s.allocateQueriesForContext(e);t.timestampWrites={querySet:s.querySet,beginningOfPassWriteIndex:r,endOfPassWriteIndex:r+1}}createNodeBuilder(e,t){return new Lne(e,t)}createProgram(e){const t=this.get(e);t.module={module:this.device.createShaderModule({code:e.code,label:e.stage+(e.name!==""?`_${e.name}`:"")}),entryPoint:"main"}}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){this.pipelineUtils.createRenderPipeline(e,t)}createComputePipeline(e,t){this.pipelineUtils.createComputePipeline(e,t)}beginBundle(e){const t=this.get(e);t._currentPass=t.currentPass,t._currentSets=t.currentSets,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.currentPass=this.pipelineUtils.createBundleEncoder(e)}finishBundle(e,t){const i=this.get(e),r=i.currentPass.finish();this.get(t).bundleGPU=r,i.currentSets=i._currentSets,i.currentPass=i._currentPass}addBundle(e,t){this.get(e).renderBundles.push(this.get(t).bundleGPU)}createBindings(e,t,i,s){this.bindingUtils.createBindings(e,t,i,s)}updateBindings(e,t,i,s){this.bindingUtils.createBindings(e,t,i,s)}updateBinding(e){this.bindingUtils.updateBinding(e)}createIndexAttribute(e){let t=GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)&&(t|=GPUBufferUsage.STORAGE),this.attributeUtils.createAttribute(e,t)}createAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(e){return this.device.features.has(e)}copyTextureToTexture(e,t,i=null,s=null,r=0,l=0){let u=0,d=0,f=0,g=0,x=0,v=0,S=e.image.width,T=e.image.height,E=1;i!==null&&(i.isBox3===!0?(g=i.min.x,x=i.min.y,v=i.min.z,S=i.max.x-i.min.x,T=i.max.y-i.min.y,E=i.max.z-i.min.z):(g=i.min.x,x=i.min.y,S=i.max.x-i.min.x,T=i.max.y-i.min.y,E=1)),s!==null&&(u=s.x,d=s.y,f=s.z||0);const A=this.device.createCommandEncoder({label:"copyTextureToTexture_"+e.id+"_"+t.id}),w=this.get(e).texture,O=this.get(t).texture;A.copyTextureToTexture({texture:w,mipLevel:r,origin:{x:g,y:x,z:v}},{texture:O,mipLevel:l,origin:{x:u,y:d,z:f}},[S,T,E]),this.device.queue.submit([A.finish()]),l===0&&t.generateMipmaps&&this.textureUtils.generateMipmaps(t)}copyFramebufferToTexture(e,t,i){const s=this.get(t);let r=null;t.renderTarget?e.isDepthTexture?r=this.get(t.depthTexture).texture:r=this.get(t.textures[0]).texture:e.isDepthTexture?r=this.textureUtils.getDepthBuffer(t.depth,t.stencil):r=this.context.getCurrentTexture();const l=this.get(e).texture;if(r.format!==l.format){console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",r.format,l.format);return}let u;if(s.currentPass?(s.currentPass.end(),u=s.encoder):u=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+e.id}),u.copyTextureToTexture({texture:r,origin:[i.x,i.y,0]},{texture:l},[i.z,i.w]),s.currentPass){const{descriptor:d}=s;for(let f=0;f<d.colorAttachments.length;f++)d.colorAttachments[f].loadOp=qi.Load;if(t.depth&&(d.depthStencilAttachment.depthLoadOp=qi.Load),t.stencil&&(d.depthStencilAttachment.stencilLoadOp=qi.Load),s.currentPass=u.beginRenderPass(d),s.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.viewport&&this.updateViewport(t),t.scissor){const{x:f,y:g,width:x,height:v}=t.scissorValue;s.currentPass.setScissorRect(f,g,x,v)}}else this.device.queue.submit([u.finish()]);e.generateMipmaps&&this.textureUtils.generateMipmaps(e)}}class iO extends Gg{constructor(e,t,i,s,r,l){super(e,t,i,s,r,l),this.iesMap=null}copy(e,t){return super.copy(e,t),this.iesMap=e.iesMap,this}}class sO extends Gg{constructor(e,t,i,s,r,l){super(e,t,i,s,r,l),this.aspect=null}copy(e,t){return super.copy(e,t),this.aspect=e.aspect,this}}class Gne extends W3{constructor(){super(),this.addMaterial(XF,"MeshPhongMaterial"),this.addMaterial(rE,"MeshStandardMaterial"),this.addMaterial(oE,"MeshPhysicalMaterial"),this.addMaterial(lB,"MeshToonMaterial"),this.addMaterial(WF,"MeshBasicMaterial"),this.addMaterial($F,"MeshLambertMaterial"),this.addMaterial(VF,"MeshNormalMaterial"),this.addMaterial(uB,"MeshMatcapMaterial"),this.addMaterial(DF,"LineBasicMaterial"),this.addMaterial(UF,"LineDashedMaterial"),this.addMaterial(dB,"PointsMaterial"),this.addMaterial(aE,"SpriteMaterial"),this.addMaterial(fB,"ShadowMaterial"),this.addLight(b3,Nw),this.addLight(U3,Pw),this.addLight(F3,Lw),this.addLight(K0,Gg),this.addLight(V3,Iw),this.addLight(z3,Rw),this.addLight(k3,Dw),this.addLight(B3,iO),this.addLight(O3,sO),this.addToneMapping(WB,WM),this.addToneMapping($B,$M),this.addToneMapping(XB,XM),this.addToneMapping(qB,qM),this.addToneMapping(YB,YM),this.addToneMapping(ZB,ZM)}}class Hne extends Yte{constructor(e={}){let t;e.forceWebGL?t=MI:(t=kne,e.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new MI(e)));const i=new t(e);super(i,e),this.library=new Gne,this.isWebGPURenderer=!0,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}class Wne extends kc{constructor(){super(),this.isBundleGroup=!0,this.type="BundleGroup",this.static=!0,this.version=0}set needsUpdate(e){e===!0&&this.version++}}class $ne{constructor(e,t=tn(0,0,1,1)){this.renderer=e,this.outputNode=t,this.outputColorTransform=!0,this.needsUpdate=!0;const i=new ys;i.name="PostProcessing",this._quadMesh=new Mp(i),this._context=null}render(){const e=this.renderer;this._update(),this._context.onBeforePostProcessing!==null&&this._context.onBeforePostProcessing();const t=e.toneMapping,i=e.outputColorSpace;e.toneMapping=Nr,e.outputColorSpace=zn.workingColorSpace;const s=e.xr.enabled;e.xr.enabled=!1,this._quadMesh.render(e),e.xr.enabled=s,e.toneMapping=t,e.outputColorSpace=i,this._context.onAfterPostProcessing!==null&&this._context.onAfterPostProcessing()}get context(){return this._context}dispose(){this._quadMesh.material.dispose()}_update(){if(this.needsUpdate===!0){const e=this.renderer,t=e.toneMapping,i=e.outputColorSpace,s={postProcessing:this,onBeforePostProcessing:null,onAfterPostProcessing:null};let r=this.outputNode;this.outputColorTransform===!0?(r=r.context(s),r=EA(r,t,i)):(s.toneMapping=t,s.outputColorSpace=i,r=r.context(s)),this._context=s,this._quadMesh.material.fragmentNode=r,this._quadMesh.material.needsUpdate=!0,this.needsUpdate=!1}}async renderAsync(){this._update(),this._context.onBeforePostProcessing!==null&&this._context.onBeforePostProcessing();const e=this.renderer,t=e.toneMapping,i=e.outputColorSpace;e.toneMapping=Nr,e.outputColorSpace=zn.workingColorSpace;const s=e.xr.enabled;e.xr.enabled=!1,await this._quadMesh.renderAsync(e),e.xr.enabled=s,e.toneMapping=t,e.outputColorSpace=i,this._context.onAfterPostProcessing!==null&&this._context.onAfterPostProcessing()}}class Xne extends ds{constructor(e=1,t=1){super(),this.image={width:e,height:t},this.magFilter=Ni,this.minFilter=Ni,this.isStorageTexture=!0}setSize(e,t){(this.image.width!==e||this.image.height!==t)&&(this.image.width=e,this.image.height=t,this.dispose())}}class qne extends ds{constructor(e=1,t=1,i=1){super(),this.isArrayTexture=!1,this.image={width:e,height:t,depth:i},this.magFilter=Ni,this.minFilter=Ni,this.wrapR=js,this.isStorageTexture=!0,this.is3DTexture=!0}setSize(e,t,i){(this.image.width!==e||this.image.height!==t||this.image.depth!==i)&&(this.image.width=e,this.image.height=t,this.image.depth=i,this.dispose())}}class Yne extends ds{constructor(e=1,t=1,i=1){super(),this.isArrayTexture=!0,this.image={width:e,height:t,depth:i},this.magFilter=Ni,this.minFilter=Ni,this.isStorageTexture=!0}setSize(e,t,i){(this.image.width!==e||this.image.height!==t||this.image.depth!==i)&&(this.image.width=e,this.image.height=t,this.image.depth=i,this.dispose())}}class Zne extends hE{constructor(e,t){super(e,t,Uint32Array),this.isIndirectStorageBufferAttribute=!0}}class rO extends Xr{constructor(e){super(e),this.textures={},this.nodes={}}load(e,t,i,s){const r=new ka(this.manager);r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(this.withCredentials),r.load(e,l=>{try{t(this.parse(JSON.parse(l)))}catch(u){s?s(u):console.error(u),this.manager.itemError(e)}},i,s)}parseNodes(e){const t={};if(e!==void 0){for(const s of e){const{uuid:r,type:l}=s;t[r]=this.createNodeFromType(l),t[r].uuid=r}const i={nodes:t,textures:this.textures};for(const s of e)s.meta=i,t[s.uuid].deserialize(s),delete s.meta}return t}parse(e){const t=this.createNodeFromType(e.type);t.uuid=e.uuid;const s={nodes:this.parseNodes(e.nodes),textures:this.textures};return e.meta=s,t.deserialize(e),delete e.meta,t}setTextures(e){return this.textures=e,this}setNodes(e){return this.nodes=e,this}createNodeFromType(e){return this.nodes[e]===void 0?(console.error("THREE.NodeLoader: Node type not found:",e),te()):Qe(new this.nodes[e])}}class oO extends Hg{constructor(e){super(e),this.nodes={},this.nodeMaterials={}}parse(e){const t=super.parse(e),i=this.nodes,s=e.inputNodes;for(const r in s){const l=s[r];t[r]=i[l]}return t}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}createMaterialFromType(e){const t=this.nodeMaterials[e];return t!==void 0?new t:super.createMaterialFromType(e)}}class Kne extends zL{constructor(e){super(e),this.nodes={},this.nodeMaterials={},this._nodesJSON=null}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}parse(e,t){this._nodesJSON=e.nodes;const i=super.parse(e,t);return this._nodesJSON=null,i}parseNodes(e,t){if(e!==void 0){const i=new rO;return i.setNodes(this.nodes),i.setTextures(t),i.parseNodes(e)}return{}}parseMaterials(e,t){const i={};if(e!==void 0){const s=this.parseNodes(this._nodesJSON,t),r=new oO;r.setTextures(t),r.setNodes(s),r.setNodeMaterials(this.nodeMaterials);for(let l=0,u=e.length;l<u;l++){const d=e[l];i[d.uuid]=r.parse(d)}}return i}}class Jne extends kc{constructor(){super(),this.isClippingGroup=!0,this.clippingPlanes=[],this.enabled=!0,this.clipIntersection=!1,this.clipShadows=!1}}const jne=Object.freeze(Object.defineProperty({__proto__:null,ACESFilmicToneMapping:qM,AONode:yF,AddEquation:Rr,AddOperation:HM,AdditiveAnimationBlendMode:KM,AdditiveBlending:Ih,AgXToneMapping:YM,AlphaFormat:Dv,AlwaysCompare:Gv,AlwaysDepth:Wf,AlwaysStencilFunc:iv,AmbientLight:Iw,AmbientLightNode:V3,AnalyticLightNode:du,AnimationAction:WL,AnimationClip:dg,AnimationLoader:s$,AnimationMixer:P$,AnimationObjectGroup:C$,AnimationUtils:e$,ArcCurve:vL,ArrayCamera:Fw,ArrayElementNode:au,ArrayNode:gM,ArrowHelper:s6,AssignNode:RD,AttachedBindMode:sM,AttributeNode:RA,Audio:GL,AudioAnalyser:y$,AudioContext:Uw,AudioListener:g$,AudioLoader:f$,AxesHelper:r6,BackSide:ns,BasicDepthPacking:XI,BasicEnvironmentNode:V0,BasicShadowMap:LI,BatchNode:uF,BatchedMesh:gL,Bone:rw,BooleanKeyframeTrack:ad,Box2:G$,Box3:Gr,Box3Helper:n6,BoxGeometry:cc,BoxHelper:t6,BufferAttribute:$i,BufferAttributeNode:G2,BufferGeometry:li,BufferGeometryLoader:VL,BufferNode:I0,BumpMapNode:LU,BundleGroup:Wne,BypassNode:q2,ByteType:Wc,Cache:hl,CacheNode:X2,Camera:Ug,CameraHelper:e6,CanvasTexture:T8,CapsuleGeometry:Qv,CatmullRomCurve3:SL,CineonToneMapping:XM,CircleGeometry:e0,ClampToEdgeWrapping:js,ClippingGroup:Jne,Clock:kL,CodeNode:zs,Color:Jt,ColorKeyframeTrack:ww,ColorManagement:zn,ColorSpaceNode:N0,CompressedArrayTexture:S8,CompressedCubeTexture:b8,CompressedTexture:jv,CompressedTextureLoader:r$,ComputeNode:W2,ConeGeometry:Og,ConstNode:ba,ConstantAlphaFactor:BI,ConstantColorFactor:UI,ContextNode:bA,Controls:o6,ConvertNode:Zw,CubeCamera:iw,CubeReflectionMapping:qo,CubeRefractionMapping:ga,CubeTexture:tu,CubeTextureLoader:o$,CubeTextureNode:yU,CubeUVReflectionMapping:nc,CubicBezierCurve:cw,CubicBezierCurve3:bL,CubicInterpolant:LL,CullFaceBack:Qy,CullFaceFront:VM,CullFaceFrontBack:ZW,CullFaceNone:OM,Curve:Xa,CurvePath:ML,CustomBlending:Mh,CustomToneMapping:VI,CylinderGeometry:_p,Cylindrical:k$,Data3DTexture:Hv,DataArrayTexture:Dg,DataTexture:Oa,DataTextureLoader:a$,DataUtils:q5,DebugNode:Q2,DecrementStencilOp:JI,DecrementWrapStencilOp:QI,DefaultLoadingManager:FL,DepthFormat:wo,DepthStencilFormat:Ao,DepthTexture:Ro,DetachedBindMode:zI,DirectionalLight:Pw,DirectionalLightHelper:Q$,DirectionalLightNode:U3,DiscreteInterpolant:DL,DodecahedronGeometry:t0,DoubleSide:_r,DstAlphaFactor:Cv,DstColorFactor:Pv,DynamicCopyUsage:c5,DynamicDrawUsage:yh,DynamicReadUsage:o5,EdgesGeometry:yL,EllipseCurve:n0,EnvironmentNode:aB,EqualCompare:Ov,EqualDepth:Xf,EqualStencilFunc:iL,EquirectangularReflectionMapping:Kc,EquirectangularRefractionMapping:Jc,Euler:co,EventDispatcher:Jo,EventNode:lc,ExpressionNode:Qm,ExtrudeGeometry:i0,FileLoader:ka,Float16BufferAttribute:nw,Float32BufferAttribute:vn,FloatType:os,Fog:Yv,FogExp2:qv,FramebufferTexture:aw,FrontFacingNode:lU,FrontSide:ao,Frustum:od,FrustumArray:Bg,FunctionCallNode:ND,FunctionNode:fE,FunctionOverloadingNode:TB,GLBufferAttribute:F$,GLSL1:h5,GLSL3:rM,GLSLNodeParser:H3,GreaterCompare:Vv,GreaterDepth:Yf,GreaterEqualCompare:kv,GreaterEqualDepth:qf,GreaterEqualStencilFunc:aL,GreaterStencilFunc:rL,GridHelper:J$,Group:kc,HalfFloatType:Qs,HemisphereLight:Rw,HemisphereLightHelper:K$,HemisphereLightNode:z3,IESSpotLight:iO,IESSpotLightNode:B3,IcosahedronGeometry:s0,ImageBitmapLoader:d$,ImageLoader:fg,ImageUtils:lL,IncrementStencilOp:KI,IncrementWrapStencilOp:jI,IndexNode:xs,IndirectStorageBufferAttribute:Zne,InstanceNode:HA,InstancedBufferAttribute:pa,InstancedBufferGeometry:OL,InstancedInterleavedBuffer:XL,InstancedMesh:mL,InstancedMeshNode:lF,Int16BufferAttribute:j5,Int32BufferAttribute:Q5,Int8BufferAttribute:Z5,IntType:or,InterleavedBuffer:Fg,InterleavedBufferAttribute:jc,Interpolant:zg,InterpolateDiscrete:sg,InterpolateLinear:nv,InterpolateSmooth:Wy,InterpolationSamplingMode:p5,InterpolationSamplingType:f5,InvertStencilOp:eL,IrradianceNode:bF,JoinNode:lD,KeepStencilOp:Bc,KeyframeTrack:Sa,LOD:fL,LatheGeometry:r0,Layers:Wv,LessCompare:Ig,LessDepth:$f,LessEqualCompare:Lg,LessEqualDepth:tc,LessEqualStencilFunc:sL,LessStencilFunc:nL,Light:su,LightProbe:Dw,LightProbeNode:k3,Lighting:$3,LightingContextNode:vF,LightingModel:Tp,LightingNode:cd,LightsNode:X0,Line:Qc,Line2NodeMaterial:jZ,Line3:$$,LineBasicMaterial:$r,LineBasicNodeMaterial:DF,LineCurve:uw,LineCurve3:TL,LineDashedMaterial:f0,LineDashedNodeMaterial:UF,LineLoop:_L,LineSegments:_l,LinearFilter:Ni,LinearInterpolant:Mw,LinearMipMapLinearFilter:kI,LinearMipMapNearestFilter:jW,LinearMipmapLinearFilter:Cr,LinearMipmapNearestFilter:Hc,LinearSRGBColorSpace:sc,LinearToneMapping:WM,LinearTransfer:Jh,Loader:Xr,LoaderUtils:uM,LoadingManager:Aw,LoopNode:mF,LoopOnce:HI,LoopPingPong:$I,LoopRepeat:WI,MOUSE:qW,MRTNode:SB,Material:br,MaterialLoader:Hg,MaterialNode:je,MaterialReferenceNode:vU,MathUtils:QM,Matrix2:Wg,Matrix3:ni,Matrix4:xn,MaxEquation:kM,MaxMipLevelNode:nU,MemberNode:uD,Mesh:ts,MeshBasicMaterial:so,MeshBasicNodeMaterial:WF,MeshDepthMaterial:vw,MeshDistanceMaterial:Sw,MeshLambertMaterial:yw,MeshLambertNodeMaterial:$F,MeshMatcapMaterial:bw,MeshMatcapNodeMaterial:uB,MeshNormalMaterial:xw,MeshNormalNodeMaterial:VF,MeshPhongMaterial:gw,MeshPhongNodeMaterial:XF,MeshPhysicalMaterial:mw,MeshPhysicalNodeMaterial:oE,MeshSSSNodeMaterial:qK,MeshStandardMaterial:d0,MeshStandardNodeMaterial:rE,MeshToonMaterial:_w,MeshToonNodeMaterial:lB,MinEquation:zM,MirroredRepeatWrapping:ic,MixOperation:GM,ModelNode:Ko,MorphNode:_F,MultiplyBlending:Dh,MultiplyOperation:pp,NearestFilter:Ci,NearestMipMapLinearFilter:JW,NearestMipMapNearestFilter:KW,NearestMipmapLinearFilter:Fa,NearestMipmapNearestFilter:Rg,NeutralToneMapping:ZM,NeverCompare:Bv,NeverDepth:Hf,NeverStencilFunc:tL,NoBlending:kr,NoColorSpace:no,NoToneMapping:Nr,Node:Pn,NodeAccess:yr,NodeAttribute:LM,NodeBuilder:RE,NodeCache:jy,NodeCode:D3,NodeFrame:DM,NodeFunctionInput:Z0,NodeLoader:rO,NodeMaterial:ys,NodeMaterialLoader:oO,NodeMaterialObserver:sD,NodeObjectLoader:Kne,NodeShaderStage:If,NodeType:aD,NodeUniform:I3,NodeUpdateType:ii,NodeUtils:c7,NodeVar:EE,NodeVarying:L3,NormalAnimationBlendMode:Fv,NormalBlending:To,NormalMapNode:IU,NotEqualCompare:zv,NotEqualDepth:Zf,NotEqualStencilFunc:oL,NumberKeyframeTrack:ug,Object3D:Di,Object3DNode:Ti,ObjectLoader:zL,ObjectSpaceNormalMap:JM,OctahedronGeometry:Vg,OneFactor:Av,OneMinusConstantAlphaFactor:OI,OneMinusConstantColorFactor:FI,OneMinusDstAlphaFactor:Nv,OneMinusDstColorFactor:Iv,OneMinusSrcAlphaFactor:Gf,OneMinusSrcColorFactor:Rv,OrthographicCamera:ru,OutputStructNode:uE,PCFShadowMap:Tv,PCFSoftShadowMap:DI,PMREMGenerator:rB,PMREMNode:oB,ParameterNode:cE,PassNode:Wa,Path:av,PerspectiveCamera:Gs,PhongLightingModel:jA,PhysicalLightingModel:k0,Plane:al,PlaneGeometry:iu,PlaneHelper:i6,PointLight:Nw,PointLightHelper:Y$,PointLightNode:b3,PointUVNode:IB,Points:xL,PointsMaterial:Jv,PointsNodeMaterial:dB,PolarGridHelper:j$,PolyhedronGeometry:nu,PositionalAudio:x$,PostProcessing:$ne,PosterizeNode:kB,ProjectorLight:sO,ProjectorLightNode:O3,PropertyBinding:Vi,PropertyMixer:HL,PropertyNode:Xi,QuadMesh:Mp,QuadraticBezierCurve:hw,QuadraticBezierCurve3:dw,Quaternion:lo,QuaternionKeyframeTrack:kg,QuaternionLinearInterpolant:UL,RED_GREEN_RGTC2_Format:np,RED_RGTC1_Format:Uv,REVISION:fp,RGBADepthPacking:qI,RGBAFormat:es,RGBAIntegerFormat:sd,RGBA_ASTC_10x10_Format:Yh,RGBA_ASTC_10x5_Format:$h,RGBA_ASTC_10x6_Format:Xh,RGBA_ASTC_10x8_Format:qh,RGBA_ASTC_12x10_Format:Zh,RGBA_ASTC_12x12_Format:Kh,RGBA_ASTC_4x4_Format:Bh,RGBA_ASTC_5x4_Format:Oh,RGBA_ASTC_5x5_Format:Vh,RGBA_ASTC_6x5_Format:zh,RGBA_ASTC_6x6_Format:kh,RGBA_ASTC_8x5_Format:Gh,RGBA_ASTC_8x6_Format:Hh,RGBA_ASTC_8x8_Format:Wh,RGBA_BPTC_Format:qc,RGBA_ETC2_EAC_Format:Fh,RGBA_PVRTC_2BPPV1_Format:Qf,RGBA_PVRTC_4BPPV1_Format:jf,RGBA_S3TC_DXT1_Format:Zl,RGBA_S3TC_DXT3_Format:Kl,RGBA_S3TC_DXT5_Format:Jl,RGBDepthPacking:n5,RGBFormat:mp,RGBIntegerFormat:GI,RGB_BPTC_SIGNED_Format:ev,RGB_BPTC_UNSIGNED_Format:tv,RGB_ETC1_Format:ep,RGB_ETC2_Format:Uh,RGB_PVRTC_2BPPV1_Format:Jf,RGB_PVRTC_4BPPV1_Format:Kf,RGB_S3TC_DXT1_Format:Xc,RGDepthPacking:i5,RGFormat:ul,RGIntegerFormat:id,RTTNode:RB,RangeNode:t3,RawShaderMaterial:NL,Ray:gp,Raycaster:B$,RectAreaLight:Lw,RectAreaLightNode:F3,RedFormat:nd,RedIntegerFormat:eu,ReferenceNode:Jg,ReflectorNode:G0,ReinhardToneMapping:$M,RemapNode:AA,RenderOutputNode:j2,RenderTarget:$a,RenderTarget3D:I$,RendererReferenceNode:B2,RendererUtils:_Q,RepeatWrapping:za,ReplaceStencilOp:ZI,ReverseSubtractEquation:wv,RingGeometry:o0,RotateNode:hB,SIGNED_RED_GREEN_RGTC2_Format:ip,SIGNED_RED_RGTC1_Format:tp,SRGBColorSpace:zr,SRGBTransfer:un,Scene:rd,SceneNode:oo,ScreenNode:ks,ScriptableNode:QB,ScriptableValueNode:JB,SetNode:cD,ShaderMaterial:er,ShadowBaseNode:s3,ShadowMaterial:pw,ShadowNode:TE,ShadowNodeMaterial:fB,Shape:Ah,ShapeGeometry:a0,ShapePath:YL,ShapeUtils:Ba,ShortType:$c,Skeleton:Kv,SkeletonHelper:q$,SkinnedMesh:pL,SkinningNode:WA,Source:zc,Sphere:Sr,SphereGeometry:xp,Spherical:z$,SphericalHarmonics3:BL,SplineCurve:fw,SplitNode:uv,SpotLight:Gg,SpotLightHelper:X$,SpotLightNode:K0,Sprite:dL,SpriteMaterial:Zv,SpriteNodeMaterial:aE,SpriteSheetUVNode:AB,SrcAlphaFactor:kf,SrcAlphaSaturateFactor:Lv,SrcColorFactor:Ev,StackNode:_B,StaticCopyUsage:l5,StaticDrawUsage:sp,StaticReadUsage:r5,StereoCamera:p$,Storage3DTexture:qne,StorageArrayElementNode:dF,StorageArrayTexture:Yne,StorageBufferAttribute:hE,StorageBufferNode:fF,StorageInstancedBufferAttribute:PB,StorageTexture:Xne,StorageTextureNode:UB,StreamCopyUsage:u5,StreamDrawUsage:s5,StreamReadUsage:a5,StringKeyframeTrack:ld,StructNode:yB,StructTypeNode:xB,SubBuildNode:N2,SubtractEquation:Mv,SubtractiveBlending:Lh,TOUCH:YW,TSL:D,TangentSpaceNormalMap:gl,TempNode:$s,TetrahedronGeometry:l0,Texture:ds,Texture3DNode:BB,TextureLoader:Ew,TextureNode:Ga,TextureSizeNode:tU,TextureUtils:h6,Timer:O$,TimestampQuery:d5,ToneMappingNode:V2,ToonOutlinePassNode:HB,TorusGeometry:c0,TorusKnotGeometry:u0,Triangle:bo,TriangleFanDrawMode:t5,TriangleStripDrawMode:e5,TrianglesDrawMode:QW,TubeGeometry:h0,UVMapping:Eg,Uint16BufferAttribute:$v,Uint32BufferAttribute:Xv,Uint8BufferAttribute:K5,Uint8ClampedBufferAttribute:J5,Uniform:L$,UniformArrayNode:iU,UniformGroupNode:aA,UniformNode:Sp,UniformsGroup:U$,UnsignedByteType:Ts,UnsignedInt248Type:Mo,UnsignedInt5999Type:Pg,UnsignedIntType:rs,UnsignedShort4444Type:Cg,UnsignedShort5551Type:Ng,UnsignedShortType:ua,UserDataNode:VB,VSMShadowMap:So,VarNode:Jm,VaryingNode:P2,Vector2:it,Vector3:re,Vector4:Un,VectorKeyframeTrack:hg,VertexColorNode:EF,VideoFrameTexture:v8,VideoTexture:ow,ViewportDepthNode:ro,ViewportDepthTextureNode:wF,ViewportSharedTextureNode:FF,ViewportTextureNode:e_,VolumeNodeMaterial:iJ,WebGL3DRenderTarget:B5,WebGLArrayRenderTarget:F5,WebGLCoordinateSystem:xr,WebGLCubeRenderTarget:sw,WebGLRenderTarget:Yo,WebGPUCoordinateSystem:_a,WebGPURenderer:Hne,WebXRController:Xm,WireframeGeometry:CL,WrapAroundEnding:rg,ZeroCurvatureEnding:_h,ZeroFactor:ol,ZeroSlopeEnding:xh,ZeroStencilOp:YI,createCanvasElement:tw,defaultBuildStages:lv,defaultShaderStages:Yw,shaderStages:cv,vectorComponents:ou},Symbol.toStringTag,{value:"Module"})),Qne=iD(jne);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const eie=D.BRDF_GGX,tie=D.BRDF_Lambert,nie=D.BasicPointShadowFilter,iie=D.BasicShadowFilter,sie=D.Break,rie=D.Const,oie=D.Continue,aie=D.DFGApprox,lie=D.D_GGX,cie=D.Discard,uie=D.EPSILON,hie=D.F_Schlick,die=D.Fn,fie=D.INFINITY,pie=D.If,mie=D.Loop,gie=D.NodeAccess,_ie=D.NodeShaderStage,xie=D.NodeType,yie=D.NodeUpdateType,vie=D.PCFShadowFilter,Sie=D.PCFSoftShadowFilter,bie=D.PI,Tie=D.PI2,Mie=D.PointShadowFilter,wie=D.Return,Aie=D.Schlick_to_F0,Eie=D.ScriptableNodeResources,Rie=D.ShaderNode,Cie=D.Stack,Nie=D.Switch,Pie=D.TBNViewMatrix,Iie=D.VSMShadowFilter,Lie=D.V_GGX_SmithCorrelated,Die=D.Var,Uie=D.VarIntent,Fie=D.abs,Bie=D.acesFilmicToneMapping,Oie=D.acos,Vie=D.add,zie=D.addMethodChaining,kie=D.addNodeElement,Gie=D.agxToneMapping,Hie=D.all,Wie=D.alphaT,$ie=D.and,Xie=D.anisotropy,qie=D.anisotropyB,Yie=D.anisotropyT,Zie=D.any,Kie=D.append,Jie=D.array,jie=D.arrayBuffer,Qie=D.asin,ese=D.assign,tse=D.atan,nse=D.atan2,ise=D.atomicAdd,sse=D.atomicAnd,rse=D.atomicFunc,ose=D.atomicLoad,ase=D.atomicMax,lse=D.atomicMin,cse=D.atomicOr,use=D.atomicStore,hse=D.atomicSub,dse=D.atomicXor,fse=D.attenuationColor,pse=D.attenuationDistance,mse=D.attribute,gse=D.attributeArray,_se=D.backgroundBlurriness,xse=D.backgroundIntensity,yse=D.backgroundRotation,vse=D.batch,Sse=D.bentNormalView,bse=D.billboarding,Tse=D.bitAnd,Mse=D.bitNot,wse=D.bitOr,Ase=D.bitXor,Ese=D.bitangentGeometry,Rse=D.bitangentLocal,Cse=D.bitangentView,Nse=D.bitangentWorld,Pse=D.bitcast,Ise=D.blendBurn,Lse=D.blendColor,Dse=D.blendDodge,Use=D.blendOverlay,Fse=D.blendScreen,Bse=D.blur,Ose=D.bool,Vse=D.buffer,zse=D.bufferAttribute,kse=D.bumpMap,Gse=D.burn,Hse=D.bvec2,Wse=D.bvec3,$se=D.bvec4,Xse=D.bypass,qse=D.cache,Yse=D.call,Zse=D.cameraFar,Kse=D.cameraIndex,Jse=D.cameraNear,jse=D.cameraNormalMatrix,Qse=D.cameraPosition,ere=D.cameraProjectionMatrix,tre=D.cameraProjectionMatrixInverse,nre=D.cameraViewMatrix,ire=D.cameraWorldMatrix,sre=D.cbrt,rre=D.cdl,ore=D.ceil,are=D.checker,lre=D.cineonToneMapping,cre=D.clamp,ure=D.clearcoat,hre=D.clearcoatNormalView,dre=D.clearcoatRoughness,fre=D.code,pre=D.color,mre=D.colorSpaceToWorking,gre=D.colorToDirection,_re=D.compute,xre=D.computeKernel,yre=D.computeSkinning,vre=D.context,Sre=D.convert,bre=D.convertColorSpace,Tre=D.convertToTexture,Mre=D.cos,wre=D.cross,Are=D.cubeTexture,Ere=D.cubeTextureBase,Rre=D.cubeToUV,Cre=D.dFdx,Nre=D.dFdy,Pre=D.dashSize,Ire=D.debug,Lre=D.decrement,Dre=D.decrementBefore,Ure=D.defaultBuildStages,Fre=D.defaultShaderStages,Bre=D.defined,Ore=D.degrees,Vre=D.deltaTime,zre=D.densityFog,kre=D.densityFogFactor,Gre=D.depth,Hre=D.depthPass,Wre=D.determinant,$re=D.difference,Xre=D.diffuseColor,qre=D.directPointLight,Yre=D.directionToColor,Zre=D.directionToFaceDirection,Kre=D.dispersion,Jre=D.distance,jre=D.div,Qre=D.dodge,eoe=D.dot,toe=D.drawIndex,noe=D.dynamicBufferAttribute,ioe=D.element,soe=D.emissive,roe=D.equal,ooe=D.equals,aoe=D.equirectUV,loe=D.exp,coe=D.exp2,uoe=D.expression,hoe=D.faceDirection,doe=D.faceForward,foe=D.faceforward,poe=D.float,moe=D.floor,goe=D.fog,_oe=D.fract,xoe=D.frameGroup,yoe=D.frameId,voe=D.frontFacing,Soe=D.fwidth,boe=D.gain,Toe=D.gapSize,Moe=D.getConstNodeType,woe=D.getCurrentStack,Aoe=D.getDirection,Eoe=D.getDistanceAttenuation,Roe=D.getGeometryRoughness,Coe=D.getNormalFromDepth,Noe=D.getParallaxCorrectNormal,Poe=D.getRoughness,Ioe=D.getScreenPosition,Loe=D.getShIrradianceAt,Doe=D.getShadowMaterial,Uoe=D.getShadowRenderObjectFunction,Foe=D.getTextureIndex,Boe=D.getViewPosition,Ooe=D.globalId,Voe=D.glsl,zoe=D.glslFn,koe=D.grayscale,Goe=D.greaterThan,Hoe=D.greaterThanEqual,Woe=D.hash,$oe=D.highpModelNormalViewMatrix,Xoe=D.highpModelViewMatrix,qoe=D.hue,Yoe=D.increment,Zoe=D.incrementBefore,Koe=D.instance,Joe=D.instanceIndex,joe=D.instancedArray,Qoe=D.instancedBufferAttribute,eae=D.instancedDynamicBufferAttribute,tae=D.instancedMesh,nae=D.int,iae=D.inverse,sae=D.inverseSqrt,rae=D.inversesqrt,oae=D.invocationLocalIndex,aae=D.invocationSubgroupIndex,lae=D.ior,cae=D.iridescence,uae=D.iridescenceIOR,hae=D.iridescenceThickness,dae=D.ivec2,fae=D.ivec3,pae=D.ivec4,mae=D.js,gae=D.label,_ae=D.length,xae=D.lengthSq,yae=D.lessThan,vae=D.lessThanEqual,Sae=D.lightPosition,bae=D.lightProjectionUV,Tae=D.lightShadowMatrix,Mae=D.lightTargetDirection,wae=D.lightTargetPosition,Aae=D.lightViewPosition,Eae=D.lightingContext,Rae=D.lights,Cae=D.linearDepth,Nae=D.linearToneMapping,Pae=D.localId,Iae=D.log,Lae=D.log2,Dae=D.logarithmicDepthToViewZ,Uae=D.luminance,Fae=D.mat2,Bae=D.mat3,Oae=D.mat4,Vae=D.matcapUV,zae=D.materialAO,kae=D.materialAlphaTest,Gae=D.materialAnisotropy,Hae=D.materialAnisotropyVector,Wae=D.materialAttenuationColor,$ae=D.materialAttenuationDistance,Xae=D.materialClearcoat,qae=D.materialClearcoatNormal,Yae=D.materialClearcoatRoughness,Zae=D.materialColor,Kae=D.materialDispersion,Jae=D.materialEmissive,jae=D.materialEnvIntensity,Qae=D.materialEnvRotation,ele=D.materialIOR,tle=D.materialIridescence,nle=D.materialIridescenceIOR,ile=D.materialIridescenceThickness,sle=D.materialLightMap,rle=D.materialLineDashOffset,ole=D.materialLineDashSize,ale=D.materialLineGapSize,lle=D.materialLineScale,cle=D.materialLineWidth,ule=D.materialMetalness,hle=D.materialNormal,dle=D.materialOpacity,fle=D.materialPointSize,ple=D.materialReference,mle=D.materialReflectivity,gle=D.materialRefractionRatio,_le=D.materialRotation,xle=D.materialRoughness,yle=D.materialSheen,vle=D.materialSheenRoughness,Sle=D.materialShininess,ble=D.materialSpecular,Tle=D.materialSpecularColor,Mle=D.materialSpecularIntensity,wle=D.materialSpecularStrength,Ale=D.materialThickness,Ele=D.materialTransmission,Rle=D.max,Cle=D.maxMipLevel,Nle=D.mediumpModelViewMatrix,Ple=D.metalness,Ile=D.min,Lle=D.mix,Dle=D.mixElement,Ule=D.mod,Fle=D.modInt,Ble=D.modelDirection,Ole=D.modelNormalMatrix,Vle=D.modelPosition,zle=D.modelRadius,kle=D.modelScale,Gle=D.modelViewMatrix,Hle=D.modelViewPosition,Wle=D.modelViewProjection,$le=D.modelWorldMatrix,Xle=D.modelWorldMatrixInverse,qle=D.morphReference,Yle=D.mrt,Zle=D.mul,Kle=D.mx_aastep,Jle=D.mx_add,jle=D.mx_atan2,Qle=D.mx_cell_noise_float,ece=D.mx_contrast,tce=D.mx_divide,nce=D.mx_fractal_noise_float,ice=D.mx_fractal_noise_vec2,sce=D.mx_fractal_noise_vec3,rce=D.mx_fractal_noise_vec4,oce=D.mx_frame,ace=D.mx_heighttonormal,lce=D.mx_hsvtorgb,cce=D.mx_ifequal,uce=D.mx_ifgreater,hce=D.mx_ifgreatereq,dce=D.mx_invert,fce=D.mx_modulo,pce=D.mx_multiply,mce=D.mx_noise_float,gce=D.mx_noise_vec3,_ce=D.mx_noise_vec4,xce=D.mx_place2d,yce=D.mx_power,vce=D.mx_ramp4,Sce=D.mx_ramplr,bce=D.mx_ramptb,Tce=D.mx_rgbtohsv,Mce=D.mx_rotate2d,wce=D.mx_rotate3d,Ace=D.mx_safepower,Ece=D.mx_separate,Rce=D.mx_splitlr,Cce=D.mx_splittb,Nce=D.mx_srgb_texture_to_lin_rec709,Pce=D.mx_subtract,Ice=D.mx_timer,Lce=D.mx_transform_uv,Dce=D.mx_unifiednoise2d,Uce=D.mx_unifiednoise3d,Fce=D.mx_worley_noise_float,Bce=D.mx_worley_noise_vec2,Oce=D.mx_worley_noise_vec3,Vce=D.negate,zce=D.neutralToneMapping,kce=D.nodeArray,Gce=D.nodeImmutable,Hce=D.nodeObject,Wce=D.nodeObjectIntent,$ce=D.nodeObjects,Xce=D.nodeProxy,qce=D.nodeProxyIntent,Yce=D.normalFlat,Zce=D.normalGeometry,Kce=D.normalLocal,Jce=D.normalMap,jce=D.normalView,Qce=D.normalViewGeometry,eue=D.normalWorld,tue=D.normalWorldGeometry,nue=D.normalize,iue=D.not,sue=D.notEqual,rue=D.numWorkgroups,oue=D.objectDirection,aue=D.objectGroup,lue=D.objectPosition,cue=D.objectRadius,uue=D.objectScale,hue=D.objectViewPosition,due=D.objectWorldMatrix,fue=D.OnObjectUpdate,pue=D.OnMaterialUpdate,mue=D.oneMinus,gue=D.or,_ue=D.orthographicDepthToViewZ,xue=D.oscSawtooth,yue=D.oscSine,vue=D.oscSquare,Sue=D.oscTriangle,bue=D.output,Tue=D.outputStruct,Mue=D.overlay,wue=D.overloadingFn,Aue=D.parabola,Eue=D.parallaxDirection,Rue=D.parallaxUV,Cue=D.parameter,Nue=D.pass,Pue=D.passTexture,Iue=D.pcurve,Lue=D.perspectiveDepthToViewZ,Due=D.pmremTexture,Uue=D.pointShadow,Fue=D.pointUV,Bue=D.pointWidth,Oue=D.positionGeometry,Vue=D.positionLocal,zue=D.positionPrevious,kue=D.positionView,Gue=D.positionViewDirection,Hue=D.positionWorld,Wue=D.positionWorldDirection,$ue=D.posterize,Xue=D.pow,que=D.pow2,Yue=D.pow3,Zue=D.pow4,Kue=D.premultiplyAlpha,Jue=D.property,jue=D.radians,Que=D.rand,ehe=D.range,the=D.rangeFog,nhe=D.rangeFogFactor,ihe=D.reciprocal,she=D.reference,rhe=D.referenceBuffer,ohe=D.reflect,ahe=D.reflectVector,lhe=D.reflectView,che=D.reflector,uhe=D.refract,hhe=D.refractVector,dhe=D.refractView,fhe=D.reinhardToneMapping,phe=D.remap,mhe=D.remapClamp,ghe=D.renderGroup,_he=D.renderOutput,xhe=D.rendererReference,yhe=D.rotate,vhe=D.rotateUV,She=D.roughness,bhe=D.round,The=D.rtt,Mhe=D.sRGBTransferEOTF,whe=D.sRGBTransferOETF,Ahe=D.sample,Ehe=D.sampler,Rhe=D.samplerComparison,Che=D.saturate,Nhe=D.saturation,Phe=D.screen,Ihe=D.screenCoordinate,Lhe=D.screenSize,Dhe=D.screenUV,Uhe=D.scriptable,Fhe=D.scriptableValue,Bhe=D.select,Ohe=D.setCurrentStack,Vhe=D.setName,zhe=D.shaderStages,khe=D.shadow,Ghe=D.shadowPositionWorld,Hhe=D.shapeCircle,Whe=D.sharedUniformGroup,$he=D.sheen,Xhe=D.sheenRoughness,qhe=D.shiftLeft,Yhe=D.shiftRight,Zhe=D.shininess,Khe=D.sign,Jhe=D.sin,jhe=D.sinc,Qhe=D.skinning,ede=D.smoothstep,tde=D.smoothstepElement,nde=D.specularColor,ide=D.specularF90,sde=D.spherizeUV,rde=D.split,ode=D.spritesheetUV,ade=D.sqrt,lde=D.stack,cde=D.step,ude=D.stepElement,hde=D.storage,dde=D.storageBarrier,fde=D.storageObject,pde=D.storageTexture,mde=D.string,gde=D.struct,_de=D.sub,xde=D.subBuild,yde=D.subgroupIndex,vde=D.subgroupSize,Sde=D.tan,bde=D.tangentGeometry,Tde=D.tangentLocal,Mde=D.tangentView,wde=D.tangentWorld,Ade=D.temp,Ede=D.texture,Rde=D.texture3D,Cde=D.textureBarrier,Nde=D.textureBicubic,Pde=D.textureBicubicLevel,Ide=D.textureCubeUV,Lde=D.textureLoad,Dde=D.textureSize,Ude=D.textureStore,Fde=D.thickness,Bde=D.time,Ode=D.timerDelta,Vde=D.timerGlobal,zde=D.timerLocal,kde=D.toneMapping,Gde=D.toneMappingExposure,Hde=D.toonOutlinePass,Wde=D.transformDirection,$de=D.transformNormal,Xde=D.transformNormalToView,qde=D.transformedClearcoatNormalView,Yde=D.transformedNormalView,Zde=D.transformedNormalWorld,Kde=D.transmission,Jde=D.transpose,jde=D.triNoise3D,Qde=D.triplanarTexture,efe=D.triplanarTextures,tfe=D.trunc,nfe=D.uint,ife=D.uniform,sfe=D.uniformArray,rfe=D.uniformCubeTexture,ofe=D.uniformGroup,afe=D.uniformTexture,lfe=D.unpremultiplyAlpha,cfe=D.userData,ufe=D.uv,hfe=D.uvec2,dfe=D.uvec3,ffe=D.uvec4,pfe=D.varying,mfe=D.varyingProperty,gfe=D.vec2,_fe=D.vec3,xfe=D.vec4,yfe=D.vectorComponents,vfe=D.velocity,Sfe=D.vertexColor,bfe=D.vertexIndex,Tfe=D.vertexStage,Mfe=D.vibrance,wfe=D.viewZToLogarithmicDepth,Afe=D.viewZToOrthographicDepth,Efe=D.viewZToPerspectiveDepth,Rfe=D.viewport,Cfe=D.viewportCoordinate,Nfe=D.viewportDepthTexture,Pfe=D.viewportLinearDepth,Ife=D.viewportMipTexture,Lfe=D.viewportResolution,Dfe=D.viewportSafeUV,Ufe=D.viewportSharedTexture,Ffe=D.viewportSize,Bfe=D.viewportTexture,Ofe=D.viewportUV,Vfe=D.wgsl,zfe=D.wgslFn,kfe=D.workgroupArray,Gfe=D.workgroupBarrier,Hfe=D.workgroupId,Wfe=D.workingToColorSpace,$fe=D.xor,Xfe=Object.freeze(Object.defineProperty({__proto__:null,BRDF_GGX:eie,BRDF_Lambert:tie,BasicPointShadowFilter:nie,BasicShadowFilter:iie,Break:sie,Const:rie,Continue:oie,DFGApprox:aie,D_GGX:lie,Discard:cie,EPSILON:uie,F_Schlick:hie,Fn:die,INFINITY:fie,If:pie,Loop:mie,NodeAccess:gie,NodeShaderStage:_ie,NodeType:xie,NodeUpdateType:yie,OnMaterialUpdate:pue,OnObjectUpdate:fue,PCFShadowFilter:vie,PCFSoftShadowFilter:Sie,PI:bie,PI2:Tie,PointShadowFilter:Mie,Return:wie,Schlick_to_F0:Aie,ScriptableNodeResources:Eie,ShaderNode:Rie,Stack:Cie,Switch:Nie,TBNViewMatrix:Pie,VSMShadowFilter:Iie,V_GGX_SmithCorrelated:Lie,Var:Die,VarIntent:Uie,abs:Fie,acesFilmicToneMapping:Bie,acos:Oie,add:Vie,addMethodChaining:zie,addNodeElement:kie,agxToneMapping:Gie,all:Hie,alphaT:Wie,and:$ie,anisotropy:Xie,anisotropyB:qie,anisotropyT:Yie,any:Zie,append:Kie,array:Jie,arrayBuffer:jie,asin:Qie,assign:ese,atan:tse,atan2:nse,atomicAdd:ise,atomicAnd:sse,atomicFunc:rse,atomicLoad:ose,atomicMax:ase,atomicMin:lse,atomicOr:cse,atomicStore:use,atomicSub:hse,atomicXor:dse,attenuationColor:fse,attenuationDistance:pse,attribute:mse,attributeArray:gse,backgroundBlurriness:_se,backgroundIntensity:xse,backgroundRotation:yse,batch:vse,bentNormalView:Sse,billboarding:bse,bitAnd:Tse,bitNot:Mse,bitOr:wse,bitXor:Ase,bitangentGeometry:Ese,bitangentLocal:Rse,bitangentView:Cse,bitangentWorld:Nse,bitcast:Pse,blendBurn:Ise,blendColor:Lse,blendDodge:Dse,blendOverlay:Use,blendScreen:Fse,blur:Bse,bool:Ose,buffer:Vse,bufferAttribute:zse,bumpMap:kse,burn:Gse,bvec2:Hse,bvec3:Wse,bvec4:$se,bypass:Xse,cache:qse,call:Yse,cameraFar:Zse,cameraIndex:Kse,cameraNear:Jse,cameraNormalMatrix:jse,cameraPosition:Qse,cameraProjectionMatrix:ere,cameraProjectionMatrixInverse:tre,cameraViewMatrix:nre,cameraWorldMatrix:ire,cbrt:sre,cdl:rre,ceil:ore,checker:are,cineonToneMapping:lre,clamp:cre,clearcoat:ure,clearcoatNormalView:hre,clearcoatRoughness:dre,code:fre,color:pre,colorSpaceToWorking:mre,colorToDirection:gre,compute:_re,computeKernel:xre,computeSkinning:yre,context:vre,convert:Sre,convertColorSpace:bre,convertToTexture:Tre,cos:Mre,cross:wre,cubeTexture:Are,cubeTextureBase:Ere,cubeToUV:Rre,dFdx:Cre,dFdy:Nre,dashSize:Pre,debug:Ire,decrement:Lre,decrementBefore:Dre,defaultBuildStages:Ure,defaultShaderStages:Fre,defined:Bre,degrees:Ore,deltaTime:Vre,densityFog:zre,densityFogFactor:kre,depth:Gre,depthPass:Hre,determinant:Wre,difference:$re,diffuseColor:Xre,directPointLight:qre,directionToColor:Yre,directionToFaceDirection:Zre,dispersion:Kre,distance:Jre,div:jre,dodge:Qre,dot:eoe,drawIndex:toe,dynamicBufferAttribute:noe,element:ioe,emissive:soe,equal:roe,equals:ooe,equirectUV:aoe,exp:loe,exp2:coe,expression:uoe,faceDirection:hoe,faceForward:doe,faceforward:foe,float:poe,floor:moe,fog:goe,fract:_oe,frameGroup:xoe,frameId:yoe,frontFacing:voe,fwidth:Soe,gain:boe,gapSize:Toe,getConstNodeType:Moe,getCurrentStack:woe,getDirection:Aoe,getDistanceAttenuation:Eoe,getGeometryRoughness:Roe,getNormalFromDepth:Coe,getParallaxCorrectNormal:Noe,getRoughness:Poe,getScreenPosition:Ioe,getShIrradianceAt:Loe,getShadowMaterial:Doe,getShadowRenderObjectFunction:Uoe,getTextureIndex:Foe,getViewPosition:Boe,globalId:Ooe,glsl:Voe,glslFn:zoe,grayscale:koe,greaterThan:Goe,greaterThanEqual:Hoe,hash:Woe,highpModelNormalViewMatrix:$oe,highpModelViewMatrix:Xoe,hue:qoe,increment:Yoe,incrementBefore:Zoe,instance:Koe,instanceIndex:Joe,instancedArray:joe,instancedBufferAttribute:Qoe,instancedDynamicBufferAttribute:eae,instancedMesh:tae,int:nae,inverse:iae,inverseSqrt:sae,inversesqrt:rae,invocationLocalIndex:oae,invocationSubgroupIndex:aae,ior:lae,iridescence:cae,iridescenceIOR:uae,iridescenceThickness:hae,ivec2:dae,ivec3:fae,ivec4:pae,js:mae,label:gae,length:_ae,lengthSq:xae,lessThan:yae,lessThanEqual:vae,lightPosition:Sae,lightProjectionUV:bae,lightShadowMatrix:Tae,lightTargetDirection:Mae,lightTargetPosition:wae,lightViewPosition:Aae,lightingContext:Eae,lights:Rae,linearDepth:Cae,linearToneMapping:Nae,localId:Pae,log:Iae,log2:Lae,logarithmicDepthToViewZ:Dae,luminance:Uae,mat2:Fae,mat3:Bae,mat4:Oae,matcapUV:Vae,materialAO:zae,materialAlphaTest:kae,materialAnisotropy:Gae,materialAnisotropyVector:Hae,materialAttenuationColor:Wae,materialAttenuationDistance:$ae,materialClearcoat:Xae,materialClearcoatNormal:qae,materialClearcoatRoughness:Yae,materialColor:Zae,materialDispersion:Kae,materialEmissive:Jae,materialEnvIntensity:jae,materialEnvRotation:Qae,materialIOR:ele,materialIridescence:tle,materialIridescenceIOR:nle,materialIridescenceThickness:ile,materialLightMap:sle,materialLineDashOffset:rle,materialLineDashSize:ole,materialLineGapSize:ale,materialLineScale:lle,materialLineWidth:cle,materialMetalness:ule,materialNormal:hle,materialOpacity:dle,materialPointSize:fle,materialReference:ple,materialReflectivity:mle,materialRefractionRatio:gle,materialRotation:_le,materialRoughness:xle,materialSheen:yle,materialSheenRoughness:vle,materialShininess:Sle,materialSpecular:ble,materialSpecularColor:Tle,materialSpecularIntensity:Mle,materialSpecularStrength:wle,materialThickness:Ale,materialTransmission:Ele,max:Rle,maxMipLevel:Cle,mediumpModelViewMatrix:Nle,metalness:Ple,min:Ile,mix:Lle,mixElement:Dle,mod:Ule,modInt:Fle,modelDirection:Ble,modelNormalMatrix:Ole,modelPosition:Vle,modelRadius:zle,modelScale:kle,modelViewMatrix:Gle,modelViewPosition:Hle,modelViewProjection:Wle,modelWorldMatrix:$le,modelWorldMatrixInverse:Xle,morphReference:qle,mrt:Yle,mul:Zle,mx_aastep:Kle,mx_add:Jle,mx_atan2:jle,mx_cell_noise_float:Qle,mx_contrast:ece,mx_divide:tce,mx_fractal_noise_float:nce,mx_fractal_noise_vec2:ice,mx_fractal_noise_vec3:sce,mx_fractal_noise_vec4:rce,mx_frame:oce,mx_heighttonormal:ace,mx_hsvtorgb:lce,mx_ifequal:cce,mx_ifgreater:uce,mx_ifgreatereq:hce,mx_invert:dce,mx_modulo:fce,mx_multiply:pce,mx_noise_float:mce,mx_noise_vec3:gce,mx_noise_vec4:_ce,mx_place2d:xce,mx_power:yce,mx_ramp4:vce,mx_ramplr:Sce,mx_ramptb:bce,mx_rgbtohsv:Tce,mx_rotate2d:Mce,mx_rotate3d:wce,mx_safepower:Ace,mx_separate:Ece,mx_splitlr:Rce,mx_splittb:Cce,mx_srgb_texture_to_lin_rec709:Nce,mx_subtract:Pce,mx_timer:Ice,mx_transform_uv:Lce,mx_unifiednoise2d:Dce,mx_unifiednoise3d:Uce,mx_worley_noise_float:Fce,mx_worley_noise_vec2:Bce,mx_worley_noise_vec3:Oce,negate:Vce,neutralToneMapping:zce,nodeArray:kce,nodeImmutable:Gce,nodeObject:Hce,nodeObjectIntent:Wce,nodeObjects:$ce,nodeProxy:Xce,nodeProxyIntent:qce,normalFlat:Yce,normalGeometry:Zce,normalLocal:Kce,normalMap:Jce,normalView:jce,normalViewGeometry:Qce,normalWorld:eue,normalWorldGeometry:tue,normalize:nue,not:iue,notEqual:sue,numWorkgroups:rue,objectDirection:oue,objectGroup:aue,objectPosition:lue,objectRadius:cue,objectScale:uue,objectViewPosition:hue,objectWorldMatrix:due,oneMinus:mue,or:gue,orthographicDepthToViewZ:_ue,oscSawtooth:xue,oscSine:yue,oscSquare:vue,oscTriangle:Sue,output:bue,outputStruct:Tue,overlay:Mue,overloadingFn:wue,parabola:Aue,parallaxDirection:Eue,parallaxUV:Rue,parameter:Cue,pass:Nue,passTexture:Pue,pcurve:Iue,perspectiveDepthToViewZ:Lue,pmremTexture:Due,pointShadow:Uue,pointUV:Fue,pointWidth:Bue,positionGeometry:Oue,positionLocal:Vue,positionPrevious:zue,positionView:kue,positionViewDirection:Gue,positionWorld:Hue,positionWorldDirection:Wue,posterize:$ue,pow:Xue,pow2:que,pow3:Yue,pow4:Zue,premultiplyAlpha:Kue,property:Jue,radians:jue,rand:Que,range:ehe,rangeFog:the,rangeFogFactor:nhe,reciprocal:ihe,reference:she,referenceBuffer:rhe,reflect:ohe,reflectVector:ahe,reflectView:lhe,reflector:che,refract:uhe,refractVector:hhe,refractView:dhe,reinhardToneMapping:fhe,remap:phe,remapClamp:mhe,renderGroup:ghe,renderOutput:_he,rendererReference:xhe,rotate:yhe,rotateUV:vhe,roughness:She,round:bhe,rtt:The,sRGBTransferEOTF:Mhe,sRGBTransferOETF:whe,sample:Ahe,sampler:Ehe,samplerComparison:Rhe,saturate:Che,saturation:Nhe,screen:Phe,screenCoordinate:Ihe,screenSize:Lhe,screenUV:Dhe,scriptable:Uhe,scriptableValue:Fhe,select:Bhe,setCurrentStack:Ohe,setName:Vhe,shaderStages:zhe,shadow:khe,shadowPositionWorld:Ghe,shapeCircle:Hhe,sharedUniformGroup:Whe,sheen:$he,sheenRoughness:Xhe,shiftLeft:qhe,shiftRight:Yhe,shininess:Zhe,sign:Khe,sin:Jhe,sinc:jhe,skinning:Qhe,smoothstep:ede,smoothstepElement:tde,specularColor:nde,specularF90:ide,spherizeUV:sde,split:rde,spritesheetUV:ode,sqrt:ade,stack:lde,step:cde,stepElement:ude,storage:hde,storageBarrier:dde,storageObject:fde,storageTexture:pde,string:mde,struct:gde,sub:_de,subBuild:xde,subgroupIndex:yde,subgroupSize:vde,tan:Sde,tangentGeometry:bde,tangentLocal:Tde,tangentView:Mde,tangentWorld:wde,temp:Ade,texture:Ede,texture3D:Rde,textureBarrier:Cde,textureBicubic:Nde,textureBicubicLevel:Pde,textureCubeUV:Ide,textureLoad:Lde,textureSize:Dde,textureStore:Ude,thickness:Fde,time:Bde,timerDelta:Ode,timerGlobal:Vde,timerLocal:zde,toneMapping:kde,toneMappingExposure:Gde,toonOutlinePass:Hde,transformDirection:Wde,transformNormal:$de,transformNormalToView:Xde,transformedClearcoatNormalView:qde,transformedNormalView:Yde,transformedNormalWorld:Zde,transmission:Kde,transpose:Jde,triNoise3D:jde,triplanarTexture:Qde,triplanarTextures:efe,trunc:tfe,uint:nfe,uniform:ife,uniformArray:sfe,uniformCubeTexture:rfe,uniformGroup:ofe,uniformTexture:afe,unpremultiplyAlpha:lfe,userData:cfe,uv:ufe,uvec2:hfe,uvec3:dfe,uvec4:ffe,varying:pfe,varyingProperty:mfe,vec2:gfe,vec3:_fe,vec4:xfe,vectorComponents:yfe,velocity:vfe,vertexColor:Sfe,vertexIndex:bfe,vertexStage:Tfe,vibrance:Mfe,viewZToLogarithmicDepth:wfe,viewZToOrthographicDepth:Afe,viewZToPerspectiveDepth:Efe,viewport:Rfe,viewportCoordinate:Cfe,viewportDepthTexture:Nfe,viewportLinearDepth:Pfe,viewportMipTexture:Ife,viewportResolution:Lfe,viewportSafeUV:Dfe,viewportSharedTexture:Ufe,viewportSize:Ffe,viewportTexture:Bfe,viewportUV:Ofe,wgsl:Vfe,wgslFn:zfe,workgroupArray:kfe,workgroupBarrier:Gfe,workgroupId:Hfe,workingToColorSpace:Wfe,xor:$fe},Symbol.toStringTag,{value:"Module"})),qfe=iD(Xfe);var Yfe=km.exports,II;function Zfe(){return II||(II=1,(function(a,e){(function(t,i){i(e,o7(),Qne,qfe)})(Yfe,(function(t,i,s,r){function l(Ue,ee){if(!(Ue instanceof ee))throw new TypeError("Cannot call a class as a function")}function u(Ue,ee){for(var ve=0;ve<ee.length;ve++){var de=ee[ve];de.enumerable=de.enumerable||!1,de.configurable=!0,"value"in de&&(de.writable=!0),Object.defineProperty(Ue,O(de.key),de)}}function d(Ue,ee,ve){return ee&&u(Ue.prototype,ee),Object.defineProperty(Ue,"prototype",{writable:!1}),Ue}function f(Ue){var ee=S();return function(){var ve,de=x(Ue);if(ee){var we=x(this).constructor;ve=Reflect.construct(de,arguments,we)}else ve=de.apply(this,arguments);return A(this,ve)}}function g(Ue,ee,ve){return(ee=O(ee))in Ue?Object.defineProperty(Ue,ee,{value:ve,enumerable:!0,configurable:!0,writable:!0}):Ue[ee]=ve,Ue}function x(Ue){return x=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(ee){return ee.__proto__||Object.getPrototypeOf(ee)},x(Ue)}function v(Ue,ee){if(typeof ee!="function"&&ee!==null)throw new TypeError("Super expression must either be null or a function");Ue.prototype=Object.create(ee&&ee.prototype,{constructor:{value:Ue,writable:!0,configurable:!0}}),Object.defineProperty(Ue,"prototype",{writable:!1}),ee&&w(Ue,ee)}function S(){try{var Ue=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch{}return(S=function(){return!!Ue})()}function T(Ue,ee){var ve=Object.keys(Ue);if(Object.getOwnPropertySymbols){var de=Object.getOwnPropertySymbols(Ue);ee&&(de=de.filter((function(we){return Object.getOwnPropertyDescriptor(Ue,we).enumerable}))),ve.push.apply(ve,de)}return ve}function E(Ue){for(var ee=1;ee<arguments.length;ee++){var ve=arguments[ee]!=null?arguments[ee]:{};ee%2?T(Object(ve),!0).forEach((function(de){g(Ue,de,ve[de])})):Object.getOwnPropertyDescriptors?Object.defineProperties(Ue,Object.getOwnPropertyDescriptors(ve)):T(Object(ve)).forEach((function(de){Object.defineProperty(Ue,de,Object.getOwnPropertyDescriptor(ve,de))}))}return Ue}function A(Ue,ee){if(ee&&(typeof ee=="object"||typeof ee=="function"))return ee;if(ee!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return(function(ve){if(ve===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return ve})(Ue)}function w(Ue,ee){return w=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(ve,de){return ve.__proto__=de,ve},w(Ue,ee)}function O(Ue){var ee=(function(ve,de){if(typeof ve!="object"||!ve)return ve;var we=ve[Symbol.toPrimitive];if(we!==void 0){var Ie=we.call(ve,de);if(typeof Ie!="object")return Ie;throw new TypeError("@@toPrimitive must return a primitive value.")}return(de==="string"?String:Number)(ve)})(Ue,"string");return typeof ee=="symbol"?ee:ee+""}var F={exports:{}};(function(Ue){var ee=/\n/,ve=`
`,de=/\s/;function we(Xe,qe,Ft,Bt){var se=Xe.indexOf(qe,Ft);return se===-1||se>Bt?Bt:se}function Ie(Xe){return de.test(Xe)}function lt(Xe,qe,Ft,Bt){return{start:qe,end:qe+Math.min(Bt,Ft-qe)}}Ue.exports=function(Xe,qe){return Ue.exports.lines(Xe,qe).map((function(Ft){return Xe.substring(Ft.start,Ft.end)})).join(`
`)},Ue.exports.lines=function(Xe,qe){if((qe=qe||{}).width===0&&qe.mode!=="nowrap")return[];Xe=Xe||"";var Ft=typeof qe.width=="number"?qe.width:Number.MAX_VALUE,Bt=Math.max(0,qe.start||0),se=typeof qe.end=="number"?qe.end:Xe.length,X=qe.mode,Se=qe.measure||lt;return X==="pre"?(function(Me,Ge,De,Et,et){for(var kt=[],It=De,Ye=De;Ye<Et&&Ye<Ge.length;Ye++){var mt=Ge.charAt(Ye),ft=ee.test(mt);if(ft||Ye===Et-1){var Lt=Me(Ge,It,ft?Ye:Ye+1,et);kt.push(Lt),It=Ye+1}}return kt})(Se,Xe,Bt,se,Ft):(function(Me,Ge,De,Et,et,kt){var It=[],Ye=et;for(kt==="nowrap"&&(Ye=Number.MAX_VALUE);De<Et&&De<Ge.length;){for(var mt=we(Ge,ve,De,Et);De<mt&&Ie(Ge.charAt(De));)De++;var ft=Me(Ge,De,mt,Ye),Lt=De+(ft.end-ft.start),yt=Lt+ve.length;if(Lt<mt){for(;Lt>De&&!Ie(Ge.charAt(Lt));)Lt--;if(Lt===De)yt>De+ve.length&&yt--,Lt=yt;else for(yt=Lt;Lt>De&&Ie(Ge.charAt(Lt-ve.length));)Lt--}if(Lt>=De){var bn=Me(Ge,De,Lt,Ye);It.push(bn)}De=yt}return It})(Se,Xe,Bt,se,Ft,X)}})(F);var B=F.exports,k=["x","e","a","o","n","s","r","c","u","m","v","w","z"],Y=["m","w"],$=["H","I","N","E","F","K","L","T","U","V","W","X","Y","Z"],Q=9,z=32,q=(function(){function Ue(){var ee=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};l(this,Ue),this.glyphs=[],this._measure=this.computeMetrics.bind(this),this.update(ee)}return d(Ue,[{key:"width",get:function(){return this._width}},{key:"height",get:function(){return this._height}},{key:"descender",get:function(){return this._descender}},{key:"ascender",get:function(){return this._ascender}},{key:"xHeight",get:function(){return this._xHeight}},{key:"baseline",get:function(){return this._baseline}},{key:"capHeight",get:function(){return this._capHeight}},{key:"lineHeight",get:function(){return this._lineHeight}},{key:"linesTotal",get:function(){return this._linesTotal}},{key:"lettersTotal",get:function(){return this._lettersTotal}},{key:"wordsTotal",get:function(){return this._wordsTotal}},{key:"update",value:function(ee){var ve=this;if(ee=Object.assign({measure:this._measure},ee),this._options=ee,this._options.tabSize=Oe(this._options.tabSize,4),!ee.font)throw new Error("must provide a valid bitmap font");var de=this.glyphs,we=ee.text||"",Ie=ee.font;this._setupSpaceGlyphs(Ie);var lt=B.lines(we,ee),Xe=ee.width||0,qe=we.split(" ").filter((function(Ye){return Ye!==`
`})).length,Ft=we.split("").filter((function(Ye){return Ye!==`
`&&Ye!==" "})).length;de.length=0;var Bt=lt.reduce((function(Ye,mt){return Math.max(Ye,mt.width,Xe)}),0),se=0,X=0,Se=Oe(ee.lineHeight,Ie.common.lineHeight),Me=Ie.common.base,Ge=Se-Me,De=ee.letterSpacing||0,Et=Se*lt.length-Ge,et=(function(Ye){return Ye==="center"?1:Ye==="right"?2:0})(this._options.align);X-=Et,this._width=Bt,this._height=Et,this._descender=Se-Me,this._baseline=Me,this._xHeight=(function(Ye){for(var mt=0;mt<k.length;mt++){var ft=k[mt].charCodeAt(0),Lt=Ne(Ye.chars,ft);if(Lt>=0)return Ye.chars[Lt].height}return 0})(Ie),this._capHeight=(function(Ye){for(var mt=0;mt<$.length;mt++){var ft=$[mt].charCodeAt(0),Lt=Ne(Ye.chars,ft);if(Lt>=0)return Ye.chars[Lt].height}return 0})(Ie),this._lineHeight=Se,this._ascender=Se-Ge-this._xHeight;var kt=0,It=0;lt.forEach((function(Ye,mt){for(var ft,Lt=Ye.start,yt=Ye.end,bn=Ye.width,ge=we.slice(Lt,yt).split(" ").filter((function(Pi){return Pi!==""})).length,bt=we.slice(Lt,yt).split(" ").join("").length,Ht=0,Qt=0,wt=Lt;wt<yt;wt++){var ut=we.charCodeAt(wt),ln=ve.getGlyph(Ie,ut);if(ln){ft&&(se+=Ce(Ie,ft.id,ln.id));var Yn=se;et===1?Yn+=(Bt-bn)/2:et===2&&(Yn+=Bt-bn),de.push({position:[Yn,X],data:ln,index:wt,linesTotal:lt.length,lineIndex:mt,lineLettersTotal:bt,lineLetterIndex:Ht,lineWordsTotal:ge,lineWordIndex:Qt,wordsTotal:qe,wordIndex:kt,lettersTotal:Ft,letterIndex:It}),ln.id===z&&ft.id!==z&&(Qt++,kt++),ln.id!==z&&(Ht++,It++),se+=ln.xadvance+De,ft=ln}}X+=Se,se=0})),this._lettersTotal=Ft,this._wordsTotal=qe,this._linesTotal=lt.length}},{key:"getGlyph",value:function(ee,ve){var de=oe(ee,ve);return de||(ve===Q?this._fallbackTabGlyph:ve===z?this._fallbackSpaceGlyph:null)}},{key:"computeMetrics",value:function(ee,ve,de,we){var Ie,lt,Xe=this._options.letterSpacing||0,qe=this._options.font,Ft=0,Bt=0,se=0;if(!qe.chars||qe.chars.length===0)return{start:ve,end:ve,width:0};de=Math.min(ee.length,de);for(var X=ve;X<de;X++){var Se=ee.charCodeAt(X);if(Ie=this.getGlyph(qe,Se)){Ie.char=ee[X],Ie.xoffset;var Me=(Ft+=lt?Ce(qe,lt.id,Ie.id):0)+Ie.xadvance+Xe,Ge=Ft+Ie.width;if(Ge>=we||Me>=we)break;Ft=Me,Bt=Ge,lt=Ie}se++}return lt&&(Bt+=lt.xoffset),{start:ve,end:ve+se,width:Bt}}},{key:"_setupSpaceGlyphs",value:function(ee){if(this._fallbackSpaceGlyph=null,this._fallbackTabGlyph=null,ee.chars&&ee.chars.length!==0){var ve=oe(ee,z)||(function(Ie){for(var lt=0;lt<Y.length;lt++){var Xe=Y[lt].charCodeAt(0),qe=Ne(Ie.chars,Xe);if(qe>=0)return Ie.chars[qe]}return 0})(ee)||ee.chars[0],de=this._options.tabSize*ve.xadvance;this._fallbackSpaceGlyph=ve;var we=Object.assign({},ve);this._fallbackTabGlyph=Object.assign(we,{x:0,y:0,xadvance:de,id:Q,xoffset:0,yoffset:0,width:0,height:0})}}}]),Ue})();function oe(Ue,ee){if(!Ue.chars||Ue.chars.length===0)return null;var ve=Ne(Ue.chars,ee);return ve>=0?Ue.chars[ve]:null}function Ce(Ue,ee,ve){if(!Ue.kernings||Ue.kernings.length===0)return 0;for(var de=Ue.kernings,we=0;we<de.length;we++){var Ie=de[we];if(Ie.first===ee&&Ie.second===ve)return Ie.amount}return 0}function Ne(Ue,ee,ve){for(var de=ve=ve||0;de<Ue.length;de++)if(Ue[de].id===ee)return de;return-1}function Oe(Ue,ee){return typeof Ue=="number"?Ue:typeof ee=="number"?ee:0}var Be={min:[0,0],max:[0,0]};function He(Ue){var ee=Ue.length/2;Be.min[0]=Ue[0],Be.min[1]=Ue[1],Be.max[0]=Ue[0],Be.max[1]=Ue[1];for(var ve=0;ve<ee;ve++){var de=Ue[2*ve+0],we=Ue[2*ve+1];Be.min[0]=Math.min(de,Be.min[0]),Be.min[1]=Math.min(we,Be.min[1]),Be.max[0]=Math.max(de,Be.max[0]),Be.max[1]=Math.max(we,Be.max[1])}}var ct={computeBox:function(Ue,ee){return He(Ue),ee.min.set(Be.min[0],Be.min[1],0),ee.max.set(Be.max[0],Be.max[1],0),ee},computeSphere:function(Ue,ee){He(Ue);var ve=Be.min[0],de=Be.min[1],we=Be.max[0]-ve,Ie=Be.max[1]-de,lt=Math.sqrt(we*we+Ie*Ie);ee.center.set(ve+we/2,de+Ie/2,0),ee.radius=lt/2}},Ve={pages:function(Ue){var ee=new Float32Array(4*Ue.length*1),ve=0;return Ue.forEach((function(de){var we=de.data.page||0;ee[ve++]=we,ee[ve++]=we,ee[ve++]=we,ee[ve++]=we})),ee},attributes:function(Ue,ee,ve,de,we){var Ie=new Float32Array(4*Ue.length*2),lt=new Float32Array(4*Ue.length*2),Xe=new Float32Array(4*Ue.length*2),qe=new Float32Array(4*Ue.length*2),Ft=new Float32Array(4*Ue.length*2),Bt=new Float32Array(4*Ue.length*2),se=0,X=0,Se=0,Me=0,Ge=0,De=0;return Ue.forEach((function(Et){var et=Et.data,kt=et.x+et.width,It=et.y+et.height,Ye=et.x/ee,mt=et.y/ve,ft=kt/ee,Lt=It/ve;de&&(mt=(ve-et.y)/ve,Lt=(ve-It)/ve),Ie[se++]=Ye,Ie[se++]=mt,Ie[se++]=Ye,Ie[se++]=Lt,Ie[se++]=ft,Ie[se++]=Lt,Ie[se++]=ft,Ie[se++]=mt,lt[Me++]=Et.position[0]/we.width,lt[Me++]=(Et.position[1]+we.height)/we.height,lt[Me++]=Et.position[0]/we.width,lt[Me++]=(Et.position[1]+we.height+et.height)/we.height,lt[Me++]=(Et.position[0]+et.width)/we.width,lt[Me++]=(Et.position[1]+we.height+et.height)/we.height,lt[Me++]=(Et.position[0]+et.width)/we.width,lt[Me++]=(Et.position[1]+we.height)/we.height,Xe[Ge++]=0,Xe[Ge++]=1,Xe[Ge++]=0,Xe[Ge++]=0,Xe[Ge++]=1,Xe[Ge++]=0,Xe[Ge++]=1,Xe[Ge++]=1,qe[De++]=et.width,qe[De++]=et.height,qe[De++]=et.width,qe[De++]=et.height,qe[De++]=et.width,qe[De++]=et.height,qe[De++]=et.width,qe[De++]=et.height;var yt=Et.position[0]+et.xoffset,bn=Et.position[1]+et.yoffset,ge=et.width,bt=et.height;Ft[X++]=yt,Ft[X++]=bn,Ft[X++]=yt,Ft[X++]=bn+bt,Ft[X++]=yt+ge,Ft[X++]=bn+bt,Ft[X++]=yt+ge,Ft[X++]=bn,Bt[Se++]=yt+ge/2,Bt[Se++]=bn+bt/2,Bt[Se++]=yt+ge/2,Bt[Se++]=bn+bt/2,Bt[Se++]=yt+ge/2,Bt[Se++]=bn+bt/2,Bt[Se++]=yt+ge/2,Bt[Se++]=bn+bt/2})),{uvs:Ie,layoutUvs:lt,positions:Ft,centers:Bt,glyphUvs:Xe,glyphResolution:qe}},infos:function(Ue,ee){for(var ve=new Float32Array(4*Ue.length),de=new Float32Array(4*Ue.length),we=new Float32Array(4*Ue.length),Ie=new Float32Array(4*Ue.length),lt=new Float32Array(4*Ue.length),Xe=new Float32Array(4*Ue.length),qe=new Float32Array(4*Ue.length),Ft=new Float32Array(4*Ue.length),Bt=new Float32Array(4*Ue.length),se=new Float32Array(4*Ue.length),X=0,Se=0,Me=0,Ge=0,De=0,Et=0,et=0,kt=0,It=0,Ye=0,mt=0;mt<Ue.length;mt++){var ft=Ue[mt];ve[X++]=ft.linesTotal,ve[X++]=ft.linesTotal,ve[X++]=ft.linesTotal,ve[X++]=ft.linesTotal,de[Se++]=ft.lineIndex,de[Se++]=ft.lineIndex,de[Se++]=ft.lineIndex,de[Se++]=ft.lineIndex,we[Me++]=ft.lineLettersTotal,we[Me++]=ft.lineLettersTotal,we[Me++]=ft.lineLettersTotal,we[Me++]=ft.lineLettersTotal,Ie[Ge++]=ft.lineLetterIndex,Ie[Ge++]=ft.lineLetterIndex,Ie[Ge++]=ft.lineLetterIndex,Ie[Ge++]=ft.lineLetterIndex,lt[De++]=ft.lineWordsTotal,lt[De++]=ft.lineWordsTotal,lt[De++]=ft.lineWordsTotal,lt[De++]=ft.lineWordsTotal,Xe[Et++]=ft.lineWordIndex,Xe[Et++]=ft.lineWordIndex,Xe[Et++]=ft.lineWordIndex,Xe[Et++]=ft.lineWordIndex,qe[et++]=ft.wordsTotal,qe[et++]=ft.wordsTotal,qe[et++]=ft.wordsTotal,qe[et++]=ft.wordsTotal,Ft[kt++]=ft.wordIndex,Ft[kt++]=ft.wordIndex,Ft[kt++]=ft.wordIndex,Ft[kt++]=ft.wordIndex,Bt[It++]=ft.lettersTotal,Bt[It++]=ft.lettersTotal,Bt[It++]=ft.lettersTotal,Bt[It++]=ft.lettersTotal,se[Ye++]=ft.letterIndex,se[Ye++]=ft.letterIndex,se[Ye++]=ft.letterIndex,se[Ye++]=ft.letterIndex}return{linesTotal:ve,lineIndex:de,lineLettersTotal:we,lineLetterIndex:Ie,lineWordsTotal:lt,lineWordIndex:Xe,wordsTotal:qe,wordIndex:Ft,lettersTotal:Bt,letterIndex:se}}},Ct=Object.prototype.toString;function Gt(Ue){return!!Ue.constructor&&typeof Ue.constructor.isBuffer=="function"&&Ue.constructor.isBuffer(Ue)}var pn=function(Ue){switch(Ue){case"int8":return Int8Array;case"int16":return Int16Array;case"int32":return Int32Array;case"uint8":return Uint8Array;case"uint16":return Uint16Array;case"uint32":return Uint32Array;case"float32":return Float32Array;case"float64":return Float64Array;case"array":return Array;case"uint8_clamped":return Uint8ClampedArray}},qn=function(Ue){return Ue.BYTES_PER_ELEMENT&&Ct.call(Ue.buffer)==="[object ArrayBuffer]"||Array.isArray(Ue)},yi=function(Ue){return Ue!=null&&(Gt(Ue)||(function(ee){return typeof ee.readFloatLE=="function"&&typeof ee.slice=="function"&&Gt(ee.slice(0,0))})(Ue)||!!Ue._isBuffer)},bi=[0,2,3],rt=[2,1,3],Xt=(function(Ue){v(ve,Ue);var ee=f(ve);function ve(de){var we;return l(this,ve),typeof de=="string"&&(de={text:de}),(we=ee.call(this))._options=Object.assign({},de),we._layout=null,we._visibleGlyphs=[],we.update(we._options),we}return d(ve,[{key:"layout",get:function(){return this._layout}},{key:"visibleGlyphs",get:function(){return this._visibleGlyphs}},{key:"update",value:function(de){if(de=this._validateOptions(de)){this._layout=(function(Se){return new q(Se)})(de);var we=de.flipY!==!1,Ie=de.font,lt=Ie.common.scaleW,Xe=Ie.common.scaleH,qe=this._layout.glyphs.filter((function(Se){var Me=Se.data;return Me.width*Me.height>0}));this._visibleGlyphs=qe;var Ft=Ve.attributes(qe,lt,Xe,we,this._layout),Bt=Ve.infos(qe,this._layout),se=(function(Se,Me){Se&&(qn(Se)||yi(Se))||(Me=Se||{},Se=null);for(var Ge=typeof(Me=typeof Me=="number"?{count:Me}:Me||{}).type=="string"?Me.type:"uint16",De=typeof Me.count=="number"?Me.count:1,Et=Me.start||0,et=Me.clockwise!==!1?bi:rt,kt=et[0],It=et[1],Ye=et[2],mt=6*De,ft=Se||new(pn(Ge))(mt),Lt=0,yt=0;Lt<mt;Lt+=6,yt+=4){var bn=Lt+Et;ft[bn+0]=yt+0,ft[bn+1]=yt+1,ft[bn+2]=yt+2,ft[bn+3]=yt+kt,ft[bn+4]=yt+It,ft[bn+5]=yt+Ye}return ft})([],{clockwise:!0,type:"uint16",count:qe.length});if(this.setIndex(se),this.setAttribute("position",new i.BufferAttribute(Ft.positions,2)),this.setAttribute("center",new i.BufferAttribute(Ft.centers,2)),this.setAttribute("uv",new i.BufferAttribute(Ft.uvs,2)),this.setAttribute("layoutUv",new i.BufferAttribute(Ft.layoutUvs,2)),this.setAttribute("glyphUv",new i.BufferAttribute(Ft.glyphUvs,2)),this.setAttribute("glyphResolution",new i.BufferAttribute(Ft.glyphResolution,2)),this.setAttribute("lineIndex",new i.BufferAttribute(Bt.lineIndex,1)),this.setAttribute("lineLettersTotal",new i.BufferAttribute(Bt.lineLettersTotal,1)),this.setAttribute("lineLetterIndex",new i.BufferAttribute(Bt.lineLetterIndex,1)),this.setAttribute("lineWordsTotal",new i.BufferAttribute(Bt.lineWordsTotal,1)),this.setAttribute("lineWordIndex",new i.BufferAttribute(Bt.lineWordIndex,1)),this.setAttribute("wordIndex",new i.BufferAttribute(Bt.wordIndex,1)),this.setAttribute("letterIndex",new i.BufferAttribute(Bt.letterIndex,1)),!de.multipage&&"page"in this.attributes)this.deleteAttribute("page");else if(de.multipage){var X=Ve.pages(qe);this.setAttribute("page",new i.BufferAttribute(X,1))}}}},{key:"computeBoundingSphere",value:function(){this.boundingSphere===null&&(this.boundingSphere=new i.Sphere);var de=this.attributes.position.array,we=this.attributes.position.itemSize;if(!de||!we||de.length<2)return this.boundingSphere.radius=0,void this.boundingSphere.center.set(0,0,0);ct.computeSphere(de,this.boundingSphere),isNaN(this.boundingSphere.radius)&&console.error('BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.')}},{key:"computeBoundingBox",value:function(){this.boundingBox===null&&(this.boundingBox=new i.Box3);var de=this.boundingBox,we=this.attributes.position.array,Ie=this.attributes.position.itemSize;if(we&&Ie&&!(we.length<2))return ct.computeBox(we,de);de.makeEmpty()}},{key:"_validateOptions",value:function(de){if(typeof de=="string"&&(de={text:de}),!(de=Object.assign({},this._options,de)).font)throw new TypeError("must specify a { font } in options");return de}}]),ve})(i.BufferGeometry),At={common:{uOpacity:{value:1},uColor:{value:{r:255,g:255,b:255}},uMap:{value:null}},rendering:{uThreshold:{value:.2},uAlphaTest:{value:.01}},strokes:{uStrokeColor:{value:{r:255,g:0,b:0}},uStrokeOutsetWidth:{value:0},uStrokeInsetWidth:{value:.3}}},In={side:i.FrontSide,transparent:!0,defines:{IS_SMALL:!1},extensions:{derivatives:!0},uniforms:E(E(E({},At.common),At.rendering),At.strokes),vertexShader:`#define GLSLIFY 1
attribute vec2 layoutUv;attribute float lineIndex;attribute float lineLettersTotal;attribute float lineLetterIndex;attribute float lineWordsTotal;attribute float lineWordIndex;attribute float wordIndex;attribute float letterIndex;varying vec2 vUv;varying vec2 vLayoutUv;varying vec3 vViewPosition;varying vec3 vNormal;varying float vLineIndex;varying float vLineLettersTotal;varying float vLineLetterIndex;varying float vLineWordsTotal;varying float vLineWordIndex;varying float vWordIndex;varying float vLetterIndex;void main(){vec4 mvPosition=vec4(position,1.0);mvPosition=modelViewMatrix*mvPosition;gl_Position=projectionMatrix*mvPosition;vUv=uv;vLayoutUv=layoutUv;vViewPosition=-mvPosition.xyz;vNormal=normal;vLineIndex=lineIndex;vLineLettersTotal=lineLettersTotal;vLineLetterIndex=lineLetterIndex;vLineWordsTotal=lineWordsTotal;vLineWordIndex=lineWordIndex;vWordIndex=wordIndex;vLetterIndex=letterIndex;}`,fragmentShader:`#define GLSLIFY 1
varying vec2 vUv;uniform float uOpacity;uniform float uThreshold;uniform float uAlphaTest;uniform vec3 uColor;uniform sampler2D uMap;uniform vec3 uStrokeColor;uniform float uStrokeOutsetWidth;uniform float uStrokeInsetWidth;float median(float r,float g,float b){return max(min(r,g),min(max(r,g),b));}void main(){vec3 s=texture2D(uMap,vUv).rgb;float sigDist=median(s.r,s.g,s.b)-0.5;float afwidth=1.4142135623730951/2.0;
#ifdef IS_SMALL
float alpha=smoothstep(uThreshold-afwidth,uThreshold+afwidth,sigDist);
#else
float alpha=clamp(sigDist/fwidth(sigDist)+0.5,0.0,1.0);
#endif
float sigDistOutset=sigDist+uStrokeOutsetWidth*0.5;float sigDistInset=sigDist-uStrokeInsetWidth*0.5;
#ifdef IS_SMALL
float outset=smoothstep(uThreshold-afwidth,uThreshold+afwidth,sigDistOutset);float inset=1.0-smoothstep(uThreshold-afwidth,uThreshold+afwidth,sigDistInset);
#else
float outset=clamp(sigDistOutset/fwidth(sigDistOutset)+0.5,0.0,1.0);float inset=1.0-clamp(sigDistInset/fwidth(sigDistInset)+0.5,0.0,1.0);
#endif
float border=outset*inset;if(alpha<uAlphaTest)discard;vec4 filledFragColor=vec4(uColor,uOpacity*alpha);gl_FragColor=filledFragColor;}`},gn=(function(Ue){v(ve,Ue);var ee=f(ve);function ve(){var de=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return l(this,ve),de=Object.assign(JSON.parse(JSON.stringify(In)),de),ee.call(this,de)}return d(ve)})(i.ShaderMaterial),kn={transparent:!0,opacity:1,alphaTest:.01,threshold:.2,color:"#ffffff",strokeColor:"#000000",strokeOutsetWidth:0,strokeInsetWidth:.3,isSmooth:0},Ki=(function(Ue){v(ve,Ue);var ee=f(ve);function ve(){var de,we=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};l(this,ve),we=Object.assign(JSON.parse(JSON.stringify(kn)),we),(de=ee.call(this)).transparent=we.transparent,de.alphaTest=we.alphaTest,de.opacity=r.uniform(we.opacity),de.color=r.uniform(new i.Color(we.color)),de.map=we.map,de.isSmooth=r.uniform(we.isSmooth),de.threshold=r.uniform(we.threshold),de.strokeColor=r.uniform(new i.Color(we.strokeColor)),de.strokeOutsetWidth=r.uniform(we.strokeOutsetWidth),de.strokeInsetWidth=r.uniform(we.strokeInsetWidth);var Ie=.7071067811865476,lt=function(et,kt,It){return r.max(r.min(et,kt),r.min(r.max(et,kt),It))},Xe=r.texture(de.map,r.uv()),qe=r.sub(lt(Xe.r,Xe.g,Xe.b),.5),Ft=r.clamp(r.add(r.div(qe,r.fwidth(qe)),.5),0,1),Bt=r.smoothstep(r.sub(de.threshold,Ie),r.add(de.threshold,Ie),qe);Ft=r.mix(Ft,Bt,de.isSmooth);var se=r.add(qe,r.mul(de.strokeOutsetWidth,.5)),X=r.sub(qe,r.mul(de.strokeOutsetWidth,.5)),Se=r.clamp(r.add(r.div(se,r.fwidth(se)),.5),0,1),Me=r.oneMinus(r.clamp(r.add(r.div(X,r.fwidth(X)),.5),0,1)),Ge=r.smoothstep(r.sub(de.threshold,Ie),r.add(de.threshold,Ie),se),De=r.oneMinus(r.smoothstep(r.sub(de.threshold,Ie),r.add(de.threshold,Ie),X));Se=r.mix(Se,Ge,de.isSmooth),Me=r.mix(Me,De,de.isSmooth);var Et=r.mul(Se,Me);return de.colorNode=r.mix(de.color,de.strokeColor,Et),de.opacityNode=r.mul(de.opacity,r.add(Ft,Et)),de}return d(ve)})(s.NodeMaterial);t.MSDFTextGeometry=Xt,t.MSDFTextMaterial=gn,t.MSDFTextNodeMaterial=Ki,t.uniforms=At,Object.defineProperty(t,"__esModule",{value:!0})}))})(km,km.exports)),km.exports}var Hy=Zfe();class Kfe extends Xr{constructor(e){super(e)}load(e,t,i,s){const r=this,l=new ka(this.manager);l.setPath(this.path),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(e,function(u){const d=r.parse(JSON.parse(u));t&&t(d)},i,s)}parse(e){return new Jfe(e)}}class Jfe{constructor(e){this.isFont=!0,this.type="Font",this.data=e}generateShapes(e,t=100){const i=[],s=jfe(e,t,this.data);for(let r=0,l=s.length;r<l;r++)i.push(...s[r].toShapes());return i}}function jfe(a,e,t){const i=Array.from(a),s=e/t.resolution,r=(t.boundingBox.yMax-t.boundingBox.yMin+t.underlineThickness)*s,l=[];let u=0,d=0;for(let f=0;f<i.length;f++){const g=i[f];if(g===`
`)u=0,d-=r;else{const x=Qfe(g,s,u,d,t);u+=x.offsetX,l.push(x.path)}}return l}function Qfe(a,e,t,i,s){const r=s.glyphs[a]||s.glyphs["?"];if(!r){console.error('THREE.Font: character "'+a+'" does not exists in font family '+s.familyName+".");return}const l=new YL;let u,d,f,g,x,v,S,T;if(r.o){const E=r._cachedOutline||(r._cachedOutline=r.o.split(" "));for(let A=0,w=E.length;A<w;)switch(E[A++]){case"m":u=E[A++]*e+t,d=E[A++]*e+i,l.moveTo(u,d);break;case"l":u=E[A++]*e+t,d=E[A++]*e+i,l.lineTo(u,d);break;case"q":f=E[A++]*e+t,g=E[A++]*e+i,x=E[A++]*e+t,v=E[A++]*e+i,l.quadraticCurveTo(x,v,f,g);break;case"b":f=E[A++]*e+t,g=E[A++]*e+i,x=E[A++]*e+t,v=E[A++]*e+i,S=E[A++]*e+t,T=E[A++]*e+i,l.bezierCurveTo(x,v,S,T,f,g);break}}return{offsetX:r.ha*e,path:l}}class epe{constructor(e,t){this.scene=new rd,this.camera=new ru(-e/2,e/2,t/2,-t/2,0,1),this.renderTarget=new Yo(e,t,{minFilter:Ci,magFilter:Ci,format:es,type:os}),this.isReady=!1,this.width=e,this.height=t,this.load()}async load(e="./fonts/roboto-regular.fnt",t="./fonts/roboto-regular.png"){const i=new Ew,s=new Kfe;this.atlas=await new Promise(r=>i.load(t,r)),this.font=(await new Promise(r=>s.load(e,r))).data,this.isReady=!0,this.createText("The show is starting!")}createText(e){const t=new Hy.MSDFTextGeometry({text:e,font:this.font,align:"center",width:this.width}),i=new er({side:_r,transparent:!0,defines:{IS_SMALL:!1},extensions:{derivatives:!0},uniforms:{...Hy.uniforms.common,...Hy.uniforms.rendering,...Hy.uniforms.strokes,time:{value:performance.now()*.001}},vertexShader:`
                attribute vec2 layoutUv;
                attribute float lineIndex;
                attribute float lineLettersTotal;
                attribute float lineLetterIndex;
                attribute float lineWordsTotal;
                attribute float lineWordIndex;
                attribute float wordIndex;
                attribute float letterIndex;

                uniform float time;

                varying vec2 vUv;
                varying vec2 vLayoutUv;
                varying vec3 vViewPosition;
                varying vec3 vNormal;
                varying float vLineIndex;
                varying float vLineLettersTotal;
                varying float vLineLetterIndex;
                varying float vLineWordsTotal;
                varying float vLineWordIndex;
                varying float vWordIndex;
                varying float vLetterIndex;

                void main() {
                    vec4 mvPosition = vec4(position, 1.0);

                    float frequency1 = 0.035;
                    float amplitude1 = 20.0;
                    float frequency2 = 0.025;
                    float amplitude2 = 20.0;
       
                    float offset = sin(letterIndex * 0.3 + time * 1.5) * amplitude2;
                    mvPosition.x += offset;

                    mvPosition = modelViewMatrix * mvPosition;
                    gl_Position = projectionMatrix * mvPosition;

                    vUv = uv; //this uv mapping is not from 0 to 1, it is whatever it got from the atlas position. https://github.com/leochocolat/three-msdf-text-utils/blob/fc4ddac6be415f14e71861ce310bbae4fff33896/src/MSDFTextGeometry/vertices.js#L32
                    vLayoutUv = layoutUv;
                    vViewPosition = -mvPosition.xyz;
                    vNormal = normal;
                    vLineIndex = lineIndex;
                    vLineLettersTotal = lineLettersTotal;
                    vLineLetterIndex = lineLetterIndex;
                    vLineWordsTotal = lineWordsTotal;
                    vLineWordIndex = lineWordIndex;
                    vWordIndex = wordIndex;
                    vLetterIndex = letterIndex;
                }
            `,fragmentShader:`
                #ifdef GL_OES_standard_derivatives
                #extension GL_OES_standard_derivatives : enable
                #endif

                precision highp float;
                
                varying vec2 vUv;
                varying float vLetterIndex;
                
                uniform float uOpacity;
                uniform vec3 uColor;
                uniform sampler2D uMap;
                uniform float time;

                vec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {
                    return a + b*cos(6.28318*(c*t+d));
                }

                float median(float r, float g, float b) {
                    return max(min(r, g), min(max(r, g), b));
                }

                void main() { // https://tympanus.net/codrops/2020/06/02/kinetic-typography-with-three-js/
                    vec3 sample1 = texture2D(uMap, vUv).rgb;
                    float sigDist = median(sample1.r, sample1.g, sample1.b) - 0.5;
                    float alpha = clamp(sigDist/fwidth(sigDist) + 0.5, 0.0, 1.0);

                    float speed = 1.35;
                    float scale = 10.0;

                    //if(true) { gl_FragColor = vec4(vUv.y, 0.0, 0.0, 1.0); return; }

                    vec2 p = vUv * scale;

                    for(int i = 1; i < 10; i++) {
                        p.x += 0.45 / float(i) * sin(float(i) * 3.0 * p.y +  vLetterIndex + time * speed );
                        p.y += 0.45 / float(i) * cos(float(i) * 3.0 * p.x + vLetterIndex + time * speed );
                    }

                    float r = cos(p.x + p.y + 1.0) * 0.5 + 0.5;
                    float g = sin(p.x + p.y + 1.0) * 0.5 + 0.5;
                    float b = (sin(p.x + p.y) + cos(p.x + p.y)) * 0.5 + 0.5;

                    //0.8, 0.5, 0.4		0.2, 0.4, 0.2	2.0, 1.0, 1.0	0.00, 0.25, 0.25

                    vec3 c1 = vec3(0.8, 0.5, 0.4);
                    vec3 c2 = vec3(0.2, 0.4, 0.2);
                    vec3 c3 = vec3(2.0, 1.0, 1.0);
                    vec3 c4 = vec3(0.00, 0.25, 0.25);

                    vec3 paletteColor = palette(r, c1, c2, c3, c4);
                    
                    
                    gl_FragColor = vec4(paletteColor, alpha * uOpacity);
                    if (gl_FragColor.a < 0.0001) discard;
                }
            `});i.uniforms.uMap.value=this.atlas,i.blending=kr,this.mesh=new ts(t,i),t.computeBoundingBox();const s=t.boundingBox,r=(s.min.x+s.max.x)/2,l=(s.min.y+s.max.y)/2;this.mesh.position.set(-r,l,0),this.mesh.scale.set(1,-1,1),this.scene.clear(),this.scene.add(this.mesh)}render(e){if(this.isReady)return this.mesh.material.uniforms.time.value=performance.now()*.001,e.setRenderTarget(this.renderTarget),e.setClearColor(0,0),e.clear(),e.render(this.scene,this.camera),this.renderTarget.texture}}class tpe{constructor(){this.events={}}on(e,t){this.events[e]||(this.events[e]=[]),this.events[e].push(t)}off(e,t){this.events[e]&&(this.events[e]=this.events[e].filter(i=>i!==t))}emit(e,...t){this.events[e]&&this.events[e].forEach(i=>i(...t))}}class npe{constructor(){this.scene=new rd,this.camera=new ru(-1,1,1,-1,0,1),this.renderer=new qY,document.body.appendChild(this.renderer.domElement),this.stats=new ZY({trackGPU:!0,trackHz:!1,trackCPT:!1,logsPerSecond:4,graphsPerSecond:30,samplesLog:40,samplesGraph:10,precision:2,horizontal:!0,minimal:!1,mode:0}),document.body.appendChild(this.stats.dom),this.JFAscale=2,this.jfaWidth=Math.floor(window.innerWidth/this.JFAscale),this.jfaHeight=Math.floor(window.innerHeight/this.JFAscale),this.raymarchScale=2,this.raymarchWidth=Math.floor(window.innerWidth/this.raymarchScale),this.raymarchHeight=Math.floor(window.innerHeight/this.raymarchScale),this.mouse={x:null,y:null},this.canvas=this.renderer.domElement,this.bus=new tpe,this.ui=new s7(this.bus),this.text=new epe(this.jfaWidth,this.jfaHeight),this.lrcPlayer=new r7,this.state={modeIsVideo:!1,video:{element:null,texture:null,aspect:null,scale:null,volume:null},audio:{element:null,volume:null},settings:{showProgram:!1,showJFA:!1,radiance:1}},this.bus.on("mode:changed",e=>{this.state.modeIsVideo=e}),this.bus.on("settings:showProgram",e=>{this.state.settings.showProgram=e}),this.bus.on("settings:showJFA",e=>{this.state.settings.showJFA=e}),this.bus.on("settings:radiance",e=>{this.state.settings.radiance=e}),this.bus.on("video:loaded",e=>{this.state.video.element&&this.state.video.element.pause(),this.state.video.element=e,this.state.video.element.volume=this.state.video.volume,this.state.video.texture=new ow(e),this.state.video.texture.minFilter=Ni,this.state.video.texture.magFilter=Ni,this.state.video.texture.format=es,this.state.video.aspect=e.videoWidth/e.videoHeight}),this.bus.on("video:toggle",()=>{const e=this.state.video.element;e&&(e.paused?e.play():e.pause())}),this.bus.on("media:volume",e=>{this.state.video.element&&(this.state.video.element.volume=e),this.state.audio.element&&(this.state.audio.element.volume=e)}),this.bus.on("video:scale",e=>{this.state.video.scale=e}),this.bus.on("audio:loaded",(e,t,i)=>{this.state.audio.element&&this.state.audio.element.pause(),this.state.audio.element=e,console.log(t,i),this.lrcPlayer.getLRCLIB(t,i),this.state.audio.element.addEventListener("timeupdate",()=>{const s=this.lrcPlayer.update(this.state.audio.element.currentTime*1e3);this.text.createText(s)})}),this.bus.on("audio:toggle",()=>{const e=this.state.audio.element;!e||!this.lrcPlayer.isReady||(e.paused?e.play():e.pause())}),this.initialize(),this.shaders(),this.canvas.addEventListener("mousemove",e=>{const t=this.canvas.getBoundingClientRect();this.mouse.x=(e.clientX-t.left)/this.JFAscale,this.mouse.y=(t.height-(e.clientY-t.top))/this.JFAscale}),window.addEventListener("resize",()=>{}),this.renderer.setAnimationLoop(this.animate.bind(this)),this.renderer.setSize(window.innerWidth,window.innerHeight)}initialize(){this.blueNoiseTexture=new Ew().load("LDR_LLL1_0.png"),this.blueNoiseTexture.wrapS=za,this.blueNoiseTexture.wrapT=za,this.blueNoiseTexture.minFilter=Ci,this.blueNoiseTexture.magFilter=Ci,this.rtA=new Yo(this.jfaWidth,this.jfaHeight,{minFilter:Ci,magFilter:Ci,format:es,type:os,wrapS:js,wrapT:js}),this.rtB=this.rtA.clone(),this.seedRT=this.rtA.clone(),this.jfaA=this.rtA.clone(),this.jfaB=this.rtB.clone(),this.currentRT=this.rtA,this.previousRT=this.rtB,this.rayColorRT=new Yo(this.raymarchWidth,this.raymarchHeight,{minFilter:Ci,magFilter:Ci,format:es,type:os,wrapS:js,wrapT:js}),this.bilateralRT=this.rayColorRT.clone()}shaders(){this.paintMaterial=KY(),this.paintMaterial.uniforms.prevTexture.value=null,this.paintMaterial.uniforms.mouse.value=this.mouse,this.paintMaterial.uniforms.resolution.value=new it(this.jfaWidth,this.jfaHeight),this.seedMaterial=JY(),this.seedMaterial.uniforms.inputTexture.value=null,this.seedMaterial.uniforms.resolution.value=new it(this.jfaWidth,this.jfaHeight),this.jfaMaterial=jY(),this.jfaMaterial.uniforms.inputTexture.value=null,this.jfaMaterial.uniforms.offset.value=null,this.jfaMaterial.uniforms.resolution.value=new it(this.jfaWidth,this.jfaHeight),this.distanceMaterial=QY(),this.distanceMaterial.uniforms.inputTexture.value=null,this.distanceMaterial.uniforms.resolution.value=new it(this.jfaWidth,this.jfaHeight),this.rayMaterial=e7(),this.rayMaterial.uniforms.iTexture.value=null,this.rayMaterial.uniforms.distanceTexture.value=null,this.rayMaterial.uniforms.blueNoise.value=this.blueNoiseTexture,this.rayMaterial.uniforms.rayCount.value=32,this.rayMaterial.uniforms.resolution.value=new it(this.jfaWidth,this.jfaHeight),this.rayMaterial.uniforms.frame.value=0,this.upscaleMaterial=t7(),this.upscaleMaterial.uniforms.source.value=null,this.resizerMaterial=n7(),this.resizerMaterial.uniforms.sourceTex.value=null,this.resizerMaterial.uniforms.resolution.value=new it(this.jfaWidth,this.jfaHeight),this.resizerMaterial.uniforms.sourceAspect.value=1,this.resizerMaterial.uniforms.sourceScale.value=1,this.resizerMaterial.uniforms.centerX.value=.5,this.bilateralMaterial=i7(),this.bilateralMaterial.uniforms.inputTexture.value=null,this.bilateralMaterial.uniforms.resolution.value=new it(this.raymarchWidth,this.raymarchHeight),this.bilateralMaterial.uniforms.sigmaSpatial.value=2,this.bilateralMaterial.uniforms.sigmaRange.value=.3,this.bilateralMaterial.uniforms.radius.value=2,this.geometry=new iu(2,2),this.mesh=new ts(this.geometry,this.paintMaterial),this.scene.add(this.mesh)}animate(){this.stats.begin();let e=null;this.state.modeIsVideo?(this.mesh.material=this.resizerMaterial,this.resizerMaterial.uniforms.sourceTex.value=this.state.video.texture,this.resizerMaterial.uniforms.sourceAspect.value=this.state.video.aspect,this.resizerMaterial.uniforms.sourceScale.value=this.state.video.scale,this.renderer.setRenderTarget(this.previousRT),this.renderer.clear(),this.renderer.render(this.scene,this.camera),e=this.previousRT.texture):e=this.text.render(this.renderer),this.mesh.material=this.paintMaterial,this.paintMaterial.uniforms.prevTexture.value=e,this.renderer.setRenderTarget(this.currentRT),this.renderer.clear(),this.renderer.render(this.scene,this.camera),this.mesh.material=this.seedMaterial,this.seedMaterial.uniforms.inputTexture.value=this.currentRT.texture,this.renderer.setRenderTarget(this.seedRT),this.renderer.clear(),this.renderer.render(this.scene,this.camera);let t=this.seedRT.texture,i=this.jfaA,s=this.jfaB;const r=Math.ceil(Math.log2(Math.max(this.jfaWidth,this.jfaHeight)));this.mesh.material=this.jfaMaterial;for(let l=0;l<r;l++)this.jfaMaterial.uniforms.inputTexture.value=t,this.jfaMaterial.uniforms.offset.value=Math.pow(2,r-l-1),this.renderer.setRenderTarget(i),this.renderer.render(this.scene,this.camera),t=i.texture,[i,s]=[s,i];if(this.state.settings.showJFA){this.mesh.material=this.upscaleMaterial,this.upscaleMaterial.uniforms.source.value=i.texture,this.renderer.setRenderTarget(null),this.renderer.render(this.scene,this.camera);return}this.mesh.material=this.distanceMaterial,this.distanceMaterial.uniforms.inputTexture.value=t,this.renderer.setRenderTarget(i),this.renderer.render(this.scene,this.camera),this.mesh.material=this.rayMaterial,this.rayMaterial.uniforms.iTexture.value=this.currentRT.texture,this.rayMaterial.uniforms.distanceTexture.value=i.texture,this.rayMaterial.uniforms.frame.value+=1,this.rayMaterial.uniforms.radianceModifier.value=this.state.settings.radiance,this.rayMaterial.uniforms.showProgram.value=this.state.settings.showProgram,this.renderer.setRenderTarget(this.rayColorRT),this.renderer.render(this.scene,this.camera),this.mesh.material=this.bilateralMaterial,this.bilateralMaterial.uniforms.resolution.value.set(this.raymarchWidth,this.raymarchHeight),this.bilateralMaterial.uniforms.inputTexture.value=this.rayColorRT.texture,this.renderer.setRenderTarget(this.bilateralRT),this.renderer.render(this.scene,this.camera),this.mesh.material=this.upscaleMaterial,this.upscaleMaterial.uniforms.source.value=this.bilateralRT.texture,this.renderer.setRenderTarget(null),this.renderer.render(this.scene,this.camera),[this.currentRT,this.previousRT]=[this.previousRT,this.currentRT],this.stats.end(),this.stats.update()}}new npe;
